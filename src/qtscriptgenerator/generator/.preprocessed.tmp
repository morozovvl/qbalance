# 1 "builtins"
# 1 ":/trolltech/generator/qtscript_masterinclude.h"
# 1 "qtscript_masterinclude.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCoreDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
















































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"






# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qconfig.h"






# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qconfig.h"





# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qconfig.h"

















































































# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"
























































































































































































































































# 249 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 259 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 264 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 269 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 279 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 284 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 289 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 294 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 299 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 304 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 309 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 314 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 324 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 329 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 334 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 339 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 344 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 354 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 359 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 364 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 369 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 374 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 379 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 384 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 389 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 394 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 399 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 404 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 409 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 414 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 419 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 424 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 429 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 434 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 439 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 444 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 449 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 454 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 459 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 464 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 469 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 474 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 479 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 484 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 489 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 494 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 499 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 504 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 509 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 514 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 519 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 524 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 529 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 534 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 539 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 544 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 549 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 554 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 559 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 564 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 569 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 574 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 579 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 584 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 589 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 594 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 599 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 604 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 609 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 614 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 619 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 624 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 629 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 634 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 639 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 644 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 649 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 654 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 659 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 664 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 669 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 674 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 679 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"



# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemdetection.h"
















































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemdetection.h"
















































































































































































































# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"

















































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"








































































































































































































































































































































# 428 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"
































































































































































































































































































# 726 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"





















# 747 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"









































# 788 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"























































# 843 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"












# 855 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"




















# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocessordetection.h"
















































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocessordetection.h"


































# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocessordetection.h"
































































































































# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocessordetection.h"























# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"








































































# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"








# 162 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"








typedef signed char qint8; 
typedef unsigned char quint8; 
typedef short qint16; 
typedef unsigned short quint16; 
typedef int qint32; 
typedef unsigned int quint32; 








# 184 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
typedef long long qint64; 
typedef unsigned long long quint64; 


# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
typedef qint64 qlonglong;
typedef quint64 qulonglong;









# 199 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"





typedef unsigned char uchar;
typedef unsigned short ushort;

# 207 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
typedef unsigned int uint;



# 211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
typedef unsigned long ulong;








# 220 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
typedef double qreal;


























# 247 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"


















# 265 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




















































# 317 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"


















# 340 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"









# 349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
extern "C"

# 351 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 const char *qVersion() ;














# 377 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
namespace QtPrivate {
template <class T>
struct AlignOfHelper
{
char c;
T type;

AlignOfHelper();
~AlignOfHelper();
};

template <class T>
struct AlignOf_Default
{
enum { Value = sizeof(AlignOfHelper<T>) - sizeof(T) };
};

template <class T> struct AlignOf : AlignOf_Default<T> { };
template <class T> struct AlignOf<T &> : AlignOf<T> {};
template <size_t N, class T> struct AlignOf<T[N]> : AlignOf<T> {};




















# 417 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
} 








# 427 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"






template <int> struct QIntegerForSize;
template <> struct QIntegerForSize<1> { typedef quint8 Unsigned; typedef qint8 Signed; };
template <> struct QIntegerForSize<2> { typedef quint16 Unsigned; typedef qint16 Signed; };
template <> struct QIntegerForSize<4> { typedef quint32 Unsigned; typedef qint32 Signed; };
template <> struct QIntegerForSize<8> { typedef quint64 Unsigned; typedef qint64 Signed; };
template <class T> struct QIntegerForSizeof: QIntegerForSize<sizeof(T)> { };
typedef QIntegerForSizeof<void*>::Unsigned quintptr;
typedef QIntegerForSizeof<void*>::Signed qptrdiff;
typedef qptrdiff qintptr;



























# 469 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"











# 480 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
typedef int QNoImplicitBoolCast;





template <typename T>
 inline T qAbs(const T &t) { return t >= 0 ? t : -t; }

 inline int qRound(double d)
{ return d >= 0.0 ? int(d + 0.5) : int(d - double(int(d-1)) + 0.5) + int(d-1); }
 inline int qRound(float d)
{ return d >= 0.0f ? int(d + 0.5f) : int(d - float(int(d-1)) + 0.5f) + int(d-1); }





# 500 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 inline qint64 qRound64(double d)
{ return d >= 0.0 ? qint64(d + 0.5) : qint64(d - double(qint64(d-1)) + 0.5) + qint64(d-1); }
 inline qint64 qRound64(float d)
{ return d >= 0.0f ? qint64(d + 0.5f) : qint64(d - float(qint64(d-1)) + 0.5f) + qint64(d-1); }





# 511 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
template <typename T>
 inline const T &qMin(const T &a, const T &b) { return (a < b) ? a : b; }
template <typename T>
 inline const T &qMax(const T &a, const T &b) { return (a < b) ? b : a; }
template <typename T>
 inline const T &qBound(const T &min, const T &val, const T &max)
{ return qMax(min, qMin(max, val)); }







# 529 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




class QDataStream;








# 542 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
inline void qt_noop(void) {}


























# 569 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
  void qTerminate() ;







# 577 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 bool qSharedBuild() ;








# 586 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"












# 598 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"












# 610 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
class QString;
 QString qt_error_string(int errorCode = -1);


# 614 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"


# 616 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 void qt_assert(const char *assertion, const char *file, int line) ;














# 631 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"


# 633 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 void qt_assert_x(const char *where, const char *what, const char *file, int line) ;














# 648 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

template <bool Test> class QStaticAssertFailure;
template <> class QStaticAssertFailure<true> {};







# 659 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 void qt_check_pointer(const char *, int);
 void qBadAlloc();











# 672 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
template <typename T>
inline T *q_check_ptr(T *p) { do { if (!(p)) qBadAlloc(); } while (0); return p; }

typedef void (*QFunctionPointer)();





# 681 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 static inline bool qFuzzyCompare(double p1, double p2)
{
return (qAbs(p1 - p2) * 1000000000000. <= qMin(qAbs(p1), qAbs(p2)));
}

 static inline bool qFuzzyCompare(float p1, float p2)
{
return (qAbs(p1 - p2) * 100000.f <= qMin(qAbs(p1), qAbs(p2)));
}




 static inline bool qFuzzyIsNull(double d)
{
return qAbs(d) <= 0.000000000001;
}




 static inline bool qFuzzyIsNull(float f)
{
return qAbs(f) <= 0.00001f;
}






static inline bool qIsNull(double d)
{
union U {
double d;
quint64 u;
};
U val;
val.d = d;
return (val.u & static_cast<unsigned long long>(0x7fffffffffffffffULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) == 0;
}






static inline bool qIsNull(float f)
{
union U {
float f;
quint32 u;
};
U val;
val.f = f;
return (val.u & 0x7fffffff) == 0;
}










# 748 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"







# 759 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
template <typename T>
inline void qSwap(T &value1, T &value2)
{
using std::swap;
swap(value1, value2);
}








# 773 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
 void *qMallocAligned(size_t size, size_t alignment) ;
 void *qReallocAligned(void *ptr, size_t size, size_t oldsize, size_t alignment) ;
 void qFreeAligned(void *ptr);



















































# 831 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
struct QForeachContainerBase {};

template <typename T>
class QForeachContainer : public QForeachContainerBase {
public:
inline QForeachContainer(const T& t): c(t), brk(0), i(c.begin()), e(c.end()){}
const T c;
mutable int brk;
mutable typename T::const_iterator i, e;
inline bool condition() const { return (!brk++ && i != e); }
};

template <typename T> inline T *qForeachPointer(const T &) { return 0; }

template <typename T> inline QForeachContainer<T> qForeachContainerNew(const T& t)
{ return QForeachContainer<T>(t); }

template <typename T>
inline const QForeachContainer<T> *qForeachContainer(const QForeachContainerBase *base, const T *)
{ return static_cast<const QForeachContainer<T> *>(base); }





















# 885 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
template <typename T> static inline T *qGetPtrHelper(T *ptr) { return ptr; }
template <typename Wrapper> static inline typename Wrapper::pointer qGetPtrHelper(const Wrapper &p) { return p.data(); }



















# 915 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"



 QString qtTrId(const char *id, int n = -1);







# 926 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"













# 939 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"







# 948 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
class QByteArray;
 QByteArray qgetenv(const char *varName);
 bool qputenv(const char *varName, const QByteArray& value);
 bool qunsetenv(const char *varName);

 bool qEnvironmentVariableIsEmpty(const char *varName) ;
 bool qEnvironmentVariableIsSet(const char *varName) ;

inline int qIntCast(double f) { return int(f); }
inline int qIntCast(float f) { return int(f); }




 void qsrand(uint seed);
 int qrand();














# 979 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"
namespace QtPrivate {

template <bool B, typename T = void> struct QEnableIf;
template <typename T> struct QEnableIf<true, T> { typedef T Type; };
}



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"




















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic_unix.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"
















# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"
template<typename T> struct QAtomicIntegerTraits { enum { IsInteger = 0 }; };

template <typename T> struct QAtomicAdditiveType
{
typedef T AdditiveT;
static const int AddScale = 1;
};
template <typename T> struct QAtomicAdditiveType<T *>
{
typedef qptrdiff AdditiveT;
static const int AddScale = sizeof(T);
};


template <typename BaseClass> struct QGenericAtomicOps
{
template <typename T> struct AtomicType { typedef T Type; typedef T *PointerType; };

template <typename T> static void acquireMemoryFence(const T &_q_value) 
{
BaseClass::orderedMemoryFence(_q_value);
}
template <typename T> static void releaseMemoryFence(const T &_q_value) 
{
BaseClass::orderedMemoryFence(_q_value);
}
template <typename T> static void orderedMemoryFence(const T &) 
{
}

template <typename T> static inline 
T load(const T &_q_value) 
{
return _q_value;
}

template <typename T, typename X> static inline 
void store(T &_q_value, X newValue) 
{
_q_value = newValue;
}

template <typename T> static inline 
T loadAcquire(const T &_q_value) 
{
T tmp = *static_cast<const volatile T *>(&_q_value);
BaseClass::acquireMemoryFence(_q_value);
return tmp;
}

template <typename T, typename X> static inline 
void storeRelease(T &_q_value, X newValue) 
{
BaseClass::releaseMemoryFence(_q_value);
*static_cast<volatile T *>(&_q_value) = newValue;
}

static inline  bool isReferenceCountingNative() 
{ return BaseClass::isFetchAndAddNative(); }
static inline  bool isReferenceCountingWaitFree() 
{ return BaseClass::isFetchAndAddWaitFree(); }
template <typename T> static inline 
bool ref(T &_q_value) 
{
return BaseClass::fetchAndAddRelaxed(_q_value, 1) != T(-1);
}

template <typename T> static inline 
bool deref(T &_q_value) 
{
return BaseClass::fetchAndAddRelaxed(_q_value, -1) != 1;
}










# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"
template <typename T, typename X> static inline 
bool testAndSetAcquire(T &_q_value, X expectedValue, X newValue) 
{
bool tmp = BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue);
BaseClass::acquireMemoryFence(_q_value);
return tmp;
}

template <typename T, typename X> static inline 
bool testAndSetRelease(T &_q_value, X expectedValue, X newValue) 
{
BaseClass::releaseMemoryFence(_q_value);
return BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue);
}

template <typename T, typename X> static inline 
bool testAndSetOrdered(T &_q_value, X expectedValue, X newValue) 
{
BaseClass::orderedMemoryFence(_q_value);
return BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue);
}

static inline  bool isFetchAndStoreNative()  { return false; }
static inline  bool isFetchAndStoreWaitFree()  { return false; }

template <typename T, typename X> static inline 
T fetchAndStoreRelaxed(T &_q_value, X newValue) 
{

for(;;) {
T tmp = load(_q_value);
if (BaseClass::testAndSetRelaxed(_q_value, tmp, newValue))
return tmp;
}
}

template <typename T, typename X> static inline 
T fetchAndStoreAcquire(T &_q_value, X newValue) 
{
T tmp = BaseClass::fetchAndStoreRelaxed(_q_value, newValue);
BaseClass::acquireMemoryFence(_q_value);
return tmp;
}

template <typename T, typename X> static inline 
T fetchAndStoreRelease(T &_q_value, X newValue) 
{
BaseClass::releaseMemoryFence(_q_value);
return BaseClass::fetchAndStoreRelaxed(_q_value, newValue);
}

template <typename T, typename X> static inline 
T fetchAndStoreOrdered(T &_q_value, X newValue) 
{
BaseClass::orderedMemoryFence(_q_value);
return BaseClass::fetchAndStoreRelaxed(_q_value, newValue);
}

static inline  bool isFetchAndAddNative()  { return false; }
static inline  bool isFetchAndAddWaitFree()  { return false; }
template <typename T> static inline 
T fetchAndAddRelaxed(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) 
{

for(;;) {
T tmp = BaseClass::load(_q_value);
if (BaseClass::testAndSetRelaxed(_q_value, tmp, T(tmp + valueToAdd)))
return tmp;
}
}

template <typename T> static inline 
T fetchAndAddAcquire(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) 
{
T tmp = BaseClass::fetchAndAddRelaxed(_q_value, valueToAdd);
BaseClass::acquireMemoryFence(_q_value);
return tmp;
}

template <typename T> static inline 
T fetchAndAddRelease(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) 
{
BaseClass::releaseMemoryFence(_q_value);
return BaseClass::fetchAndAddRelaxed(_q_value, valueToAdd);
}

template <typename T> static inline 
T fetchAndAddOrdered(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) 
{
BaseClass::orderedMemoryFence(_q_value);
return BaseClass::fetchAndAddRelaxed(_q_value, valueToAdd);
}
};



# 241 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"


# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic_unix.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic_unix.h"




















# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic_unix.h"
template<> struct QAtomicIntegerTraits<int> { enum { IsInteger = 1 }; };


template <typename T> struct QAtomicOps;

template <>
struct QAtomicOps<int> : QGenericAtomicOps<QAtomicOps<int> >
{
typedef int Type;

static inline  bool isTestAndSetNative()  { return false; }
static inline  bool isTestAndSetWaitFree()  { return false; }
 static bool testAndSetRelaxed(int &_q_value, int expectedValue, int newValue) ;
};

template <>
struct QAtomicOps<void *> : QGenericAtomicOps<QAtomicOps<void *> >
{
typedef void *Type;

static inline  bool isTestAndSetNative()  { return false; }
static inline  bool isTestAndSetWaitFree()  { return false; }
 static bool testAndSetRelaxed(void *&_q_value, void *expectedValue, void *newValue) ;
};

template <typename T>
struct QAtomicOps<T *> : QGenericAtomicOps<QAtomicOps<T *> >
{
typedef T *Type;


static inline void *nocv(const T *p) { return const_cast<void *>(static_cast<const volatile void *>(p)); }

static inline  bool isTestAndSetNative()  { return false; }
static inline  bool isTestAndSetWaitFree()  { return false; }
static inline bool testAndSetRelaxed(T *&_q_value, T *expectedValue, T *newValue) 
{

void *voidp = nocv(_q_value);
bool returnValue = QAtomicOps<void *>::testAndSetRelaxed(voidp, nocv(expectedValue), nocv(newValue));
_q_value = reinterpret_cast<T *>(voidp);
return returnValue;
}
};



# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"


# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"





# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"



# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"









# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"










# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"
template <typename T>
class QBasicAtomicInteger
{
public:
typedef QAtomicOps<T> Ops;

typedef char PermittedIntegerType[QAtomicIntegerTraits<T>::IsInteger ? 1 : -1];

typename Ops::Type _q_value;


T load() const  { return Ops::load(_q_value); }
void store(T newValue)  { Ops::store(_q_value, newValue); }



T loadAcquire() const  { return Ops::loadAcquire(_q_value); }
void storeRelease(T newValue)  { Ops::storeRelease(_q_value, newValue); }

static  bool isReferenceCountingNative()  { return Ops::isReferenceCountingNative(); }
static  bool isReferenceCountingWaitFree()  { return Ops::isReferenceCountingWaitFree(); }

bool ref()  { return Ops::ref(_q_value); }
bool deref()  { return Ops::deref(_q_value); }

static  bool isTestAndSetNative()  { return Ops::isTestAndSetNative(); }
static  bool isTestAndSetWaitFree()  { return Ops::isTestAndSetWaitFree(); }

bool testAndSetRelaxed(T expectedValue, T newValue) 
{ return Ops::testAndSetRelaxed(_q_value, expectedValue, newValue); }
bool testAndSetAcquire(T expectedValue, T newValue) 
{ return Ops::testAndSetAcquire(_q_value, expectedValue, newValue); }
bool testAndSetRelease(T expectedValue, T newValue) 
{ return Ops::testAndSetRelease(_q_value, expectedValue, newValue); }
bool testAndSetOrdered(T expectedValue, T newValue) 
{ return Ops::testAndSetOrdered(_q_value, expectedValue, newValue); }

static  bool isFetchAndStoreNative()  { return Ops::isFetchAndStoreNative(); }
static  bool isFetchAndStoreWaitFree()  { return Ops::isFetchAndStoreWaitFree(); }

T fetchAndStoreRelaxed(T newValue) 
{ return Ops::fetchAndStoreRelaxed(_q_value, newValue); }
T fetchAndStoreAcquire(T newValue) 
{ return Ops::fetchAndStoreAcquire(_q_value, newValue); }
T fetchAndStoreRelease(T newValue) 
{ return Ops::fetchAndStoreRelease(_q_value, newValue); }
T fetchAndStoreOrdered(T newValue) 
{ return Ops::fetchAndStoreOrdered(_q_value, newValue); }

static  bool isFetchAndAddNative()  { return Ops::isFetchAndAddNative(); }
static  bool isFetchAndAddWaitFree()  { return Ops::isFetchAndAddWaitFree(); }

T fetchAndAddRelaxed(T valueToAdd) 
{ return Ops::fetchAndAddRelaxed(_q_value, valueToAdd); }
T fetchAndAddAcquire(T valueToAdd) 
{ return Ops::fetchAndAddAcquire(_q_value, valueToAdd); }
T fetchAndAddRelease(T valueToAdd) 
{ return Ops::fetchAndAddRelease(_q_value, valueToAdd); }
T fetchAndAddOrdered(T valueToAdd) 
{ return Ops::fetchAndAddOrdered(_q_value, valueToAdd); }








# 198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"
};
typedef QBasicAtomicInteger<int> QBasicAtomicInt;

template <typename X>
class QBasicAtomicPointer
{
public:
typedef X *Type;
typedef QAtomicOps<Type> Ops;
typedef typename Ops::Type AtomicType;

AtomicType _q_value;


Type load() const  { return _q_value; }
void store(Type newValue)  { _q_value = newValue; }


Type loadAcquire() const  { return Ops::loadAcquire(_q_value); }
void storeRelease(Type newValue)  { Ops::storeRelease(_q_value, newValue); }

static  bool isTestAndSetNative()  { return Ops::isTestAndSetNative(); }
static  bool isTestAndSetWaitFree()  { return Ops::isTestAndSetWaitFree(); }

bool testAndSetRelaxed(Type expectedValue, Type newValue) 
{ return Ops::testAndSetRelaxed(_q_value, expectedValue, newValue); }
bool testAndSetAcquire(Type expectedValue, Type newValue) 
{ return Ops::testAndSetAcquire(_q_value, expectedValue, newValue); }
bool testAndSetRelease(Type expectedValue, Type newValue) 
{ return Ops::testAndSetRelease(_q_value, expectedValue, newValue); }
bool testAndSetOrdered(Type expectedValue, Type newValue) 
{ return Ops::testAndSetOrdered(_q_value, expectedValue, newValue); }

static  bool isFetchAndStoreNative()  { return Ops::isFetchAndStoreNative(); }
static  bool isFetchAndStoreWaitFree()  { return Ops::isFetchAndStoreWaitFree(); }

Type fetchAndStoreRelaxed(Type newValue) 
{ return Ops::fetchAndStoreRelaxed(_q_value, newValue); }
Type fetchAndStoreAcquire(Type newValue) 
{ return Ops::fetchAndStoreAcquire(_q_value, newValue); }
Type fetchAndStoreRelease(Type newValue) 
{ return Ops::fetchAndStoreRelease(_q_value, newValue); }
Type fetchAndStoreOrdered(Type newValue) 
{ return Ops::fetchAndStoreOrdered(_q_value, newValue); }

static  bool isFetchAndAddNative()  { return Ops::isFetchAndAddNative(); }
static  bool isFetchAndAddWaitFree()  { return Ops::isFetchAndAddWaitFree(); }

Type fetchAndAddRelaxed(qptrdiff valueToAdd) 
{ return Ops::fetchAndAddRelaxed(_q_value, valueToAdd); }
Type fetchAndAddAcquire(qptrdiff valueToAdd) 
{ return Ops::fetchAndAddAcquire(_q_value, valueToAdd); }
Type fetchAndAddRelease(qptrdiff valueToAdd) 
{ return Ops::fetchAndAddRelease(_q_value, valueToAdd); }
Type fetchAndAddOrdered(qptrdiff valueToAdd) 
{ return Ops::fetchAndAddOrdered(_q_value, valueToAdd); }








# 262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"
};





# 268 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasicatomic.h"





# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"

class QAtomicInt : public QBasicAtomicInt
{
public:




# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"
inline QAtomicInt(int value = 0) 
{
_q_value = value;
}


# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"
inline QAtomicInt(const QAtomicInt &other) 
{
store(other.load());
}

inline QAtomicInt &operator=(const QAtomicInt &other) 
{
this->store(other.load());
return *this;
}





































# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"
};


template <typename T>
class QAtomicPointer : public QBasicAtomicPointer<T>
{
public:



# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"
inline QAtomicPointer(T *value = 0) 
{
this->store(value);
}

# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"
inline QAtomicPointer(const QAtomicPointer<T> &other) 
{
this->store(other.load());
}

inline QAtomicPointer<T> &operator=(const QAtomicPointer<T> &other) 
{
this->store(other.load());
return *this;
}































# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"
};









# 184 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"






template <typename T>
inline void qAtomicAssign(T *&d, T *x)
{
if (d == x)
return;
x->ref.ref();
if (!d->ref.deref())
delete d;
d = x;
}









template <typename T>
inline void qAtomicDetach(T *&d)
{
if (d->ref.load() == 1)
return;
T *x = d;
d = new T(*d);
if (!x->ref.deref())
delete x;
}



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"


namespace QtGlobalStatic {
enum GuardValues {
Destroyed = -2,
Initialized = -1,
Uninitialized = 0,
Initializing = 1
};
}









# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"



# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"











# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"
class QMutexData;

class  QBasicMutex
{
public:
inline void lock()  {
if (!fastTryLock())
lockInternal();
}

inline void unlock()  {
qt_noop(); 
if (!fastTryUnlock())
unlockInternal();
}

bool tryLock()  {
return fastTryLock();
}

bool isRecursive();

private:
inline bool fastTryLock()  {
return d_ptr.testAndSetAcquire(0, dummyLocked());
}
inline bool fastTryUnlock()  {
return d_ptr.testAndSetRelease(dummyLocked(), 0);
}

void lockInternal() ;
bool lockInternal(int timeout) ;
void unlockInternal() ;

QBasicAtomicPointer<QMutexData> d_ptr;
static inline QMutexData *dummyLocked() {
return reinterpret_cast<QMutexData *>(quintptr(1));
}

friend class QMutex;
friend class QMutexData;
};

class  QMutex : public QBasicMutex {
public:
enum RecursionMode { NonRecursive, Recursive };
explicit QMutex(RecursionMode mode = NonRecursive);
~QMutex();

void lock() ;
bool tryLock(int timeout = 0) ;
void unlock() ;

using QBasicMutex::isRecursive;

private:
QMutex(const QMutex &) ; QMutex &operator=(const QMutex &) ;
friend class QMutexLocker;
};

class  QMutexLocker
{
public:
inline explicit QMutexLocker(QBasicMutex *m) 
{
qt_noop();
val = quintptr(m);
if ((m)) {

static_cast<QMutex *>(m)->lock();
val |= 1;
}
}
inline ~QMutexLocker() { unlock(); }

inline void unlock() 
{
if ((val & quintptr(1u)) == quintptr(1u)) {
val &= ~quintptr(1u);
mutex()->unlock();
}
}

inline void relock() 
{
if (val) {
if ((val & quintptr(1u)) == quintptr(0u)) {
mutex()->lock();
val |= quintptr(1u);
}
}
}






# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"
inline QMutex *mutex() const
{
return reinterpret_cast<QMutex *>(val & ~quintptr(1u));
}





# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"
private:
QMutexLocker(const QMutexLocker &) ; QMutexLocker &operator=(const QMutexLocker &) ;

quintptr val;
};





































# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"



# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"

# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"





# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"

template <typename T, T *(&innerFunction)(), QBasicAtomicInt &guard>
struct QGlobalStatic
{
typedef T Type;

bool isDestroyed() const { return guard.load() <= QtGlobalStatic::Destroyed; }
bool exists() const { return guard.load() == QtGlobalStatic::Initialized; }
operator Type *() { if (isDestroyed()) return 0; return innerFunction(); }
Type *operator()() { if (isDestroyed()) return 0; return innerFunction(); }
Type *operator->() { return innerFunction(); }
Type &operator*() { return *innerFunction(); }
};





# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"


# 987 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"


# 989 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"










# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"







class QDebug;
class QNoDebug;

enum QtMsgType { QtDebugMsg, QtWarningMsg, QtCriticalMsg, QtFatalMsg, QtSystemMsg = QtCriticalMsg };

class QMessageLogContext
{
QMessageLogContext(const QMessageLogContext &) ; QMessageLogContext &operator=(const QMessageLogContext &) ;
public:
 QMessageLogContext() : version(1), line(0), file(0), function(0), category(0) {}
 QMessageLogContext(const char *fileName, int lineNumber, const char *functionName, const char *categoryName)
: version(1), line(lineNumber), file(fileName), function(functionName), category(categoryName) {}

void copy(const QMessageLogContext &logContext);

int version;
int line;
const char *file;
const char *function;
const char *category;

private:
friend class QMessageLogger;
friend class QDebug;
};

class  QMessageLogger
{
QMessageLogger(const QMessageLogger &) ; QMessageLogger &operator=(const QMessageLogger &) ;
public:
 QMessageLogger() : context() {}
 QMessageLogger(const char *file, int line, const char *function)
: context(file, line, function, "default") {}
 QMessageLogger(const char *file, int line, const char *function, const char *category)
: context(file, line, function, category) {}

void debug(const char *msg, ...) const







# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
;
void noDebug(const char *, ...) const







# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
{}
void warning(const char *msg, ...) const







# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
;
void critical(const char *msg, ...) const







# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
;


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"


# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
void fatal(const char *msg, ...) const 







# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
;


# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
QDebug debug() const;
QDebug warning() const;
QDebug critical() const;

QNoDebug noDebug() const ;


# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
private:
QMessageLogContext context;
};





















# 177 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
 void qt_message_output(QtMsgType, const QMessageLogContext &context,
const QString &message);

 void qErrnoWarning(int code, const char *msg, ...);
 void qErrnoWarning(const char *msg, ...);






# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlogging.h"
typedef void (*QtMessageHandler)(QtMsgType, const QMessageLogContext &, const QString &);
 QtMessageHandler qInstallMessageHandler(QtMessageHandler);

 void qSetMessagePattern(const QString &messagePattern);



# 990 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"





# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"










template <typename T>
class QTypeInfo
{
public:
enum {
isPointer = false,
isComplex = true,
isStatic = true,
isLarge = (sizeof(T)>sizeof(void*)),
isDummy = false,
sizeOf = sizeof(T)
};
};

template<>
class QTypeInfo<void>
{
public:
enum {
isPointer = false,
isComplex = false,
isStatic = false,
isLarge = false,
isDummy = false,
sizeOf = 0
};
};

template <typename T>
class QTypeInfo<T*>
{
public:
enum {
isPointer = true,
isComplex = false,
isStatic = false,
isLarge = false,
isDummy = false,
sizeOf = sizeof(T*)
};
};





















template <class T, class T1, class T2 = T1, class T3 = T1, class T4 = T1>
class QTypeInfoMerger
{
public:
enum {
isComplex = QTypeInfo<T1>::isComplex || QTypeInfo<T2>::isComplex || QTypeInfo<T3>::isComplex || QTypeInfo<T4>::isComplex,
isStatic = QTypeInfo<T1>::isStatic || QTypeInfo<T2>::isStatic || QTypeInfo<T3>::isStatic || QTypeInfo<T4>::isStatic,
isLarge = sizeof(T) > sizeof(void*),
isPointer = false,
isDummy = false,
sizeOf = sizeof(T)
};
};



# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"
template <typename T> class QList; template <typename T> class QTypeInfo< QList<T> > { public: enum { isPointer = false, isComplex = true, isStatic = false, isLarge = (sizeof(QList<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QList<T>) }; };
template <typename T> class QVector; template <typename T> class QTypeInfo< QVector<T> > { public: enum { isPointer = false, isComplex = true, isStatic = false, isLarge = (sizeof(QVector<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QVector<T>) }; };
template <typename T> class QQueue; template <typename T> class QTypeInfo< QQueue<T> > { public: enum { isPointer = false, isComplex = true, isStatic = false, isLarge = (sizeof(QQueue<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QQueue<T>) }; };
template <typename T> class QStack; template <typename T> class QTypeInfo< QStack<T> > { public: enum { isPointer = false, isComplex = true, isStatic = false, isLarge = (sizeof(QStack<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QStack<T>) }; };
template <typename T> class QLinkedList; template <typename T> class QTypeInfo< QLinkedList<T> > { public: enum { isPointer = false, isComplex = true, isStatic = false, isLarge = (sizeof(QLinkedList<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QLinkedList<T>) }; };
template <typename T> class QSet; template <typename T> class QTypeInfo< QSet<T> > { public: enum { isPointer = false, isComplex = true, isStatic = false, isLarge = (sizeof(QSet<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QSet<T>) }; };



# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"








enum { 
Q_COMPLEX_TYPE = 0,
Q_PRIMITIVE_TYPE = 0x1,
Q_STATIC_TYPE = 0,
Q_MOVABLE_TYPE = 0x2,
Q_DUMMY_TYPE = 0x4
};





# 193 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"

template<typename T> class QFlags;
template<typename T>
class QTypeInfo<QFlags<T> > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFlags<T>)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFlags<T>) }; static inline const char *name() { return "QFlags<T>"; } };














# 221 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"



template<> class QTypeInfo<bool > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(bool)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(bool) }; static inline const char *name() { return "bool"; } };
template<> class QTypeInfo<char > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(char)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(char) }; static inline const char *name() { return "char"; } };
template<> class QTypeInfo<signed char > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(signed char)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(signed char) }; static inline const char *name() { return "signed char"; } };
template<> class QTypeInfo<uchar > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(uchar)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(uchar) }; static inline const char *name() { return "uchar"; } };
template<> class QTypeInfo<short > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(short)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(short) }; static inline const char *name() { return "short"; } };
template<> class QTypeInfo<ushort > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(ushort)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(ushort) }; static inline const char *name() { return "ushort"; } };
template<> class QTypeInfo<int > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(int)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(int) }; static inline const char *name() { return "int"; } };
template<> class QTypeInfo<uint > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(uint)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(uint) }; static inline const char *name() { return "uint"; } };
template<> class QTypeInfo<long > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(long)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(long) }; static inline const char *name() { return "long"; } };
template<> class QTypeInfo<ulong > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(ulong)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(ulong) }; static inline const char *name() { return "ulong"; } };
template<> class QTypeInfo<qint64 > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(qint64)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(qint64) }; static inline const char *name() { return "qint64"; } };
template<> class QTypeInfo<quint64 > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(quint64)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(quint64) }; static inline const char *name() { return "quint64"; } };
template<> class QTypeInfo<float > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(float)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(float) }; static inline const char *name() { return "float"; } };
template<> class QTypeInfo<double > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(double)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(double) }; static inline const char *name() { return "double"; } };

# 239 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"
template<> class QTypeInfo<long double > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(long double)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(long double) }; static inline const char *name() { return "long double"; } };


# 242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"








































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"







# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"


namespace QtPrivate {



typedef char small_;

struct big_ {
char dummy[2];
};


template <class T>
struct identity_ {
typedef T type;
};






template<class T, T v>
struct integral_constant {
static const T value = v;
typedef T value_type;
typedef integral_constant<T, v> type;
};

template <class T, T v> const T integral_constant<T, v>::value;





typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;
typedef true_type true_;
typedef false_type false_;




template<bool cond, typename A, typename B>
struct if_{
typedef A type;
};

template<typename A, typename B>
struct if_<false, A, B> {
typedef B type;
};







template<typename A, typename B>
struct type_equals_ : public false_ {
};

template<typename A>
struct type_equals_<A, A> : public true_ {
};



template<typename A, typename B>
struct and_ : public integral_constant<bool, (A::value && B::value)> {
};



template<typename A, typename B>
struct or_ : public integral_constant<bool, (A::value || B::value)> {
};

template <class T> struct is_integral;
template <class T> struct is_floating_point;
template <class T> struct is_pointer;


# 197 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"

template <class T> struct is_enum;

# 200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
template <class T> struct is_reference;
template <class T> struct is_pod;
template <class T> struct has_trivial_constructor;
template <class T> struct has_trivial_copy;
template <class T> struct has_trivial_assign;
template <class T> struct has_trivial_destructor;
template <class T> struct remove_const;
template <class T> struct remove_volatile;
template <class T> struct remove_cv;
template <class T> struct remove_reference;
template <class T> struct add_reference;
template <class T> struct remove_pointer;
template <class T, class U> struct is_same;

# 214 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
template <class From, class To> struct is_convertible;


# 217 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"


template <class T> struct is_integral : false_type { };
template<> struct is_integral<bool> : true_type { };
template<> struct is_integral<char> : true_type { };
template<> struct is_integral<unsigned char> : true_type { };
template<> struct is_integral<signed char> : true_type { };






# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
template<> struct is_integral<wchar_t> : true_type { };

# 232 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
template<> struct is_integral<short> : true_type { };
template<> struct is_integral<unsigned short> : true_type { };
template<> struct is_integral<int> : true_type { };
template<> struct is_integral<unsigned int> : true_type { };
template<> struct is_integral<long> : true_type { };
template<> struct is_integral<unsigned long> : true_type { };




# 242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
template<> struct is_integral<long long> : true_type { };
template<> struct is_integral<unsigned long long> : true_type { };

# 245 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
template <class T> struct is_integral<const T> : is_integral<T> { };
template <class T> struct is_integral<volatile T> : is_integral<T> { };
template <class T> struct is_integral<const volatile T> : is_integral<T> { };





# 253 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"


template <class T> struct is_floating_point : false_type { };
template<> struct is_floating_point<float> : true_type { };
template<> struct is_floating_point<double> : true_type { };
template<> struct is_floating_point<long double> : true_type { };
template <class T> struct is_floating_point<const T>
: is_floating_point<T> { };
template <class T> struct is_floating_point<volatile T>
: is_floating_point<T> { };
template <class T> struct is_floating_point<const volatile T>
: is_floating_point<T> { };




template <class T> struct is_pointer : false_type { };
template <class T> struct is_pointer<T*> : true_type { };
template <class T> struct is_pointer<const T> : is_pointer<T> { };
template <class T> struct is_pointer<volatile T> : is_pointer<T> { };
template <class T> struct is_pointer<const volatile T> : is_pointer<T> { };



# 277 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
namespace internal {

template <class T> struct is_class_or_union {
template <class U> static small_ tester(void (U::*)());
template <class U> static big_ tester(...);
static const bool value = sizeof(tester<T>(0)) == sizeof(small_);
};



template <bool NotUnum, class T> struct is_enum_impl
: is_convertible<typename add_reference<T>::type, int> { };

template <class T> struct is_enum_impl<true, T> : false_type { };

} 
















template <class T> struct is_enum
: internal::is_enum_impl<
is_same<T, void>::value ||
is_integral<T>::value ||
is_floating_point<T>::value ||
is_reference<T>::value ||
internal::is_class_or_union<T>::value,
T> { };

template <class T> struct is_enum<const T> : is_enum<T> { };
template <class T> struct is_enum<volatile T> : is_enum<T> { };
template <class T> struct is_enum<const volatile T> : is_enum<T> { };



# 324 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"

template<typename T> struct is_reference : false_type {};
template<typename T> struct is_reference<T&> : true_type {};






template <class T> struct is_pod
: integral_constant<bool, (is_integral<T>::value ||
is_floating_point<T>::value ||

# 337 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"

is_enum<T>::value ||

# 340 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
is_pointer<T>::value)> { };
template <class T> struct is_pod<const T> : is_pod<T> { };
template <class T> struct is_pod<volatile T> : is_pod<T> { };
template <class T> struct is_pod<const volatile T> : is_pod<T> { };







template <class T> struct has_trivial_constructor : is_pod<T> { };
template <class T, class U> struct has_trivial_constructor<std::pair<T, U> >
: integral_constant<bool,
(has_trivial_constructor<T>::value &&
has_trivial_constructor<U>::value)> { };
template <class A, int N> struct has_trivial_constructor<A[N]>
: has_trivial_constructor<A> { };
template <class T> struct has_trivial_constructor<const T>
: has_trivial_constructor<T> { };






template <class T> struct has_trivial_copy : is_pod<T> { };
template <class T, class U> struct has_trivial_copy<std::pair<T, U> >
: integral_constant<bool,
(has_trivial_copy<T>::value &&
has_trivial_copy<U>::value)> { };
template <class A, int N> struct has_trivial_copy<A[N]>
: has_trivial_copy<A> { };
template <class T> struct has_trivial_copy<const T> : has_trivial_copy<T> { };





template <class T> struct has_trivial_assign : is_pod<T> { };
template <class T, class U> struct has_trivial_assign<std::pair<T, U> >
: integral_constant<bool,
(has_trivial_assign<T>::value &&
has_trivial_assign<U>::value)> { };
template <class A, int N> struct has_trivial_assign<A[N]>
: has_trivial_assign<A> { };






template <class T> struct has_trivial_destructor : is_pod<T> { };
template <class T, class U> struct has_trivial_destructor<std::pair<T, U> >
: integral_constant<bool,
(has_trivial_destructor<T>::value &&
has_trivial_destructor<U>::value)> { };
template <class A, int N> struct has_trivial_destructor<A[N]>
: has_trivial_destructor<A> { };
template <class T> struct has_trivial_destructor<const T>
: has_trivial_destructor<T> { };


template<typename T> struct remove_const { typedef T type; };
template<typename T> struct remove_const<T const> { typedef T type; };
template<typename T> struct remove_volatile { typedef T type; };
template<typename T> struct remove_volatile<T volatile> { typedef T type; };
template<typename T> struct remove_cv {
typedef typename remove_const<typename remove_volatile<T>::type>::type type;
};



template<typename T> struct remove_reference { typedef T type; };
template<typename T> struct remove_reference<T&> { typedef T type; };

template <typename T> struct add_reference { typedef T& type; };
template <typename T> struct add_reference<T&> { typedef T& type; };


template<typename T> struct remove_pointer { typedef T type; };
template<typename T> struct remove_pointer<T*> { typedef T type; };
template<typename T> struct remove_pointer<T* const> { typedef T type; };
template<typename T> struct remove_pointer<T* volatile> { typedef T type; };
template<typename T> struct remove_pointer<T* const volatile> {
typedef T type; };


template<typename T, typename U> struct is_same : public false_type { };
template<typename T> struct is_same<T, T> : public true_type { };



# 433 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"
namespace internal {










template <typename From, typename To>
struct ConvertHelper {
static small_ Test(To);
static big_ Test(...);
static From Create();
};
} 


template <typename From, typename To>
struct is_convertible
: integral_constant<bool,
sizeof(internal::ConvertHelper<From, To>::Test(
internal::ConvertHelper<From, To>::Create()))
== sizeof(small_)> {
};


# 462 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"



template <typename T>
struct not_
: integral_constant<bool, !T::value> {};


template <bool B>
struct not_c
: integral_constant<bool, !B> {};


template <typename T>
struct is_unsigned
: integral_constant<bool, (T(0) < T(-1))> {};


template <typename T>
struct is_signed
: not_< is_unsigned<T> > {};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_unsigned<quint8>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_unsigned<qint8>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_signed<quint8>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_signed<qint8>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_unsigned<quint16>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_unsigned<qint16>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_signed<quint16>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_signed<qint16>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_unsigned<quint32>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_unsigned<qint32>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_signed<quint32>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_signed<qint32>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_unsigned<quint64>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_unsigned<qint64>::value))>)};

enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!((!is_signed<quint64>::value))>)};
enum {q_static_assert_result462 = sizeof(QStaticAssertFailure<!!(( is_signed<qint64>::value))>)};

} 



# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"


class QFlag
{
int i;
public:
 inline QFlag(int i);
 inline operator int() const { return i; }
};
template<> class QTypeInfo<QFlag > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFlag)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFlag) }; static inline const char *name() { return "QFlag"; } };

 inline QFlag::QFlag(int ai) : i(ai) {}

class QIncompatibleFlag
{
int i;
public:
 inline explicit QIncompatibleFlag(int i);
 inline operator int() const { return i; }
};
template<> class QTypeInfo<QIncompatibleFlag > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QIncompatibleFlag)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QIncompatibleFlag) }; static inline const char *name() { return "QIncompatibleFlag"; } };

 inline QIncompatibleFlag::QIncompatibleFlag(int ai) : i(ai) {}




# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"
template<typename Enum>
class QFlags
{
enum {q_static_assert_result77 = sizeof(QStaticAssertFailure<!!((sizeof(Enum) <= sizeof(int)))>)};
struct Private;
typedef int (Private::*Zero);
public:

# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"
typedef typename QtPrivate::if_<
QtPrivate::is_unsigned<Enum>::value,
unsigned int,
signed int
>::type Int;

# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"
typedef Enum enum_type;






# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"
 inline QFlags(Enum f) : i(Int(f)) {}
 inline QFlags(Zero = 0) : i(0) {}
 inline QFlags(QFlag f) : i(f) {}

inline QFlags &operator&=(int mask) { i &= mask; return *this; }
inline QFlags &operator&=(uint mask) { i &= mask; return *this; }
inline QFlags &operator&=(Enum mask) { i &= Int(mask); return *this; }
inline QFlags &operator|=(QFlags f) { i |= f.i; return *this; }
inline QFlags &operator|=(Enum f) { i |= Int(f); return *this; }
inline QFlags &operator^=(QFlags f) { i ^= f.i; return *this; }
inline QFlags &operator^=(Enum f) { i ^= Int(f); return *this; }

 inline operator Int() const { return i; }

 inline QFlags operator|(QFlags f) const { return QFlags(Enum(i | f.i)); }
 inline QFlags operator|(Enum f) const { return QFlags(Enum(i | Int(f))); }
 inline QFlags operator^(QFlags f) const { return QFlags(Enum(i ^ f.i)); }
 inline QFlags operator^(Enum f) const { return QFlags(Enum(i ^ Int(f))); }
 inline QFlags operator&(int mask) const { return QFlags(Enum(i & mask)); }
 inline QFlags operator&(uint mask) const { return QFlags(Enum(i & mask)); }
 inline QFlags operator&(Enum f) const { return QFlags(Enum(i & Int(f))); }
 inline QFlags operator~() const { return QFlags(Enum(~i)); }

 inline bool operator!() const { return !i; }

 inline bool testFlag(Enum f) const { return (i & Int(f)) == Int(f) && (Int(f) != 0 || i == Int(f) ); }
private:
Int i;
};















# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"



# 991 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsysinfo.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsysinfo.h"





# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsysinfo.h"






class QString;
class  QSysInfo {
public:
enum Sizes {
WordSize = (sizeof(void *)<<3)
};





























































































# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsysinfo.h"
};



# 992 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"



























































































































# 993 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"





# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"



class QString;

struct QLatin1Char
{
public:
 inline explicit QLatin1Char(char c) : ch(c) {}
 inline char toLatin1() const { return ch; }
 inline ushort unicode() const { return ushort(uchar(ch)); }

private:
char ch;
};


class  QChar {
public:
enum SpecialCharacter {
Null = 0x0000,
Tabulation = 0x0009,
LineFeed = 0x000a,
CarriageReturn = 0x000d,
Space = 0x0020,
Nbsp = 0x00a0,
SoftHyphen = 0x00ad,
ReplacementCharacter = 0xfffd,
ObjectReplacementCharacter = 0xfffc,
ByteOrderMark = 0xfeff,
ByteOrderSwapped = 0xfffe,
ParagraphSeparator = 0x2029,
LineSeparator = 0x2028,
LastValidCodePoint = 0x10ffff
};

 QChar() : ucs(0) {}
 QChar(ushort rc) : ucs(rc){} 
 QChar(uchar c, uchar r) : ucs(ushort((r << 8) | c)){}
 QChar(short rc) : ucs(ushort(rc)){} 
 QChar(uint rc) : ucs(ushort(rc & 0xffff)){}
 QChar(int rc) : ucs(ushort(rc & 0xffff)){}
 QChar(SpecialCharacter s) : ucs(ushort(s)) {} 
 QChar(QLatin1Char ch) : ucs(ch.unicode()) {} 


# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"
  explicit QChar(char c) : ucs(uchar(c)) { }
  explicit QChar(uchar c) : ucs(c) { }

# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"


enum Category
{
Mark_NonSpacing, 
Mark_SpacingCombining, 
Mark_Enclosing, 

Number_DecimalDigit, 
Number_Letter, 
Number_Other, 

Separator_Space, 
Separator_Line, 
Separator_Paragraph, 

Other_Control, 
Other_Format, 
Other_Surrogate, 
Other_PrivateUse, 
Other_NotAssigned, 

Letter_Uppercase, 
Letter_Lowercase, 
Letter_Titlecase, 
Letter_Modifier, 
Letter_Other, 

Punctuation_Connector, 
Punctuation_Dash, 
Punctuation_Open, 
Punctuation_Close, 
Punctuation_InitialQuote, 
Punctuation_FinalQuote, 
Punctuation_Other, 

Symbol_Math, 
Symbol_Currency, 
Symbol_Modifier, 
Symbol_Other 
};

enum Script
{
Script_Unknown,
Script_Inherited,
Script_Common,

Script_Latin,
Script_Greek,
Script_Cyrillic,
Script_Armenian,
Script_Hebrew,
Script_Arabic,
Script_Syriac,
Script_Thaana,
Script_Devanagari,
Script_Bengali,
Script_Gurmukhi,
Script_Gujarati,
Script_Oriya,
Script_Tamil,
Script_Telugu,
Script_Kannada,
Script_Malayalam,
Script_Sinhala,
Script_Thai,
Script_Lao,
Script_Tibetan,
Script_Myanmar,
Script_Georgian,
Script_Hangul,
Script_Ethiopic,
Script_Cherokee,
Script_CanadianAboriginal,
Script_Ogham,
Script_Runic,
Script_Khmer,
Script_Mongolian,
Script_Hiragana,
Script_Katakana,
Script_Bopomofo,
Script_Han,
Script_Yi,
Script_OldItalic,
Script_Gothic,
Script_Deseret,
Script_Tagalog,
Script_Hanunoo,
Script_Buhid,
Script_Tagbanwa,
Script_Coptic,


Script_Limbu,
Script_TaiLe,
Script_LinearB,
Script_Ugaritic,
Script_Shavian,
Script_Osmanya,
Script_Cypriot,
Script_Braille,


Script_Buginese,
Script_NewTaiLue,
Script_Glagolitic,
Script_Tifinagh,
Script_SylotiNagri,
Script_OldPersian,
Script_Kharoshthi,


Script_Balinese,
Script_Cuneiform,
Script_Phoenician,
Script_PhagsPa,
Script_Nko,


Script_Sundanese,
Script_Lepcha,
Script_OlChiki,
Script_Vai,
Script_Saurashtra,
Script_KayahLi,
Script_Rejang,
Script_Lycian,
Script_Carian,
Script_Lydian,
Script_Cham,


Script_TaiTham,
Script_TaiViet,
Script_Avestan,
Script_EgyptianHieroglyphs,
Script_Samaritan,
Script_Lisu,
Script_Bamum,
Script_Javanese,
Script_MeeteiMayek,
Script_ImperialAramaic,
Script_OldSouthArabian,
Script_InscriptionalParthian,
Script_InscriptionalPahlavi,
Script_OldTurkic,
Script_Kaithi,


Script_Batak,
Script_Brahmi,
Script_Mandaic,


Script_Chakma,
Script_MeroiticCursive,
Script_MeroiticHieroglyphs,
Script_Miao,
Script_Sharada,
Script_SoraSompeng,
Script_Takri,

ScriptCount
};

enum Direction
{
DirL, DirR, DirEN, DirES, DirET, DirAN, DirCS, DirB, DirS, DirWS, DirON,
DirLRE, DirLRO, DirAL, DirRLE, DirRLO, DirPDF, DirNSM, DirBN
};

enum Decomposition
{
NoDecomposition,
Canonical,
Font,
NoBreak,
Initial,
Medial,
Final,
Isolated,
Circle,
Super,
Sub,
Vertical,
Wide,
Narrow,
Small,
Square,
Compat,
Fraction
};

enum Joining
{
OtherJoining, Dual, Right, Center
};

enum CombiningClass
{
Combining_BelowLeftAttached = 200,
Combining_BelowAttached = 202,
Combining_BelowRightAttached = 204,
Combining_LeftAttached = 208,
Combining_RightAttached = 210,
Combining_AboveLeftAttached = 212,
Combining_AboveAttached = 214,
Combining_AboveRightAttached = 216,

Combining_BelowLeft = 218,
Combining_Below = 220,
Combining_BelowRight = 222,
Combining_Left = 224,
Combining_Right = 226,
Combining_AboveLeft = 228,
Combining_Above = 230,
Combining_AboveRight = 232,

Combining_DoubleBelow = 233,
Combining_DoubleAbove = 234,
Combining_IotaSubscript = 240
};

enum UnicodeVersion {
Unicode_Unassigned,
Unicode_1_1,
Unicode_2_0,
Unicode_2_1_2,
Unicode_3_0,
Unicode_3_1,
Unicode_3_2,
Unicode_4_0,
Unicode_4_1,
Unicode_5_0,
Unicode_5_1,
Unicode_5_2,
Unicode_6_0,
Unicode_6_1,
Unicode_6_2
};


inline Category category() const { return QChar::category(ucs); }
inline Direction direction() const { return QChar::direction(ucs); }
inline Joining joining() const { return QChar::joining(ucs); }
inline unsigned char combiningClass() const { return QChar::combiningClass(ucs); }

inline QChar mirroredChar() const { return QChar::mirroredChar(ucs); }
inline bool hasMirrored() const { return QChar::hasMirrored(ucs); }

QString decomposition() const;
inline Decomposition decompositionTag() const { return QChar::decompositionTag(ucs); }

inline int digitValue() const { return QChar::digitValue(ucs); }
inline QChar toLower() const { return QChar::toLower(ucs); }
inline QChar toUpper() const { return QChar::toUpper(ucs); }
inline QChar toTitleCase() const { return QChar::toTitleCase(ucs); }
inline QChar toCaseFolded() const { return QChar::toCaseFolded(ucs); }

inline Script script() const { return QChar::script(ucs); }

inline UnicodeVersion unicodeVersion() const { return QChar::unicodeVersion(ucs); }




# 363 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"
inline char toLatin1() const;
inline ushort unicode() const { return ucs; }
inline ushort &unicode() { return ucs; }





# 371 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"
static inline QChar fromLatin1(char c);

inline bool isNull() const { return ucs == 0; }

inline bool isPrint() const { return QChar::isPrint(ucs); }
inline bool isSpace() const { return QChar::isSpace(ucs); }
inline bool isMark() const { return QChar::isMark(ucs); }
inline bool isPunct() const { return QChar::isPunct(ucs); }
inline bool isSymbol() const { return QChar::isSymbol(ucs); }
inline bool isLetter() const { return QChar::isLetter(ucs); }
inline bool isNumber() const { return QChar::isNumber(ucs); }
inline bool isLetterOrNumber() const { return QChar::isLetterOrNumber(ucs); }
inline bool isDigit() const { return QChar::isDigit(ucs); }
inline bool isLower() const { return QChar::isLower(ucs); }
inline bool isUpper() const { return QChar::isUpper(ucs); }
inline bool isTitleCase() const { return QChar::isTitleCase(ucs); }

inline bool isNonCharacter() const { return QChar::isNonCharacter(ucs); }
inline bool isHighSurrogate() const { return QChar::isHighSurrogate(ucs); }
inline bool isLowSurrogate() const { return QChar::isLowSurrogate(ucs); }
inline bool isSurrogate() const { return QChar::isSurrogate(ucs); }

inline uchar cell() const { return uchar(ucs & 0xff); }
inline uchar row() const { return uchar((ucs>>8)&0xff); }
inline void setCell(uchar cell);
inline void setRow(uchar row);

static inline bool isNonCharacter(uint ucs4) {
return ucs4 >= 0xfdd0 && (ucs4 <= 0xfdef || (ucs4 & 0xfffe) == 0xfffe);
}
static inline bool isHighSurrogate(uint ucs4) {
return ((ucs4 & 0xfffffc00) == 0xd800);
}
static inline bool isLowSurrogate(uint ucs4) {
return ((ucs4 & 0xfffffc00) == 0xdc00);
}
static inline bool isSurrogate(uint ucs4) {
return (ucs4 - 0xd800u < 2048u);
}
static inline bool requiresSurrogates(uint ucs4) {
return (ucs4 >= 0x10000);
}
static inline uint surrogateToUcs4(ushort high, ushort low) {
return (uint(high)<<10) + low - 0x35fdc00;
}
static inline uint surrogateToUcs4(QChar high, QChar low) {
return surrogateToUcs4(high.unicode(), low.unicode());
}
static inline ushort highSurrogate(uint ucs4) {
return ushort((ucs4>>10) + 0xd7c0);
}
static inline ushort lowSurrogate(uint ucs4) {
return ushort(ucs4%0x400 + 0xdc00);
}

static Category  category(uint ucs4);
static Direction  direction(uint ucs4);
static Joining  joining(uint ucs4);
static unsigned char  combiningClass(uint ucs4);

static uint  mirroredChar(uint ucs4);
static bool  hasMirrored(uint ucs4);

static QString  decomposition(uint ucs4);
static Decomposition  decompositionTag(uint ucs4);

static int  digitValue(uint ucs4);
static uint  toLower(uint ucs4);
static uint  toUpper(uint ucs4);
static uint  toTitleCase(uint ucs4);
static uint  toCaseFolded(uint ucs4);

static Script  script(uint ucs4);

static UnicodeVersion  unicodeVersion(uint ucs4);

static UnicodeVersion  currentUnicodeVersion();

static bool  isPrint(uint ucs4);
static inline bool isSpace(uint ucs4);
static bool  isMark(uint ucs4);
static bool  isPunct(uint ucs4);
static bool  isSymbol(uint ucs4);
static inline bool isLetter(uint ucs4);
static inline bool isNumber(uint ucs4);
static inline bool isLetterOrNumber(uint ucs4);
static inline bool isDigit(uint ucs4);
static inline bool isLower(uint ucs4);
static inline bool isUpper(uint ucs4);
static inline bool isTitleCase(uint ucs4);

private:
static bool  isSpace_helper(uint ucs4);
static bool  isLetter_helper(uint ucs4);
static bool  isNumber_helper(uint ucs4);
static bool  isLetterOrNumber_helper(uint ucs4);





# 472 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"
ushort ucs;
};

template<> class QTypeInfo<QChar > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QChar)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QChar) }; static inline const char *name() { return "QChar"; } };

inline char QChar::toLatin1() const { return ucs > 0xff ? '\0' : char(ucs); }
inline QChar QChar::fromLatin1(char c) { return QChar(ushort(uchar(c))); }

inline void QChar::setCell(uchar acell)
{ ucs = ushort((ucs & 0xff00) + acell); }
inline void QChar::setRow(uchar arow)
{ ucs = ushort((ushort(arow)<<8) + (ucs&0xff)); }

inline bool QChar::isSpace(uint ucs4)
{

return ucs4 == 0x20 || (ucs4 <= 0x0d && ucs4 >= 0x09)
|| (ucs4 > 127 && (ucs4 == 0x85 || ucs4 == 0xa0 || QChar::isSpace_helper(ucs4)));
}
inline bool QChar::isLetter(uint ucs4)
{
return (ucs4 >= 'A' && ucs4 <= 'z' && (ucs4 >= 'a' || ucs4 <= 'Z'))
|| (ucs4 > 127 && QChar::isLetter_helper(ucs4));
}
inline bool QChar::isNumber(uint ucs4)
{ return (ucs4 <= '9' && ucs4 >= '0') || (ucs4 > 127 && QChar::isNumber_helper(ucs4)); }
inline bool QChar::isLetterOrNumber(uint ucs4)
{
return (ucs4 >= 'A' && ucs4 <= 'z' && (ucs4 >= 'a' || ucs4 <= 'Z'))
|| (ucs4 >= '0' && ucs4 <= '9')
|| (ucs4 > 127 && QChar::isLetterOrNumber_helper(ucs4));
}
inline bool QChar::isDigit(uint ucs4)
{ return (ucs4 <= '9' && ucs4 >= '0') || (ucs4 > 127 && QChar::category(ucs4) == Number_DecimalDigit); }
inline bool QChar::isLower(uint ucs4)
{ return (ucs4 <= 'z' && ucs4 >= 'a') || (ucs4 > 127 && QChar::category(ucs4) == Letter_Lowercase); }
inline bool QChar::isUpper(uint ucs4)
{ return (ucs4 <= 'Z' && ucs4 >= 'A') || (ucs4 > 127 && QChar::category(ucs4) == Letter_Uppercase); }
inline bool QChar::isTitleCase(uint ucs4)
{ return ucs4 > 127 && QChar::category(ucs4) == Letter_Titlecase; }

inline bool operator==(QChar c1, QChar c2) { return c1.unicode() == c2.unicode(); }
inline bool operator!=(QChar c1, QChar c2) { return c1.unicode() != c2.unicode(); }
inline bool operator<=(QChar c1, QChar c2) { return c1.unicode() <= c2.unicode(); }
inline bool operator>=(QChar c1, QChar c2) { return c1.unicode() >= c2.unicode(); }
inline bool operator<(QChar c1, QChar c2) { return c1.unicode() < c2.unicode(); }
inline bool operator>(QChar c1, QChar c2) { return c1.unicode() > c2.unicode(); }


# 521 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"
 QDataStream &operator<<(QDataStream &, QChar);
 QDataStream &operator>>(QDataStream &, QChar &);


# 525 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"



namespace QtPrivate
{

class RefCount
{
public:
inline bool ref()  {
int count = atomic.load();
if (count == 0) 
return false;
if (count != -1) 
atomic.ref();
return true;
}

inline bool deref()  {
int count = atomic.load();
if (count == 0) 
return false;
if (count == -1) 
return true;
return atomic.deref();
}

bool setSharable(bool sharable) 
{
qt_noop();
if (sharable)
return atomic.testAndSetRelaxed(0, 1);
else
return atomic.testAndSetRelaxed(1, 0);
}

bool isStatic() const 
{

return atomic.load() == -1;
}

bool isSharable() const 
{

return atomic.load() != 0;
}

bool isShared() const 
{
int count = atomic.load();
return (count != 1) && (count != 0);
}

void initializeOwned()  { atomic.store(1); }
void initializeUnsharable()  { atomic.store(0); }

QBasicAtomicInt atomic;
};

}



# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
namespace



# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
Qt {
















































# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
enum GlobalColor {
color0,
color1,
black,
white,
darkGray,
gray,
lightGray,
red,
green,
blue,
cyan,
magenta,
yellow,
darkRed,
darkGreen,
darkBlue,
darkCyan,
darkMagenta,
darkYellow,
transparent
};

enum KeyboardModifier {
NoModifier = 0x00000000,
ShiftModifier = 0x02000000,
ControlModifier = 0x04000000,
AltModifier = 0x08000000,
MetaModifier = 0x10000000,
KeypadModifier = 0x20000000,
GroupSwitchModifier = 0x40000000,

KeyboardModifierMask = 0xfe000000
};
typedef QFlags<KeyboardModifier> KeyboardModifiers;






enum Modifier {
META = Qt::MetaModifier,
SHIFT = Qt::ShiftModifier,
CTRL = Qt::ControlModifier,
ALT = Qt::AltModifier,
MODIFIER_MASK = KeyboardModifierMask,
UNICODE_ACCEL = 0x00000000
};

enum MouseButton {
NoButton = 0x00000000,
LeftButton = 0x00000001,
RightButton = 0x00000002,
MidButton = 0x00000004, 
MiddleButton = MidButton,
BackButton = 0x00000008,
XButton1 = BackButton,
ExtraButton1 = XButton1,
ForwardButton = 0x00000010,
XButton2 = ForwardButton,
ExtraButton2 = ForwardButton,
TaskButton = 0x00000020,
ExtraButton3 = TaskButton,
ExtraButton4 = 0x00000040,
ExtraButton5 = 0x00000080,
ExtraButton6 = 0x00000100,
ExtraButton7 = 0x00000200,
ExtraButton8 = 0x00000400,
ExtraButton9 = 0x00000800,
ExtraButton10 = 0x00001000,
ExtraButton11 = 0x00002000,
ExtraButton12 = 0x00004000,
ExtraButton13 = 0x00008000,
ExtraButton14 = 0x00010000,
ExtraButton15 = 0x00020000,
ExtraButton16 = 0x00040000,
ExtraButton17 = 0x00080000,
ExtraButton18 = 0x00100000,
ExtraButton19 = 0x00200000,
ExtraButton20 = 0x00400000,
ExtraButton21 = 0x00800000,
ExtraButton22 = 0x01000000,
ExtraButton23 = 0x02000000,
ExtraButton24 = 0x04000000,
AllButtons = 0x07ffffff,
MaxMouseButton = ExtraButton24,

MouseButtonMask = 0xffffffff
};
typedef QFlags<MouseButton> MouseButtons;

enum Orientation {
Horizontal = 0x1,
Vertical = 0x2
};

typedef QFlags<Orientation> Orientations;

enum FocusPolicy {
NoFocus = 0,
TabFocus = 0x1,
ClickFocus = 0x2,
StrongFocus = TabFocus | ClickFocus | 0x8,
WheelFocus = StrongFocus | 0x4
};

enum SortOrder {
AscendingOrder,
DescendingOrder
};

enum TileRule {
StretchTile,
RepeatTile,
RoundTile
};





enum AlignmentFlag {
AlignLeft = 0x0001,
AlignLeading = AlignLeft,
AlignRight = 0x0002,
AlignTrailing = AlignRight,
AlignHCenter = 0x0004,
AlignJustify = 0x0008,
AlignAbsolute = 0x0010,
AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,

AlignTop = 0x0020,
AlignBottom = 0x0040,
AlignVCenter = 0x0080,
AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter,

AlignCenter = AlignVCenter | AlignHCenter
};

typedef QFlags<AlignmentFlag> Alignment;

enum TextFlag {
TextSingleLine = 0x0100,
TextDontClip = 0x0200,
TextExpandTabs = 0x0400,
TextShowMnemonic = 0x0800,
TextWordWrap = 0x1000,
TextWrapAnywhere = 0x2000,
TextDontPrint = 0x4000,
TextIncludeTrailingSpaces = 0x08000000,
TextHideMnemonic = 0x8000,
TextJustificationForced = 0x10000,
TextForceLeftToRight = 0x20000,
TextForceRightToLeft = 0x40000,
TextLongestVariant = 0x80000,
TextBypassShaping = 0x100000
};

enum TextElideMode {
ElideLeft,
ElideRight,
ElideMiddle,
ElideNone
};

enum WhiteSpaceMode {
WhiteSpaceNormal,
WhiteSpacePre,
WhiteSpaceNoWrap,
WhiteSpaceModeUndefined = -1
};

enum HitTestAccuracy { ExactHit, FuzzyHit };

enum WindowType {
Widget = 0x00000000,
Window = 0x00000001,
Dialog = 0x00000002 | Window,
Sheet = 0x00000004 | Window,
Drawer = Sheet | Dialog,
Popup = 0x00000008 | Window,
Tool = Popup | Dialog,
ToolTip = Popup | Sheet,
SplashScreen = ToolTip | Dialog,
Desktop = 0x00000010 | Window,
SubWindow = 0x00000012,
ForeignWindow = 0x00000020 | Window,

WindowType_Mask = 0x000000ff,
MSWindowsFixedSizeDialogHint = 0x00000100,
MSWindowsOwnDC = 0x00000200,
BypassWindowManagerHint = 0x00000400,
X11BypassWindowManagerHint = BypassWindowManagerHint,
FramelessWindowHint = 0x00000800,
WindowTitleHint = 0x00001000,
WindowSystemMenuHint = 0x00002000,
WindowMinimizeButtonHint = 0x00004000,
WindowMaximizeButtonHint = 0x00008000,
WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint,
WindowContextHelpButtonHint = 0x00010000,
WindowShadeButtonHint = 0x00020000,
WindowStaysOnTopHint = 0x00040000,
WindowTransparentForInput = 0x00080000,
WindowOverridesSystemGestures = 0x00100000,
WindowDoesNotAcceptFocus = 0x00200000,

CustomizeWindowHint = 0x02000000,
WindowStaysOnBottomHint = 0x04000000,
WindowCloseButtonHint = 0x08000000,
MacWindowToolBarButtonHint = 0x10000000,
BypassGraphicsProxyWidget = 0x20000000,
WindowOkButtonHint = 0x00080000,
WindowCancelButtonHint = 0x00100000,
NoDropShadowWindowHint = 0x40000000,
WindowFullscreenButtonHint = 0x80000000
};

typedef QFlags<WindowType> WindowFlags;

enum WindowState {
WindowNoState = 0x00000000,
WindowMinimized = 0x00000001,
WindowMaximized = 0x00000002,
WindowFullScreen = 0x00000004,
WindowActive = 0x00000008
};

typedef QFlags<WindowState> WindowStates;

enum ApplicationState {
ApplicationSuspended = 0x00000000,
ApplicationHidden = 0x00000001,
ApplicationInactive = 0x00000002,
ApplicationActive = 0x00000004
};

typedef QFlags<ApplicationState> ApplicationStates;

enum ScreenOrientation {
PrimaryOrientation = 0x00000000,
PortraitOrientation = 0x00000001,
LandscapeOrientation = 0x00000002,
InvertedPortraitOrientation = 0x00000004,
InvertedLandscapeOrientation = 0x00000008
};

typedef QFlags<ScreenOrientation> ScreenOrientations;

enum WidgetAttribute {
WA_Disabled = 0,
WA_UnderMouse = 1,
WA_MouseTracking = 2,
WA_ContentsPropagated = 3, 
WA_OpaquePaintEvent = 4,
WA_NoBackground = WA_OpaquePaintEvent, 
WA_StaticContents = 5,
WA_LaidOut = 7,
WA_PaintOnScreen = 8,
WA_NoSystemBackground = 9,
WA_UpdatesDisabled = 10,
WA_Mapped = 11,
WA_MacNoClickThrough = 12, 
WA_InputMethodEnabled = 14,
WA_WState_Visible = 15,
WA_WState_Hidden = 16,

WA_ForceDisabled = 32,
WA_KeyCompression = 33,
WA_PendingMoveEvent = 34,
WA_PendingResizeEvent = 35,
WA_SetPalette = 36,
WA_SetFont = 37,
WA_SetCursor = 38,
WA_NoChildEventsFromChildren = 39,
WA_WindowModified = 41,
WA_Resized = 42,
WA_Moved = 43,
WA_PendingUpdate = 44,
WA_InvalidSize = 45,
WA_MacBrushedMetal = 46, 
WA_MacMetalStyle = WA_MacBrushedMetal, 
WA_CustomWhatsThis = 47,
WA_LayoutOnEntireRect = 48,
WA_OutsideWSRange = 49,
WA_GrabbedShortcut = 50,
WA_TransparentForMouseEvents = 51,
WA_PaintUnclipped = 52,
WA_SetWindowIcon = 53,
WA_NoMouseReplay = 54,
WA_DeleteOnClose = 55,
WA_RightToLeft = 56,
WA_SetLayoutDirection = 57,
WA_NoChildEventsForParent = 58,
WA_ForceUpdatesDisabled = 59,

WA_WState_Created = 60,
WA_WState_CompressKeys = 61,
WA_WState_InPaintEvent = 62,
WA_WState_Reparented = 63,
WA_WState_ConfigPending = 64,
WA_WState_Polished = 66,
WA_WState_DND = 67, 
WA_WState_OwnSizePolicy = 68,
WA_WState_ExplicitShowHide = 69,

WA_ShowModal = 70, 
WA_MouseNoMask = 71,
WA_GroupLeader = 72, 
WA_NoMousePropagation = 73, 
WA_Hover = 74,
WA_InputMethodTransparent = 75, 
WA_QuitOnClose = 76,

WA_KeyboardFocusChange = 77,

WA_AcceptDrops = 78,
WA_DropSiteRegistered = 79, 
WA_ForceAcceptDrops = WA_DropSiteRegistered, 

WA_WindowPropagation = 80,

WA_NoX11EventCompression = 81,
WA_TintedBackground = 82,
WA_X11OpenGLOverlay = 83,
WA_AlwaysShowToolTips = 84,
WA_MacOpaqueSizeGrip = 85,
WA_SetStyle = 86,

WA_SetLocale = 87,
WA_MacShowFocusRect = 88,

WA_MacNormalSize = 89, 
WA_MacSmallSize = 90, 
WA_MacMiniSize = 91, 

WA_LayoutUsesWidgetRect = 92,
WA_StyledBackground = 93, 
WA_MSWindowsUseDirect3D = 94, 
WA_CanHostQMdiSubWindowTitleBar = 95, 

WA_MacAlwaysShowToolWindow = 96, 

WA_StyleSheet = 97, 

WA_ShowWithoutActivating = 98,

WA_X11BypassTransientForHint = 99,

WA_NativeWindow = 100,
WA_DontCreateNativeAncestors = 101,

WA_MacVariableSize = 102, 

WA_DontShowOnScreen = 103,


WA_X11NetWmWindowTypeDesktop = 104,
WA_X11NetWmWindowTypeDock = 105,
WA_X11NetWmWindowTypeToolBar = 106,
WA_X11NetWmWindowTypeMenu = 107,
WA_X11NetWmWindowTypeUtility = 108,
WA_X11NetWmWindowTypeSplash = 109,
WA_X11NetWmWindowTypeDialog = 110,
WA_X11NetWmWindowTypeDropDownMenu = 111,
WA_X11NetWmWindowTypePopupMenu = 112,
WA_X11NetWmWindowTypeToolTip = 113,
WA_X11NetWmWindowTypeNotification = 114,
WA_X11NetWmWindowTypeCombo = 115,
WA_X11NetWmWindowTypeDND = 116,

WA_MacFrameworkScaled = 117,

WA_SetWindowModality = 118,
WA_WState_WindowOpacitySet = 119, 
WA_TranslucentBackground = 120,

WA_AcceptTouchEvents = 121,
WA_WState_AcceptedTouchBeginEvent = 122,
WA_TouchPadAcceptSingleTouchEvents = 123,

WA_X11DoNotAcceptFocus = 126,
WA_MacNoShadow = 127,


WA_AttributeCount
};

enum ApplicationAttribute
{
AA_ImmediateWidgetCreation = 0,
AA_MSWindowsUseDirect3DByDefault = 1, 
AA_DontShowIconsInMenus = 2,
AA_NativeWindows = 3,
AA_DontCreateNativeWidgetSiblings = 4,
AA_MacPluginApplication = 5,
AA_DontUseNativeMenuBar = 6,
AA_MacDontSwapCtrlAndMeta = 7,
AA_Use96Dpi = 8,
AA_X11InitThreads = 10,
AA_SynthesizeTouchForUnhandledMouseEvents = 11,
AA_SynthesizeMouseForUnhandledTouchEvents = 12,
AA_UseHighDpiPixmaps = 13,


AA_AttributeCount
};





enum ImageConversionFlag {
ColorMode_Mask = 0x00000003,
AutoColor = 0x00000000,
ColorOnly = 0x00000003,
MonoOnly = 0x00000002,


AlphaDither_Mask = 0x0000000c,
ThresholdAlphaDither = 0x00000000,
OrderedAlphaDither = 0x00000004,
DiffuseAlphaDither = 0x00000008,
NoAlpha = 0x0000000c, 

Dither_Mask = 0x00000030,
DiffuseDither = 0x00000000,
OrderedDither = 0x00000010,
ThresholdDither = 0x00000020,


DitherMode_Mask = 0x000000c0,
AutoDither = 0x00000000,
PreferDither = 0x00000040,
AvoidDither = 0x00000080,

NoOpaqueDetection = 0x00000100,
NoFormatConversion = 0x00000200
};
typedef QFlags<ImageConversionFlag> ImageConversionFlags;

enum BGMode {
TransparentMode,
OpaqueMode
};

enum Key {
Key_Escape = 0x01000000, 
Key_Tab = 0x01000001,
Key_Backtab = 0x01000002,
Key_Backspace = 0x01000003,
Key_Return = 0x01000004,
Key_Enter = 0x01000005,
Key_Insert = 0x01000006,
Key_Delete = 0x01000007,
Key_Pause = 0x01000008,
Key_Print = 0x01000009,
Key_SysReq = 0x0100000a,
Key_Clear = 0x0100000b,
Key_Home = 0x01000010, 
Key_End = 0x01000011,
Key_Left = 0x01000012,
Key_Up = 0x01000013,
Key_Right = 0x01000014,
Key_Down = 0x01000015,
Key_PageUp = 0x01000016,
Key_PageDown = 0x01000017,
Key_Shift = 0x01000020, 
Key_Control = 0x01000021,
Key_Meta = 0x01000022,
Key_Alt = 0x01000023,
Key_CapsLock = 0x01000024,
Key_NumLock = 0x01000025,
Key_ScrollLock = 0x01000026,
Key_F1 = 0x01000030, 
Key_F2 = 0x01000031,
Key_F3 = 0x01000032,
Key_F4 = 0x01000033,
Key_F5 = 0x01000034,
Key_F6 = 0x01000035,
Key_F7 = 0x01000036,
Key_F8 = 0x01000037,
Key_F9 = 0x01000038,
Key_F10 = 0x01000039,
Key_F11 = 0x0100003a,
Key_F12 = 0x0100003b,
Key_F13 = 0x0100003c,
Key_F14 = 0x0100003d,
Key_F15 = 0x0100003e,
Key_F16 = 0x0100003f,
Key_F17 = 0x01000040,
Key_F18 = 0x01000041,
Key_F19 = 0x01000042,
Key_F20 = 0x01000043,
Key_F21 = 0x01000044,
Key_F22 = 0x01000045,
Key_F23 = 0x01000046,
Key_F24 = 0x01000047,
Key_F25 = 0x01000048, 
Key_F26 = 0x01000049,
Key_F27 = 0x0100004a,
Key_F28 = 0x0100004b,
Key_F29 = 0x0100004c,
Key_F30 = 0x0100004d,
Key_F31 = 0x0100004e,
Key_F32 = 0x0100004f,
Key_F33 = 0x01000050,
Key_F34 = 0x01000051,
Key_F35 = 0x01000052,
Key_Super_L = 0x01000053, 
Key_Super_R = 0x01000054,
Key_Menu = 0x01000055,
Key_Hyper_L = 0x01000056,
Key_Hyper_R = 0x01000057,
Key_Help = 0x01000058,
Key_Direction_L = 0x01000059,
Key_Direction_R = 0x01000060,
Key_Space = 0x20, 
Key_Any = Key_Space,
Key_Exclam = 0x21,
Key_QuoteDbl = 0x22,
Key_NumberSign = 0x23,
Key_Dollar = 0x24,
Key_Percent = 0x25,
Key_Ampersand = 0x26,
Key_Apostrophe = 0x27,
Key_ParenLeft = 0x28,
Key_ParenRight = 0x29,
Key_Asterisk = 0x2a,
Key_Plus = 0x2b,
Key_Comma = 0x2c,
Key_Minus = 0x2d,
Key_Period = 0x2e,
Key_Slash = 0x2f,
Key_0 = 0x30,
Key_1 = 0x31,
Key_2 = 0x32,
Key_3 = 0x33,
Key_4 = 0x34,
Key_5 = 0x35,
Key_6 = 0x36,
Key_7 = 0x37,
Key_8 = 0x38,
Key_9 = 0x39,
Key_Colon = 0x3a,
Key_Semicolon = 0x3b,
Key_Less = 0x3c,
Key_Equal = 0x3d,
Key_Greater = 0x3e,
Key_Question = 0x3f,
Key_At = 0x40,
Key_A = 0x41,
Key_B = 0x42,
Key_C = 0x43,
Key_D = 0x44,
Key_E = 0x45,
Key_F = 0x46,
Key_G = 0x47,
Key_H = 0x48,
Key_I = 0x49,
Key_J = 0x4a,
Key_K = 0x4b,
Key_L = 0x4c,
Key_M = 0x4d,
Key_N = 0x4e,
Key_O = 0x4f,
Key_P = 0x50,
Key_Q = 0x51,
Key_R = 0x52,
Key_S = 0x53,
Key_T = 0x54,
Key_U = 0x55,
Key_V = 0x56,
Key_W = 0x57,
Key_X = 0x58,
Key_Y = 0x59,
Key_Z = 0x5a,
Key_BracketLeft = 0x5b,
Key_Backslash = 0x5c,
Key_BracketRight = 0x5d,
Key_AsciiCircum = 0x5e,
Key_Underscore = 0x5f,
Key_QuoteLeft = 0x60,
Key_BraceLeft = 0x7b,
Key_Bar = 0x7c,
Key_BraceRight = 0x7d,
Key_AsciiTilde = 0x7e,

Key_nobreakspace = 0x0a0,
Key_exclamdown = 0x0a1,
Key_cent = 0x0a2,
Key_sterling = 0x0a3,
Key_currency = 0x0a4,
Key_yen = 0x0a5,
Key_brokenbar = 0x0a6,
Key_section = 0x0a7,
Key_diaeresis = 0x0a8,
Key_copyright = 0x0a9,
Key_ordfeminine = 0x0aa,
Key_guillemotleft = 0x0ab, 
Key_notsign = 0x0ac,
Key_hyphen = 0x0ad,
Key_registered = 0x0ae,
Key_macron = 0x0af,
Key_degree = 0x0b0,
Key_plusminus = 0x0b1,
Key_twosuperior = 0x0b2,
Key_threesuperior = 0x0b3,
Key_acute = 0x0b4,
Key_mu = 0x0b5,
Key_paragraph = 0x0b6,
Key_periodcentered = 0x0b7,
Key_cedilla = 0x0b8,
Key_onesuperior = 0x0b9,
Key_masculine = 0x0ba,
Key_guillemotright = 0x0bb, 
Key_onequarter = 0x0bc,
Key_onehalf = 0x0bd,
Key_threequarters = 0x0be,
Key_questiondown = 0x0bf,
Key_Agrave = 0x0c0,
Key_Aacute = 0x0c1,
Key_Acircumflex = 0x0c2,
Key_Atilde = 0x0c3,
Key_Adiaeresis = 0x0c4,
Key_Aring = 0x0c5,
Key_AE = 0x0c6,
Key_Ccedilla = 0x0c7,
Key_Egrave = 0x0c8,
Key_Eacute = 0x0c9,
Key_Ecircumflex = 0x0ca,
Key_Ediaeresis = 0x0cb,
Key_Igrave = 0x0cc,
Key_Iacute = 0x0cd,
Key_Icircumflex = 0x0ce,
Key_Idiaeresis = 0x0cf,
Key_ETH = 0x0d0,
Key_Ntilde = 0x0d1,
Key_Ograve = 0x0d2,
Key_Oacute = 0x0d3,
Key_Ocircumflex = 0x0d4,
Key_Otilde = 0x0d5,
Key_Odiaeresis = 0x0d6,
Key_multiply = 0x0d7,
Key_Ooblique = 0x0d8,
Key_Ugrave = 0x0d9,
Key_Uacute = 0x0da,
Key_Ucircumflex = 0x0db,
Key_Udiaeresis = 0x0dc,
Key_Yacute = 0x0dd,
Key_THORN = 0x0de,
Key_ssharp = 0x0df,
Key_division = 0x0f7,
Key_ydiaeresis = 0x0ff,






Key_AltGr = 0x01001103,
Key_Multi_key = 0x01001120, 
Key_Codeinput = 0x01001137,
Key_SingleCandidate = 0x0100113c,
Key_MultipleCandidate = 0x0100113d,
Key_PreviousCandidate = 0x0100113e,


Key_Mode_switch = 0x0100117e, 



Key_Kanji = 0x01001121, 
Key_Muhenkan = 0x01001122, 

Key_Henkan = 0x01001123, 
Key_Romaji = 0x01001124, 
Key_Hiragana = 0x01001125, 
Key_Katakana = 0x01001126, 
Key_Hiragana_Katakana = 0x01001127, 
Key_Zenkaku = 0x01001128, 
Key_Hankaku = 0x01001129, 
Key_Zenkaku_Hankaku = 0x0100112a, 
Key_Touroku = 0x0100112b, 
Key_Massyo = 0x0100112c, 
Key_Kana_Lock = 0x0100112d, 
Key_Kana_Shift = 0x0100112e, 
Key_Eisu_Shift = 0x0100112f, 
Key_Eisu_toggle = 0x01001130, 









Key_Hangul = 0x01001131, 
Key_Hangul_Start = 0x01001132, 
Key_Hangul_End = 0x01001133, 
Key_Hangul_Hanja = 0x01001134, 
Key_Hangul_Jamo = 0x01001135, 
Key_Hangul_Romaja = 0x01001136, 

Key_Hangul_Jeonja = 0x01001138, 
Key_Hangul_Banja = 0x01001139, 
Key_Hangul_PreHanja = 0x0100113a, 
Key_Hangul_PostHanja = 0x0100113b, 



Key_Hangul_Special = 0x0100113f, 



Key_Dead_Grave = 0x01001250,
Key_Dead_Acute = 0x01001251,
Key_Dead_Circumflex = 0x01001252,
Key_Dead_Tilde = 0x01001253,
Key_Dead_Macron = 0x01001254,
Key_Dead_Breve = 0x01001255,
Key_Dead_Abovedot = 0x01001256,
Key_Dead_Diaeresis = 0x01001257,
Key_Dead_Abovering = 0x01001258,
Key_Dead_Doubleacute = 0x01001259,
Key_Dead_Caron = 0x0100125a,
Key_Dead_Cedilla = 0x0100125b,
Key_Dead_Ogonek = 0x0100125c,
Key_Dead_Iota = 0x0100125d,
Key_Dead_Voiced_Sound = 0x0100125e,
Key_Dead_Semivoiced_Sound = 0x0100125f,
Key_Dead_Belowdot = 0x01001260,
Key_Dead_Hook = 0x01001261,
Key_Dead_Horn = 0x01001262,


Key_Back = 0x01000061,
Key_Forward = 0x01000062,
Key_Stop = 0x01000063,
Key_Refresh = 0x01000064,
Key_VolumeDown = 0x01000070,
Key_VolumeMute = 0x01000071,
Key_VolumeUp = 0x01000072,
Key_BassBoost = 0x01000073,
Key_BassUp = 0x01000074,
Key_BassDown = 0x01000075,
Key_TrebleUp = 0x01000076,
Key_TrebleDown = 0x01000077,
Key_MediaPlay = 0x01000080,
Key_MediaStop = 0x01000081,
Key_MediaPrevious = 0x01000082,
Key_MediaNext = 0x01000083,
Key_MediaRecord = 0x01000084,
Key_MediaPause = 0x1000085,
Key_MediaTogglePlayPause = 0x1000086,
Key_HomePage = 0x01000090,
Key_Favorites = 0x01000091,
Key_Search = 0x01000092,
Key_Standby = 0x01000093,
Key_OpenUrl = 0x01000094,
Key_LaunchMail = 0x010000a0,
Key_LaunchMedia = 0x010000a1,
Key_Launch0 = 0x010000a2,
Key_Launch1 = 0x010000a3,
Key_Launch2 = 0x010000a4,
Key_Launch3 = 0x010000a5,
Key_Launch4 = 0x010000a6,
Key_Launch5 = 0x010000a7,
Key_Launch6 = 0x010000a8,
Key_Launch7 = 0x010000a9,
Key_Launch8 = 0x010000aa,
Key_Launch9 = 0x010000ab,
Key_LaunchA = 0x010000ac,
Key_LaunchB = 0x010000ad,
Key_LaunchC = 0x010000ae,
Key_LaunchD = 0x010000af,
Key_LaunchE = 0x010000b0,
Key_LaunchF = 0x010000b1,
Key_MonBrightnessUp = 0x010000b2,
Key_MonBrightnessDown = 0x010000b3,
Key_KeyboardLightOnOff = 0x010000b4,
Key_KeyboardBrightnessUp = 0x010000b5,
Key_KeyboardBrightnessDown = 0x010000b6,
Key_PowerOff = 0x010000b7,
Key_WakeUp = 0x010000b8,
Key_Eject = 0x010000b9,
Key_ScreenSaver = 0x010000ba,
Key_WWW = 0x010000bb,
Key_Memo = 0x010000bc,
Key_LightBulb = 0x010000bd,
Key_Shop = 0x010000be,
Key_History = 0x010000bf,
Key_AddFavorite = 0x010000c0,
Key_HotLinks = 0x010000c1,
Key_BrightnessAdjust = 0x010000c2,
Key_Finance = 0x010000c3,
Key_Community = 0x010000c4,
Key_AudioRewind = 0x010000c5,
Key_BackForward = 0x010000c6,
Key_ApplicationLeft = 0x010000c7,
Key_ApplicationRight = 0x010000c8,
Key_Book = 0x010000c9,
Key_CD = 0x010000ca,
Key_Calculator = 0x010000cb,
Key_ToDoList = 0x010000cc,
Key_ClearGrab = 0x010000cd,
Key_Close = 0x010000ce,
Key_Copy = 0x010000cf,
Key_Cut = 0x010000d0,
Key_Display = 0x010000d1,
Key_DOS = 0x010000d2,
Key_Documents = 0x010000d3,
Key_Excel = 0x010000d4,
Key_Explorer = 0x010000d5,
Key_Game = 0x010000d6,
Key_Go = 0x010000d7,
Key_iTouch = 0x010000d8,
Key_LogOff = 0x010000d9,
Key_Market = 0x010000da,
Key_Meeting = 0x010000db,
Key_MenuKB = 0x010000dc,
Key_MenuPB = 0x010000dd,
Key_MySites = 0x010000de,
Key_News = 0x010000df,
Key_OfficeHome = 0x010000e0,
Key_Option = 0x010000e1,
Key_Paste = 0x010000e2,
Key_Phone = 0x010000e3,
Key_Calendar = 0x010000e4,
Key_Reply = 0x010000e5,
Key_Reload = 0x010000e6,
Key_RotateWindows = 0x010000e7,
Key_RotationPB = 0x010000e8,
Key_RotationKB = 0x010000e9,
Key_Save = 0x010000ea,
Key_Send = 0x010000eb,
Key_Spell = 0x010000ec,
Key_SplitScreen = 0x010000ed,
Key_Support = 0x010000ee,
Key_TaskPane = 0x010000ef,
Key_Terminal = 0x010000f0,
Key_Tools = 0x010000f1,
Key_Travel = 0x010000f2,
Key_Video = 0x010000f3,
Key_Word = 0x010000f4,
Key_Xfer = 0x010000f5,
Key_ZoomIn = 0x010000f6,
Key_ZoomOut = 0x010000f7,
Key_Away = 0x010000f8,
Key_Messenger = 0x010000f9,
Key_WebCam = 0x010000fa,
Key_MailForward = 0x010000fb,
Key_Pictures = 0x010000fc,
Key_Music = 0x010000fd,
Key_Battery = 0x010000fe,
Key_Bluetooth = 0x010000ff,
Key_WLAN = 0x01000100,
Key_UWB = 0x01000101,
Key_AudioForward = 0x01000102,
Key_AudioRepeat = 0x01000103,
Key_AudioRandomPlay = 0x01000104,
Key_Subtitle = 0x01000105,
Key_AudioCycleTrack = 0x01000106,
Key_Time = 0x01000107,
Key_Hibernate = 0x01000108,
Key_View = 0x01000109,
Key_TopMenu = 0x0100010a,
Key_PowerDown = 0x0100010b,
Key_Suspend = 0x0100010c,
Key_ContrastAdjust = 0x0100010d,

Key_LaunchG = 0x0100010e,
Key_LaunchH = 0x0100010f,

Key_TouchpadToggle = 0x01000110,
Key_TouchpadOn = 0x01000111,
Key_TouchpadOff = 0x01000112,

Key_MicMute = 0x01000113,

Key_MediaLast = 0x0100ffff,


Key_Select = 0x01010000,
Key_Yes = 0x01010001,
Key_No = 0x01010002,


Key_Cancel = 0x01020001,
Key_Printer = 0x01020002,
Key_Execute = 0x01020003,
Key_Sleep = 0x01020004,
Key_Play = 0x01020005, 
Key_Zoom = 0x01020006,





Key_Context1 = 0x01100000,
Key_Context2 = 0x01100001,
Key_Context3 = 0x01100002,
Key_Context4 = 0x01100003,
Key_Call = 0x01100004, 
Key_Hangup = 0x01100005, 
Key_Flip = 0x01100006,
Key_ToggleCallHangup = 0x01100007, 
Key_VoiceDial = 0x01100008,
Key_LastNumberRedial = 0x01100009,

Key_Camera = 0x01100020,
Key_CameraFocus = 0x01100021,

Key_unknown = 0x01ffffff
};

enum ArrowType {
NoArrow,
UpArrow,
DownArrow,
LeftArrow,
RightArrow
};

enum PenStyle { 
NoPen,
SolidLine,
DashLine,
DotLine,
DashDotLine,
DashDotDotLine,
CustomDashLine

# 1038 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
, MPenStyle = 0x0f

# 1040 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
};

enum PenCapStyle { 
FlatCap = 0x00,
SquareCap = 0x10,
RoundCap = 0x20,
MPenCapStyle = 0x30
};

enum PenJoinStyle { 
MiterJoin = 0x00,
BevelJoin = 0x40,
RoundJoin = 0x80,
SvgMiterJoin = 0x100,
MPenJoinStyle = 0x1c0
};

enum BrushStyle { 
NoBrush,
SolidPattern,
Dense1Pattern,
Dense2Pattern,
Dense3Pattern,
Dense4Pattern,
Dense5Pattern,
Dense6Pattern,
Dense7Pattern,
HorPattern,
VerPattern,
CrossPattern,
BDiagPattern,
FDiagPattern,
DiagCrossPattern,
LinearGradientPattern,
RadialGradientPattern,
ConicalGradientPattern,
TexturePattern = 24
};

enum SizeMode {
AbsoluteSize,
RelativeSize
};

enum UIEffect {
UI_General,
UI_AnimateMenu,
UI_FadeMenu,
UI_AnimateCombo,
UI_AnimateTooltip,
UI_FadeTooltip,
UI_AnimateToolBox
};

enum CursorShape {
ArrowCursor,
UpArrowCursor,
CrossCursor,
WaitCursor,
IBeamCursor,
SizeVerCursor,
SizeHorCursor,
SizeBDiagCursor,
SizeFDiagCursor,
SizeAllCursor,
BlankCursor,
SplitVCursor,
SplitHCursor,
PointingHandCursor,
ForbiddenCursor,
WhatsThisCursor,
BusyCursor,
OpenHandCursor,
ClosedHandCursor,
DragCopyCursor,
DragMoveCursor,
DragLinkCursor,
LastCursor = DragLinkCursor,
BitmapCursor = 24,
CustomCursor = 25
};

enum TextFormat {
PlainText,
RichText,
AutoText
};

enum AspectRatioMode {
IgnoreAspectRatio,
KeepAspectRatio,
KeepAspectRatioByExpanding
};

enum DockWidgetArea {
LeftDockWidgetArea = 0x1,
RightDockWidgetArea = 0x2,
TopDockWidgetArea = 0x4,
BottomDockWidgetArea = 0x8,

DockWidgetArea_Mask = 0xf,
AllDockWidgetAreas = DockWidgetArea_Mask,
NoDockWidgetArea = 0
};
enum DockWidgetAreaSizes {
NDockWidgetAreas = 4
};

typedef QFlags<DockWidgetArea> DockWidgetAreas;

enum ToolBarArea {
LeftToolBarArea = 0x1,
RightToolBarArea = 0x2,
TopToolBarArea = 0x4,
BottomToolBarArea = 0x8,

ToolBarArea_Mask = 0xf,
AllToolBarAreas = ToolBarArea_Mask,
NoToolBarArea = 0
};

enum ToolBarAreaSizes {
NToolBarAreas = 4
};

typedef QFlags<ToolBarArea> ToolBarAreas;

enum DateFormat {
TextDate, 
ISODate, 
SystemLocaleDate, 
LocalDate = SystemLocaleDate, 
LocaleDate, 
SystemLocaleShortDate,
SystemLocaleLongDate,
DefaultLocaleShortDate,
DefaultLocaleLongDate
};

enum TimeSpec {
LocalTime,
UTC,
OffsetFromUTC
};

enum DayOfWeek {
Monday = 1,
Tuesday = 2,
Wednesday = 3,
Thursday = 4,
Friday = 5,
Saturday = 6,
Sunday = 7
};

enum ScrollBarPolicy {
ScrollBarAsNeeded,
ScrollBarAlwaysOff,
ScrollBarAlwaysOn
};

enum CaseSensitivity {
CaseInsensitive,
CaseSensitive
};

enum Corner {
TopLeftCorner = 0x00000,
TopRightCorner = 0x00001,
BottomLeftCorner = 0x00002,
BottomRightCorner = 0x00003
};

enum Edge {
TopEdge = 0x00001,
LeftEdge = 0x00002,
RightEdge = 0x00004,
BottomEdge = 0x00008
};

enum ConnectionType {
AutoConnection,
DirectConnection,
QueuedConnection,
BlockingQueuedConnection,
UniqueConnection = 0x80
};

enum ShortcutContext {
WidgetShortcut,
WindowShortcut,
ApplicationShortcut,
WidgetWithChildrenShortcut
};

enum FillRule {
OddEvenFill,
WindingFill
};

enum MaskMode {
MaskInColor,
MaskOutColor
};

enum ClipOperation {
NoClip,
ReplaceClip,
IntersectClip
};


enum ItemSelectionMode {
ContainsItemShape = 0x0,
IntersectsItemShape = 0x1,
ContainsItemBoundingRect = 0x2,
IntersectsItemBoundingRect = 0x3
};

enum TransformationMode {
FastTransformation,
SmoothTransformation
};

enum Axis {
XAxis,
YAxis,
ZAxis
};

enum FocusReason {
MouseFocusReason,
TabFocusReason,
BacktabFocusReason,
ActiveWindowFocusReason,
PopupFocusReason,
ShortcutFocusReason,
MenuBarFocusReason,
OtherFocusReason,
NoFocusReason
};

enum ContextMenuPolicy {
NoContextMenu,
DefaultContextMenu,
ActionsContextMenu,
CustomContextMenu,
PreventContextMenu
};

enum InputMethodQuery {
ImEnabled = 0x1,
ImCursorRectangle = 0x2,
ImMicroFocus = 0x2, 
ImFont = 0x4,
ImCursorPosition = 0x8,
ImSurroundingText = 0x10,
ImCurrentSelection = 0x20,
ImMaximumTextLength = 0x40,
ImAnchorPosition = 0x80,
ImHints = 0x100,
ImPreferredLanguage = 0x200,

ImPlatformData = 0x80000000,
ImQueryInput = ImCursorRectangle | ImCursorPosition | ImSurroundingText |
ImCurrentSelection | ImAnchorPosition,
ImQueryAll = 0xffffffff
};
typedef QFlags<InputMethodQuery> InputMethodQueries;

enum InputMethodHint {
ImhNone = 0x0,

ImhHiddenText = 0x1,
ImhSensitiveData = 0x2,
ImhNoAutoUppercase = 0x4,
ImhPreferNumbers = 0x8,
ImhPreferUppercase = 0x10,
ImhPreferLowercase = 0x20,
ImhNoPredictiveText = 0x40,

ImhDate = 0x80,
ImhTime = 0x100,

ImhPreferLatin = 0x200,

ImhMultiLine = 0x400,

ImhDigitsOnly = 0x10000,
ImhFormattedNumbersOnly = 0x20000,
ImhUppercaseOnly = 0x40000,
ImhLowercaseOnly = 0x80000,
ImhDialableCharactersOnly = 0x100000,
ImhEmailCharactersOnly = 0x200000,
ImhUrlCharactersOnly = 0x400000,
ImhLatinOnly = 0x800000,

ImhExclusiveInputMask = 0xffff0000
};
typedef QFlags<InputMethodHint> InputMethodHints;

enum ToolButtonStyle {
ToolButtonIconOnly,
ToolButtonTextOnly,
ToolButtonTextBesideIcon,
ToolButtonTextUnderIcon,
ToolButtonFollowStyle
};

enum LayoutDirection {
LeftToRight,
RightToLeft,
LayoutDirectionAuto
};

enum AnchorPoint {
AnchorLeft = 0,
AnchorHorizontalCenter,
AnchorRight,
AnchorTop,
AnchorVerticalCenter,
AnchorBottom
};

enum FindChildOption {
FindDirectChildrenOnly = 0x0,
FindChildrenRecursively = 0x1
};
typedef QFlags<FindChildOption> FindChildOptions;

enum DropAction {
CopyAction = 0x1,
MoveAction = 0x2,
LinkAction = 0x4,
ActionMask = 0xff,
TargetMoveAction = 0x8002,
IgnoreAction = 0x0
};
typedef QFlags<DropAction> DropActions;

enum CheckState {
Unchecked,
PartiallyChecked,
Checked
};

enum ItemDataRole {
DisplayRole = 0,
DecorationRole = 1,
EditRole = 2,
ToolTipRole = 3,
StatusTipRole = 4,
WhatsThisRole = 5,

FontRole = 6,
TextAlignmentRole = 7,
BackgroundColorRole = 8,
BackgroundRole = 8,
TextColorRole = 9,
ForegroundRole = 9,
CheckStateRole = 10,

AccessibleTextRole = 11,
AccessibleDescriptionRole = 12,

SizeHintRole = 13,
InitialSortOrderRole = 14,

DisplayPropertyRole = 27,
DecorationPropertyRole = 28,
ToolTipPropertyRole = 29,
StatusTipPropertyRole = 30,
WhatsThisPropertyRole = 31,

UserRole = 0x0100
};

enum ItemFlag {
NoItemFlags = 0,
ItemIsSelectable = 1,
ItemIsEditable = 2,
ItemIsDragEnabled = 4,
ItemIsDropEnabled = 8,
ItemIsUserCheckable = 16,
ItemIsEnabled = 32,
ItemIsTristate = 64,
ItemNeverHasChildren = 128
};
typedef QFlags<ItemFlag> ItemFlags;

enum MatchFlag {
MatchExactly = 0,
MatchContains = 1,
MatchStartsWith = 2,
MatchEndsWith = 3,
MatchRegExp = 4,
MatchWildcard = 5,
MatchFixedString = 8,
MatchCaseSensitive = 16,
MatchWrap = 32,
MatchRecursive = 64
};
typedef QFlags<MatchFlag> MatchFlags;

typedef void * HANDLE;




# 1449 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
enum WindowModality {
NonModal,
WindowModal,
ApplicationModal
};

enum TextInteractionFlag {
NoTextInteraction = 0,
TextSelectableByMouse = 1,
TextSelectableByKeyboard = 2,
LinksAccessibleByMouse = 4,
LinksAccessibleByKeyboard = 8,
TextEditable = 16,

TextEditorInteraction = TextSelectableByMouse | TextSelectableByKeyboard | TextEditable,
TextBrowserInteraction = TextSelectableByMouse | LinksAccessibleByMouse | LinksAccessibleByKeyboard
};
typedef QFlags<TextInteractionFlag> TextInteractionFlags;

enum EventPriority {
HighEventPriority = 1,
NormalEventPriority = 0,
LowEventPriority = -1
};

enum SizeHint {
MinimumSize,
PreferredSize,
MaximumSize,
MinimumDescent,
NSizeHints
};

enum WindowFrameSection {
NoSection,
LeftSection, 
TopLeftSection,
TopSection,
TopRightSection,
RightSection,
BottomRightSection,
BottomSection,
BottomLeftSection,
TitleBarArea 
};

enum Initialization {
Uninitialized
};

enum CoordinateSystem {
DeviceCoordinates,
LogicalCoordinates
};

enum TouchPointState {
TouchPointPressed = 0x01,
TouchPointMoved = 0x02,
TouchPointStationary = 0x04,
TouchPointReleased = 0x08
};
typedef QFlags<TouchPointState> TouchPointStates;


# 1513 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
enum GestureState
{
NoGesture,
GestureStarted = 1,
GestureUpdated = 2,
GestureFinished = 3,
GestureCanceled = 4
};

enum GestureType
{
TapGesture = 1,
TapAndHoldGesture = 2,
PanGesture = 3,
PinchGesture = 4,
SwipeGesture = 5,

CustomGesture = 0x0100,

LastGestureType = ~0u
};

enum GestureFlag
{
DontStartGestureOnChildren = 0x01,
ReceivePartialGestures = 0x02,
IgnoredGesturesPropagateToParent = 0x04
};
typedef QFlags<GestureFlag> GestureFlags;


# 1544 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
enum NavigationMode
{
NavigationModeNone,
NavigationModeKeypadTabOrder,
NavigationModeKeypadDirectional,
NavigationModeCursorAuto,
NavigationModeCursorForceVisible
};

enum CursorMoveStyle {
LogicalMoveStyle,
VisualMoveStyle
};

enum TimerType {
PreciseTimer,
CoarseTimer,
VeryCoarseTimer
};
}




# 1568 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
 inline QFlags<Qt::MouseButtons::enum_type> operator|(Qt::MouseButtons::enum_type f1, Qt::MouseButtons::enum_type f2) { return QFlags<Qt::MouseButtons::enum_type>(f1) | f2; }  inline QFlags<Qt::MouseButtons::enum_type> operator|(Qt::MouseButtons::enum_type f1, QFlags<Qt::MouseButtons::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::MouseButtons::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::Orientations::enum_type> operator|(Qt::Orientations::enum_type f1, Qt::Orientations::enum_type f2) { return QFlags<Qt::Orientations::enum_type>(f1) | f2; }  inline QFlags<Qt::Orientations::enum_type> operator|(Qt::Orientations::enum_type f1, QFlags<Qt::Orientations::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::Orientations::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::KeyboardModifiers::enum_type> operator|(Qt::KeyboardModifiers::enum_type f1, Qt::KeyboardModifiers::enum_type f2) { return QFlags<Qt::KeyboardModifiers::enum_type>(f1) | f2; }  inline QFlags<Qt::KeyboardModifiers::enum_type> operator|(Qt::KeyboardModifiers::enum_type f1, QFlags<Qt::KeyboardModifiers::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::KeyboardModifiers::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::WindowFlags::enum_type> operator|(Qt::WindowFlags::enum_type f1, Qt::WindowFlags::enum_type f2) { return QFlags<Qt::WindowFlags::enum_type>(f1) | f2; }  inline QFlags<Qt::WindowFlags::enum_type> operator|(Qt::WindowFlags::enum_type f1, QFlags<Qt::WindowFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::WindowFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::Alignment::enum_type> operator|(Qt::Alignment::enum_type f1, Qt::Alignment::enum_type f2) { return QFlags<Qt::Alignment::enum_type>(f1) | f2; }  inline QFlags<Qt::Alignment::enum_type> operator|(Qt::Alignment::enum_type f1, QFlags<Qt::Alignment::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::Alignment::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::ImageConversionFlags::enum_type> operator|(Qt::ImageConversionFlags::enum_type f1, Qt::ImageConversionFlags::enum_type f2) { return QFlags<Qt::ImageConversionFlags::enum_type>(f1) | f2; }  inline QFlags<Qt::ImageConversionFlags::enum_type> operator|(Qt::ImageConversionFlags::enum_type f1, QFlags<Qt::ImageConversionFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::ImageConversionFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::DockWidgetAreas::enum_type> operator|(Qt::DockWidgetAreas::enum_type f1, Qt::DockWidgetAreas::enum_type f2) { return QFlags<Qt::DockWidgetAreas::enum_type>(f1) | f2; }  inline QFlags<Qt::DockWidgetAreas::enum_type> operator|(Qt::DockWidgetAreas::enum_type f1, QFlags<Qt::DockWidgetAreas::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::DockWidgetAreas::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::ToolBarAreas::enum_type> operator|(Qt::ToolBarAreas::enum_type f1, Qt::ToolBarAreas::enum_type f2) { return QFlags<Qt::ToolBarAreas::enum_type>(f1) | f2; }  inline QFlags<Qt::ToolBarAreas::enum_type> operator|(Qt::ToolBarAreas::enum_type f1, QFlags<Qt::ToolBarAreas::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::ToolBarAreas::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::WindowStates::enum_type> operator|(Qt::WindowStates::enum_type f1, Qt::WindowStates::enum_type f2) { return QFlags<Qt::WindowStates::enum_type>(f1) | f2; }  inline QFlags<Qt::WindowStates::enum_type> operator|(Qt::WindowStates::enum_type f1, QFlags<Qt::WindowStates::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::WindowStates::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::ScreenOrientations::enum_type> operator|(Qt::ScreenOrientations::enum_type f1, Qt::ScreenOrientations::enum_type f2) { return QFlags<Qt::ScreenOrientations::enum_type>(f1) | f2; }  inline QFlags<Qt::ScreenOrientations::enum_type> operator|(Qt::ScreenOrientations::enum_type f1, QFlags<Qt::ScreenOrientations::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::ScreenOrientations::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::DropActions::enum_type> operator|(Qt::DropActions::enum_type f1, Qt::DropActions::enum_type f2) { return QFlags<Qt::DropActions::enum_type>(f1) | f2; }  inline QFlags<Qt::DropActions::enum_type> operator|(Qt::DropActions::enum_type f1, QFlags<Qt::DropActions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::DropActions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::ItemFlags::enum_type> operator|(Qt::ItemFlags::enum_type f1, Qt::ItemFlags::enum_type f2) { return QFlags<Qt::ItemFlags::enum_type>(f1) | f2; }  inline QFlags<Qt::ItemFlags::enum_type> operator|(Qt::ItemFlags::enum_type f1, QFlags<Qt::ItemFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::ItemFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::MatchFlags::enum_type> operator|(Qt::MatchFlags::enum_type f1, Qt::MatchFlags::enum_type f2) { return QFlags<Qt::MatchFlags::enum_type>(f1) | f2; }  inline QFlags<Qt::MatchFlags::enum_type> operator|(Qt::MatchFlags::enum_type f1, QFlags<Qt::MatchFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::MatchFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::TextInteractionFlags::enum_type> operator|(Qt::TextInteractionFlags::enum_type f1, Qt::TextInteractionFlags::enum_type f2) { return QFlags<Qt::TextInteractionFlags::enum_type>(f1) | f2; }  inline QFlags<Qt::TextInteractionFlags::enum_type> operator|(Qt::TextInteractionFlags::enum_type f1, QFlags<Qt::TextInteractionFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::TextInteractionFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::InputMethodQueries::enum_type> operator|(Qt::InputMethodQueries::enum_type f1, Qt::InputMethodQueries::enum_type f2) { return QFlags<Qt::InputMethodQueries::enum_type>(f1) | f2; }  inline QFlags<Qt::InputMethodQueries::enum_type> operator|(Qt::InputMethodQueries::enum_type f1, QFlags<Qt::InputMethodQueries::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::InputMethodQueries::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::InputMethodHints::enum_type> operator|(Qt::InputMethodHints::enum_type f1, Qt::InputMethodHints::enum_type f2) { return QFlags<Qt::InputMethodHints::enum_type>(f1) | f2; }  inline QFlags<Qt::InputMethodHints::enum_type> operator|(Qt::InputMethodHints::enum_type f1, QFlags<Qt::InputMethodHints::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::InputMethodHints::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<Qt::TouchPointStates::enum_type> operator|(Qt::TouchPointStates::enum_type f1, Qt::TouchPointStates::enum_type f2) { return QFlags<Qt::TouchPointStates::enum_type>(f1) | f2; }  inline QFlags<Qt::TouchPointStates::enum_type> operator|(Qt::TouchPointStates::enum_type f1, QFlags<Qt::TouchPointStates::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::TouchPointStates::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

# 1586 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
 inline QFlags<Qt::GestureFlags::enum_type> operator|(Qt::GestureFlags::enum_type f1, Qt::GestureFlags::enum_type f2) { return QFlags<Qt::GestureFlags::enum_type>(f1) | f2; }  inline QFlags<Qt::GestureFlags::enum_type> operator|(Qt::GestureFlags::enum_type f1, QFlags<Qt::GestureFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(Qt::GestureFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 1589 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
typedef bool (*qInternalCallback)(void **);

class  QInternal {
public:
enum PaintDeviceFlags {
UnknownDevice = 0x00,
Widget = 0x01,
Pixmap = 0x02,
Image = 0x03,
Printer = 0x04,
Picture = 0x05,
Pbuffer = 0x06, 
FramebufferObject = 0x07, 
CustomRaster = 0x08,
MacQuartz = 0x09,
PaintBuffer = 0x0a,
OpenGL = 0x0b
};
enum RelayoutType {
RelayoutNormal,
RelayoutDragging,
RelayoutDropped
};

enum DockPosition {
LeftDock,
RightDock,
TopDock,
BottomDock,
DockCount
};

enum Callback {
EventNotifyCallback,
LastCallback
};
static bool registerCallback(Callback, qInternalCallback);
static bool unregisterCallback(Callback, qInternalCallback);
static bool activateCallbacks(Callback, void **);
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"



# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"


struct  QArrayData
{
QtPrivate::RefCount ref;
int size;
uint alloc : 31;
uint capacityReserved : 1;

qptrdiff offset; 

void *data()
{
qt_noop();
return reinterpret_cast<char *>(this) + offset;
}

const void *data() const
{
qt_noop();
return reinterpret_cast<const char *>(this) + offset;
}




bool isMutable() const
{
return alloc != 0;
}

enum AllocationOption {
CapacityReserved = 0x1,
Unsharable = 0x2,
RawData = 0x4,
Grow = 0x8,

Default = 0
};

typedef QFlags<AllocationOption> AllocationOptions;

size_t detachCapacity(size_t newSize) const
{
if (capacityReserved && newSize < alloc)
return alloc;
return newSize;
}

AllocationOptions detachFlags() const
{
AllocationOptions result;
if (!ref.isSharable())
result |= Unsharable;
if (capacityReserved)
result |= CapacityReserved;
return result;
}

AllocationOptions cloneFlags() const
{
AllocationOptions result;
if (capacityReserved)
result |= CapacityReserved;
return result;
}

static QArrayData *allocate(size_t objectSize, size_t alignment,
size_t capacity, AllocationOptions options = Default)
;
static void deallocate(QArrayData *data, size_t objectSize,
size_t alignment);

static const QArrayData shared_null[2];
static QArrayData *sharedNull() { return const_cast<QArrayData*>(shared_null); }
};

 inline QFlags<QArrayData::AllocationOptions::enum_type> operator|(QArrayData::AllocationOptions::enum_type f1, QArrayData::AllocationOptions::enum_type f2) { return QFlags<QArrayData::AllocationOptions::enum_type>(f1) | f2; }  inline QFlags<QArrayData::AllocationOptions::enum_type> operator|(QArrayData::AllocationOptions::enum_type f1, QFlags<QArrayData::AllocationOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QArrayData::AllocationOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

template <class T>
struct QTypedArrayData
: QArrayData
{






































































# 201 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"
typedef T* iterator;
typedef const T* const_iterator;


# 205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"
T *data() { return static_cast<T *>(QArrayData::data()); }
const T *data() const { return static_cast<const T *>(QArrayData::data()); }

iterator begin(iterator = iterator()) { return data(); }
iterator end(iterator = iterator()) { return data() + size; }
const_iterator begin(const_iterator = const_iterator()) const { return data(); }
const_iterator end(const_iterator = const_iterator()) const { return data() + size; }
const_iterator constBegin(const_iterator = const_iterator()) const { return data(); }
const_iterator constEnd(const_iterator = const_iterator()) const { return data() + size; }

class AlignmentDummy { QArrayData header; T data; };

static QTypedArrayData *allocate(size_t capacity,
AllocationOptions options = Default) 
{
enum {q_static_assert_result205 = sizeof(QStaticAssertFailure<!!(sizeof(QTypedArrayData) == sizeof(QArrayData))>)};
return static_cast<QTypedArrayData *>(QArrayData::allocate(sizeof(T),
(size_t(::QtPrivate::AlignOf<AlignmentDummy>::Value)), capacity, options));
}

static void deallocate(QArrayData *data)
{
enum {q_static_assert_result205 = sizeof(QStaticAssertFailure<!!(sizeof(QTypedArrayData) == sizeof(QArrayData))>)};
QArrayData::deallocate(data, sizeof(T), (size_t(::QtPrivate::AlignOf<AlignmentDummy>::Value)));
}

static QTypedArrayData *fromRawData(const T *data, size_t n,
AllocationOptions options = Default)
{
enum {q_static_assert_result205 = sizeof(QStaticAssertFailure<!!(sizeof(QTypedArrayData) == sizeof(QArrayData))>)};
QTypedArrayData *result = allocate(0, options | RawData);
if (result) {
qt_noop(); 

result->offset = reinterpret_cast<const char *>(data)
- reinterpret_cast<const char *>(result);
result->size = int(n);
}
return result;
}

static QTypedArrayData *sharedNull()
{
enum {q_static_assert_result205 = sizeof(QStaticAssertFailure<!!(sizeof(QTypedArrayData) == sizeof(QArrayData))>)};
return static_cast<QTypedArrayData *>(QArrayData::sharedNull());
}

static QTypedArrayData *sharedEmpty()
{
enum {q_static_assert_result205 = sizeof(QStaticAssertFailure<!!(sizeof(QTypedArrayData) == sizeof(QArrayData))>)};
return allocate( 0);
}

static QTypedArrayData *unsharableEmpty()
{
enum {q_static_assert_result205 = sizeof(QStaticAssertFailure<!!(sizeof(QTypedArrayData) == sizeof(QArrayData))>)};
return allocate( 0, Unsharable);
}
};

template <class T, size_t N>
struct QStaticArrayData
{
QArrayData header;
T data[N];
};


template <class T>
struct QArrayDataPointerRef
{
QTypedArrayData<T> *ptr;
};





# 288 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"


















# 333 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"





namespace QtPrivate {
template <class T, size_t N>
inline QArrayDataPointerRef<T> qMakeArrayLiteral(const T (&array)[N])
{
union { T type_must_be_POD; } dummy; (void)dummy;

QArrayDataPointerRef<T> result = { QTypedArrayData<T>::allocate(N) };
do { if (!(result.ptr)) qBadAlloc(); } while (0);

::memcpy(result.ptr->data(), array, N * sizeof(T));
result.ptr->size = N;

return result;
}
}




# 358 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"






















# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"







 char *qstrdup(const char *);

inline uint qstrlen(const char *str)
{ return str ? uint(strlen(str)) : 0; }

inline uint qstrnlen(const char *str, uint maxlen)
{
uint length = 0;
if (str) {
while (length < maxlen && *str++)
length++;
}
return length;
}

 char *qstrcpy(char *dst, const char *src);
 char *qstrncpy(char *dst, const char *src, uint len);

 int qstrcmp(const char *str1, const char *str2);
 int qstrcmp(const QByteArray &str1, const QByteArray &str2);
 int qstrcmp(const QByteArray &str1, const char *str2);
static inline int qstrcmp(const char *str1, const QByteArray &str2)
{ return -qstrcmp(str2, str1); }

inline int qstrncmp(const char *str1, const char *str2, uint len)
{
return (str1 && str2) ? strncmp(str1, str2, len)
: (str1 ? 1 : (str2 ? -1 : 0));
}
 int qstricmp(const char *, const char *);
 int qstrnicmp(const char *, const char *, uint len);


 int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
 int qsnprintf(char *str, size_t n, const char *fmt, ...);



 quint16 qChecksum(const char *s, uint len);

class QByteRef;
class QString;
class QDataStream;
template <typename T> class QList;

typedef QArrayData QByteArrayData;

template<int N> struct QStaticByteArrayData
{
QByteArrayData ba;
char data[N + 1];

QByteArrayData *data_ptr() const
{
qt_noop();
return const_cast<QByteArrayData *>(&ba);
}
};

struct QByteArrayDataPtr
{
QByteArrayData *ptr;
};


# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"











# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"





# 170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
class  QByteArray
{
private:
typedef QTypedArrayData<char> Data;

public:
inline QByteArray();
QByteArray(const char *, int size = -1);
QByteArray(int size, char c);
QByteArray(int size, Qt::Initialization);
inline QByteArray(const QByteArray &);
inline ~QByteArray();

QByteArray &operator=(const QByteArray &);
QByteArray &operator=(const char *str);






# 191 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
inline void swap(QByteArray &other) { qSwap(d, other.d); }

inline int size() const;
bool isEmpty() const;
void resize(int size);

QByteArray &fill(char c, int size = -1);

int capacity() const;
void reserve(int size);
void squeeze();


# 204 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
operator const char *() const;
operator const void *() const;

# 207 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
char *data();
const char *data() const;
inline const char *constData() const;
inline void detach();
bool isDetached() const;
inline bool isSharedWith(const QByteArray &other) const { return d == other.d; }
void clear();

char at(int i) const;
char operator[](int i) const;
char operator[](uint i) const;
QByteRef operator[](int i);
QByteRef operator[](uint i);

int indexOf(char c, int from = 0) const;
int indexOf(const char *c, int from = 0) const;
int indexOf(const QByteArray &a, int from = 0) const;
int lastIndexOf(char c, int from = -1) const;
int lastIndexOf(const char *c, int from = -1) const;
int lastIndexOf(const QByteArray &a, int from = -1) const;

bool contains(char c) const;
bool contains(const char *a) const;
bool contains(const QByteArray &a) const;
int count(char c) const;
int count(const char *a) const;
int count(const QByteArray &a) const;

QByteArray left(int len) const;
QByteArray right(int len) const;
QByteArray mid(int index, int len = -1) const;

bool startsWith(const QByteArray &a) const;
bool startsWith(char c) const;
bool startsWith(const char *c) const;

bool endsWith(const QByteArray &a) const;
bool endsWith(char c) const;
bool endsWith(const char *c) const;

void truncate(int pos);
void chop(int n);

QByteArray toLower() const;
QByteArray toUpper() const;

QByteArray trimmed() const;
QByteArray simplified() const;
QByteArray leftJustified(int width, char fill = ' ', bool truncate = false) const;
QByteArray rightJustified(int width, char fill = ' ', bool truncate = false) const;

QByteArray &prepend(char c);
QByteArray &prepend(const char *s);
QByteArray &prepend(const char *s, int len);
QByteArray &prepend(const QByteArray &a);
QByteArray &append(char c);
QByteArray &append(const char *s);
QByteArray &append(const char *s, int len);
QByteArray &append(const QByteArray &a);
QByteArray &insert(int i, char c);
QByteArray &insert(int i, const char *s);
QByteArray &insert(int i, const char *s, int len);
QByteArray &insert(int i, const QByteArray &a);
QByteArray &remove(int index, int len);
QByteArray &replace(int index, int len, const char *s);
QByteArray &replace(int index, int len, const char *s, int alen);
QByteArray &replace(int index, int len, const QByteArray &s);
QByteArray &replace(char before, const char *after);
QByteArray &replace(char before, const QByteArray &after);
QByteArray &replace(const char *before, const char *after);
QByteArray &replace(const char *before, int bsize, const char *after, int asize);
QByteArray &replace(const QByteArray &before, const QByteArray &after);
QByteArray &replace(const QByteArray &before, const char *after);
QByteArray &replace(const char *before, const QByteArray &after);
QByteArray &replace(char before, char after);
QByteArray &operator+=(char c);
QByteArray &operator+=(const char *s);
QByteArray &operator+=(const QByteArray &a);

QList<QByteArray> split(char sep) const;

QByteArray repeated(int times) const;


# 291 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
 QByteArray &append(const QString &s);
 QByteArray &insert(int i, const QString &s);
 QByteArray &replace(const QString &before, const char *after);
 QByteArray &replace(char c, const QString &after);
 QByteArray &replace(const QString &before, const QByteArray &after);

 QByteArray &operator+=(const QString &s);
 int indexOf(const QString &s, int from = 0) const;
 int lastIndexOf(const QString &s, int from = -1) const;


# 302 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
inline  bool operator==(const QString &s2) const;
inline  bool operator!=(const QString &s2) const;
inline  bool operator<(const QString &s2) const;
inline  bool operator>(const QString &s2) const;
inline  bool operator<=(const QString &s2) const;
inline  bool operator>=(const QString &s2) const;


# 310 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
short toShort(bool *ok = 0, int base = 10) const;
ushort toUShort(bool *ok = 0, int base = 10) const;
int toInt(bool *ok = 0, int base = 10) const;
uint toUInt(bool *ok = 0, int base = 10) const;
long toLong(bool *ok = 0, int base = 10) const;
ulong toULong(bool *ok = 0, int base = 10) const;
qlonglong toLongLong(bool *ok = 0, int base = 10) const;
qulonglong toULongLong(bool *ok = 0, int base = 10) const;
float toFloat(bool *ok = 0) const;
double toDouble(bool *ok = 0) const;
QByteArray toBase64() const;
QByteArray toHex() const;
QByteArray toPercentEncoding(const QByteArray &exclude = QByteArray(),
const QByteArray &include = QByteArray(),
char percent = '%') const;

QByteArray &setNum(short, int base = 10);
QByteArray &setNum(ushort, int base = 10);
QByteArray &setNum(int, int base = 10);
QByteArray &setNum(uint, int base = 10);
QByteArray &setNum(qlonglong, int base = 10);
QByteArray &setNum(qulonglong, int base = 10);
QByteArray &setNum(float, char f = 'g', int prec = 6);
QByteArray &setNum(double, char f = 'g', int prec = 6);
QByteArray &setRawData(const char *a, uint n); 

static QByteArray number(int, int base = 10);
static QByteArray number(uint, int base = 10);
static QByteArray number(qlonglong, int base = 10);
static QByteArray number(qulonglong, int base = 10);
static QByteArray number(double, char f = 'g', int prec = 6);
static QByteArray fromRawData(const char *, int size);
static QByteArray fromBase64(const QByteArray &base64);
static QByteArray fromHex(const QByteArray &hexEncoded);
static QByteArray fromPercentEncoding(const QByteArray &pctEncoded, char percent = '%');


typedef char *iterator;
typedef const char *const_iterator;
typedef iterator Iterator;
typedef const_iterator ConstIterator;
iterator begin();
const_iterator begin() const;
const_iterator cbegin() const;
const_iterator constBegin() const;
iterator end();
const_iterator end() const;
const_iterator cend() const;
const_iterator constEnd() const;


typedef const char & const_reference;
typedef char & reference;
typedef char value_type;
void push_back(char c);
void push_back(const char *c);
void push_back(const QByteArray &a);
void push_front(char c);
void push_front(const char *c);
void push_front(const QByteArray &a);

inline int count() const { return d->size; }
int length() const { return d->size; }
bool isNull() const;

inline QByteArray(QByteArrayDataPtr dd)
: d(reinterpret_cast<Data *>(dd.ptr))
{
}

private:
operator QNoImplicitBoolCast() const;
Data *d;
void reallocData(uint alloc, Data::AllocationOptions options);
void expand(int i);
QByteArray nulTerminated() const;

friend class QByteRef;
friend class QString;
friend  QByteArray qUncompress(const uchar *data, int nbytes);
public:
typedef Data * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

inline QByteArray::QByteArray(): d(Data::sharedNull()) { }
inline QByteArray::~QByteArray() { if (!d->ref.deref()) Data::deallocate(d); }
inline int QByteArray::size() const
{ return d->size; }

inline char QByteArray::at(int i) const
{ qt_noop(); return d->data()[i]; }
inline char QByteArray::operator[](int i) const
{ qt_noop(); return d->data()[i]; }
inline char QByteArray::operator[](uint i) const
{ qt_noop(); return d->data()[i]; }

inline bool QByteArray::isEmpty() const
{ return d->size == 0; }

# 410 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
inline QByteArray::operator const char *() const
{ return d->data(); }
inline QByteArray::operator const void *() const
{ return d->data(); }

# 415 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
inline char *QByteArray::data()
{ detach(); return d->data(); }
inline const char *QByteArray::data() const
{ return d->data(); }
inline const char *QByteArray::constData() const
{ return d->data(); }
inline void QByteArray::detach()
{ if (d->ref.isShared() || (d->offset != sizeof(QByteArrayData))) reallocData(uint(d->size) + 1u, d->detachFlags()); }
inline bool QByteArray::isDetached() const
{ return !d->ref.isShared(); }
inline QByteArray::QByteArray(const QByteArray &a) : d(a.d)
{ d->ref.ref(); }

inline int QByteArray::capacity() const
{ return d->alloc ? d->alloc - 1 : 0; }

inline void QByteArray::reserve(int asize)
{
if (d->ref.isShared() || uint(asize) + 1u > d->alloc) {
reallocData(uint(asize) + 1u, d->detachFlags() | Data::CapacityReserved);
} else {


d->capacityReserved = true;
}
}

inline void QByteArray::squeeze()
{
if (d->ref.isShared() || uint(d->size) + 1u < d->alloc) {
reallocData(uint(d->size) + 1u, d->detachFlags() & ~Data::CapacityReserved);
} else {


d->capacityReserved = false;
}
}

class  QByteRef {
QByteArray &a;
int i;
inline QByteRef(QByteArray &array, int idx)
: a(array),i(idx) {}
friend class QByteArray;
public:
inline operator char() const
{ return i < a.d->size ? a.d->data()[i] : char(0); }
inline QByteRef &operator=(char c)
{ if (i >= a.d->size) a.expand(i); else a.detach();
a.d->data()[i] = c; return *this; }
inline QByteRef &operator=(const QByteRef &c)
{ if (i >= a.d->size) a.expand(i); else a.detach();
a.d->data()[i] = c.a.d->data()[c.i]; return *this; }
inline bool operator==(char c) const
{ return a.d->data()[i] == c; }
inline bool operator!=(char c) const
{ return a.d->data()[i] != c; }
inline bool operator>(char c) const
{ return a.d->data()[i] > c; }
inline bool operator>=(char c) const
{ return a.d->data()[i] >= c; }
inline bool operator<(char c) const
{ return a.d->data()[i] < c; }
inline bool operator<=(char c) const
{ return a.d->data()[i] <= c; }
};

inline QByteRef QByteArray::operator[](int i)
{ qt_noop(); return QByteRef(*this, i); }
inline QByteRef QByteArray::operator[](uint i)
{ return QByteRef(*this, i); }
inline QByteArray::iterator QByteArray::begin()
{ detach(); return d->data(); }
inline QByteArray::const_iterator QByteArray::begin() const
{ return d->data(); }
inline QByteArray::const_iterator QByteArray::cbegin() const
{ return d->data(); }
inline QByteArray::const_iterator QByteArray::constBegin() const
{ return d->data(); }
inline QByteArray::iterator QByteArray::end()
{ detach(); return d->data() + d->size; }
inline QByteArray::const_iterator QByteArray::end() const
{ return d->data() + d->size; }
inline QByteArray::const_iterator QByteArray::cend() const
{ return d->data() + d->size; }
inline QByteArray::const_iterator QByteArray::constEnd() const
{ return d->data() + d->size; }
inline QByteArray &QByteArray::operator+=(char c)
{ return append(c); }
inline QByteArray &QByteArray::operator+=(const char *s)
{ return append(s); }
inline QByteArray &QByteArray::operator+=(const QByteArray &a)
{ return append(a); }
inline void QByteArray::push_back(char c)
{ append(c); }
inline void QByteArray::push_back(const char *c)
{ append(c); }
inline void QByteArray::push_back(const QByteArray &a)
{ append(a); }
inline void QByteArray::push_front(char c)
{ prepend(c); }
inline void QByteArray::push_front(const char *c)
{ prepend(c); }
inline void QByteArray::push_front(const QByteArray &a)
{ prepend(a); }
inline bool QByteArray::contains(const QByteArray &a) const
{ return indexOf(a) != -1; }
inline bool QByteArray::contains(char c) const
{ return indexOf(c) != -1; }
inline bool operator==(const QByteArray &a1, const QByteArray &a2)
{ return (a1.size() == a2.size()) && (memcmp(a1.constData(), a2.constData(), a1.size())==0); }
inline bool operator==(const QByteArray &a1, const char *a2)
{ return a2 ? qstrcmp(a1,a2) == 0 : a1.isEmpty(); }
inline bool operator==(const char *a1, const QByteArray &a2)
{ return a1 ? qstrcmp(a1,a2) == 0 : a2.isEmpty(); }
inline bool operator!=(const QByteArray &a1, const QByteArray &a2)
{ return !(a1==a2); }
inline bool operator!=(const QByteArray &a1, const char *a2)
{ return a2 ? qstrcmp(a1,a2) != 0 : !a1.isEmpty(); }
inline bool operator!=(const char *a1, const QByteArray &a2)
{ return a1 ? qstrcmp(a1,a2) != 0 : !a2.isEmpty(); }
inline bool operator<(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<=(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator<=(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator<=(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator>(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>=(const QByteArray &a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const QByteArray &a1, const char *a2)
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const char *a1, const QByteArray &a2)
{ return qstrcmp(a1, a2) >= 0; }

# 561 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
inline const QByteArray operator+(const QByteArray &a1, const QByteArray &a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &a1, const char *a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &a1, char a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const char *a1, const QByteArray &a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(char a1, const QByteArray &a2)
{ return QByteArray(&a1, 1) += a2; }

# 572 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
inline bool QByteArray::contains(const char *c) const
{ return indexOf(c) != -1; }
inline QByteArray &QByteArray::replace(char before, const char *c)
{ return replace(&before, 1, c, qstrlen(c)); }
inline QByteArray &QByteArray::replace(const QByteArray &before, const char *c)
{ return replace(before.constData(), before.size(), c, qstrlen(c)); }
inline QByteArray &QByteArray::replace(const char *before, const char *after)
{ return replace(before, qstrlen(before), after, qstrlen(after)); }

inline QByteArray &QByteArray::setNum(short n, int base)
{ return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(ushort(n)), base); }
inline QByteArray &QByteArray::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &QByteArray::setNum(int n, int base)
{ return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(uint(n)), base); }
inline QByteArray &QByteArray::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &QByteArray::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }



# 594 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
 QDataStream &operator<<(QDataStream &, const QByteArray &);
 QDataStream &operator>>(QDataStream &, QByteArray &);



# 599 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
 QByteArray qCompress(const uchar* data, int nbytes, int compressionLevel = -1);
 QByteArray qUncompress(const uchar* data, int nbytes);
inline QByteArray qCompress(const QByteArray& data, int compressionLevel = -1)
{ return qCompress(reinterpret_cast<const uchar *>(data.constData()), data.size(), compressionLevel); }
inline QByteArray qUncompress(const QByteArray& data)
{ return qUncompress(reinterpret_cast<const uchar*>(data.constData()), data.size()); }


# 607 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
template<> class QTypeInfo<QByteArray > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QByteArray)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QByteArray) }; static inline const char *name() { return "QByteArray"; } }; template <> inline void qSwap<QByteArray>(QByteArray &value1, QByteArray &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QByteArray>(::QByteArray &value1, ::QByteArray &value2) { value1.swap(value2); } } 








# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



















# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



class QCharRef;
class QRegExp;
class QRegularExpression;
class QRegularExpressionMatch;
class QString;
class QStringList;
class QTextCodec;
class QStringRef;
template <typename T> class QVector;

class QLatin1String
{
public:
 inline explicit QLatin1String(const char *s) : m_size(s ? int(strlen(s)) : 0), m_data(s) {}
 inline explicit QLatin1String(const char *s, int sz) : m_size(sz), m_data(s) {}
inline explicit QLatin1String(const QByteArray &s) : m_size(int(qstrnlen(s.constData(), s.size()))), m_data(s.constData()) {}

inline const char *latin1() const { return m_data; }
inline int size() const { return m_size; }
inline const char *data() const { return m_data; }

inline bool operator==(const QString &s) const;
inline bool operator!=(const QString &s) const;
inline bool operator>(const QString &s) const;
inline bool operator<(const QString &s) const;
inline bool operator>=(const QString &s) const;
inline bool operator<=(const QString &s) const;


# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline  bool operator==(const char *s) const;
inline  bool operator!=(const char *s) const;
inline  bool operator<(const char *s) const;
inline  bool operator>(const char *s) const;
inline  bool operator<=(const char *s) const;
inline  bool operator>=(const char *s) const;

inline  bool operator==(const QByteArray &s) const;
inline  bool operator!=(const QByteArray &s) const;
inline  bool operator<(const QByteArray &s) const;
inline  bool operator>(const QByteArray &s) const;
inline  bool operator<=(const QByteArray &s) const;
inline  bool operator>=(const QByteArray &s) const;


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
private:
int m_size;
const char *m_data;
};
template<> class QTypeInfo<QLatin1String > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLatin1String)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QLatin1String) }; static inline const char *name() { return "QLatin1String"; } };


typedef QLatin1String QLatin1Literal;


typedef QTypedArrayData<ushort> QStringData;



















# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
typedef ushort qunicodechar;



# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
enum {q_static_assert_result150 = sizeof(QStaticAssertFailure<!!(sizeof(qunicodechar) == 2)>)};











# 172 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"











# 187 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
template <int N>
struct QStaticStringData
{
QArrayData str;
qunicodechar data[N + 1];

QStringData *data_ptr() const
{
qt_noop();
return const_cast<QStringData *>(static_cast<const QStringData*>(&str));
}
};

struct QStringDataPtr
{
QStringData *ptr;
};

class  QString
{
public:
typedef QStringData Data;

inline QString();
explicit QString(const QChar *unicode, int size = -1);
QString(QChar c);
QString(int size, QChar c);
inline QString(QLatin1String latin1);
inline QString(const QString &);
inline ~QString();
QString &operator=(QChar c);
QString &operator=(const QString &);
inline QString &operator=(QLatin1String latin1);





# 225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline void swap(QString &other) { qSwap(d, other.d); }
inline int size() const { return d->size; }
inline int count() const { return d->size; }
inline int length() const;
inline bool isEmpty() const;
void resize(int size);

QString &fill(QChar c, int size = -1);
void truncate(int pos);
void chop(int n);

int capacity() const;
inline void reserve(int size);
inline void squeeze();

inline const QChar *unicode() const;
inline QChar *data();
inline const QChar *data() const;
inline const QChar *constData() const;

inline void detach();
inline bool isDetached() const;
inline bool isSharedWith(const QString &other) const { return d == other.d; }
void clear();

inline const QChar at(int i) const;
const QChar operator[](int i) const;
QCharRef operator[](int i);
const QChar operator[](uint i) const;
QCharRef operator[](uint i);

QString arg(qlonglong a, int fieldwidth=0, int base=10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(qulonglong a, int fieldwidth=0, int base=10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(long a, int fieldwidth=0, int base=10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(ulong a, int fieldwidth=0, int base=10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(int a, int fieldWidth = 0, int base = 10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(uint a, int fieldWidth = 0, int base = 10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(short a, int fieldWidth = 0, int base = 10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(ushort a, int fieldWidth = 0, int base = 10,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(double a, int fieldWidth = 0, char fmt = 'g', int prec = -1,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(char a, int fieldWidth = 0,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(QChar a, int fieldWidth = 0,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(const QString &a, int fieldWidth = 0,
QChar fillChar = QLatin1Char(' ')) const ;
QString arg(const QString &a1, const QString &a2) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8) const ;
QString arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8, const QString &a9) const ;

QString &vsprintf(const char *format, va_list ap)







# 306 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
;
QString &sprintf(const char *format, ...)







# 315 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
;

int indexOf(QChar c, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(const QString &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(QLatin1String s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(const QStringRef &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(QChar c, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(const QString &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(QLatin1String s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(const QStringRef &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

inline bool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline bool contains(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline bool contains(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;


# 334 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
int indexOf(const QRegExp &, int from = 0) const;
int lastIndexOf(const QRegExp &, int from = -1) const;
inline bool contains(const QRegExp &rx) const { return indexOf(rx) != -1; }
int count(const QRegExp &) const;

int indexOf(QRegExp &, int from = 0) const;
int lastIndexOf(QRegExp &, int from = -1) const;
inline bool contains(QRegExp &rx) const { return indexOf(rx) != -1; }



# 345 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
int indexOf(const QRegularExpression &re, int from = 0) const;
int lastIndexOf(const QRegularExpression &re, int from = -1) const;
bool contains(const QRegularExpression &re) const;
bool contains(const QRegularExpression &re, QRegularExpressionMatch *match) const; 
int count(const QRegularExpression &re) const;


# 352 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
enum SectionFlag {
SectionDefault = 0x00,
SectionSkipEmpty = 0x01,
SectionIncludeLeadingSep = 0x02,
SectionIncludeTrailingSep = 0x04,
SectionCaseInsensitiveSeps = 0x08
};
typedef QFlags<SectionFlag> SectionFlags;

QString section(QChar sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;
QString section(const QString &in_sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;

# 364 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QString section(const QRegExp &reg, int start, int end = -1, SectionFlags flags = SectionDefault) const;


# 367 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QString section(const QRegularExpression &re, int start, int end = -1, SectionFlags flags = SectionDefault) const;

# 369 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QString left(int n) const ;
QString right(int n) const ;
QString mid(int position, int n = -1) const ;
QStringRef leftRef(int n) const ;
QStringRef rightRef(int n) const ;
QStringRef midRef(int position, int n = -1) const ;

bool startsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

QString leftJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const ;
QString rightJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const ;

QString toLower() const ;
QString toUpper() const ;
QString toCaseFolded() const ;

QString trimmed() const ;
QString simplified() const ;
QString toHtmlEscaped() const ;

QString &insert(int i, QChar c);
QString &insert(int i, const QChar *uc, int len);
inline QString &insert(int i, const QString &s) { return insert(i, s.constData(), s.length()); }
QString &insert(int i, QLatin1String s);
QString &append(QChar c);
QString &append(const QChar *uc, int len);
QString &append(const QString &s);
QString &append(const QStringRef &s);
QString &append(QLatin1String s);
inline QString &prepend(QChar c) { return insert(0, c); }
inline QString &prepend(const QString &s) { return insert(0, s); }
inline QString &prepend(QLatin1String s) { return insert(0, s); }

inline QString &operator+=(QChar c) {
if (d->ref.isShared() || uint(d->size) + 2u > d->alloc)
reallocData(uint(d->size) + 2u, true);
d->data()[d->size++] = c.unicode();
d->data()[d->size] = '\0';
return *this;
}

inline QString &operator+=(QChar::SpecialCharacter c) { return append(QChar(c)); }
inline QString &operator+=(const QString &s) { return append(s); }
inline QString &operator+=(const QStringRef &s) { return append(s); }
inline QString &operator+=(QLatin1String s) { return append(s); }

QString &remove(int i, int len);
QString &remove(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &remove(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(int i, int len, QChar after);
QString &replace(int i, int len, const QChar *s, int slen);
QString &replace(int i, int len, const QString &after);
QString &replace(QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(const QChar *before, int blen, const QChar *after, int alen, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(QLatin1String before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(const QString &before, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(const QString &before, const QString &after,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(QChar c, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
QString &replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

# 438 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QString &replace(const QRegExp &rx, const QString &after);
inline QString &remove(const QRegExp &rx)
{ return replace(rx, QString()); }


# 443 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QString &replace(const QRegularExpression &re, const QString &after);
inline QString &remove(const QRegularExpression &re)
{ return replace(re, QString()); }


# 448 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
enum SplitBehavior { KeepEmptyParts, SkipEmptyParts };

QStringList split(const QString &sep, SplitBehavior behavior = KeepEmptyParts,
Qt::CaseSensitivity cs = Qt::CaseSensitive) const ;
QStringList split(QChar sep, SplitBehavior behavior = KeepEmptyParts,
Qt::CaseSensitivity cs = Qt::CaseSensitive) const ;

# 455 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QStringList split(const QRegExp &sep, SplitBehavior behavior = KeepEmptyParts) const ;


# 458 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QStringList split(const QRegularExpression &sep, SplitBehavior behavior = KeepEmptyParts) const ;

# 460 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
enum NormalizationForm {
NormalizationForm_D,
NormalizationForm_C,
NormalizationForm_KD,
NormalizationForm_KC
};
QString normalized(NormalizationForm mode, QChar::UnicodeVersion version = QChar::Unicode_Unassigned) const ;

QString repeated(int times) const;

const ushort *utf16() const;

QByteArray toLatin1() const ;
QByteArray toUtf8() const ;
QByteArray toLocal8Bit() const ;
QVector<uint> toUcs4() const ;


static inline QString fromLatin1(const char *str, int size = -1)
{
QStringDataPtr dataPtr = { fromLatin1_helper(str, (str && size == -1) ? int(strlen(str)) : size) };
return QString(dataPtr);
}
static inline QString fromUtf8(const char *str, int size = -1)
{
return fromUtf8_helper(str, (str && size == -1) ? int(strlen(str)) : size);
}
static inline QString fromLocal8Bit(const char *str, int size = -1)
{
return fromLocal8Bit_helper(str, (str && size == -1) ? int(strlen(str)) : size);
}
static inline QString fromLatin1(const QByteArray &str)
{ return fromLatin1(str.data(), qstrnlen(str.constData(), str.size())); }
static inline QString fromUtf8(const QByteArray &str)
{ return fromUtf8(str.data(), qstrnlen(str.constData(), str.size())); }
static inline QString fromLocal8Bit(const QByteArray &str)
{ return fromLocal8Bit(str.data(), qstrnlen(str.constData(), str.size())); }
static QString fromUtf16(const ushort *, int size = -1);
static QString fromUcs4(const uint *, int size = -1);
static QString fromRawData(const QChar *, int size);










# 510 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline int toWCharArray(wchar_t *array) const;
static inline QString fromWCharArray(const wchar_t *string, int size = -1) ;

QString &setRawData(const QChar *unicode, int size);
QString &setUnicode(const QChar *unicode, int size);
inline QString &setUtf16(const ushort *utf16, int size);

int compare(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int compare(QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

static inline int compare(const QString &s1, const QString &s2, Qt::CaseSensitivity cs = Qt::CaseSensitive)
{ return s1.compare(s2, cs); }

static inline int compare(const QString &s1, QLatin1String s2,
Qt::CaseSensitivity cs = Qt::CaseSensitive)
{ return s1.compare(s2, cs); }
static inline int compare(QLatin1String s1, const QString &s2,
Qt::CaseSensitivity cs = Qt::CaseSensitive)
{ return -s2.compare(s1, cs); }

int compare(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
static int compare(const QString &s1, const QStringRef &s2,
Qt::CaseSensitivity = Qt::CaseSensitive);

int localeAwareCompare(const QString& s) const;
static int localeAwareCompare(const QString& s1, const QString& s2)
{ return s1.localeAwareCompare(s2); }

int localeAwareCompare(const QStringRef &s) const;
static int localeAwareCompare(const QString& s1, const QStringRef& s2);

short toShort(bool *ok=0, int base=10) const;
ushort toUShort(bool *ok=0, int base=10) const;
int toInt(bool *ok=0, int base=10) const;
uint toUInt(bool *ok=0, int base=10) const;
long toLong(bool *ok=0, int base=10) const;
ulong toULong(bool *ok=0, int base=10) const;
qlonglong toLongLong(bool *ok=0, int base=10) const;
qulonglong toULongLong(bool *ok=0, int base=10) const;
float toFloat(bool *ok=0) const;
double toDouble(bool *ok=0) const;

QString &setNum(short, int base=10);
QString &setNum(ushort, int base=10);
QString &setNum(int, int base=10);
QString &setNum(uint, int base=10);
QString &setNum(long, int base=10);
QString &setNum(ulong, int base=10);
QString &setNum(qlonglong, int base=10);
QString &setNum(qulonglong, int base=10);
QString &setNum(float, char f='g', int prec=6);
QString &setNum(double, char f='g', int prec=6);

static QString number(int, int base=10);
static QString number(uint, int base=10);
static QString number(long, int base=10);
static QString number(ulong, int base=10);
static QString number(qlonglong, int base=10);
static QString number(qulonglong, int base=10);
static QString number(double, char f='g', int prec=6);

friend  bool operator==(const QString &s1, const QString &s2);
friend  bool operator<(const QString &s1, const QString &s2);
friend inline bool operator>(const QString &s1, const QString &s2) { return s2 < s1; }
friend inline bool operator!=(const QString &s1, const QString &s2) { return !(s1 == s2); }
friend inline bool operator<=(const QString &s1, const QString &s2) { return !(s1 > s2); }
friend inline bool operator>=(const QString &s1, const QString &s2) { return !(s1 < s2); }

bool operator==(QLatin1String s) const;
bool operator<(QLatin1String s) const;
bool operator>(QLatin1String s) const;
inline bool operator!=(QLatin1String s) const { return !operator==(s); }
inline bool operator<=(QLatin1String s) const { return !operator>(s); }
inline bool operator>=(QLatin1String s) const { return !operator<(s); }



# 587 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline  QString(const char *ch)
: d(fromAscii_helper(ch, ch ? int(strlen(ch)) : -1))
{}
inline  QString(const QByteArray &a)
: d(fromAscii_helper(a.constData(), qstrnlen(a.constData(), a.size())))
{}
inline  QString &operator=(const char *ch)
{ return (*this = fromUtf8(ch)); }
inline  QString &operator=(const QByteArray &a)
{ return (*this = fromUtf8(a)); }
inline  QString &operator=(char c)
{ return (*this = QChar::fromLatin1(c)); }


inline  QString &prepend(const char *s)
{ return prepend(QString::fromUtf8(s)); }
inline  QString &prepend(const QByteArray &s)
{ return prepend(QString::fromUtf8(s)); }
inline  QString &append(const char *s)
{ return append(QString::fromUtf8(s)); }
inline  QString &append(const QByteArray &s)
{ return append(QString::fromUtf8(s)); }
inline  QString &operator+=(const char *s)
{ return append(QString::fromUtf8(s)); }
inline  QString &operator+=(const QByteArray &s)
{ return append(QString::fromUtf8(s)); }
inline  QString &operator+=(char c)
{ return append(QChar::fromLatin1(c)); }

inline  bool operator==(const char *s) const;
inline  bool operator!=(const char *s) const;
inline  bool operator<(const char *s) const;
inline  bool operator<=(const char *s) const;
inline  bool operator>(const char *s) const;
inline  bool operator>=(const char *s) const;

inline  bool operator==(const QByteArray &s) const;
inline  bool operator!=(const QByteArray &s) const;
inline  bool operator<(const QByteArray &s) const;
inline  bool operator>(const QByteArray &s) const;
inline  bool operator<=(const QByteArray &s) const;
inline  bool operator>=(const QByteArray &s) const;

friend inline  bool operator==(const char *s1, const QString &s2);
friend inline  bool operator!=(const char *s1, const QString &s2);
friend inline  bool operator<(const char *s1, const QString &s2);
friend inline  bool operator>(const char *s1, const QString &s2);
friend inline  bool operator<=(const char *s1, const QString &s2);
friend inline  bool operator>=(const char *s1, const QString &s2);

friend inline  bool operator==(const char *s1, const QStringRef &s2);
friend inline  bool operator!=(const char *s1, const QStringRef &s2);
friend inline  bool operator<(const char *s1, const QStringRef &s2);
friend inline  bool operator>(const char *s1, const QStringRef &s2);
friend inline  bool operator<=(const char *s1, const QStringRef &s2);
friend inline  bool operator>=(const char *s1, const QStringRef &s2);


# 645 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
typedef QChar *iterator;
typedef const QChar *const_iterator;
typedef iterator Iterator;
typedef const_iterator ConstIterator;
iterator begin();
const_iterator begin() const;
const_iterator cbegin() const;
const_iterator constBegin() const;
iterator end();
const_iterator end() const;
const_iterator cend() const;
const_iterator constEnd() const;


typedef const QChar & const_reference;
typedef QChar & reference;
typedef QChar value_type;
inline void push_back(QChar c) { append(c); }
inline void push_back(const QString &s) { append(s); }
inline void push_front(QChar c) { prepend(c); }
inline void push_front(const QString &s) { prepend(s); }

static inline QString fromStdString(const std::string &s);
inline std::string toStdString() const;
static inline QString fromStdWString(const std::wstring &s);
inline std::wstring toStdWString() const;


struct Null { };
static const Null null;
inline QString(const Null &): d(Data::sharedNull()) {}
inline QString &operator=(const Null &) { *this = QString(); return *this; }
inline bool isNull() const { return d == Data::sharedNull(); }


bool isSimpleText() const;
bool isRightToLeft() const;

QString(int size, Qt::Initialization);
 inline QString(QStringDataPtr dd) : d(dd.ptr) {}

private:









# 696 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
Data *d;

void reallocData(uint alloc, bool grow = false);
void expand(int i);
void updateProperties() const;
QString multiArg(int numArgs, const QString **args) const;
static int compare_helper(const QChar *data1, int length1,
const QChar *data2, int length2,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
static int compare_helper(const QChar *data1, int length1,
const char *data2, int length2,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
static int compare_helper(const QChar *data1, int length1,
QLatin1String s2,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
static int localeAwareCompare_helper(const QChar *data1, int length1,
const QChar *data2, int length2);
static Data *fromLatin1_helper(const char *str, int size = -1);
static Data *fromAscii_helper(const char *str, int size = -1);
static QString fromUtf8_helper(const char *str, int size);
static QString fromLocal8Bit_helper(const char *, int size);
static int toUcs4_helper(const ushort *uc, int length, uint *out);
void replace_helper(uint *indices, int nIndices, int blen, const QChar *after, int alen);
friend class QCharRef;
friend class QTextCodec;
friend class QStringRef;
friend class QByteArray;
friend class QCollator;
friend struct QAbstractConcatenable;

public:
typedef Data * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

inline QString::QString(QLatin1String aLatin1) : d(fromLatin1_helper(aLatin1.latin1(), aLatin1.size()))
{ }
inline int QString::length() const
{ return d->size; }
inline const QChar QString::at(int i) const
{ qt_noop(); return d->data()[i]; }
inline const QChar QString::operator[](int i) const
{ qt_noop(); return d->data()[i]; }
inline const QChar QString::operator[](uint i) const
{ qt_noop(); return d->data()[i]; }
inline bool QString::isEmpty() const
{ return d->size == 0; }
inline const QChar *QString::unicode() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline const QChar *QString::data() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QChar *QString::data()
{ detach(); return reinterpret_cast<QChar*>(d->data()); }
inline const QChar *QString::constData() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline void QString::detach()
{ if (d->ref.isShared() || (d->offset != sizeof(QStringData))) reallocData(uint(d->size) + 1u); }
inline bool QString::isDetached() const
{ return !d->ref.isShared(); }
inline QString &QString::operator=(QLatin1String s)
{
*this = fromLatin1(s.latin1(), s.size());
return *this;
}
inline void QString::clear()
{ if (!isNull()) *this = QString(); }
inline QString::QString(const QString &other) : d(other.d)
{ qt_noop(); d->ref.ref(); }
inline int QString::capacity() const
{ return d->alloc ? d->alloc - 1 : 0; }
inline QString &QString::setNum(short n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(int n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(long n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(ulong n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }
inline QString QString::arg(int a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(uint a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(long a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ulong a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(short a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ushort a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(const QString &a1, const QString &a2) const
{ const QString *args[2] = { &a1, &a2 }; return multiArg(2, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3) const
{ const QString *args[3] = { &a1, &a2, &a3 }; return multiArg(3, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4) const
{ const QString *args[4] = { &a1, &a2, &a3, &a4 }; return multiArg(4, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5) const
{ const QString *args[5] = { &a1, &a2, &a3, &a4, &a5 }; return multiArg(5, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6) const
{ const QString *args[6] = { &a1, &a2, &a3, &a4, &a5, &a6 }; return multiArg(6, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7) const
{ const QString *args[7] = { &a1, &a2, &a3, &a4, &a5, &a6, &a7 }; return multiArg(7, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8) const
{ const QString *args[8] = { &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8 }; return multiArg(8, args); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
const QString &a4, const QString &a5, const QString &a6,
const QString &a7, const QString &a8, const QString &a9) const
{ const QString *args[9] = { &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9 }; return multiArg(9, args); }

inline QString QString::section(QChar asep, int astart, int aend, SectionFlags aflags) const
{ return section(QString(asep), astart, aend, aflags); }

inline int QString::toWCharArray(wchar_t *array) const
{
if (sizeof(wchar_t) == sizeof(QChar)) {
memcpy(array, d->data(), sizeof(QChar) * size());
return size();
}
return toUcs4_helper(d->data(), size(), reinterpret_cast<uint *>(array));
}
inline QString QString::fromWCharArray(const wchar_t *string, int size)
{
return sizeof(wchar_t) == sizeof(QChar) ? fromUtf16(reinterpret_cast<const ushort *>(string), size)
: fromUcs4(reinterpret_cast<const uint *>(string), size);
}


class  QCharRef {
QString &s;
int i;
inline QCharRef(QString &str, int idx)
: s(str),i(idx) {}
friend class QString;
public:




inline operator QChar() const
{ return i < s.d->size ? s.d->data()[i] : 0; }
inline QCharRef &operator=(QChar c)
{ if (i >= s.d->size) s.expand(i); else s.detach();
s.d->data()[i] = c.unicode(); return *this; }



# 855 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline  QCharRef &operator=(char c)
{ return operator=(QChar::fromLatin1(c)); }
inline  QCharRef &operator=(uchar c)
{ return operator=(QChar::fromLatin1(c)); }

# 860 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline QCharRef &operator=(const QCharRef &c) { return operator=(QChar(c)); }
inline QCharRef &operator=(ushort rc) { return operator=(QChar(rc)); }
inline QCharRef &operator=(short rc) { return operator=(QChar(rc)); }
inline QCharRef &operator=(uint rc) { return operator=(QChar(rc)); }
inline QCharRef &operator=(int rc) { return operator=(QChar(rc)); }


inline bool isNull() const { return QChar(*this).isNull(); }
inline bool isPrint() const { return QChar(*this).isPrint(); }
inline bool isPunct() const { return QChar(*this).isPunct(); }
inline bool isSpace() const { return QChar(*this).isSpace(); }
inline bool isMark() const { return QChar(*this).isMark(); }
inline bool isLetter() const { return QChar(*this).isLetter(); }
inline bool isNumber() const { return QChar(*this).isNumber(); }
inline bool isLetterOrNumber() { return QChar(*this).isLetterOrNumber(); }
inline bool isDigit() const { return QChar(*this).isDigit(); }
inline bool isLower() const { return QChar(*this).isLower(); }
inline bool isUpper() const { return QChar(*this).isUpper(); }
inline bool isTitleCase() const { return QChar(*this).isTitleCase(); }

inline int digitValue() const { return QChar(*this).digitValue(); }
QChar toLower() const { return QChar(*this).toLower(); }
QChar toUpper() const { return QChar(*this).toUpper(); }
QChar toTitleCase () const { return QChar(*this).toTitleCase(); }

QChar::Category category() const { return QChar(*this).category(); }
QChar::Direction direction() const { return QChar(*this).direction(); }
QChar::Joining joining() const { return QChar(*this).joining(); }
bool hasMirrored() const { return QChar(*this).hasMirrored(); }
QChar mirroredChar() const { return QChar(*this).mirroredChar(); }
QString decomposition() const { return QChar(*this).decomposition(); }
QChar::Decomposition decompositionTag() const { return QChar(*this).decompositionTag(); }
uchar combiningClass() const { return QChar(*this).combiningClass(); }

inline QChar::Script script() const { return QChar(*this).script(); }

QChar::UnicodeVersion unicodeVersion() const { return QChar(*this).unicodeVersion(); }

inline uchar cell() const { return QChar(*this).cell(); }
inline uchar row() const { return QChar(*this).row(); }
inline void setCell(uchar cell);
inline void setRow(uchar row);




# 906 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
char toLatin1() const { return QChar(*this).toLatin1(); }
ushort unicode() const { return QChar(*this).unicode(); }
ushort& unicode() { return s.data()[i].unicode(); }

};
template<> class QTypeInfo<QCharRef > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QCharRef)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QCharRef) }; static inline const char *name() { return "QCharRef"; } };

inline void QCharRef::setRow(uchar arow) { QChar(*this).setRow(arow); }
inline void QCharRef::setCell(uchar acell) { QChar(*this).setCell(acell); }


inline QString::QString() : d(Data::sharedNull()) {}
inline QString::~QString() { if (!d->ref.deref()) Data::deallocate(d); }

inline void QString::reserve(int asize)
{
if (d->ref.isShared() || uint(asize) + 1u > d->alloc)
reallocData(uint(asize) + 1u);

if (!d->capacityReserved) {

d->capacityReserved = true;
}
}

inline void QString::squeeze()
{
if (d->ref.isShared() || uint(d->size) + 1u < d->alloc)
reallocData(uint(d->size) + 1u);

if (d->capacityReserved) {


d->capacityReserved = false;
}
}

inline QString &QString::setUtf16(const ushort *autf16, int asize)
{ return setUnicode(reinterpret_cast<const QChar *>(autf16), asize); }
inline QCharRef QString::operator[](int i)
{ qt_noop(); return QCharRef(*this, i); }
inline QCharRef QString::operator[](uint i)
{ return QCharRef(*this, i); }
inline QString::iterator QString::begin()
{ detach(); return reinterpret_cast<QChar*>(d->data()); }
inline QString::const_iterator QString::begin() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QString::const_iterator QString::cbegin() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QString::const_iterator QString::constBegin() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QString::iterator QString::end()
{ detach(); return reinterpret_cast<QChar*>(d->data() + d->size); }
inline QString::const_iterator QString::end() const
{ return reinterpret_cast<const QChar*>(d->data() + d->size); }
inline QString::const_iterator QString::cend() const
{ return reinterpret_cast<const QChar*>(d->data() + d->size); }
inline QString::const_iterator QString::constEnd() const
{ return reinterpret_cast<const QChar*>(d->data() + d->size); }
inline bool QString::contains(const QString &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QString::contains(const QStringRef &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QString::contains(QChar c, Qt::CaseSensitivity cs) const
{ return indexOf(c, 0, cs) != -1; }


inline bool operator==(QString::Null, QString::Null) { return true; }
inline bool operator==(QString::Null, const QString &s) { return s.isNull(); }
inline bool operator==(const QString &s, QString::Null) { return s.isNull(); }
inline bool operator!=(QString::Null, QString::Null) { return false; }
inline bool operator!=(QString::Null, const QString &s) { return !s.isNull(); }
inline bool operator!=(const QString &s, QString::Null) { return !s.isNull(); }

inline bool operator==(QLatin1String s1, QLatin1String s2)
{ return (s1.size() == s2.size() && !memcmp(s1.latin1(), s2.latin1(), s1.size())); }
inline bool operator!=(QLatin1String s1, QLatin1String s2)
{ return (s1.size() != s2.size() || memcmp(s1.latin1(), s2.latin1(), s1.size())); }
inline bool operator<(QLatin1String s1, QLatin1String s2)
{ int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
return (r < 0) || (r == 0 && s1.size() < s2.size()); }
inline bool operator<=(QLatin1String s1, QLatin1String s2)
{ int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
return (r < 0) || (r == 0 && s1.size() <= s2.size()); }
inline bool operator>(QLatin1String s1, QLatin1String s2)
{ int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
return (r > 0) || (r == 0 && s1.size() > s2.size()); }
inline bool operator>=(QLatin1String s1, QLatin1String s2)
{ int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
return (r > 0) || (r == 0 && s1.size() >= s2.size()); }

inline bool QLatin1String::operator==(const QString &s) const
{ return s == *this; }
inline bool QLatin1String::operator!=(const QString &s) const
{ return s != *this; }
inline bool QLatin1String::operator>(const QString &s) const
{ return s < *this; }
inline bool QLatin1String::operator<(const QString &s) const
{ return s > *this; }
inline bool QLatin1String::operator>=(const QString &s) const
{ return s <= *this; }
inline bool QLatin1String::operator<=(const QString &s) const
{ return s >= *this; }


# 1011 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline bool QString::operator==(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) == 0; }
inline bool QString::operator!=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) != 0; }
inline bool QString::operator<(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) < 0; }
inline bool QString::operator>(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) > 0; }
inline bool QString::operator<=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) <= 0; }
inline bool QString::operator>=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) >= 0; }

inline  bool operator==(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) == 0; }
inline  bool operator!=(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) != 0; }
inline  bool operator<(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) < 0; }
inline  bool operator>(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) > 0; }
inline  bool operator<=(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) <= 0; }
inline  bool operator>=(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) >= 0; }

inline  bool operator==(const char *s1, QLatin1String s2)
{ return QString::fromUtf8(s1) == s2; }
inline  bool operator!=(const char *s1, QLatin1String s2)
{ return QString::fromUtf8(s1) != s2; }
inline  bool operator<(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) < s2); }
inline  bool operator>(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) > s2); }
inline  bool operator<=(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) <= s2); }
inline  bool operator>=(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) >= s2); }

inline  bool QLatin1String::operator==(const char *s) const
{ return QString::fromUtf8(s) == *this; }
inline  bool QLatin1String::operator!=(const char *s) const
{ return QString::fromUtf8(s) != *this; }
inline  bool QLatin1String::operator<(const char *s) const
{ return QString::fromUtf8(s) > *this; }
inline  bool QLatin1String::operator>(const char *s) const
{ return QString::fromUtf8(s) < *this; }
inline  bool QLatin1String::operator<=(const char *s) const
{ return QString::fromUtf8(s) >= *this; }
inline  bool QLatin1String::operator>=(const char *s) const
{ return QString::fromUtf8(s) <= *this; }

inline  bool QLatin1String::operator==(const QByteArray &s) const
{ return QString::fromUtf8(s) == *this; }
inline  bool QLatin1String::operator!=(const QByteArray &s) const
{ return QString::fromUtf8(s) != *this; }
inline  bool QLatin1String::operator<(const QByteArray &s) const
{ return QString::fromUtf8(s) > *this; }
inline  bool QLatin1String::operator>(const QByteArray &s) const
{ return QString::fromUtf8(s) < *this; }
inline  bool QLatin1String::operator<=(const QByteArray &s) const
{ return QString::fromUtf8(s) >= *this; }
inline  bool QLatin1String::operator>=(const QByteArray &s) const
{ return QString::fromUtf8(s) <= *this; }

inline  bool QString::operator==(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) == 0; }
inline  bool QString::operator!=(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) != 0; }
inline  bool QString::operator<(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) < 0; }
inline  bool QString::operator>(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) > 0; }
inline  bool QString::operator<=(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) <= 0; }
inline  bool QString::operator>=(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) >= 0; }

inline bool QByteArray::operator==(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) == 0; }
inline bool QByteArray::operator!=(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) != 0; }
inline bool QByteArray::operator<(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) < 0; }
inline bool QByteArray::operator>(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) > 0; }
inline bool QByteArray::operator<=(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) <= 0; }
inline bool QByteArray::operator>=(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) >= 0; }



# 1104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline QByteArray &QByteArray::append(const QString &s)
{ return append(s.toUtf8()); }
inline QByteArray &QByteArray::insert(int i, const QString &s)
{ return insert(i, s.toUtf8()); }
inline QByteArray &QByteArray::replace(char c, const QString &after)
{ return replace(c, after.toUtf8()); }
inline QByteArray &QByteArray::replace(const QString &before, const char *after)
{ return replace(before.toUtf8(), after); }
inline QByteArray &QByteArray::replace(const QString &before, const QByteArray &after)
{ return replace(before.toUtf8(), after); }
inline QByteArray &QByteArray::operator+=(const QString &s)
{ return operator+=(s.toUtf8()); }
inline int QByteArray::indexOf(const QString &s, int from) const
{ return indexOf(s.toUtf8(), from); }
inline int QByteArray::lastIndexOf(const QString &s, int from) const
{ return lastIndexOf(s.toUtf8(), from); }



# 1123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline const QString operator+(const QString &s1, const QString &s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(const QString &s1, QChar s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(QChar s1, const QString &s2)
{ QString t(s1); t += s2; return t; }

# 1130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline  const QString operator+(const QString &s1, const char *s2)
{ QString t(s1); t += QString::fromUtf8(s2); return t; }
inline  const QString operator+(const char *s1, const QString &s2)
{ QString t = QString::fromUtf8(s1); t += s2; return t; }
inline  const QString operator+(char c, const QString &s)
{ QString t = s; t.prepend(QChar::fromLatin1(c)); return t; }
inline  const QString operator+(const QString &s, char c)
{ QString t = s; t += QChar::fromLatin1(c); return t; }
inline  const QString operator+(const QByteArray &ba, const QString &s)
{ QString t = QString::fromUtf8(ba); t += s; return t; }
inline  const QString operator+(const QString &s, const QByteArray &ba)
{ QString t(s); t += QString::fromUtf8(ba); return t; }



# 1145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline std::string QString::toStdString() const
{ const QByteArray asc = toUtf8(); return std::string(asc.constData(), asc.length()); }

inline QString QString::fromStdString(const std::string &s)
{ return fromUtf8(s.data(), int(s.size())); }

inline std::wstring QString::toStdWString() const
{
std::wstring str;
str.resize(length());







# 1162 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
str.resize(toWCharArray(&(*str.begin())));
return str;
}

inline QString QString::fromStdWString(const std::wstring &s)
{ return fromWCharArray(s.data(), int(s.size())); }


# 1170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
 QDataStream &operator<<(QDataStream &, const QString &);
 QDataStream &operator>>(QDataStream &, QString &);


# 1174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
template<> class QTypeInfo<QString > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QString)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QString) }; static inline const char *name() { return "QString"; } }; template <> inline void qSwap<QString>(QString &value1, QString &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QString>(::QString &value1, ::QString &value2) { value1.swap(value2); } } 
 inline QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type f1, QString::SectionFlags::enum_type f2) { return QFlags<QString::SectionFlags::enum_type>(f1) | f2; }  inline QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type f1, QFlags<QString::SectionFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QString::SectionFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


class  QStringRef {
const QString *m_string;
int m_position;
int m_size;
public:

inline QStringRef():m_string(0), m_position(0), m_size(0){}
inline QStringRef(const QString *string, int position, int size);
inline QStringRef(const QString *string);


inline QStringRef(const QStringRef &other)
:m_string(other.m_string), m_position(other.m_position), m_size(other.m_size)
{}


inline ~QStringRef(){}
inline const QString *string() const { return m_string; }
inline int position() const { return m_position; }
inline int size() const { return m_size; }
inline int count() const { return m_size; }
inline int length() const { return m_size; }

inline QStringRef &operator=(const QStringRef &other) {
m_string = other.m_string; m_position = other.m_position;
m_size = other.m_size; return *this;
}

int indexOf(const QString &str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(QChar ch, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(QLatin1String str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int indexOf(const QStringRef &str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(const QString &str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(QChar ch, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(QLatin1String str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int lastIndexOf(const QStringRef &str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

inline bool contains(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline bool contains(QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline bool contains(QLatin1String str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline bool contains(const QStringRef &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

int count(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int count(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

bool startsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool startsWith(const QStringRef &c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

bool endsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
bool endsWith(const QStringRef &c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

inline QStringRef &operator=(const QString *string);

inline const QChar *unicode() const {
if (!m_string)
return reinterpret_cast<const QChar *>(QString::Data::sharedNull()->data());
return m_string->unicode() + m_position;
}
inline const QChar *data() const { return unicode(); }
inline const QChar *constData() const { return unicode(); }





# 1248 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
QByteArray toLatin1() const ;
QByteArray toUtf8() const ;
QByteArray toLocal8Bit() const ;
QVector<uint> toUcs4() const ;

inline void clear() { m_string = 0; m_position = m_size = 0; }
QString toString() const;
inline bool isEmpty() const { return m_size == 0; }
inline bool isNull() const { return m_string == 0 || m_string->isNull(); }

QStringRef appendTo(QString *string) const;

inline const QChar at(int i) const
{ qt_noop(); return m_string->at(i + m_position); }


# 1264 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"

inline  bool operator==(const char *s) const;
inline  bool operator!=(const char *s) const;
inline  bool operator<(const char *s) const;
inline  bool operator<=(const char *s) const;
inline  bool operator>(const char *s) const;
inline  bool operator>=(const char *s) const;


# 1273 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
int compare(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int compare(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
int compare(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
static int compare(const QStringRef &s1, const QString &s2,
Qt::CaseSensitivity = Qt::CaseSensitive);
static int compare(const QStringRef &s1, const QStringRef &s2,
Qt::CaseSensitivity = Qt::CaseSensitive);
static int compare(const QStringRef &s1, QLatin1String s2,
Qt::CaseSensitivity cs = Qt::CaseSensitive);

int localeAwareCompare(const QString &s) const;
int localeAwareCompare(const QStringRef &s) const;
static int localeAwareCompare(const QStringRef &s1, const QString &s2);
static int localeAwareCompare(const QStringRef &s1, const QStringRef &s2);

QStringRef trimmed() const ;
short toShort(bool *ok = 0, int base = 10) const;
ushort toUShort(bool *ok = 0, int base = 10) const;
int toInt(bool *ok = 0, int base = 10) const;
uint toUInt(bool *ok = 0, int base = 10) const;
long toLong(bool *ok = 0, int base = 10) const;
ulong toULong(bool *ok = 0, int base = 10) const;
qlonglong toLongLong(bool *ok = 0, int base = 10) const;
qulonglong toULongLong(bool *ok = 0, int base = 10) const;
float toFloat(bool *ok = 0) const;
double toDouble(bool *ok = 0) const;
};
template<> class QTypeInfo<QStringRef > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QStringRef)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QStringRef) }; static inline const char *name() { return "QStringRef"; } };

inline QStringRef &QStringRef::operator=(const QString *aString)
{ m_string = aString; m_position = 0; m_size = aString?aString->size():0; return *this; }

inline QStringRef::QStringRef(const QString *aString, int aPosition, int aSize)
:m_string(aString), m_position(aPosition), m_size(aSize){}

inline QStringRef::QStringRef(const QString *aString)
:m_string(aString), m_position(0), m_size(aString?aString->size() : 0){}

 bool operator==(const QStringRef &s1,const QStringRef &s2);
inline bool operator!=(const QStringRef &s1,const QStringRef &s2)
{ return !(s1 == s2); }
 bool operator==(const QString &s1,const QStringRef &s2);
inline bool operator!=(const QString &s1,const QStringRef &s2)
{ return !(s1 == s2); }
inline bool operator==(const QStringRef &s1,const QString &s2)
{ return s2 == s1; }
inline bool operator!=(const QStringRef &s1,const QString &s2)
{ return s2 != s1; }
 bool operator==(QLatin1String s1, const QStringRef &s2);
inline bool operator!=(QLatin1String s1, const QStringRef &s2)
{ return !(s1 == s2); }
inline bool operator==(const QStringRef &s1, QLatin1String s2)
{ return s2 == s1; }
inline bool operator!=(const QStringRef &s1, QLatin1String s2)
{ return s2 != s1; }

 bool operator<(const QStringRef &s1,const QStringRef &s2);
inline bool operator>(const QStringRef &s1, const QStringRef &s2)
{ return s2 < s1; }
inline bool operator<=(const QStringRef &s1, const QStringRef &s2)
{ return !(s1 > s2); }
inline bool operator>=(const QStringRef &s1, const QStringRef &s2)
{ return !(s1 < s2); }


# 1338 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline  bool QStringRef::operator==(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) == 0; }
inline  bool QStringRef::operator!=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) != 0; }
inline  bool QStringRef::operator<(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) < 0; }
inline  bool QStringRef::operator<=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) > 0; }
inline  bool QStringRef::operator>(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) <= 0; }
inline  bool QStringRef::operator>=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) >= 0; }

inline  bool operator==(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) == 0; }
inline  bool operator!=(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) != 0; }
inline  bool operator<(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) < 0; }
inline  bool operator<=(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) > 0; }
inline  bool operator>(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) <= 0; }
inline  bool operator>=(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) >= 0; }


# 1365 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
inline int QString::compare(const QStringRef &s, Qt::CaseSensitivity cs) const
{ return QString::compare_helper(constData(), length(), s.constData(), s.length(), cs); }
inline int QString::compare(const QString &s1, const QStringRef &s2, Qt::CaseSensitivity cs)
{ return QString::compare_helper(s1.constData(), s1.length(), s2.constData(), s2.length(), cs); }
inline int QStringRef::compare(const QString &s, Qt::CaseSensitivity cs) const
{ return QString::compare_helper(constData(), length(), s.constData(), s.length(), cs); }
inline int QStringRef::compare(const QStringRef &s, Qt::CaseSensitivity cs) const
{ return QString::compare_helper(constData(), length(), s.constData(), s.length(), cs); }
inline int QStringRef::compare(QLatin1String s, Qt::CaseSensitivity cs) const
{ return QString::compare_helper(constData(), length(), s, cs); }
inline int QStringRef::compare(const QStringRef &s1, const QString &s2, Qt::CaseSensitivity cs)
{ return QString::compare_helper(s1.constData(), s1.length(), s2.constData(), s2.length(), cs); }
inline int QStringRef::compare(const QStringRef &s1, const QStringRef &s2, Qt::CaseSensitivity cs)
{ return QString::compare_helper(s1.constData(), s1.length(), s2.constData(), s2.length(), cs); }
inline int QStringRef::compare(const QStringRef &s1, QLatin1String s2, Qt::CaseSensitivity cs)
{ return QString::compare_helper(s1.constData(), s1.length(), s2, cs); }

inline int QString::localeAwareCompare(const QStringRef &s) const
{ return localeAwareCompare_helper(constData(), length(), s.constData(), s.length()); }
inline int QString::localeAwareCompare(const QString& s1, const QStringRef& s2)
{ return localeAwareCompare_helper(s1.constData(), s1.length(), s2.constData(), s2.length()); }
inline int QStringRef::localeAwareCompare(const QString &s) const
{ return QString::localeAwareCompare_helper(constData(), length(), s.constData(), s.length()); }
inline int QStringRef::localeAwareCompare(const QStringRef &s) const
{ return QString::localeAwareCompare_helper(constData(), length(), s.constData(), s.length()); }
inline int QStringRef::localeAwareCompare(const QStringRef &s1, const QString &s2)
{ return QString::localeAwareCompare_helper(s1.constData(), s1.length(), s2.constData(), s2.length()); }
inline int QStringRef::localeAwareCompare(const QStringRef &s1, const QStringRef &s2)
{ return QString::localeAwareCompare_helper(s1.constData(), s1.length(), s2.constData(), s2.length()); }

inline bool QStringRef::contains(const QString &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QStringRef::contains(QLatin1String s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QStringRef::contains(QChar c, Qt::CaseSensitivity cs) const
{ return indexOf(c, 0, cs) != -1; }
inline bool QStringRef::contains(const QStringRef &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }

namespace Qt {





# 1410 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"
}








# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"







namespace QAlgorithmsPrivate {

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan);
template <typename RandomAccessIterator, typename T>
inline void qSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy);

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qStableSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan);
template <typename RandomAccessIterator, typename T>
inline void qStableSortHelper(RandomAccessIterator, RandomAccessIterator, const T &);

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qLowerBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qUpperBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qBinaryFindHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);

}

template <typename InputIterator, typename OutputIterator>
inline OutputIterator qCopy(InputIterator begin, InputIterator end, OutputIterator dest)
{
while (begin != end)
*dest++ = *begin++;
return dest;
}

template <typename BiIterator1, typename BiIterator2>
inline BiIterator2 qCopyBackward(BiIterator1 begin, BiIterator1 end, BiIterator2 dest)
{
while (begin != end)
*--dest = *--end;
return dest;
}

template <typename InputIterator1, typename InputIterator2>
inline bool qEqual(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
{
for (; first1 != last1; ++first1, ++first2)
if (!(*first1 == *first2))
return false;
return true;
}

template <typename ForwardIterator, typename T>
inline void qFill(ForwardIterator first, ForwardIterator last, const T &val)
{
for (; first != last; ++first)
*first = val;
}

template <typename Container, typename T>
inline void qFill(Container &container, const T &val)
{
qFill(container.begin(), container.end(), val);
}

template <typename InputIterator, typename T>
inline InputIterator qFind(InputIterator first, InputIterator last, const T &val)
{
while (first != last && !(*first == val))
++first;
return first;
}

template <typename Container, typename T>
inline typename Container::const_iterator qFind(const Container &container, const T &val)
{
return qFind(container.constBegin(), container.constEnd(), val);
}

template <typename InputIterator, typename T, typename Size>
inline void qCount(InputIterator first, InputIterator last, const T &value, Size &n)
{
for (; first != last; ++first)
if (*first == value)
++n;
}

template <typename Container, typename T, typename Size>
inline void qCount(const Container &container, const T &value, Size &n)
{
qCount(container.constBegin(), container.constEnd(), value, n);
}












# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"
template <typename T>
class qLess
{
public:
inline bool operator()(const T &t1, const T &t2) const
{
return (t1 < t2);
}
};

template <typename T>
class qGreater
{
public:
inline bool operator()(const T &t1, const T &t2) const
{
return (t2 < t1);
}
};


# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"
template <typename RandomAccessIterator>
inline void qSort(RandomAccessIterator start, RandomAccessIterator end)
{
if (start != end)
QAlgorithmsPrivate::qSortHelper(start, end, *start);
}

template <typename RandomAccessIterator, typename LessThan>
inline void qSort(RandomAccessIterator start, RandomAccessIterator end, LessThan lessThan)
{
if (start != end)
QAlgorithmsPrivate::qSortHelper(start, end, *start, lessThan);
}

template<typename Container>
inline void qSort(Container &c)
{




# 194 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"
if (!c.empty())
QAlgorithmsPrivate::qSortHelper(c.begin(), c.end(), *c.begin());
}

template <typename RandomAccessIterator>
inline void qStableSort(RandomAccessIterator start, RandomAccessIterator end)
{
if (start != end)
QAlgorithmsPrivate::qStableSortHelper(start, end, *start);
}

template <typename RandomAccessIterator, typename LessThan>
inline void qStableSort(RandomAccessIterator start, RandomAccessIterator end, LessThan lessThan)
{
if (start != end)
QAlgorithmsPrivate::qStableSortHelper(start, end, *start, lessThan);
}

template<typename Container>
inline void qStableSort(Container &c)
{




# 219 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"
if (!c.empty())
QAlgorithmsPrivate::qStableSortHelper(c.begin(), c.end(), *c.begin());
}

template <typename RandomAccessIterator, typename T>
 RandomAccessIterator qLowerBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{



RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (*middle < value) {
begin = middle + 1;
n -= half + 1;
} else {
n = half;
}
}
return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qLowerBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
return QAlgorithmsPrivate::qLowerBoundHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
 typename Container::const_iterator qLowerBound(const Container &container, const T &value)
{
return QAlgorithmsPrivate::qLowerBoundHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename RandomAccessIterator, typename T>
 RandomAccessIterator qUpperBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{

RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (value < *middle) {
n = half;
} else {
begin = middle + 1;
n -= half + 1;
}
}
return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qUpperBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
return QAlgorithmsPrivate::qUpperBoundHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
 typename Container::const_iterator qUpperBound(const Container &container, const T &value)
{
return QAlgorithmsPrivate::qUpperBoundHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename RandomAccessIterator, typename T>
 RandomAccessIterator qBinaryFind(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{

RandomAccessIterator it = qLowerBound(begin, end, value);

if (it == end || value < *it)
return end;

return it;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qBinaryFind(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
return QAlgorithmsPrivate::qBinaryFindHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
 typename Container::const_iterator qBinaryFind(const Container &container, const T &value)
{
return QAlgorithmsPrivate::qBinaryFindHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename ForwardIterator>
 void qDeleteAll(ForwardIterator begin, ForwardIterator end)
{
while (begin != end) {
delete *begin;
++begin;
}
}

template <typename Container>
inline void qDeleteAll(const Container &c)
{
qDeleteAll(c.begin(), c.end());
}





namespace QAlgorithmsPrivate {

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan)
{
top:
int span = int(end - start);
if (span < 2)
return;

--end;
RandomAccessIterator low = start, high = end - 1;
RandomAccessIterator pivot = start + span / 2;

if (lessThan(*end, *start))
qSwap(*end, *start);
if (span == 2)
return;

if (lessThan(*pivot, *start))
qSwap(*pivot, *start);
if (lessThan(*end, *pivot))
qSwap(*end, *pivot);
if (span == 3)
return;

qSwap(*pivot, *end);

while (low < high) {
while (low < high && lessThan(*low, *end))
++low;

while (high > low && lessThan(*end, *high))
--high;

if (low < high) {
qSwap(*low, *high);
++low;
--high;
} else {
break;
}
}

if (lessThan(*low, *end))
++low;

qSwap(*end, *low);
qSortHelper(start, low, t, lessThan);

start = low + 1;
++end;
goto top;
}

template <typename RandomAccessIterator, typename T>
inline void qSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy)
{
qSortHelper(begin, end, dummy, qLess<T>());
}

template <typename RandomAccessIterator>
 void qReverse(RandomAccessIterator begin, RandomAccessIterator end)
{
--end;
while (begin < end)
qSwap(*begin++, *end--);
}

template <typename RandomAccessIterator>
 void qRotate(RandomAccessIterator begin, RandomAccessIterator middle, RandomAccessIterator end)
{
qReverse(begin, middle);
qReverse(middle, end);
qReverse(begin, end);
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qMerge(RandomAccessIterator begin, RandomAccessIterator pivot, RandomAccessIterator end, T &t, LessThan lessThan)
{
const int len1 = pivot - begin;
const int len2 = end - pivot;

if (len1 == 0 || len2 == 0)
return;

if (len1 + len2 == 2) {
if (lessThan(*(begin + 1), *(begin)))
qSwap(*begin, *(begin + 1));
return;
}

RandomAccessIterator firstCut;
RandomAccessIterator secondCut;
int len2Half;
if (len1 > len2) {
const int len1Half = len1 / 2;
firstCut = begin + len1Half;
secondCut = qLowerBound(pivot, end, *firstCut, lessThan);
len2Half = secondCut - pivot;
} else {
len2Half = len2 / 2;
secondCut = pivot + len2Half;
firstCut = qUpperBound(begin, pivot, *secondCut, lessThan);
}

qRotate(firstCut, pivot, secondCut);
const RandomAccessIterator newPivot = firstCut + len2Half;
qMerge(begin, firstCut, newPivot, t, lessThan);
qMerge(newPivot, secondCut, end, t, lessThan);
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 void qStableSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &t, LessThan lessThan)
{
const int span = end - begin;
if (span < 2)
return;

const RandomAccessIterator middle = begin + span / 2;
qStableSortHelper(begin, middle, t, lessThan);
qStableSortHelper(middle, end, t, lessThan);
qMerge(begin, middle, end, t, lessThan);
}

template <typename RandomAccessIterator, typename T>
inline void qStableSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy)
{
qStableSortHelper(begin, end, dummy, qLess<T>());
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qLowerBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
RandomAccessIterator middle;
int n = int(end - begin);
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (lessThan(*middle, value)) {
begin = middle + 1;
n -= half + 1;
} else {
n = half;
}
}
return begin;
}


template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qUpperBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
RandomAccessIterator middle;
int n = end - begin;
int half;

while (n > 0) {
half = n >> 1;
middle = begin + half;
if (lessThan(value, *middle)) {
n = half;
} else {
begin = middle + 1;
n -= half + 1;
}
}
return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
 RandomAccessIterator qBinaryFindHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
RandomAccessIterator it = qLowerBoundHelper(begin, end, value, lessThan);

if (it == end || lessThan(value, *it))
return end;

return it;
}

} 




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"










# 189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"













# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"



template <typename T> class QVector;
template <typename T> class QSet;

struct  QListData {
struct Data {
QtPrivate::RefCount ref;
int alloc, begin, end;
void *array[1];
};
enum { DataHeaderSize = sizeof(Data) - sizeof(void *) };

Data *detach(int alloc);
Data *detach_grow(int *i, int n);
void realloc(int alloc);
inline void dispose() { dispose(d); }
static void dispose(Data *d);
static const Data shared_null;
Data *d;
void **erase(void **xi);
void **append(int n);
void **append();
void **append(const QListData &l);
void **prepend();
void **insert(int i);
void remove(int i);
void remove(int i, int n);
void move(int from, int to);
inline int size() const { return d->end - d->begin; }
inline bool isEmpty() const { return d->end == d->begin; }
inline void **at(int i) const { return d->array + d->begin + i; }
inline void **begin() const { return d->array + d->begin; }
inline void **end() const { return d->array + d->end; }
};

template <typename T>
class QList
{
struct Node { void *v;



# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
inline T &t()
{ return *reinterpret_cast<T*>(QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic
? v : this); }

# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
};

union { QListData p; QListData::Data *d; };

public:
inline QList() : d(const_cast<QListData::Data *>(&QListData::shared_null)) { }
QList(const QList<T> &l);
~QList();
QList<T> &operator=(const QList<T> &l);





# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
inline void swap(QList<T> &other) { qSwap(d, other.d); }





# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
bool operator==(const QList<T> &l) const;
inline bool operator!=(const QList<T> &l) const { return !(*this == l); }

inline int size() const { return p.size(); }

inline void detach() { if (d->ref.isShared()) detach_helper(); }

inline void detachShared()
{

if (d->ref.isShared() && this->d != &QListData::shared_null)
detach_helper();
}

inline bool isDetached() const { return !d->ref.isShared(); }
inline void setSharable(bool sharable)
{
if (sharable == d->ref.isSharable())
return;
if (!sharable)
detach();
if (d != &QListData::shared_null)
d->ref.setSharable(sharable);
}
inline bool isSharedWith(const QList<T> &other) const { return d == other.d; }

inline bool isEmpty() const { return p.isEmpty(); }

void clear();

const T &at(int i) const;
const T &operator[](int i) const;
T &operator[](int i);

void reserve(int size);
void append(const T &t);
void append(const QList<T> &t);
void prepend(const T &t);
void insert(int i, const T &t);
void replace(int i, const T &t);
void removeAt(int i);
int removeAll(const T &t);
bool removeOne(const T &t);
T takeAt(int i);
T takeFirst();
T takeLast();
void move(int from, int to);
void swap(int i, int j);
int indexOf(const T &t, int from = 0) const;
int lastIndexOf(const T &t, int from = -1) const;
bool contains(const T &t) const;
int count(const T &t) const;

class const_iterator;

class iterator {
public:
Node *i;
typedef std::random_access_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;

inline iterator() : i(0) {}
inline iterator(Node *n) : i(n) {}
inline iterator(const iterator &o): i(o.i){}
inline T &operator*() const { return i->t(); }
inline T *operator->() const { return &i->t(); }
inline T &operator[](int j) const { return i[j].t(); }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator<(const iterator& other) const { return i < other.i; }
inline bool operator<=(const iterator& other) const { return i <= other.i; }
inline bool operator>(const iterator& other) const { return i > other.i; }
inline bool operator>=(const iterator& other) const { return i >= other.i; }

# 205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }
inline bool operator<(const const_iterator& other) const
{ return i < other.i; }
inline bool operator<=(const const_iterator& other) const
{ return i <= other.i; }
inline bool operator>(const const_iterator& other) const
{ return i > other.i; }
inline bool operator>=(const const_iterator& other) const
{ return i >= other.i; }

# 218 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
inline iterator &operator++() { ++i; return *this; }
inline iterator operator++(int) { Node *n = i; ++i; return n; }
inline iterator &operator--() { i--; return *this; }
inline iterator operator--(int) { Node *n = i; i--; return n; }
inline iterator &operator+=(int j) { i+=j; return *this; }
inline iterator &operator-=(int j) { i-=j; return *this; }
inline iterator operator+(int j) const { return iterator(i+j); }
inline iterator operator-(int j) const { return iterator(i-j); }
inline int operator-(iterator j) const { return int(i - j.i); }
};
friend class iterator;

class const_iterator {
public:
Node *i;
typedef std::random_access_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() : i(0) {}
inline const_iterator(Node *n) : i(n) {}
inline const_iterator(const const_iterator &o): i(o.i) {}



# 245 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
inline const_iterator(const iterator &o): i(o.i) {}

# 247 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
inline const T &operator*() const { return i->t(); }
inline const T *operator->() const { return &i->t(); }
inline const T &operator[](int j) const { return i[j].t(); }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline bool operator<(const const_iterator& other) const { return i < other.i; }
inline bool operator<=(const const_iterator& other) const { return i <= other.i; }
inline bool operator>(const const_iterator& other) const { return i > other.i; }
inline bool operator>=(const const_iterator& other) const { return i >= other.i; }
inline const_iterator &operator++() { ++i; return *this; }
inline const_iterator operator++(int) { Node *n = i; ++i; return n; }
inline const_iterator &operator--() { i--; return *this; }
inline const_iterator operator--(int) { Node *n = i; i--; return n; }
inline const_iterator &operator+=(int j) { i+=j; return *this; }
inline const_iterator &operator-=(int j) { i-=j; return *this; }
inline const_iterator operator+(int j) const { return const_iterator(i+j); }
inline const_iterator operator-(int j) const { return const_iterator(i-j); }
inline int operator-(const_iterator j) const { return i - j.i; }
};
friend class const_iterator;


inline iterator begin() { detach(); return reinterpret_cast<Node *>(p.begin()); }
inline const_iterator begin() const { return reinterpret_cast<Node *>(p.begin()); }
inline const_iterator cbegin() const { return reinterpret_cast<Node *>(p.begin()); }
inline const_iterator constBegin() const { return reinterpret_cast<Node *>(p.begin()); }
inline iterator end() { detach(); return reinterpret_cast<Node *>(p.end()); }
inline const_iterator end() const { return reinterpret_cast<Node *>(p.end()); }
inline const_iterator cend() const { return reinterpret_cast<Node *>(p.end()); }
inline const_iterator constEnd() const { return reinterpret_cast<Node *>(p.end()); }
iterator insert(iterator before, const T &t);
iterator erase(iterator pos);
iterator erase(iterator first, iterator last);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return p.size(); }
inline int length() const { return p.size(); } 
inline T& first() { qt_noop(); return *begin(); }
inline const T& first() const { qt_noop(); return at(0); }
T& last() { qt_noop(); return *(--end()); }
const T& last() const { qt_noop(); return at(count() - 1); }
inline void removeFirst() { qt_noop(); erase(begin()); }
inline void removeLast() { qt_noop(); erase(--end()); }
inline bool startsWith(const T &t) const { return !isEmpty() && first() == t; }
inline bool endsWith(const T &t) const { return !isEmpty() && last() == t; }
QList<T> mid(int pos, int length = -1) const;

T value(int i) const;
T value(int i, const T &defaultValue) const;


inline void push_back(const T &t) { append(t); }
inline void push_front(const T &t) { prepend(t); }
inline T& front() { return first(); }
inline const T& front() const { return first(); }
inline T& back() { return last(); }
inline const T& back() const { return last(); }
inline void pop_front() { removeFirst(); }
inline void pop_back() { removeLast(); }
inline bool empty() const { return isEmpty(); }
typedef int size_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef qptrdiff difference_type;


QList<T> &operator+=(const QList<T> &l);
inline QList<T> operator+(const QList<T> &l) const
{ QList n = *this; n += l; return n; }
inline QList<T> &operator+=(const T &t)
{ append(t); return *this; }
inline QList<T> &operator<< (const T &t)
{ append(t); return *this; }
inline QList<T> &operator<<(const QList<T> &l)
{ *this += l; return *this; }

QVector<T> toVector() const;
QSet<T> toSet() const;

static QList<T> fromVector(const QVector<T> &vector);
static QList<T> fromSet(const QSet<T> &set);

static inline QList<T> fromStdList(const std::list<T> &list)
{ QList<T> tmp; qCopy(list.begin(), list.end(), std::back_inserter(tmp)); return tmp; }
inline std::list<T> toStdList() const
{ std::list<T> tmp; qCopy(constBegin(), constEnd(), std::back_inserter(tmp)); return tmp; }

private:
Node *detach_helper_grow(int i, int n);
void detach_helper(int alloc);
void detach_helper();
void dealloc(QListData::Data *d);

void node_construct(Node *n, const T &t);
void node_destruct(Node *n);
void node_copy(Node *from, Node *to, Node *src);
void node_destruct(Node *from, Node *to);
};







# 357 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
template <typename T>
inline void QList<T>::node_construct(Node *n, const T &t)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) n->v = new T(t);
else if (QTypeInfo<T>::isComplex) new (n) T(t);






# 368 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"

else ::memcpy(n, static_cast<const void *>(&t), sizeof(T));

# 371 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"
}

template <typename T>
inline void QList<T>::node_destruct(Node *n)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) delete reinterpret_cast<T*>(n->v);
else if (QTypeInfo<T>::isComplex) reinterpret_cast<T*>(n)->~T();
}

template <typename T>
inline void QList<T>::node_copy(Node *from, Node *to, Node *src)
{
Node *current = from;
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
try {
while(current != to) {
current->v = new T(*reinterpret_cast<T*>(src->v));
++current;
++src;
}
} catch (...) {
while (current-- != from)
delete reinterpret_cast<T*>(current->v);
throw;
}

} else if (QTypeInfo<T>::isComplex) {
try {
while(current != to) {
new (current) T(*reinterpret_cast<T*>(src));
++current;
++src;
}
} catch (...) {
while (current-- != from)
(reinterpret_cast<T*>(current))->~T();
throw;
}
} else {
if (src != from && to - from > 0)
memcpy(from, src, (to - from) * sizeof(Node));
}
}

template <typename T>
inline void QList<T>::node_destruct(Node *from, Node *to)
{
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic)
while(from != to) --to, delete reinterpret_cast<T*>(to->v);
else if (QTypeInfo<T>::isComplex)
while (from != to) --to, reinterpret_cast<T*>(to)->~T();
}

template <typename T>
inline QList<T> &QList<T>::operator=(const QList<T> &l)
{
if (d != l.d) {
QList<T> tmp(l);
tmp.swap(*this);
}
return *this;
}
template <typename T>
inline typename QList<T>::iterator QList<T>::insert(iterator before, const T &t)
{
int iBefore = int(before.i - reinterpret_cast<Node *>(p.begin()));
Node *n = reinterpret_cast<Node *>(p.insert(iBefore));
try {
node_construct(n, t);
} catch (...) {
p.remove(iBefore);
throw;
}
return n;
}
template <typename T>
inline typename QList<T>::iterator QList<T>::erase(iterator it)
{ node_destruct(it.i);
return reinterpret_cast<Node *>(p.erase(reinterpret_cast<void**>(it.i))); }
template <typename T>
inline const T &QList<T>::at(int i) const
{ qt_noop();
return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline const T &QList<T>::operator[](int i) const
{ qt_noop();
return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline T &QList<T>::operator[](int i)
{ qt_noop();
detach(); return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline void QList<T>::removeAt(int i)
{ if(i >= 0 && i < p.size()) { detach();
node_destruct(reinterpret_cast<Node *>(p.at(i))); p.remove(i); } }
template <typename T>
inline T QList<T>::takeAt(int i)
{ qt_noop();
detach(); Node *n = reinterpret_cast<Node *>(p.at(i)); T t = n->t(); node_destruct(n);
p.remove(i); return t; }
template <typename T>
inline T QList<T>::takeFirst()
{ T t = first(); removeFirst(); return t; }
template <typename T>
inline T QList<T>::takeLast()
{ T t = last(); removeLast(); return t; }

template <typename T>
 void QList<T>::reserve(int alloc)
{
if (d->alloc < alloc) {
if (d->ref.isShared())
detach_helper(alloc);
else
p.realloc(alloc);
}
}

template <typename T>
 void QList<T>::append(const T &t)
{
if (d->ref.isShared()) {
Node *n = detach_helper_grow(INT_MAX, 1);
try {
node_construct(n, t);
} catch (...) {
--d->end;
throw;
}
} else {
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
Node *n = reinterpret_cast<Node *>(p.append());
try {
node_construct(n, t);
} catch (...) {
--d->end;
throw;
}
} else {
Node *n, copy;
node_construct(&copy, t); 
try {
n = reinterpret_cast<Node *>(p.append());;
} catch (...) {
node_destruct(&copy);
throw;
}
*n = copy;
}
}
}

template <typename T>
inline void QList<T>::prepend(const T &t)
{
if (d->ref.isShared()) {
Node *n = detach_helper_grow(0, 1);
try {
node_construct(n, t);
} catch (...) {
++d->begin;
throw;
}
} else {
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
Node *n = reinterpret_cast<Node *>(p.prepend());
try {
node_construct(n, t);
} catch (...) {
++d->begin;
throw;
}
} else {
Node *n, copy;
node_construct(&copy, t); 
try {
n = reinterpret_cast<Node *>(p.prepend());;
} catch (...) {
node_destruct(&copy);
throw;
}
*n = copy;
}
}
}

template <typename T>
inline void QList<T>::insert(int i, const T &t)
{
if (d->ref.isShared()) {
Node *n = detach_helper_grow(i, 1);
try {
node_construct(n, t);
} catch (...) {
p.remove(i);
throw;
}
} else {
if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
Node *n = reinterpret_cast<Node *>(p.insert(i));
try {
node_construct(n, t);
} catch (...) {
p.remove(i);
throw;
}
} else {
Node *n, copy;
node_construct(&copy, t); 
try {
n = reinterpret_cast<Node *>(p.insert(i));;
} catch (...) {
node_destruct(&copy);
throw;
}
*n = copy;
}
}
}

template <typename T>
inline void QList<T>::replace(int i, const T &t)
{
qt_noop();
detach();
reinterpret_cast<Node *>(p.at(i))->t() = t;
}

template <typename T>
inline void QList<T>::swap(int i, int j)
{
qt_noop();
detach();
void *t = d->array[d->begin + i];
d->array[d->begin + i] = d->array[d->begin + j];
d->array[d->begin + j] = t;
}

template <typename T>
inline void QList<T>::move(int from, int to)
{
qt_noop();
detach();
p.move(from, to);
}

template<typename T>
 QList<T> QList<T>::mid(int pos, int alength) const
{
if (alength < 0 || pos + alength > size())
alength = size() - pos;
if (pos == 0 && alength == size())
return *this;
QList<T> cpy;
if (alength <= 0)
return cpy;
cpy.reserve(alength);
cpy.d->end = alength;
try {
cpy.node_copy(reinterpret_cast<Node *>(cpy.p.begin()),
reinterpret_cast<Node *>(cpy.p.end()),
reinterpret_cast<Node *>(p.begin() + pos));
} catch (...) {

cpy.d->end = 0;
throw;
}
return cpy;
}

template<typename T>
 T QList<T>::value(int i) const
{
if (i < 0 || i >= p.size()) {
return T();
}
return reinterpret_cast<Node *>(p.at(i))->t();
}

template<typename T>
 T QList<T>::value(int i, const T& defaultValue) const
{
return ((i < 0 || i >= p.size()) ? defaultValue : reinterpret_cast<Node *>(p.at(i))->t());
}

template <typename T>
 typename QList<T>::Node *QList<T>::detach_helper_grow(int i, int c)
{
Node *n = reinterpret_cast<Node *>(p.begin());
QListData::Data *x = p.detach_grow(&i, c);
try {
node_copy(reinterpret_cast<Node *>(p.begin()),
reinterpret_cast<Node *>(p.begin() + i), n);
} catch (...) {
p.dispose();
d = x;
throw;
}
try {
node_copy(reinterpret_cast<Node *>(p.begin() + i + c),
reinterpret_cast<Node *>(p.end()), n + i);
} catch (...) {
node_destruct(reinterpret_cast<Node *>(p.begin()),
reinterpret_cast<Node *>(p.begin() + i));
p.dispose();
d = x;
throw;
}

if (!x->ref.deref())
dealloc(x);

return reinterpret_cast<Node *>(p.begin() + i);
}

template <typename T>
 void QList<T>::detach_helper(int alloc)
{
Node *n = reinterpret_cast<Node *>(p.begin());
QListData::Data *x = p.detach(alloc);
try {
node_copy(reinterpret_cast<Node *>(p.begin()), reinterpret_cast<Node *>(p.end()), n);
} catch (...) {
p.dispose();
d = x;
throw;
}

if (!x->ref.deref())
dealloc(x);
}

template <typename T>
 void QList<T>::detach_helper()
{
detach_helper(d->alloc);
}

template <typename T>
 QList<T>::QList(const QList<T> &l)
: d(l.d)
{
if (!d->ref.ref()) {
p.detach(d->alloc);

struct Cleanup
{
Cleanup(QListData::Data *d) : d_(d) {}
~Cleanup() { if (d_) QListData::dispose(d_); }

QListData::Data *d_;
} tryCatch(d);

node_copy(reinterpret_cast<Node *>(p.begin()),
reinterpret_cast<Node *>(p.end()),
reinterpret_cast<Node *>(l.p.begin()));
tryCatch.d_ = 0;
}
}

template <typename T>
 QList<T>::~QList()
{
if (!d->ref.deref())
dealloc(d);
}

template <typename T>
 bool QList<T>::operator==(const QList<T> &l) const
{
if (p.size() != l.p.size())
return false;
if (d == l.d)
return true;
Node *i = reinterpret_cast<Node *>(p.end());
Node *b = reinterpret_cast<Node *>(p.begin());
Node *li = reinterpret_cast<Node *>(l.p.end());
while (i != b) {
--i; --li;
if (!(i->t() == li->t()))
return false;
}
return true;
}

template <typename T>
 void QList<T>::dealloc(QListData::Data *data)
{
node_destruct(reinterpret_cast<Node *>(data->array + data->begin),
reinterpret_cast<Node *>(data->array + data->end));
QListData::dispose(data);
}


template <typename T>
 void QList<T>::clear()
{
*this = QList<T>();
}

template <typename T>
 int QList<T>::removeAll(const T &_t)
{
int index = indexOf(_t);
if (index == -1)
return 0;

const T t = _t;
detach();

Node *i = reinterpret_cast<Node *>(p.at(index));
Node *e = reinterpret_cast<Node *>(p.end());
Node *n = i;
node_destruct(i);
while (++i != e) {
if (i->t() == t)
node_destruct(i);
else
*n++ = *i;
}

int removedCount = e - n;
d->end -= removedCount;
return removedCount;
}

template <typename T>
 bool QList<T>::removeOne(const T &_t)
{
int index = indexOf(_t);
if (index != -1) {
removeAt(index);
return true;
}
return false;
}

template <typename T>
 typename QList<T>::iterator QList<T>::erase(typename QList<T>::iterator afirst,
typename QList<T>::iterator alast)
{
for (Node *n = afirst.i; n < alast.i; ++n)
node_destruct(n);
int idx = afirst - begin();
p.remove(idx, alast - afirst);
return begin() + idx;
}

template <typename T>
 QList<T> &QList<T>::operator+=(const QList<T> &l)
{
if (!l.isEmpty()) {
if (isEmpty()) {
*this = l;
} else {
Node *n = (d->ref.isShared())
? detach_helper_grow(INT_MAX, l.size())
: reinterpret_cast<Node *>(p.append(l.p));
try {
node_copy(n, reinterpret_cast<Node *>(p.end()),
reinterpret_cast<Node *>(l.p.begin()));
} catch (...) {

d->end -= int(reinterpret_cast<Node *>(p.end()) - n);
throw;
}
}
}
return *this;
}

template <typename T>
inline void QList<T>::append(const QList<T> &t)
{
*this += t;
}

template <typename T>
 int QList<T>::indexOf(const T &t, int from) const
{
if (from < 0)
from = qMax(from + p.size(), 0);
if (from < p.size()) {
Node *n = reinterpret_cast<Node *>(p.at(from -1));
Node *e = reinterpret_cast<Node *>(p.end());
while (++n != e)
if (n->t() == t)
return int(n - reinterpret_cast<Node *>(p.begin()));
}
return -1;
}

template <typename T>
 int QList<T>::lastIndexOf(const T &t, int from) const
{
if (from < 0)
from += p.size();
else if (from >= p.size())
from = p.size()-1;
if (from >= 0) {
Node *b = reinterpret_cast<Node *>(p.begin());
Node *n = reinterpret_cast<Node *>(p.at(from + 1));
while (n-- != b) {
if (n->t() == t)
return n - b;
}
}
return -1;
}

template <typename T>
 bool QList<T>::contains(const T &t) const
{
Node *b = reinterpret_cast<Node *>(p.begin());
Node *i = reinterpret_cast<Node *>(p.end());
while (i-- != b)
if (i->t() == t)
return true;
return false;
}

template <typename T>
 int QList<T>::count(const T &t) const
{
int c = 0;
Node *b = reinterpret_cast<Node *>(p.begin());
Node *i = reinterpret_cast<Node *>(p.end());
while (i-- != b)
if (i->t() == t)
++c;
return c;
}

template <class T> class QListIterator { typedef typename QList<T>::const_iterator const_iterator; QList<T> c; const_iterator i; public: inline QListIterator(const QList<T> &container) : c(container), i(c.constBegin()) {} inline QListIterator &operator=(const QList<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableListIterator { typedef typename QList<T>::iterator iterator; typedef typename QList<T>::const_iterator const_iterator; QList<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableListIterator(QList<T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableListIterator() { c->setSharable(true); } inline QMutableListIterator &operator=(QList<T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"


template <typename T>
struct QScopedPointerDeleter
{
static inline void cleanup(T *pointer)
{



typedef char IsIncompleteType[ sizeof(T) ? 1 : -1 ];
(void) sizeof(IsIncompleteType);

delete pointer;
}
};

template <typename T>
struct QScopedPointerArrayDeleter
{
static inline void cleanup(T *pointer)
{



typedef char IsIncompleteType[ sizeof(T) ? 1 : -1 ];
(void) sizeof(IsIncompleteType);

delete [] pointer;
}
};

struct QScopedPointerPodDeleter
{
static inline void cleanup(void *pointer) { if (pointer) free(pointer); }
};

template <typename T, typename Cleanup = QScopedPointerDeleter<T> >
class QScopedPointer
{
typedef T *QScopedPointer:: *RestrictedBool;
public:
explicit inline QScopedPointer(T *p = 0) : d(p)
{
}

inline ~QScopedPointer()
{
T *oldD = this->d;
Cleanup::cleanup(oldD);
}

inline T &operator*() const
{
qt_noop();
return *d;
}

inline T *operator->() const
{
qt_noop();
return d;
}

inline bool operator!() const
{
return !d;
}







# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"
inline operator RestrictedBool() const
{
return isNull() ? 0 : &QScopedPointer::d;
}


# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"
inline T *data() const
{
return d;
}

inline bool isNull() const
{
return !d;
}

inline void reset(T *other = 0)
{
if (d == other)
return;
T *oldD = d;
d = other;
Cleanup::cleanup(oldD);
}

inline T *take()
{
T *oldD = d;
d = 0;
return oldD;
}

inline void swap(QScopedPointer<T, Cleanup> &other)
{
qSwap(d, other.d);
}

typedef T *pointer;

protected:
T *d;

private:
QScopedPointer(const QScopedPointer &) ; QScopedPointer &operator=(const QScopedPointer &) ;
};

template <class T, class Cleanup>
inline bool operator==(const QScopedPointer<T, Cleanup> &lhs, const QScopedPointer<T, Cleanup> &rhs)
{
return lhs.data() == rhs.data();
}

template <class T, class Cleanup>
inline bool operator!=(const QScopedPointer<T, Cleanup> &lhs, const QScopedPointer<T, Cleanup> &rhs)
{
return lhs.data() != rhs.data();
}

template <class T, class Cleanup>
inline void qSwap(QScopedPointer<T, Cleanup> &p1, QScopedPointer<T, Cleanup> &p2)
{ p1.swap(p2); }


namespace std {
template <class T, class Cleanup>
inline void swap(::QScopedPointer<T, Cleanup> &p1, ::QScopedPointer<T, Cleanup> &p2)
{ p1.swap(p2); }
}




namespace QtPrivate {
template <typename X, typename Y> struct QScopedArrayEnsureSameType;
template <typename X> struct QScopedArrayEnsureSameType<X,X> { typedef X* Type; };
template <typename X> struct QScopedArrayEnsureSameType<const X, X> { typedef X* Type; };
}

template <typename T, typename Cleanup = QScopedPointerArrayDeleter<T> >
class QScopedArrayPointer : public QScopedPointer<T, Cleanup>
{
public:
inline QScopedArrayPointer() : QScopedPointer<T, Cleanup>(0) {}

template <typename D>
explicit inline QScopedArrayPointer(D *p, typename QtPrivate::QScopedArrayEnsureSameType<T,D>::Type = 0)
: QScopedPointer<T, Cleanup>(p)
{
}

inline T &operator[](int i)
{
return this->d[i];
}

inline const T &operator[](int i) const
{
return this->d[i];
}

private:
explicit inline QScopedArrayPointer(void *) {








}

QScopedArrayPointer(const QScopedArrayPointer &) ; QScopedArrayPointer &operator=(const QScopedArrayPointer &) ;
};




# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvarlengtharray.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontainerfwd.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontainerfwd.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontainerfwd.h"



template <class Key, class T> class QCache;
template <class Key, class T> class QHash;
template <class T> class QLinkedList;
template <class T> class QList;
template <class Key, class T> class QMap;
template <class Key, class T> class QMultiHash;
template <class Key, class T> class QMultiMap;
template <class T1, class T2> struct QPair;
template <class T> class QQueue;
template <class T> class QSet;
template <class T> class QStack;
template<class T, int Prealloc = 256> class QVarLengthArray;
template <class T> class QVector;




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvarlengtharray.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvarlengtharray.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"



































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvarlengtharray.h"






# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvarlengtharray.h"



template<class T, int Prealloc>
class QPodList;


template<class T, int Prealloc>
class QVarLengthArray
{
public:
inline explicit QVarLengthArray(int size = 0);

inline QVarLengthArray(const QVarLengthArray<T, Prealloc> &other)
: a(Prealloc), s(0), ptr(reinterpret_cast<T *>(array))
{
append(other.constData(), other.size());
}

inline ~QVarLengthArray() {
if (QTypeInfo<T>::isComplex) {
T *i = ptr + s;
while (i-- != ptr)
i->~T();
}
if (ptr != reinterpret_cast<T *>(array))
free(ptr);
}
inline QVarLengthArray<T, Prealloc> &operator=(const QVarLengthArray<T, Prealloc> &other)
{
if (this != &other) {
clear();
append(other.constData(), other.size());
}
return *this;
}

inline void removeLast() {
qt_noop();
realloc(s - 1, a);
}
inline int size() const { return s; }
inline int count() const { return s; }
inline int length() const { return s; }
inline T& first() { qt_noop(); return *begin(); }
inline const T& first() const { qt_noop(); return *begin(); }
T& last() { qt_noop(); return *(end() - 1); }
const T& last() const { qt_noop(); return *(end() - 1); }
inline bool isEmpty() const { return (s == 0); }
inline void resize(int size);
inline void clear() { resize(0); }
inline void squeeze();

inline int capacity() const { return a; }
inline void reserve(int size);

inline T &operator[](int idx) {
qt_noop();
return ptr[idx];
}
inline const T &operator[](int idx) const {
qt_noop();
return ptr[idx];
}
inline const T &at(int idx) const { return operator[](idx); }

T value(int i) const;
T value(int i, const T &defaultValue) const;

inline void append(const T &t) {
if (s == a) 
realloc(s, s<<1);
const int idx = s++;
if (QTypeInfo<T>::isComplex) {
new (ptr + idx) T(t);
} else {
ptr[idx] = t;
}
}
void append(const T *buf, int size);
inline QVarLengthArray<T, Prealloc> &operator<<(const T &t)
{ append(t); return *this; }
inline QVarLengthArray<T, Prealloc> &operator+=(const T &t)
{ append(t); return *this; }

void prepend(const T &t);
void insert(int i, const T &t);
void insert(int i, int n, const T &t);
void replace(int i, const T &t);
void remove(int i);
void remove(int i, int n);


inline T *data() { return ptr; }
inline const T *data() const { return ptr; }
inline const T * constData() const { return ptr; }
typedef int size_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef qptrdiff difference_type;


typedef T* iterator;
typedef const T* const_iterator;

inline iterator begin() { return ptr; }
inline const_iterator begin() const { return ptr; }
inline const_iterator cbegin() const { return ptr; }
inline const_iterator constBegin() const { return ptr; }
inline iterator end() { return ptr + s; }
inline const_iterator end() const { return ptr + s; }
inline const_iterator cend() const { return ptr + s; }
inline const_iterator constEnd() const { return ptr + s; }
iterator insert(const_iterator before, int n, const T &x);
inline iterator insert(const_iterator before, const T &x) { return insert(before, 1, x); }
iterator erase(const_iterator begin, const_iterator end);
inline iterator erase(const_iterator pos) { return erase(pos, pos+1); }


inline bool empty() const { return isEmpty(); }
inline void push_back(const T &t) { append(t); }
inline void pop_back() { removeLast(); }
inline T &front() { return first(); }
inline const T &front() const { return first(); }
inline T &back() { return last(); }
inline const T &back() const { return last(); }

private:
friend class QPodList<T, Prealloc>;
void realloc(int size, int alloc);

int a; 
int s; 
T *ptr; 
union {
char array[Prealloc * sizeof(T)];
qint64 q_for_alignment_1;
double q_for_alignment_2;
};
};

template <class T, int Prealloc>
inline QVarLengthArray<T, Prealloc>::QVarLengthArray(int asize)
: s(asize) {
enum {q_static_assert_result53 = sizeof(QStaticAssertFailure<!!(Prealloc > 0)>)};
qt_noop();
if (s > Prealloc) {
ptr = reinterpret_cast<T *>(malloc(s * sizeof(T)));
do { if (!(ptr)) qBadAlloc(); } while (0);
a = s;
} else {
ptr = reinterpret_cast<T *>(array);
a = Prealloc;
}
if (QTypeInfo<T>::isComplex) {
T *i = ptr + s;
while (i != ptr)
new (--i) T;
}
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::resize(int asize)
{ realloc(asize, qMax(asize, a)); }

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::reserve(int asize)
{ if (asize > a) realloc(s, asize); }

template <class T, int Prealloc>
 void QVarLengthArray<T, Prealloc>::append(const T *abuf, int increment)
{
qt_noop();
if (increment <= 0)
return;

const int asize = s + increment;

if (asize >= a)
realloc(s, qMax(s*2, asize));

if (QTypeInfo<T>::isComplex) {

while (s < asize)
new (ptr+(s++)) T(*abuf++);
} else {
memcpy(&ptr[s], abuf, increment * sizeof(T));
s = asize;
}
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::squeeze()
{ realloc(s, s); }

template <class T, int Prealloc>
 void QVarLengthArray<T, Prealloc>::realloc(int asize, int aalloc)
{
qt_noop();
T *oldPtr = ptr;
int osize = s;

const int copySize = qMin(asize, osize);
if (aalloc != a) {
if (aalloc > Prealloc) {
T* newPtr = reinterpret_cast<T *>(malloc(aalloc * sizeof(T)));
do { if (!(newPtr)) qBadAlloc(); } while (0); 

ptr = newPtr;
a = aalloc;
} else {
ptr = reinterpret_cast<T *>(array);
a = Prealloc;
}
s = 0;
if (QTypeInfo<T>::isStatic) {
try {

while (s < copySize) {
new (ptr+s) T(*(oldPtr+s));
(oldPtr+s)->~T();
s++;
}
} catch (...) {

int sClean = s;
while (sClean < osize)
(oldPtr+(sClean++))->~T();
if (oldPtr != reinterpret_cast<T *>(array) && oldPtr != ptr)
free(oldPtr);
throw;
}
} else {
memcpy(ptr, oldPtr, copySize * sizeof(T));
}
}
s = copySize;

if (QTypeInfo<T>::isComplex) {

while (osize > asize)
(oldPtr+(--osize))->~T();
}

if (oldPtr != reinterpret_cast<T *>(array) && oldPtr != ptr)
free(oldPtr);

if (QTypeInfo<T>::isComplex) {

while (s < asize)
new (ptr+(s++)) T;
} else {
s = asize;
}
}

template <class T, int Prealloc>
 T QVarLengthArray<T, Prealloc>::value(int i) const
{
if (i < 0 || i >= size()) {
return T();
}
return at(i);
}
template <class T, int Prealloc>
 T QVarLengthArray<T, Prealloc>::value(int i, const T &defaultValue) const
{
return (i < 0 || i >= size()) ? defaultValue : at(i);
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::insert(int i, const T &t)
{ qt_noop();
insert(begin() + i, 1, t); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::insert(int i, int n, const T &t)
{ qt_noop();
insert(begin() + i, n, t); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::remove(int i, int n)
{ qt_noop();
erase(begin() + i, begin() + i + n); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::remove(int i)
{ qt_noop();
erase(begin() + i, begin() + i + 1); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::prepend(const T &t)
{ insert(begin(), 1, t); }

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::replace(int i, const T &t)
{
qt_noop();
const T copy(t);
data()[i] = copy;
}


template <class T, int Prealloc>
 typename QVarLengthArray<T, Prealloc>::iterator QVarLengthArray<T, Prealloc>::insert(const_iterator before, size_type n, const T &t)
{
int offset = int(before - ptr);
if (n != 0) {
resize(s + n);
const T copy(t);
if (QTypeInfo<T>::isStatic) {
T *b = ptr + offset;
T *j = ptr + s;
T *i = j - n;
while (i != b)
*--j = *--i;
i = b + n;
while (i != b)
*--i = copy;
} else {
T *b = ptr + offset;
T *i = b + n;
memmove(i, b, (s - offset - n) * sizeof(T));
while (i != b)
new (--i) T(copy);
}
}
return ptr + offset;
}

template <class T, int Prealloc>
 typename QVarLengthArray<T, Prealloc>::iterator QVarLengthArray<T, Prealloc>::erase(const_iterator abegin, const_iterator aend)
{
int f = int(abegin - ptr);
int l = int(aend - ptr);
int n = l - f;
if (QTypeInfo<T>::isComplex) {
qCopy(ptr + l, ptr + s, ptr + f);
T *i = ptr + s;
T *b = ptr + s - n;
while (i != b) {
--i;
i->~T();
}
} else {
memmove(ptr + f, ptr + l, (s - l) * sizeof(T));
}
s -= n;
return ptr + f;
}

template <typename T, int Prealloc1, int Prealloc2>
bool operator==(const QVarLengthArray<T, Prealloc1> &l, const QVarLengthArray<T, Prealloc2> &r)
{
if (l.size() != r.size())
return false;
for (int i = 0; i < l.size(); i++) {
if (l.at(i) != r.at(i))
return false;
}
return true;
}

template <typename T, int Prealloc1, int Prealloc2>
bool operator!=(const QVarLengthArray<T, Prealloc1> &l, const QVarLengthArray<T, Prealloc2> &r)
{
return !(l == r);
}




# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qisenum.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qisenum.h"


















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"








































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"























































































































































































































































































































































































































# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qisenum.h"




# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qisenum.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"








# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"













# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"



# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"





# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
class QDataStream;
class QMetaTypeInterface;
struct QMetaObject;

class  QMetaType {
enum ExtensionFlag { NoExtensionFlags,
CreateEx = 0x1, DestroyEx = 0x2,
ConstructEx = 0x4, DestructEx = 0x8,
NameEx = 0x10, SizeEx = 0x20,
CtorEx = 0x40, DtorEx = 0x80,
FlagsEx = 0x100, MetaObjectEx = 0x200
};
public:

# 200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"

enum Type {

QT_DEFINE_METATYPE_ID(Void, 43, void) QT_DEFINE_METATYPE_ID(Bool, 1, bool) QT_DEFINE_METATYPE_ID(Int, 2, int) QT_DEFINE_METATYPE_ID(UInt, 3, uint) QT_DEFINE_METATYPE_ID(LongLong, 4, qlonglong) QT_DEFINE_METATYPE_ID(ULongLong, 5, qulonglong) QT_DEFINE_METATYPE_ID(Double, 6, double) QT_DEFINE_METATYPE_ID(Long, 32, long) QT_DEFINE_METATYPE_ID(Short, 33, short) QT_DEFINE_METATYPE_ID(Char, 34, char) QT_DEFINE_METATYPE_ID(ULong, 35, ulong) QT_DEFINE_METATYPE_ID(UShort, 36, ushort) QT_DEFINE_METATYPE_ID(UChar, 37, uchar) QT_DEFINE_METATYPE_ID(Float, 38, float) QT_DEFINE_METATYPE_ID(SChar, 40, signed char)  QT_DEFINE_METATYPE_ID(VoidStar, 31, void*)  QT_DEFINE_METATYPE_ID(QChar, 7, QChar) QT_DEFINE_METATYPE_ID(QString, 10, QString) QT_DEFINE_METATYPE_ID(QStringList, 11, QStringList) QT_DEFINE_METATYPE_ID(QByteArray, 12, QByteArray) QT_DEFINE_METATYPE_ID(QBitArray, 13, QBitArray) QT_DEFINE_METATYPE_ID(QDate, 14, QDate) QT_DEFINE_METATYPE_ID(QTime, 15, QTime) QT_DEFINE_METATYPE_ID(QDateTime, 16, QDateTime) QT_DEFINE_METATYPE_ID(QUrl, 17, QUrl) QT_DEFINE_METATYPE_ID(QLocale, 18, QLocale) QT_DEFINE_METATYPE_ID(QRect, 19, QRect) QT_DEFINE_METATYPE_ID(QRectF, 20, QRectF) QT_DEFINE_METATYPE_ID(QSize, 21, QSize) QT_DEFINE_METATYPE_ID(QSizeF, 22, QSizeF) QT_DEFINE_METATYPE_ID(QLine, 23, QLine) QT_DEFINE_METATYPE_ID(QLineF, 24, QLineF) QT_DEFINE_METATYPE_ID(QPoint, 25, QPoint) QT_DEFINE_METATYPE_ID(QPointF, 26, QPointF) QT_DEFINE_METATYPE_ID(QRegExp, 27, QRegExp) QT_DEFINE_METATYPE_ID(QEasingCurve, 29, QEasingCurve) QT_DEFINE_METATYPE_ID(QUuid, 30, QUuid) QT_DEFINE_METATYPE_ID(QVariant, 41, QVariant) QT_DEFINE_METATYPE_ID(QModelIndex, 42, QModelIndex) QT_DEFINE_METATYPE_ID(QRegularExpression, 44, QRegularExpression) QT_DEFINE_METATYPE_ID(QJsonValue, 45, QJsonValue) QT_DEFINE_METATYPE_ID(QJsonObject, 46, QJsonObject) QT_DEFINE_METATYPE_ID(QJsonArray, 47, QJsonArray) QT_DEFINE_METATYPE_ID(QJsonDocument, 48, QJsonDocument)  QT_DEFINE_METATYPE_ID(QObjectStar, 39, QObject*) QT_DEFINE_METATYPE_ID(QVariantMap, 8, QVariantMap) QT_DEFINE_METATYPE_ID(QVariantList, 9, QVariantList) QT_DEFINE_METATYPE_ID(QVariantHash, 28, QVariantHash)  QT_DEFINE_METATYPE_ID(QFont, 64, QFont) QT_DEFINE_METATYPE_ID(QPixmap, 65, QPixmap) QT_DEFINE_METATYPE_ID(QBrush, 66, QBrush) QT_DEFINE_METATYPE_ID(QColor, 67, QColor) QT_DEFINE_METATYPE_ID(QPalette, 68, QPalette) QT_DEFINE_METATYPE_ID(QIcon, 69, QIcon) QT_DEFINE_METATYPE_ID(QImage, 70, QImage) QT_DEFINE_METATYPE_ID(QPolygon, 71, QPolygon) QT_DEFINE_METATYPE_ID(QRegion, 72, QRegion) QT_DEFINE_METATYPE_ID(QBitmap, 73, QBitmap) QT_DEFINE_METATYPE_ID(QCursor, 74, QCursor) QT_DEFINE_METATYPE_ID(QKeySequence, 75, QKeySequence) QT_DEFINE_METATYPE_ID(QPen, 76, QPen) QT_DEFINE_METATYPE_ID(QTextLength, 77, QTextLength) QT_DEFINE_METATYPE_ID(QTextFormat, 78, QTextFormat) QT_DEFINE_METATYPE_ID(QMatrix, 79, QMatrix) QT_DEFINE_METATYPE_ID(QTransform, 80, QTransform) QT_DEFINE_METATYPE_ID(QMatrix4x4, 81, QMatrix4x4) QT_DEFINE_METATYPE_ID(QVector2D, 82, QVector2D) QT_DEFINE_METATYPE_ID(QVector3D, 83, QVector3D) QT_DEFINE_METATYPE_ID(QVector4D, 84, QVector4D) QT_DEFINE_METATYPE_ID(QQuaternion, 85, QQuaternion) QT_DEFINE_METATYPE_ID(QPolygonF, 86, QPolygonF)  QT_DEFINE_METATYPE_ID(QSizePolicy, 121, QSizePolicy)  

FirstCoreType = Bool,
LastCoreType = QJsonDocument,
FirstGuiType = QFont,
LastGuiType = QPolygonF,
FirstWidgetsType = QSizePolicy,
LastWidgetsType = QSizePolicy,
HighestInternalId = LastWidgetsType,

QReal = sizeof(qreal) == sizeof(double) ? Double : Float,

UnknownType = 0,
User = 1024
};



























# 245 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
enum TypeFlag {
NeedsConstruction = 0x1,
NeedsDestruction = 0x2,
MovableType = 0x4,
PointerToQObject = 0x8,
IsEnumeration = 0x10,
SharedPointerToQObject = 0x20,
WeakPointerToQObject = 0x40,
TrackingPointerToQObject = 0x80,
WasDeclaredAsMetaType = 0x100
};
typedef QFlags<TypeFlag> TypeFlags;

typedef void (*Deleter)(void *);
typedef void *(*Creator)(const void *);

typedef void (*Destructor)(void *);
typedef void *(*Constructor)(void *, const void *);

typedef void (*SaveOperator)(QDataStream &, const void *);
typedef void (*LoadOperator)(QDataStream &, void *);

# 267 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static void registerStreamOperators(const char *typeName, SaveOperator saveOp,
LoadOperator loadOp);
static void registerStreamOperators(int type, SaveOperator saveOp,
LoadOperator loadOp);

# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static int registerType(const char *typeName, Deleter deleter,
Creator creator);
static int registerType(const char *typeName, Deleter deleter,
Creator creator,
Destructor destructor,
Constructor constructor,
int size,
QMetaType::TypeFlags flags,
const QMetaObject *metaObject);
static int registerNormalizedType(const ::QByteArray &normalizedTypeName, Deleter deleter,
Creator creator,
Destructor destructor,
Constructor constructor,
int size,
QMetaType::TypeFlags flags,
const QMetaObject *metaObject);
static int registerTypedef(const char *typeName, int aliasId);
static int registerNormalizedTypedef(const ::QByteArray &normalizedTypeName, int aliasId);
static int type(const char *typeName);
static const char *typeName(int type);
static int sizeOf(int type);
static TypeFlags typeFlags(int type);
static const QMetaObject *metaObjectForType(int type);
static bool isRegistered(int type);
static void *create(int type, const void *copy = 0);




# 301 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static void destroy(int type, void *data);
static void *construct(int type, void *where, const void *copy);
static void destruct(int type, void *where);


# 306 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static bool save(QDataStream &stream, int type, const void *data);
static bool load(QDataStream &stream, int type, void *data);


# 310 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
explicit QMetaType(const int type);
inline ~QMetaType();

inline bool isValid() const;
inline bool isRegistered() const;
inline int sizeOf() const;
inline TypeFlags flags() const;
inline const QMetaObject *metaObject() const;

inline void *create(const void *copy = 0) const;
inline void destroy(void *data) const;
inline void *construct(void *where, const void *copy = 0) const;
inline void destruct(void *data) const;
private:
static QMetaType typeInfo(const int type);
inline QMetaType(const ExtensionFlag extensionFlags, const QMetaTypeInterface *info,
Creator creator,
Deleter deleter,
SaveOperator saveOp,
LoadOperator loadOp,
Constructor constructor,
Destructor destructor,
uint sizeOf,
uint theTypeFlags,
int typeId,
const QMetaObject *metaObject);
QMetaType(const QMetaType &other);
QMetaType &operator =(const QMetaType &);
inline bool isExtended(const ExtensionFlag flag) const { return m_extensionFlags & flag; }


void ctor(const QMetaTypeInterface *info);
void dtor();
uint sizeExtended() const;
QMetaType::TypeFlags flagsExtended() const;
const QMetaObject *metaObjectExtended() const;
void *createExtended(const void *copy = 0) const;
void destroyExtended(void *data) const;
void *constructExtended(void *where, const void *copy = 0) const;
void destructExtended(void *data) const;

Creator m_creator;
Deleter m_deleter;
SaveOperator m_saveOp;
LoadOperator m_loadOp;
Constructor m_constructor;
Destructor m_destructor;
void *m_extension; 
uint m_size;
uint m_typeFlags;
uint m_extensionFlags;
int m_typeId;
const QMetaObject *m_metaObject;
};



# 367 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
 inline QFlags<QMetaType::TypeFlags::enum_type> operator|(QMetaType::TypeFlags::enum_type f1, QMetaType::TypeFlags::enum_type f2) { return QFlags<QMetaType::TypeFlags::enum_type>(f1) | f2; }  inline QFlags<QMetaType::TypeFlags::enum_type> operator|(QMetaType::TypeFlags::enum_type f1, QFlags<QMetaType::TypeFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QMetaType::TypeFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

namespace QtMetaTypePrivate {
template <typename T, bool Accepted = true>
struct QMetaTypeFunctionHelper {
static void Delete(void *t)
{
delete static_cast<T*>(t);
}

static void *Create(const void *t)
{
if (t)
return new T(*static_cast<const T*>(t));
return new T();
}

static void Destruct(void *t)
{
(void)t; 
static_cast<T*>(t)->~T();
}

static void *Construct(void *where, const void *t)
{
if (t)
return new (where) T(*static_cast<const T*>(t));
return new (where) T;
}

# 397 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static void Save(QDataStream &stream, const void *t)
{
stream << *static_cast<const T*>(t);
}

static void Load(QDataStream &stream, void *t)
{
stream >> *static_cast<T*>(t);
}

# 407 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
};

template <typename T>
struct QMetaTypeFunctionHelper<T,  false> {
static void Delete(void *) {}
static void *Create(const void *) { return 0; }
static void Destruct(void *) {}
static void *Construct(void *, const void *) { return 0; }

# 416 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static void Save(QDataStream &, const void *) {}
static void Load(QDataStream &, void *) {}

# 419 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
};
template <>
struct QMetaTypeFunctionHelper<void,  true>
: public QMetaTypeFunctionHelper<void,  false>
{};
}

class QObject;
class QWidget;
template <class T> class QSharedPointer;
template <class T> class QWeakPointer;
template <class T> class QPointer;

namespace QtPrivate
{
template<typename T>
struct IsPointerToTypeDerivedFromQObject
{
enum { Value = false };
};


template<>
struct IsPointerToTypeDerivedFromQObject<void*>
{
enum { Value = false };
};
template<>
struct IsPointerToTypeDerivedFromQObject<QObject*>
{
enum { Value = true };
};

template<typename T>
struct IsPointerToTypeDerivedFromQObject<T*>
{
typedef qint8 yes_type;
typedef qint64 no_type;


# 459 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static yes_type checkType(QObject* );

# 461 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
static no_type checkType(...);
enum {q_static_assert_result461 = sizeof(QStaticAssertFailure<!!(sizeof(T))>)};
enum { Value = sizeof(checkType(static_cast<T*>(0))) == sizeof(yes_type) };
};

template<typename T, bool = IsPointerToTypeDerivedFromQObject<T>::Value>
struct MetaObjectForType
{
static inline const QMetaObject *value() { return 0; }
};

template<typename T>
struct MetaObjectForType<T*,  true>
{
static inline const QMetaObject *value() { return &T::staticMetaObject; }
};

template<typename T>
struct IsSharedPointerToTypeDerivedFromQObject
{
enum { Value = false };
};

template<typename T>
struct IsSharedPointerToTypeDerivedFromQObject<QSharedPointer<T> > : IsPointerToTypeDerivedFromQObject<T*>
{
};

template<typename T>
struct IsWeakPointerToTypeDerivedFromQObject
{
enum { Value = false };
};

template<typename T>
struct IsWeakPointerToTypeDerivedFromQObject<QWeakPointer<T> > : IsPointerToTypeDerivedFromQObject<T*>
{
};

template<typename T>
struct IsTrackingPointerToTypeDerivedFromQObject
{
enum { Value = false };
};

template<typename T>
struct IsTrackingPointerToTypeDerivedFromQObject<QPointer<T> >
{
enum { Value = true };
};

 bool isBuiltinType(const QByteArray &type);
} 

template <typename T, bool = QtPrivate::IsPointerToTypeDerivedFromQObject<T>::Value>
struct QMetaTypeIdQObject
{
enum {
Defined = 0
};
};

template <typename T>
struct QMetaTypeId : public QMetaTypeIdQObject<T>
{
};

template <typename T>
struct QMetaTypeId2
{
enum { Defined = QMetaTypeId<T>::Defined, IsBuiltIn=false };
static inline  int qt_metatype_id() { return QMetaTypeId<T>::qt_metatype_id(); }
};

template <typename T>
struct QMetaTypeId2<const T&> : QMetaTypeId2<T> {};

namespace QtPrivate {
template <typename T, bool Defined = QMetaTypeId2<T>::Defined>
struct QMetaTypeIdHelper {
static inline  int qt_metatype_id()
{ return QMetaTypeId2<T>::qt_metatype_id(); }
};
template <typename T> struct QMetaTypeIdHelper<T, false> {
static inline  int qt_metatype_id()
{ return -1; }
};


template <class Result> struct IsPointerToTypeDerivedFromQObject<Result(*)()> { enum { Value = false }; };
template <class Result, class Arg0> struct IsPointerToTypeDerivedFromQObject<Result(*)(Arg0)> { enum { Value = false }; };
template <class Result, class Arg0, class Arg1> struct IsPointerToTypeDerivedFromQObject<Result(*)(Arg0, Arg1)> { enum { Value = false }; };
template <class Result, class Arg0, class Arg1, class Arg2> struct IsPointerToTypeDerivedFromQObject<Result(*)(Arg0, Arg1, Arg2)> { enum { Value = false }; };

template<typename T>
struct QMetaTypeTypeFlags
{
enum { Flags = (!QTypeInfo<T>::isStatic ? QMetaType::MovableType : 0)
| (QTypeInfo<T>::isComplex ? QMetaType::NeedsConstruction : 0)
| (QTypeInfo<T>::isComplex ? QMetaType::NeedsDestruction : 0)
| (IsPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::PointerToQObject : 0)
| (IsSharedPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::SharedPointerToQObject : 0)
| (IsWeakPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::WeakPointerToQObject : 0)
| (IsTrackingPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::TrackingPointerToQObject : 0)
| (QtPrivate::is_enum<T>::value ? QMetaType::IsEnumeration : 0)
};
};

template<typename T, bool defined>
struct MetaTypeDefinedHelper
{
enum DefinedType { Defined = defined };
};
}

template <typename T>
int qRegisterNormalizedMetaType(const ::QByteArray &normalizedTypeName

# 579 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
, T * dummy = 0
, typename QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::DefinedType defined = QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::Defined

# 582 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
)
{

# 585 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
qt_noop();

# 587 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
const int typedefOf = dummy ? -1 : QtPrivate::QMetaTypeIdHelper<T>::qt_metatype_id();
if (typedefOf != -1)
return QMetaType::registerNormalizedTypedef(normalizedTypeName, typedefOf);

QMetaType::TypeFlags flags(QtPrivate::QMetaTypeTypeFlags<T>::Flags);

if (defined)
flags |= QMetaType::WasDeclaredAsMetaType;

return QMetaType::registerNormalizedType(normalizedTypeName,
QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Delete,
QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Create,
QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Destruct,
QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Construct,
int(sizeof(T)),
flags,
QtPrivate::MetaObjectForType<T>::value());
}

template <typename T>
int qRegisterMetaType(const char *typeName

# 609 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
, T * dummy = 0
, typename QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::DefinedType defined = QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::Defined

# 612 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
)
{



# 617 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
::QByteArray normalizedTypeName = QMetaObject::normalizedType(typeName);

# 619 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
return qRegisterNormalizedMetaType<T>(normalizedTypeName, dummy, defined);
}


# 623 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
template <typename T>
void qRegisterMetaTypeStreamOperators(const char *typeName

# 626 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
, T *  = 0

# 628 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
)
{
qRegisterMetaType<T>(typeName);
QMetaType::registerStreamOperators(typeName, QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Save,
QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Load);
}


# 636 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
template <typename T>
inline  int qMetaTypeId()
{
enum {q_static_assert_result636 = sizeof(QStaticAssertFailure<!!(QMetaTypeId2<T>::Defined)>)};
return QMetaTypeId2<T>::qt_metatype_id();
}

template <typename T>
inline  int qRegisterMetaType()
{
return qMetaTypeId<T>();
}


# 650 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"

template <typename T>
 inline  int qMetaTypeId(T *)
{ return qMetaTypeId<T>(); }

# 655 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
template <typename T>
 inline  int qRegisterMetaType(T *)
{ return qRegisterMetaType<T>(); }



# 661 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
template <typename T>
struct QMetaTypeIdQObject<T*,  true>
{
enum {
Defined = 1
};

static int qt_metatype_id()
{
static QBasicAtomicInt metatype_id = { (0) };
if (const int id = metatype_id.loadAcquire())
return id;
const char * const cName = T::staticMetaObject.className();
QByteArray typeName;
typeName.reserve(int(strlen(cName)) + 1);
typeName.append(cName).append('*');
const int newId = qRegisterNormalizedMetaType<T*>(
typeName,
reinterpret_cast<T**>(quintptr(-1)));
metatype_id.storeRelease(newId);
return newId;
}
};


# 686 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
template <typename T>
inline int qRegisterMetaTypeStreamOperators()
{
int id = qMetaTypeId<T>();
QMetaType::registerStreamOperators(id, QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Save,
QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Load);
return id;
}











# 738 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QChar, 7, QChar) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QString, 10, QString) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QStringList, 11, QStringList) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QByteArray, 12, QByteArray) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QBitArray, 13, QBitArray) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QDate, 14, QDate) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QTime, 15, QTime) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QDateTime, 16, QDateTime) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QUrl, 17, QUrl) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QLocale, 18, QLocale) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QRect, 19, QRect) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QRectF, 20, QRectF) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QSize, 21, QSize) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QSizeF, 22, QSizeF) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QLine, 23, QLine) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QLineF, 24, QLineF) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPoint, 25, QPoint) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPointF, 26, QPointF) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QRegExp, 27, QRegExp) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QEasingCurve, 29, QEasingCurve) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QUuid, 30, QUuid) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QVariant, 41, QVariant) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QModelIndex, 42, QModelIndex) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QRegularExpression, 44, QRegularExpression) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QJsonValue, 45, QJsonValue) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QJsonObject, 46, QJsonObject) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QJsonArray, 47, QJsonArray) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QJsonDocument, 48, QJsonDocument) 
QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QFont, 64, QFont) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPixmap, 65, QPixmap) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QBrush, 66, QBrush) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QColor, 67, QColor) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPalette, 68, QPalette) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QIcon, 69, QIcon) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QImage, 70, QImage) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPolygon, 71, QPolygon) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QRegion, 72, QRegion) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QBitmap, 73, QBitmap) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QCursor, 74, QCursor) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QKeySequence, 75, QKeySequence) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPen, 76, QPen) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QTextLength, 77, QTextLength) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QTextFormat, 78, QTextFormat) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QMatrix, 79, QMatrix) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QTransform, 80, QTransform) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QMatrix4x4, 81, QMatrix4x4) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QVector2D, 82, QVector2D) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QVector3D, 83, QVector3D) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QVector4D, 84, QVector4D) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QQuaternion, 85, QQuaternion) QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QPolygonF, 86, QPolygonF) 
QT_FORWARD_DECLARE_STATIC_TYPES_ITER(QSizePolicy, 121, QSizePolicy) 



# 744 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
typedef QList<QVariant> QVariantList;
typedef QMap<QString, QVariant> QVariantMap;
typedef QHash<QString, QVariant> QVariantHash;















# 871 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
Q_DECLARE_METATYPE_TEMPLATE_1ARG_ITER(QList) Q_DECLARE_METATYPE_TEMPLATE_1ARG_ITER(QVector) Q_DECLARE_METATYPE_TEMPLATE_1ARG_ITER(QQueue) Q_DECLARE_METATYPE_TEMPLATE_1ARG_ITER(QStack) Q_DECLARE_METATYPE_TEMPLATE_1ARG_ITER(QSet) Q_DECLARE_METATYPE_TEMPLATE_1ARG_ITER(QLinkedList)





# 879 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
Q_DECLARE_METATYPE_TEMPLATE_2ARG_ITER(QHash, class) Q_DECLARE_METATYPE_TEMPLATE_2ARG_ITER(QMap, class) Q_DECLARE_METATYPE_TEMPLATE_2ARG_ITER(QPair, struct)





# 886 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER(QSharedPointer) Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER(QWeakPointer) Q_DECLARE_METATYPE_TEMPLATE_SMART_POINTER_ITER(QPointer)



# 890 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"
inline QMetaType::QMetaType(const ExtensionFlag extensionFlags, const QMetaTypeInterface *info,
Creator creator,
Deleter deleter,
SaveOperator saveOp,
LoadOperator loadOp,
Constructor constructor,
Destructor destructor,
uint size,
uint theTypeFlags,
int typeId,
const QMetaObject *_metaObject)
: m_creator(creator)
, m_deleter(deleter)
, m_saveOp(saveOp)
, m_loadOp(loadOp)
, m_constructor(constructor)
, m_destructor(destructor)
, m_extension(0)
, m_size(size)
, m_typeFlags(theTypeFlags)
, m_extensionFlags(extensionFlags)
, m_typeId(typeId)
, m_metaObject(_metaObject)
{
if ((isExtended(CtorEx) || typeId == QMetaType::Void))
ctor(info);
}

inline QMetaType::~QMetaType()
{
if ((isExtended(DtorEx)))
dtor();
}

inline bool QMetaType::isValid() const
{
return m_typeId != UnknownType;
}

inline bool QMetaType::isRegistered() const
{
return isValid();
}

inline void *QMetaType::create(const void *copy) const
{
if ((isExtended(CreateEx)))
return createExtended(copy);
return m_creator(copy);
}

inline void QMetaType::destroy(void *data) const
{
if ((isExtended(DestroyEx)))
return destroyExtended(data);
m_deleter(data);
}

inline void *QMetaType::construct(void *where, const void *copy) const
{
if ((isExtended(ConstructEx)))
return constructExtended(where, copy);
return m_constructor(where, copy);
}

inline void QMetaType::destruct(void *data) const
{
if ((isExtended(DestructEx)))
return destructExtended(data);
if ((!data))
return;
m_destructor(data);
}

inline int QMetaType::sizeOf() const
{
if ((isExtended(SizeEx)))
return sizeExtended();
return m_size;
}

inline QMetaType::TypeFlags QMetaType::flags() const
{
if ((isExtended(FlagsEx)))
return flagsExtended();
return QMetaType::TypeFlags(m_typeFlags);
}

inline const QMetaObject *QMetaType::metaObject() const
{
if ((isExtended(MetaObjectEx)))
return metaObjectExtended();
return m_metaObject;
}




Q_DECLARE_BUILTIN_METATYPE(Void, 43, void) Q_DECLARE_BUILTIN_METATYPE(Bool, 1, bool) Q_DECLARE_BUILTIN_METATYPE(Int, 2, int) Q_DECLARE_BUILTIN_METATYPE(UInt, 3, uint) Q_DECLARE_BUILTIN_METATYPE(LongLong, 4, qlonglong) Q_DECLARE_BUILTIN_METATYPE(ULongLong, 5, qulonglong) Q_DECLARE_BUILTIN_METATYPE(Double, 6, double) Q_DECLARE_BUILTIN_METATYPE(Long, 32, long) Q_DECLARE_BUILTIN_METATYPE(Short, 33, short) Q_DECLARE_BUILTIN_METATYPE(Char, 34, char) Q_DECLARE_BUILTIN_METATYPE(ULong, 35, ulong) Q_DECLARE_BUILTIN_METATYPE(UShort, 36, ushort) Q_DECLARE_BUILTIN_METATYPE(UChar, 37, uchar) Q_DECLARE_BUILTIN_METATYPE(Float, 38, float) Q_DECLARE_BUILTIN_METATYPE(SChar, 40, signed char)  Q_DECLARE_BUILTIN_METATYPE(VoidStar, 31, void*)  Q_DECLARE_BUILTIN_METATYPE(QChar, 7, QChar) Q_DECLARE_BUILTIN_METATYPE(QString, 10, QString) Q_DECLARE_BUILTIN_METATYPE(QStringList, 11, QStringList) Q_DECLARE_BUILTIN_METATYPE(QByteArray, 12, QByteArray) Q_DECLARE_BUILTIN_METATYPE(QBitArray, 13, QBitArray) Q_DECLARE_BUILTIN_METATYPE(QDate, 14, QDate) Q_DECLARE_BUILTIN_METATYPE(QTime, 15, QTime) Q_DECLARE_BUILTIN_METATYPE(QDateTime, 16, QDateTime) Q_DECLARE_BUILTIN_METATYPE(QUrl, 17, QUrl) Q_DECLARE_BUILTIN_METATYPE(QLocale, 18, QLocale) Q_DECLARE_BUILTIN_METATYPE(QRect, 19, QRect) Q_DECLARE_BUILTIN_METATYPE(QRectF, 20, QRectF) Q_DECLARE_BUILTIN_METATYPE(QSize, 21, QSize) Q_DECLARE_BUILTIN_METATYPE(QSizeF, 22, QSizeF) Q_DECLARE_BUILTIN_METATYPE(QLine, 23, QLine) Q_DECLARE_BUILTIN_METATYPE(QLineF, 24, QLineF) Q_DECLARE_BUILTIN_METATYPE(QPoint, 25, QPoint) Q_DECLARE_BUILTIN_METATYPE(QPointF, 26, QPointF) Q_DECLARE_BUILTIN_METATYPE(QRegExp, 27, QRegExp) Q_DECLARE_BUILTIN_METATYPE(QEasingCurve, 29, QEasingCurve) Q_DECLARE_BUILTIN_METATYPE(QUuid, 30, QUuid) Q_DECLARE_BUILTIN_METATYPE(QVariant, 41, QVariant) Q_DECLARE_BUILTIN_METATYPE(QModelIndex, 42, QModelIndex) Q_DECLARE_BUILTIN_METATYPE(QRegularExpression, 44, QRegularExpression) Q_DECLARE_BUILTIN_METATYPE(QJsonValue, 45, QJsonValue) Q_DECLARE_BUILTIN_METATYPE(QJsonObject, 46, QJsonObject) Q_DECLARE_BUILTIN_METATYPE(QJsonArray, 47, QJsonArray) Q_DECLARE_BUILTIN_METATYPE(QJsonDocument, 48, QJsonDocument)  Q_DECLARE_BUILTIN_METATYPE(QObjectStar, 39, QObject*) Q_DECLARE_BUILTIN_METATYPE(QVariantMap, 8, QVariantMap) Q_DECLARE_BUILTIN_METATYPE(QVariantList, 9, QVariantList) Q_DECLARE_BUILTIN_METATYPE(QVariantHash, 28, QVariantHash)  Q_DECLARE_BUILTIN_METATYPE(QFont, 64, QFont) Q_DECLARE_BUILTIN_METATYPE(QPixmap, 65, QPixmap) Q_DECLARE_BUILTIN_METATYPE(QBrush, 66, QBrush) Q_DECLARE_BUILTIN_METATYPE(QColor, 67, QColor) Q_DECLARE_BUILTIN_METATYPE(QPalette, 68, QPalette) Q_DECLARE_BUILTIN_METATYPE(QIcon, 69, QIcon) Q_DECLARE_BUILTIN_METATYPE(QImage, 70, QImage) Q_DECLARE_BUILTIN_METATYPE(QPolygon, 71, QPolygon) Q_DECLARE_BUILTIN_METATYPE(QRegion, 72, QRegion) Q_DECLARE_BUILTIN_METATYPE(QBitmap, 73, QBitmap) Q_DECLARE_BUILTIN_METATYPE(QCursor, 74, QCursor) Q_DECLARE_BUILTIN_METATYPE(QKeySequence, 75, QKeySequence) Q_DECLARE_BUILTIN_METATYPE(QPen, 76, QPen) Q_DECLARE_BUILTIN_METATYPE(QTextLength, 77, QTextLength) Q_DECLARE_BUILTIN_METATYPE(QTextFormat, 78, QTextFormat) Q_DECLARE_BUILTIN_METATYPE(QMatrix, 79, QMatrix) Q_DECLARE_BUILTIN_METATYPE(QTransform, 80, QTransform) Q_DECLARE_BUILTIN_METATYPE(QMatrix4x4, 81, QMatrix4x4) Q_DECLARE_BUILTIN_METATYPE(QVector2D, 82, QVector2D) Q_DECLARE_BUILTIN_METATYPE(QVector3D, 83, QVector3D) Q_DECLARE_BUILTIN_METATYPE(QVector4D, 84, QVector4D) Q_DECLARE_BUILTIN_METATYPE(QQuaternion, 85, QQuaternion) Q_DECLARE_BUILTIN_METATYPE(QPolygonF, 86, QPolygonF)  Q_DECLARE_BUILTIN_METATYPE(QSizePolicy, 121, QSizePolicy)  



# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject_impl.h"




















































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject_impl.h"



namespace QtPrivate {











# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject_impl.h"
template <typename ArgList> struct TypesAreDeclaredMetaType { enum { Value = false }; };
template <> struct TypesAreDeclaredMetaType<void> { enum { Value = true }; };
template <typename Arg, typename Tail> struct TypesAreDeclaredMetaType<List<Arg, Tail> > { enum { Value = QMetaTypeId2<Arg>::Defined && TypesAreDeclaredMetaType<Tail>::Value }; };

template <typename ArgList, bool Declared = TypesAreDeclaredMetaType<ArgList>::Value > struct ConnectionTypes
{ static const int *types() { return 0; } };
template <> struct ConnectionTypes<void, true>
{ static const int *types() { static const int t[1] = { 0 }; return t; } };
template <typename Arg1> struct ConnectionTypes<List<Arg1, void>, true>
{ static const int *types() { static const int t[2] = { QtPrivate::QMetaTypeIdHelper<Arg1>::qt_metatype_id(), 0 }; return t; } };
template <typename Arg1, typename Arg2> struct ConnectionTypes<List<Arg1, List<Arg2, void> >, true>
{ static const int *types() { static const int t[3] = { QtPrivate::QMetaTypeIdHelper<Arg1>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg2>::qt_metatype_id(), 0 }; return t; } };
template <typename Arg1, typename Arg2, typename Arg3> struct ConnectionTypes<List<Arg1, List<Arg2, List<Arg3, void> > >, true>
{ static const int *types() { static const int t[4] = { QtPrivate::QMetaTypeIdHelper<Arg1>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg2>::qt_metatype_id(),
QtPrivate::QMetaTypeIdHelper<Arg3>::qt_metatype_id(), 0 }; return t; } };
template <typename Arg1, typename Arg2, typename Arg3, typename Arg4> struct ConnectionTypes<List<Arg1, List<Arg2, List<Arg3, List<Arg4, void> > > >, true>
{ static const int *types() { static const int t[5] = { QtPrivate::QMetaTypeIdHelper<Arg1>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg2>::qt_metatype_id(),
QtPrivate::QMetaTypeIdHelper<Arg3>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg4>::qt_metatype_id(), 0 }; return t; } };
template <typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5> struct ConnectionTypes<List<Arg1, List<Arg2, List<Arg3, List<Arg4, List<Arg5, void> > > > >, true>
{ static const int *types() { static const int t[6] = { QtPrivate::QMetaTypeIdHelper<Arg1>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg2>::qt_metatype_id(),
QtPrivate::QMetaTypeIdHelper<Arg3>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg4>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg5>::qt_metatype_id(), 0 }; return t; } };
template <typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
struct ConnectionTypes<List<Arg1, List<Arg2, List<Arg3, List<Arg4, List<Arg5, List<Arg6, void> > > > > >, true>
{ static const int *types() { static const int t[7] = { QtPrivate::QMetaTypeIdHelper<Arg1>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg2>::qt_metatype_id(),
QtPrivate::QMetaTypeIdHelper<Arg3>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg4>::qt_metatype_id(), QtPrivate::QMetaTypeIdHelper<Arg5>::qt_metatype_id(),
QtPrivate::QMetaTypeIdHelper<Arg6>::qt_metatype_id(), 0 }; return t; } };












# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject_impl.h"

class QSlotObjectBase {
QAtomicInt m_ref;



typedef void (*ImplFn)(int which, QSlotObjectBase* this_, QObject *receiver, void **args, bool *ret);
const ImplFn m_impl;
protected:
enum Operation {
Destroy,
Call,
Compare,

NumOperations
};
public:
explicit QSlotObjectBase(ImplFn fn) : m_ref(1), m_impl(fn) {}

inline int ref()  { return m_ref.ref(); }
inline void destroyIfLastRef() 
{ if (!m_ref.deref()) m_impl(Destroy, this, 0, 0, 0); }

inline bool compare(void **a) { bool ret; m_impl(Compare, this, 0, a, &ret); return ret; }
inline void call(QObject *r, void **a) { m_impl(Call, this, r, a, 0); }
protected:
~QSlotObjectBase() {}
};


template<typename Func, typename Args, typename R> class QSlotObject : public QSlotObjectBase
{
typedef QtPrivate::FunctionPointer<Func> FuncType;
Func function;
static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
{
switch (which) {
case Destroy:
delete static_cast<QSlotObject*>(this_);
break;
case Call:
FuncType::template call<Args, R>(static_cast<QSlotObject*>(this_)->function, static_cast<typename FuncType::Object *>(r), a);
break;
case Compare:
*ret = *reinterpret_cast<Func *>(a) == static_cast<QSlotObject*>(this_)->function;
break;
case NumOperations: ;
}
}
public:
explicit QSlotObject(Func f) : QSlotObjectBase(&impl), function(f) {}
};


template<typename Func, typename Args, typename R> class QStaticSlotObject : public QSlotObjectBase
{
typedef QtPrivate::FunctionPointer<Func> FuncType;
Func function;
static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
{
switch (which) {
case Destroy:
delete static_cast<QStaticSlotObject*>(this_);
break;
case Call:
FuncType::template call<Args, R>(static_cast<QStaticSlotObject*>(this_)->function, r, a);
break;
case Compare:
*ret = false; 
break;
case NumOperations: ;
}
}
public:
explicit QStaticSlotObject(Func f) : QSlotObjectBase(&impl), function(f) {}
};



template<typename Func, int N, typename Args, typename R> class QFunctorSlotObject : public QSlotObjectBase
{
typedef QtPrivate::Functor<Func, N> FuncType;
Func function;
static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
{
switch (which) {
case Destroy:
delete static_cast<QFunctorSlotObject*>(this_);
break;
case Call:
FuncType::template call<Args, R>(static_cast<QFunctorSlotObject*>(this_)->function, r, a);
break;
case Compare:
*ret = false; 
break;
case NumOperations: ;
}
}
public:
explicit QFunctorSlotObject(const Func &f) : QSlotObjectBase(&impl), function(f) {}
};

}





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"


# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"



class QEvent;
class QTimerEvent;
class QChildEvent;
struct QMetaObject;
class QVariant;
class QObjectPrivate;
class QObject;
class QThread;
class QWidget;

# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
class QRegExp;


# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
class QRegularExpression;


# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
class QObjectUserData;

# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
struct QDynamicMetaObjectData;

typedef QList<QObject*> QObjectList;

 void qt_qFindChildren_helper(const QObject *parent, const QString &name,
const QMetaObject &mo, QList<void *> *list, Qt::FindChildOptions options);
 void qt_qFindChildren_helper(const QObject *parent, const QRegExp &re,
const QMetaObject &mo, QList<void *> *list, Qt::FindChildOptions options);
 void qt_qFindChildren_helper(const QObject *parent, const QRegularExpression &re,
const QMetaObject &mo, QList<void *> *list, Qt::FindChildOptions options);
 QObject *qt_qFindChild_helper(const QObject *parent, const QString &name, const QMetaObject &mo, Qt::FindChildOptions options);

class  QObjectData {
public:
virtual ~QObjectData() = 0;
QObject *q_ptr;
QObject *parent;
QObjectList children;

uint isWidget : 1;
uint blockSig : 1;
uint wasDeleted : 1;
uint isDeletingChildren : 1;
uint sendChildEvents : 1;
uint receiveChildEvents : 1;
uint isWindow : 1; 
uint unused : 25;
int postedEvents;
QDynamicMetaObjectData *metaObject;
QMetaObject *dynamicMetaObject() const;
};


class  QObject
{
Q_OBJECT
Q_PROPERTY(QString objectName READ objectName WRITE setObjectName NOTIFY objectNameChanged)
inline QObjectPrivate* d_func() { return reinterpret_cast<QObjectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QObjectPrivate* d_func() const { return reinterpret_cast<const QObjectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QObjectPrivate;

public:
Q_INVOKABLE explicit QObject(QObject *parent=0);
virtual ~QObject();

virtual bool event(QEvent *);
virtual bool eventFilter(QObject *, QEvent *);
















# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
QString objectName() const;
void setObjectName(const QString &name);

inline bool isWidgetType() const { return d_ptr->isWidget; }
inline bool isWindowType() const { return d_ptr->isWindow; }

inline bool signalsBlocked() const { return d_ptr->blockSig; }
bool blockSignals(bool b);

QThread *thread() const;
void moveToThread(QThread *thread);

int startTimer(int interval, Qt::TimerType timerType = Qt::CoarseTimer);
void killTimer(int id);

template<typename T>
inline T findChild(const QString &aName = QString(), Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
{ return static_cast<T>(qt_qFindChild_helper(this, aName, reinterpret_cast<T>(0)->staticMetaObject, options)); }

template<typename T>
inline QList<T> findChildren(const QString &aName = QString(), Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
{
QList<T> list;
qt_qFindChildren_helper(this, aName, reinterpret_cast<T>(0)->staticMetaObject,
reinterpret_cast<QList<void *> *>(&list), options);
return list;
}


# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
template<typename T>
inline QList<T> findChildren(const QRegExp &re, Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
{
QList<T> list;
qt_qFindChildren_helper(this, re, reinterpret_cast<T>(0)->staticMetaObject,
reinterpret_cast<QList<void *> *>(&list), options);
return list;
}



# 182 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
template<typename T>
inline QList<T> findChildren(const QRegularExpression &re, Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
{
QList<T> list;
qt_qFindChildren_helper(this, re, reinterpret_cast<T>(0)->staticMetaObject,
reinterpret_cast<QList<void *> *>(&list), options);
return list;
}


# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
inline const QObjectList &children() const { return d_ptr->children; }

void setParent(QObject *);
void installEventFilter(QObject *);
void removeEventFilter(QObject *);

static QMetaObject::Connection connect(const QObject *sender, const char *signal,
const QObject *receiver, const char *member, Qt::ConnectionType = Qt::AutoConnection);

static QMetaObject::Connection connect(const QObject *sender, const QMetaMethod &signal,
const QObject *receiver, const QMetaMethod &method,
Qt::ConnectionType type = Qt::AutoConnection);

inline QMetaObject::Connection connect(const QObject *sender, const char *signal,
const char *member, Qt::ConnectionType type = Qt::AutoConnection) const;





# 212 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"

template <typename Func1, typename Func2>
static inline QMetaObject::Connection connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
const typename QtPrivate::FunctionPointer<Func2>::Object *receiver, Func2 slot,
Qt::ConnectionType type = Qt::AutoConnection)
{
typedef QtPrivate::FunctionPointer<Func1> SignalType;
typedef QtPrivate::FunctionPointer<Func2> SlotType;
reinterpret_cast<typename SignalType::Object *>(0)->qt_check_for_QOBJECT_macro(*reinterpret_cast<typename SignalType::Object *>(0));


enum {q_static_assert_result212 = sizeof(QStaticAssertFailure<!!(int(SignalType::ArgumentCount) >= int(SlotType::ArgumentCount))>)};
enum {q_static_assert_result212 = sizeof(QStaticAssertFailure<!!((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value))>)};
enum {q_static_assert_result212 = sizeof(QStaticAssertFailure<!!((QtPrivate::AreArgumentsCompatible<typename SlotType::ReturnType, typename SignalType::ReturnType>::value))>)};

const int *types = 0;
if (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)
types = QtPrivate::ConnectionTypes<typename SignalType::Arguments>::types();

return connectImpl(sender, reinterpret_cast<void **>(&signal),
receiver, reinterpret_cast<void **>(&slot),
new QtPrivate::QSlotObject<Func2, typename QtPrivate::List_Left<typename SignalType::Arguments, SlotType::ArgumentCount>::Value,
typename SignalType::ReturnType>(slot),
type, types, &SignalType::Object::staticMetaObject);
}


template <typename Func1, typename Func2>
static inline typename QtPrivate::QEnableIf<int(QtPrivate::FunctionPointer<Func2>::ArgumentCount) >= 0, QMetaObject::Connection>::Type
connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal, Func2 slot)
{
typedef QtPrivate::FunctionPointer<Func1> SignalType;
typedef QtPrivate::FunctionPointer<Func2> SlotType;


enum {q_static_assert_result212 = sizeof(QStaticAssertFailure<!!(int(SignalType::ArgumentCount) >= int(SlotType::ArgumentCount))>)};
enum {q_static_assert_result212 = sizeof(QStaticAssertFailure<!!((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value))>)};
enum {q_static_assert_result212 = sizeof(QStaticAssertFailure<!!((QtPrivate::AreArgumentsCompatible<typename SlotType::ReturnType, typename SignalType::ReturnType>::value))>)};

return connectImpl(sender, reinterpret_cast<void **>(&signal), sender, 0,
new QtPrivate::QStaticSlotObject<Func2,
typename QtPrivate::List_Left<typename SignalType::Arguments, SlotType::ArgumentCount>::Value,
typename SignalType::ReturnType>(slot),
Qt::DirectConnection, 0, &SignalType::Object::staticMetaObject);
}


template <typename Func1, typename Func2>
static inline typename QtPrivate::QEnableIf<QtPrivate::FunctionPointer<Func2>::ArgumentCount == -1, QMetaObject::Connection>::Type
connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal, Func2 slot)
{









# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"












# 284 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
return connect_functor(sender, signal, slot, &Func2::operator()); }
template <typename Func1, typename Func2, typename Func2Operator>
static inline QMetaObject::Connection connect_functor(const QObject *sender, Func1 signal, Func2 slot, Func2Operator) {
typedef QtPrivate::FunctionPointer<Func2Operator> SlotType ;



# 291 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
typedef QtPrivate::FunctionPointer<Func1> SignalType;
typedef typename SlotType::ReturnType SlotReturnType;
const int SlotArgumentCount = SlotType::ArgumentCount;

enum {q_static_assert_result291 = sizeof(QStaticAssertFailure<!!(int(SignalType::ArgumentCount) >= SlotArgumentCount)>)};
enum {q_static_assert_result291 = sizeof(QStaticAssertFailure<!!((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value))>)};


# 299 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
enum {q_static_assert_result299 = sizeof(QStaticAssertFailure<!!((QtPrivate::AreArgumentsCompatible<SlotReturnType, typename SignalType::ReturnType>::value))>)};

return connectImpl(sender, reinterpret_cast<void **>(&signal), sender, 0,
new QtPrivate::QFunctorSlotObject<Func2, SlotArgumentCount,
typename QtPrivate::List_Left<typename SignalType::Arguments, SlotArgumentCount>::Value,
typename SignalType::ReturnType>(slot),
Qt::DirectConnection, 0, &SignalType::Object::staticMetaObject);
}


# 309 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
static bool disconnect(const QObject *sender, const char *signal,
const QObject *receiver, const char *member);
static bool disconnect(const QObject *sender, const QMetaMethod &signal,
const QObject *receiver, const QMetaMethod &member);
inline bool disconnect(const char *signal = 0,
const QObject *receiver = 0, const char *member = 0) const
{ return disconnect(this, signal, receiver, member); }
inline bool disconnect(const QObject *receiver, const char *member = 0) const
{ return disconnect(this, 0, receiver, member); }
static bool disconnect(const QMetaObject::Connection &);




# 323 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
template <typename Func1, typename Func2>
static inline bool disconnect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
const typename QtPrivate::FunctionPointer<Func2>::Object *receiver, Func2 slot)
{
typedef QtPrivate::FunctionPointer<Func1> SignalType;
typedef QtPrivate::FunctionPointer<Func2> SlotType;
reinterpret_cast<typename SignalType::Object *>(0)->qt_check_for_QOBJECT_macro(*reinterpret_cast<typename SignalType::Object *>(0));


enum {q_static_assert_result323 = sizeof(QStaticAssertFailure<!!((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value))>)};

return disconnectImpl(sender, reinterpret_cast<void **>(&signal), receiver, reinterpret_cast<void **>(&slot),
&SignalType::Object::staticMetaObject);
}
template <typename Func1>
static inline bool disconnect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
const QObject *receiver, void **zero)
{



qt_noop();
typedef QtPrivate::FunctionPointer<Func1> SignalType;
return disconnectImpl(sender, reinterpret_cast<void **>(&signal), receiver, zero,
&SignalType::Object::staticMetaObject);
}



# 352 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
void dumpObjectTree();
void dumpObjectInfo();


# 356 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
bool setProperty(const char *name, const QVariant &value);
QVariant property(const char *name) const;
QList<QByteArray> dynamicPropertyNames() const;



# 362 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
static uint registerUserData();
void setUserData(uint id, QObjectUserData* data);
QObjectUserData* userData(uint id) const;


# 367 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
signals:
void destroyed(QObject * = 0);
void objectNameChanged(const QString &objectName

# 371 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
, QPrivateSignal

# 373 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
);

public:
inline QObject *parent() const { return d_ptr->parent; }

inline bool inherits(const char *classname) const
{ return const_cast<QObject *>(this)->qt_metacast(classname) != 0; }

public slots:
void deleteLater();

protected:
QObject *sender() const;
int senderSignalIndex() const;
int receivers(const char* signal) const;
bool isSignalConnected(const QMetaMethod &signal) const;

virtual void timerEvent(QTimerEvent *);
virtual void childEvent(QChildEvent *);
virtual void customEvent(QEvent *);

virtual void connectNotify(const QMetaMethod &signal);
virtual void disconnectNotify(const QMetaMethod &signal);

protected:
QObject(QObjectPrivate &dd, QObject *parent = 0);

protected:
QScopedPointer<QObjectData> d_ptr;

static const QMetaObject staticQtMetaObject;

friend struct QMetaObject;
friend struct QMetaObjectPrivate;
friend class QMetaCallEvent;
friend class QApplication;
friend class QApplicationPrivate;
friend class QCoreApplication;
friend class QCoreApplicationPrivate;
friend class QWidget;
friend class QThreadData;

private:
QObject(const QObject &) ; QObject &operator=(const QObject &) ;


private:
static QMetaObject::Connection connectImpl(const QObject *sender, void **signal,
const QObject *receiver, void **slotPtr,
QtPrivate::QSlotObjectBase *slot, Qt::ConnectionType type,
const int *types, const QMetaObject *senderMetaObject);

static bool disconnectImpl(const QObject *sender, void **signal, const QObject *receiver, void **slot,
const QMetaObject *senderMetaObject);

};

inline QMetaObject::Connection QObject::connect(const QObject *asender, const char *asignal,
const char *amember, Qt::ConnectionType atype) const
{ return connect(asender, asignal, this, amember, atype); }


# 435 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
class  QObjectUserData {
public:
virtual ~QObjectUserData();
};




























# 467 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
template <class T>
inline T qobject_cast(QObject *object)
{

# 471 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
reinterpret_cast<T>(object)->qt_check_for_QOBJECT_macro(*reinterpret_cast<T>(object));

# 473 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
return static_cast<T>(reinterpret_cast<T>(object)->staticMetaObject.cast(object));
}

template <class T>
inline T qobject_cast(const QObject *object)
{

# 480 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
reinterpret_cast<T>(object)->qt_check_for_QOBJECT_macro(*reinterpret_cast<T>(const_cast<QObject *>(object)));

# 482 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
return static_cast<T>(reinterpret_cast<T>(object)->staticMetaObject.cast(object));
}


template <class T> inline const char * qobject_interface_iid()
{ return 0; }






# 500 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
 QDebug operator<<(QDebug, const QObject *);


# 503 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"
namespace QtPrivate {
inline QObject & deref_for_methodcall(QObject &o) { return o; }
inline QObject & deref_for_methodcall(QObject *o) { return *o; }
}


# 509 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"





# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"
class QAnimationGroup;
class QSequentialAnimationGroup;
class QAnimationDriver;

class QAbstractAnimationPrivate;
class  QAbstractAnimation : public QObject
{
Q_OBJECT
Q_ENUMS(State)
Q_ENUMS(Direction)
Q_PROPERTY(State state READ state NOTIFY stateChanged)
Q_PROPERTY(int loopCount READ loopCount WRITE setLoopCount)
Q_PROPERTY(int currentTime READ currentTime WRITE setCurrentTime)
Q_PROPERTY(int currentLoop READ currentLoop NOTIFY currentLoopChanged)
Q_PROPERTY(Direction direction READ direction WRITE setDirection NOTIFY directionChanged)
Q_PROPERTY(int duration READ duration)

public:
enum Direction {
Forward,
Backward
};

enum State {
Stopped,
Paused,
Running
};

enum DeletionPolicy {
KeepWhenStopped = 0,
DeleteWhenStopped
};

QAbstractAnimation(QObject *parent = 0);
virtual ~QAbstractAnimation();

State state() const;

QAnimationGroup *group() const;

Direction direction() const;
void setDirection(Direction direction);

int currentTime() const;
int currentLoopTime() const;

int loopCount() const;
void setLoopCount(int loopCount);
int currentLoop() const;

virtual int duration() const = 0;
int totalDuration() const;

signals:
void finished();
void stateChanged(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
void currentLoopChanged(int currentLoop);
void directionChanged(QAbstractAnimation::Direction);

public slots:
void start(QAbstractAnimation::DeletionPolicy policy = KeepWhenStopped);
void pause();
void resume();
void setPaused(bool);
void stop();
void setCurrentTime(int msecs);

protected:
QAbstractAnimation(QAbstractAnimationPrivate &dd, QObject *parent = 0);
bool event(QEvent *event);

virtual void updateCurrentTime(int currentTime) = 0;
virtual void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
virtual void updateDirection(QAbstractAnimation::Direction direction);

private:
QAbstractAnimation(const QAbstractAnimation &) ; QAbstractAnimation &operator=(const QAbstractAnimation &) ;
inline QAbstractAnimationPrivate* d_func() { return reinterpret_cast<QAbstractAnimationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractAnimationPrivate* d_func() const { return reinterpret_cast<const QAbstractAnimationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractAnimationPrivate;
};

class QAnimationDriverPrivate;
class  QAnimationDriver : public QObject
{
Q_OBJECT
inline QAnimationDriverPrivate* d_func() { return reinterpret_cast<QAnimationDriverPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAnimationDriverPrivate* d_func() const { return reinterpret_cast<const QAnimationDriverPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAnimationDriverPrivate;

public:
QAnimationDriver(QObject *parent = 0);
~QAnimationDriver();

virtual void advance();

void install();
void uninstall();

bool isRunning() const;

virtual qint64 elapsed() const;

void setStartTime(qint64 startTime);
qint64 startTime() const;

signals:
void started();
void stopped();

protected:
void advanceAnimation(qint64 timeStep = -1);
virtual void start();
virtual void stop();

QAnimationDriver(QAnimationDriverPrivate &dd, QObject *parent = 0);

private:
friend class QUnifiedTimer;

};






# 176 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"



# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"


















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"
class QAnimationGroupPrivate;
class  QAnimationGroup : public QAbstractAnimation
{
Q_OBJECT

public:
QAnimationGroup(QObject *parent = 0);
~QAnimationGroup();

QAbstractAnimation *animationAt(int index) const;
int animationCount() const;
int indexOfAnimation(QAbstractAnimation *animation) const;
void addAnimation(QAbstractAnimation *animation);
void insertAnimation(int index, QAbstractAnimation *animation);
void removeAnimation(QAbstractAnimation *animation);
QAbstractAnimation *takeAnimation(int index);
void clear();

protected:
QAnimationGroup(QAnimationGroupPrivate &dd, QObject *parent);
bool event(QEvent *event);

private:
QAnimationGroup(const QAnimationGroup &) ; QAnimationGroup &operator=(const QAnimationGroup &) ;
inline QAnimationGroupPrivate* d_func() { return reinterpret_cast<QAnimationGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAnimationGroupPrivate* d_func() const { return reinterpret_cast<const QAnimationGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAnimationGroupPrivate;
};



# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"



# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qparallelanimationgroup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"



















































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qparallelanimationgroup.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qparallelanimationgroup.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qparallelanimationgroup.h"
class QParallelAnimationGroupPrivate;
class  QParallelAnimationGroup : public QAnimationGroup
{
Q_OBJECT

public:
QParallelAnimationGroup(QObject *parent = 0);
~QParallelAnimationGroup();

int duration() const;

protected:
QParallelAnimationGroup(QParallelAnimationGroupPrivate &dd, QObject *parent);
bool event(QEvent *event);

void updateCurrentTime(int currentTime);
void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
void updateDirection(QAbstractAnimation::Direction direction);

private:
QParallelAnimationGroup(const QParallelAnimationGroup &) ; QParallelAnimationGroup &operator=(const QParallelAnimationGroup &) ;
inline QParallelAnimationGroupPrivate* d_func() { return reinterpret_cast<QParallelAnimationGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QParallelAnimationGroupPrivate* d_func() const { return reinterpret_cast<const QParallelAnimationGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QParallelAnimationGroupPrivate;

};



# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qparallelanimationgroup.h"



# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpauseanimation.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"



















































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpauseanimation.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpauseanimation.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpauseanimation.h"
class QPauseAnimationPrivate;

class  QPauseAnimation : public QAbstractAnimation
{
Q_OBJECT
Q_PROPERTY(int duration READ duration WRITE setDuration)
public:
QPauseAnimation(QObject *parent = 0);
QPauseAnimation(int msecs, QObject *parent = 0);
~QPauseAnimation();

int duration() const;
void setDuration(int msecs);

protected:
bool event(QEvent *e);
void updateCurrentTime(int);

private:
QPauseAnimation(const QPauseAnimation &) ; QPauseAnimation &operator=(const QPauseAnimation &) ;
inline QPauseAnimationPrivate* d_func() { return reinterpret_cast<QPauseAnimationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPauseAnimationPrivate* d_func() const { return reinterpret_cast<const QPauseAnimationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPauseAnimationPrivate;
};



# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpauseanimation.h"



# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpropertyanimation.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"



































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"









































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"










# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"


class QRegion;

template <typename T>
class QVector
{
typedef QTypedArrayData<T> Data;
Data *d;

public:
inline QVector() : d(Data::sharedNull()) { }
explicit QVector(int size);
QVector(int size, const T &t);
inline QVector(const QVector<T> &v);
inline ~QVector() { if (!d->ref.deref()) freeData(d); }
QVector<T> &operator=(const QVector<T> &v);





# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
inline void swap(QVector<T> &other) { qSwap(d, other.d); }



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
bool operator==(const QVector<T> &v) const;
inline bool operator!=(const QVector<T> &v) const { return !(*this == v); }

inline int size() const { return d->size; }

inline bool isEmpty() const { return d->size == 0; }

void resize(int size);

inline int capacity() const { return int(d->alloc); }
void reserve(int size);
inline void squeeze()
{
reallocData(d->size, d->size);
if (d->capacityReserved) {


d->capacityReserved = 0;
}
}

inline void detach();
inline bool isDetached() const { return !d->ref.isShared(); }
inline void setSharable(bool sharable)
{
if (sharable == d->ref.isSharable())
return;
if (!sharable)
detach();

if (d == Data::unsharableEmpty()) {
if (sharable)
d = Data::sharedNull();
} else {
d->ref.setSharable(sharable);
}
qt_noop();
}

inline bool isSharedWith(const QVector<T> &other) const { return d == other.d; }

inline T *data() { detach(); return d->begin(); }
inline const T *data() const { return d->begin(); }
inline const T *constData() const { return d->begin(); }
void clear();

const T &at(int i) const;
T &operator[](int i);
const T &operator[](int i) const;
void append(const T &t);
void prepend(const T &t);
void insert(int i, const T &t);
void insert(int i, int n, const T &t);
void replace(int i, const T &t);
void remove(int i);
void remove(int i, int n);
inline void removeFirst() { qt_noop(); erase(d->begin()); }
inline void removeLast();
inline T takeFirst() { qt_noop(); T r = first(); removeFirst(); return r; }
inline T takeLast() { qt_noop(); T r = last(); removeLast(); return r; }

QVector<T> &fill(const T &t, int size = -1);

int indexOf(const T &t, int from = 0) const;
int lastIndexOf(const T &t, int from = -1) const;
bool contains(const T &t) const;
int count(const T &t) const;


typedef typename Data::iterator iterator;
typedef typename Data::const_iterator const_iterator;

# 157 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
inline iterator begin() { detach(); return d->begin(); }
inline const_iterator begin() const { return d->constBegin(); }
inline const_iterator cbegin() const { return d->constBegin(); }
inline const_iterator constBegin() const { return d->constBegin(); }
inline iterator end() { detach(); return d->end(); }
inline const_iterator end() const { return d->constEnd(); }
inline const_iterator cend() const { return d->constEnd(); }
inline const_iterator constEnd() const { return d->constEnd(); }










# 175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
iterator insert(iterator before, int n, const T &x);
inline iterator insert(iterator before, const T &x) { return insert(before, 1, x); }
iterator erase(iterator begin, iterator end);
inline iterator erase(iterator pos) { return erase(pos, pos+1); }


inline int count() const { return d->size; }
inline T& first() { qt_noop(); return *begin(); }
inline const T &first() const { qt_noop(); return *begin(); }
inline T& last() { qt_noop(); return *(end()-1); }
inline const T &last() const { qt_noop(); return *(end()-1); }
inline bool startsWith(const T &t) const { return !isEmpty() && first() == t; }
inline bool endsWith(const T &t) const { return !isEmpty() && last() == t; }
QVector<T> mid(int pos, int length = -1) const;

T value(int i) const;
T value(int i, const T &defaultValue) const;


typedef T value_type;
typedef value_type* pointer;
typedef const value_type* const_pointer;
typedef value_type& reference;
typedef const value_type& const_reference;
typedef qptrdiff difference_type;
typedef iterator Iterator;
typedef const_iterator ConstIterator;
typedef int size_type;
inline void push_back(const T &t) { append(t); }
inline void push_front(const T &t) { prepend(t); }
void pop_back() { removeLast(); }
void pop_front() { removeFirst(); }
inline bool empty() const
{ return d->size == 0; }
inline T& front() { return first(); }
inline const_reference front() const { return first(); }
inline reference back() { return last(); }
inline const_reference back() const { return last(); }


QVector<T> &operator+=(const QVector<T> &l);
inline QVector<T> operator+(const QVector<T> &l) const
{ QVector n = *this; n += l; return n; }
inline QVector<T> &operator+=(const T &t)
{ append(t); return *this; }
inline QVector<T> &operator<< (const T &t)
{ append(t); return *this; }
inline QVector<T> &operator<<(const QVector<T> &l)
{ *this += l; return *this; }

QList<T> toList() const;

static QVector<T> fromList(const QList<T> &list);

static inline QVector<T> fromStdVector(const std::vector<T> &vector)
{ QVector<T> tmp; tmp.reserve(int(vector.size())); qCopy(vector.begin(), vector.end(), std::back_inserter(tmp)); return tmp; }
inline std::vector<T> toStdVector() const
{ std::vector<T> tmp; tmp.reserve(size()); qCopy(constBegin(), constEnd(), std::back_inserter(tmp)); return tmp; }
private:
friend class QRegion; 

void reallocData(const int size, const int alloc, QArrayData::AllocationOptions options = QArrayData::Default);
void freeData(Data *d);
void defaultConstruct(T *from, T *to);
void copyConstruct(const T *srcFrom, const T *srcTo, T *dstFrom);
void destruct(T *from, T *to);

class AlignmentDummy { Data header; T array[1]; };
};





# 249 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
template <typename T>
void QVector<T>::defaultConstruct(T *from, T *to)
{
if (QTypeInfo<T>::isComplex) {
while (from != to) {
new (from++) T();
}
} else {
::memset(static_cast<void *>(from), 0, (to - from) * sizeof(T));
}
}





# 265 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
template <typename T>
void QVector<T>::copyConstruct(const T *srcFrom, const T *srcTo, T *dstFrom)
{
if (QTypeInfo<T>::isComplex) {
while (srcFrom != srcTo)
new (dstFrom++) T(*srcFrom++);
} else {
::memcpy(static_cast<void *>(dstFrom), static_cast<const void *>(srcFrom), (srcTo - srcFrom) * sizeof(T));
}
}

template <typename T>
void QVector<T>::destruct(T *from, T *to)
{
if (QTypeInfo<T>::isComplex) {
while (from != to) {
from++->~T();
}
}
}

template <typename T>
inline QVector<T>::QVector(const QVector<T> &v)
{
if (v.d->ref.ref()) {
d = v.d;
} else {
if (v.d->capacityReserved) {
d = Data::allocate(v.d->alloc);
d->capacityReserved = true;
} else {
d = Data::allocate(v.d->size);
}
if (d->alloc) {
copyConstruct(v.d->begin(), v.d->end(), d->begin());
d->size = v.d->size;
}
}
}

template <typename T>
void QVector<T>::detach()
{
if (!isDetached()) {
if (d->alloc)
reallocData(d->size, int(d->alloc));
else
d = Data::unsharableEmpty();
}
qt_noop();
}

template <typename T>
void QVector<T>::reserve(int asize)
{
if (asize > int(d->alloc))
reallocData(d->size, asize);
if (isDetached())
d->capacityReserved = 1;
qt_noop();
}

template <typename T>
void QVector<T>::resize(int asize)
{
int newAlloc;
const int oldAlloc = int(d->alloc);
QArrayData::AllocationOptions opt;

if (asize > oldAlloc) { 
newAlloc = asize;
opt = QArrayData::Grow;
} else if (!d->capacityReserved && asize < d->size && asize < (oldAlloc >> 1)) { 
newAlloc = asize;
opt = QArrayData::Grow;
} else {
newAlloc = oldAlloc;
}
reallocData(asize, newAlloc, opt);
}
template <typename T>
inline void QVector<T>::clear()
{ *this = QVector<T>(); }
template <typename T>
inline const T &QVector<T>::at(int i) const
{ qt_noop();
return d->begin()[i]; }
template <typename T>
inline const T &QVector<T>::operator[](int i) const
{ qt_noop();
return d->begin()[i]; }
template <typename T>
inline T &QVector<T>::operator[](int i)
{ qt_noop();
return data()[i]; }
template <typename T>
inline void QVector<T>::insert(int i, const T &t)
{ qt_noop();
insert(begin() + i, 1, t); }
template <typename T>
inline void QVector<T>::insert(int i, int n, const T &t)
{ qt_noop();
insert(begin() + i, n, t); }
template <typename T>
inline void QVector<T>::remove(int i, int n)
{ qt_noop();
erase(d->begin() + i, d->begin() + i + n); }
template <typename T>
inline void QVector<T>::remove(int i)
{ qt_noop();
erase(d->begin() + i, d->begin() + i + 1); }
template <typename T>
inline void QVector<T>::prepend(const T &t)
{ insert(begin(), 1, t); }

template <typename T>
inline void QVector<T>::replace(int i, const T &t)
{
qt_noop();
const T copy(t);
data()[i] = copy;
}

template <typename T>
QVector<T> &QVector<T>::operator=(const QVector<T> &v)
{
if (v.d != d) {
QVector<T> tmp(v);
tmp.swap(*this);
}
return *this;
}

template <typename T>
QVector<T>::QVector(int asize)
{
qt_noop();
if ((asize > 0)) {
d = Data::allocate(asize);
d->size = asize;
defaultConstruct(d->begin(), d->end());
} else {
d = Data::sharedNull();
}
}

template <typename T>
QVector<T>::QVector(int asize, const T &t)
{
qt_noop();
if (asize > 0) {
d = Data::allocate(asize);
d->size = asize;
T* i = d->end();
while (i != d->begin())
new (--i) T(t);
} else {
d = Data::sharedNull();
}
}













# 438 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
template <typename T>
void QVector<T>::freeData(Data *x)
{
destruct(x->begin(), x->end());
Data::deallocate(x);
}

template <typename T>
void QVector<T>::reallocData(const int asize, const int aalloc, QArrayData::AllocationOptions options)
{
qt_noop();
Data *x = d;

const bool isShared = d->ref.isShared();

if (aalloc != 0) {
if (aalloc != int(d->alloc) || isShared) {
try {

x = Data::allocate(aalloc, options);
do { if (!(x)) qBadAlloc(); } while (0);

qt_noop();
qt_noop();
x->size = asize;

T *srcBegin = d->begin();
T *srcEnd = asize > d->size ? d->end() : d->begin() + asize;
T *dst = x->begin();

if (QTypeInfo<T>::isStatic || (isShared && QTypeInfo<T>::isComplex)) {

while (srcBegin != srcEnd) {
new (dst++) T(*srcBegin++);
}
} else {
::memcpy(static_cast<void *>(dst), static_cast<void *>(srcBegin), (srcEnd - srcBegin) * sizeof(T));
dst += srcEnd - srcBegin;


if (asize < d->size)
destruct(d->begin() + asize, d->end());
}

if (asize > d->size) {

try {
defaultConstruct(dst, x->end());
} catch (...) {

destruct(x->begin(), dst);
throw;
}
}
} catch (...) {
Data::deallocate(x);
throw;
}
x->capacityReserved = d->capacityReserved;
} else {
qt_noop(); 
qt_noop(); 
qt_noop(); 
if (asize <= d->size) {
destruct(x->begin() + asize, x->end()); 
} else {
defaultConstruct(x->end(), x->begin() + asize); 
}
x->size = asize;
}
} else {
x = Data::sharedNull();
}
if (d != x) {
if (!d->ref.deref()) {
if (QTypeInfo<T>::isStatic || !aalloc || (isShared && QTypeInfo<T>::isComplex)) {


freeData(d);
} else {
Data::deallocate(d);
}
}
d = x;
}

qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
}

template<typename T>
 T QVector<T>::value(int i) const
{
if (i < 0 || i >= d->size) {
return T();
}
return d->begin()[i];
}
template<typename T>
 T QVector<T>::value(int i, const T &defaultValue) const
{
return ((i < 0 || i >= d->size) ? defaultValue : d->begin()[i]);
}

template <typename T>
void QVector<T>::append(const T &t)
{
const T copy(t);
const bool isTooSmall = uint(d->size + 1) > d->alloc;
if (!isDetached() || isTooSmall) {
QArrayData::AllocationOptions opt(isTooSmall ? QArrayData::Grow : QArrayData::Default);
reallocData(d->size, isTooSmall ? d->size + 1 : d->alloc, opt);
}
if (QTypeInfo<T>::isComplex)
new (d->end()) T(copy);
else
*d->end() = copy;
++d->size;
}

template <typename T>
inline void QVector<T>::removeLast()
{
qt_noop();

if (d->alloc) {
if (d->ref.isShared()) {
reallocData(d->size - 1, int(d->alloc));
return;
}
if (QTypeInfo<T>::isComplex)
(d->data() + d->size - 1)->~T();
--d->size;
}
}

template <typename T>
typename QVector<T>::iterator QVector<T>::insert(iterator before, size_type n, const T &t)
{
int offset = std::distance(d->begin(), before);
if (n != 0) {
const T copy(t);
if (!isDetached() || d->size + n > int(d->alloc))
reallocData(d->size, d->size + n, QArrayData::Grow);
if (QTypeInfo<T>::isStatic) {
T *b = d->end();
T *i = d->end() + n;
while (i != b)
new (--i) T;
i = d->end();
T *j = i + n;
b = d->begin() + offset;
while (i != b)
*--j = *--i;
i = b+n;
while (i != b)
*--i = copy;
} else {
T *b = d->begin() + offset;
T *i = b + n;
memmove(i, b, (d->size - offset) * sizeof(T));
while (i != b)
new (--i) T(copy);
}
d->size += n;
}
return d->begin() + offset;
}

template <typename T>
typename QVector<T>::iterator QVector<T>::erase(iterator abegin, iterator aend)
{
const int itemsToErase = aend - abegin;

if (!itemsToErase)
return abegin;

qt_noop();
qt_noop();
qt_noop();

const int itemsUntouched = abegin - d->begin();




if (d->alloc) {
detach();
abegin = d->begin() + itemsUntouched;
aend = abegin + itemsToErase;
if (QTypeInfo<T>::isStatic) {
iterator moveBegin = abegin + itemsToErase;
iterator moveEnd = d->end();
while (moveBegin != moveEnd) {
if (QTypeInfo<T>::isComplex)
abegin->~T();
new (abegin++) T(*moveBegin++);
}
if (abegin < d->end()) {

destruct(abegin, d->end());
}
} else {
destruct(abegin, aend);
memmove(abegin, aend, (d->size - itemsToErase - itemsUntouched) * sizeof(T));
}
d->size -= itemsToErase;
}
return d->begin() + itemsUntouched;
}

template <typename T>
bool QVector<T>::operator==(const QVector<T> &v) const
{
if (d->size != v.d->size)
return false;
if (d == v.d)
return true;
T* b = d->begin();
T* i = b + d->size;
T* j = v.d->end();
while (i != b)
if (!(*--i == *--j))
return false;
return true;
}

template <typename T>
QVector<T> &QVector<T>::fill(const T &from, int asize)
{
const T copy(from);
resize(asize < 0 ? d->size : asize);
if (d->size) {
T *i = d->end();
T *b = d->begin();
while (i != b)
*--i = copy;
}
return *this;
}

template <typename T>
QVector<T> &QVector<T>::operator+=(const QVector &l)
{
uint newSize = d->size + l.d->size;
const bool isTooSmall = newSize > d->alloc;
if (!isDetached() || isTooSmall) {
QArrayData::AllocationOptions opt(isTooSmall ? QArrayData::Grow : QArrayData::Default);
reallocData(d->size, isTooSmall ? newSize : d->alloc, opt);
}

if (d->alloc) {
T *w = d->begin() + newSize;
T *i = l.d->end();
T *b = l.d->begin();
while (i != b) {
if (QTypeInfo<T>::isComplex)
new (--w) T(*--i);
else
*--w = *--i;
}
d->size = newSize;
}
return *this;
}

template <typename T>
int QVector<T>::indexOf(const T &t, int from) const
{
if (from < 0)
from = qMax(from + d->size, 0);
if (from < d->size) {
T* n = d->begin() + from - 1;
T* e = d->end();
while (++n != e)
if (*n == t)
return n - d->begin();
}
return -1;
}

template <typename T>
int QVector<T>::lastIndexOf(const T &t, int from) const
{
if (from < 0)
from += d->size;
else if (from >= d->size)
from = d->size-1;
if (from >= 0) {
T* b = d->begin();
T* n = d->begin() + from + 1;
while (n != b) {
if (*--n == t)
return n - b;
}
}
return -1;
}

template <typename T>
bool QVector<T>::contains(const T &t) const
{
T* b = d->begin();
T* i = d->end();
while (i != b)
if (*--i == t)
return true;
return false;
}

template <typename T>
int QVector<T>::count(const T &t) const
{
int c = 0;
T* b = d->begin();
T* i = d->end();
while (i != b)
if (*--i == t)
++c;
return c;
}

template <typename T>
 QVector<T> QVector<T>::mid(int pos, int length) const
{
if (length < 0)
length = size() - pos;
if (pos == 0 && length == size())
return *this;
if (pos + length > size())
length = size() - pos;
QVector<T> copy;
copy.reserve(length);
for (int i = pos; i < pos + length; ++i)
copy += at(i);
return copy;
}

template <typename T>
 QList<T> QVector<T>::toList() const
{
QList<T> result;
result.reserve(size());
for (int i = 0; i < size(); ++i)
result.append(at(i));
return result;
}

template <typename T>
 QVector<T> QList<T>::toVector() const
{
QVector<T> result(size());
for (int i = 0; i < size(); ++i)
result[i] = at(i);
return result;
}

template <typename T>
QVector<T> QVector<T>::fromList(const QList<T> &list)
{
return list.toVector();
}

template <typename T>
QList<T> QList<T>::fromVector(const QVector<T> &vector)
{
return vector.toList();
}

template <class T> class QVectorIterator { typedef typename QVector<T>::const_iterator const_iterator; QVector<T> c; const_iterator i; public: inline QVectorIterator(const QVector<T> &container) : c(container), i(c.constBegin()) {} inline QVectorIterator &operator=(const QVector<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableVectorIterator { typedef typename QVector<T>::iterator iterator; typedef typename QVector<T>::const_iterator const_iterator; QVector<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableVectorIterator(QVector<T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableVectorIterator() { c->setSharable(true); } inline QMutableVectorIterator &operator=(QVector<T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };






















# 835 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"






# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"



class QEasingCurvePrivate;
class QPointF;
class  QEasingCurve
{

Q_ENUMS(Type)
public:
enum Type {
Linear,
InQuad, OutQuad, InOutQuad, OutInQuad,
InCubic, OutCubic, InOutCubic, OutInCubic,
InQuart, OutQuart, InOutQuart, OutInQuart,
InQuint, OutQuint, InOutQuint, OutInQuint,
InSine, OutSine, InOutSine, OutInSine,
InExpo, OutExpo, InOutExpo, OutInExpo,
InCirc, OutCirc, InOutCirc, OutInCirc,
InElastic, OutElastic, InOutElastic, OutInElastic,
InBack, OutBack, InOutBack, OutInBack,
InBounce, OutBounce, InOutBounce, OutInBounce,
InCurve, OutCurve, SineCurve, CosineCurve,
BezierSpline, TCBSpline, Custom, NCurveTypes
};

QEasingCurve(Type type = Linear);
QEasingCurve(const QEasingCurve &other);
~QEasingCurve();

QEasingCurve &operator=(const QEasingCurve &other)
{ if ( this != &other ) { QEasingCurve copy(other); swap(copy); } return *this; }






# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
inline void swap(QEasingCurve &other) { qSwap(d_ptr, other.d_ptr); }

bool operator==(const QEasingCurve &other) const;
inline bool operator!=(const QEasingCurve &other) const
{ return !(this->operator==(other)); }

qreal amplitude() const;
void setAmplitude(qreal amplitude);

qreal period() const;
void setPeriod(qreal period);

qreal overshoot() const;
void setOvershoot(qreal overshoot);

void addCubicBezierSegment(const QPointF & c1, const QPointF & c2, const QPointF & endPoint);
void addTCBSegment(const QPointF &nextPoint, qreal t, qreal c, qreal b);
QVector<QPointF> toCubicSpline() const;




# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
Type type() const;
void setType(Type type);
typedef qreal (*EasingFunction)(qreal progress);
void setCustomType(EasingFunction func);
EasingFunction customType() const;

qreal valueForProgress(qreal progress) const;
private:
QEasingCurvePrivate *d_ptr;

# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
friend  QDebug operator<<(QDebug debug, const QEasingCurve &item);


# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
friend  QDataStream &operator<<(QDataStream &, const QEasingCurve&);
friend  QDataStream &operator>>(QDataStream &, QEasingCurve &);

# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
};
template<> class QTypeInfo<QEasingCurve > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QEasingCurve)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QEasingCurve) }; static inline const char *name() { return "QEasingCurve"; } };


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
 QDebug operator<<(QDebug debug, const QEasingCurve &item);



# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"
 QDataStream &operator<<(QDataStream &, const QEasingCurve&);
 QDataStream &operator>>(QDataStream &, QEasingCurve &);


# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractanimation.h"


















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"



template <class T1, class T2>
struct QPair
{
typedef T1 first_type;
typedef T2 second_type;

QPair() : first(), second() {}
QPair(const T1 &t1, const T2 &t2) : first(t1), second(t2) {}


T1 first;
T2 second;
};



template<class T1, class T2>
class QTypeInfo<QPair<T1, T2> > : public QTypeInfoMerger<QPair<T1, T2>, T1, T2> {}; 

template <class T1, class T2>
inline bool operator==(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{ return p1.first == p2.first && p1.second == p2.second; }

template <class T1, class T2>
inline bool operator!=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{ return !(p1 == p2); }

template <class T1, class T2>
inline bool operator<(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return p1.first < p2.first || (!(p2.first < p1.first) && p1.second < p2.second);
}

template <class T1, class T2>
inline bool operator>(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return p2 < p1;
}

template <class T1, class T2>
inline bool operator<=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return !(p2 < p1);
}

template <class T1, class T2>
inline bool operator>=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
{
return !(p1 < p2);
}

template <class T1, class T2>
 QPair<T1, T2> qMakePair(const T1 &x, const T2 &y)
{
return QPair<T1, T2>(x, y);
}




# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"













# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"












template <class Key> inline bool qMapLessThanKey(const Key &key1, const Key &key2)
{
return key1 < key2;
}

template <class Ptr> inline bool qMapLessThanKey(const Ptr *key1, const Ptr *key2)
{
enum {q_static_assert_result61 = sizeof(QStaticAssertFailure<!!(sizeof(quintptr) == sizeof(const Ptr *))>)};
return quintptr(key1) < quintptr(key2);
}

struct QMapDataBase;
template <class Key, class T> struct QMapData;

struct  QMapNodeBase
{
quintptr p;
QMapNodeBase *left;
QMapNodeBase *right;

enum Color { Red = 0, Black = 1 };
enum { Mask = 3 }; 

const QMapNodeBase *nextNode() const;
QMapNodeBase *nextNode() { return const_cast<QMapNodeBase *>(const_cast<const QMapNodeBase *>(this)->nextNode()); }
const QMapNodeBase *previousNode() const;
QMapNodeBase *previousNode() { return const_cast<QMapNodeBase *>(const_cast<const QMapNodeBase *>(this)->previousNode()); }

Color color() const { return Color(p & 1); }
void setColor(Color c) { if (c == Black) p |= Black; else p &= ~Black; }
QMapNodeBase *parent() const { return reinterpret_cast<QMapNodeBase *>(p & ~Mask); }
void setParent(QMapNodeBase *pp) { p = (p & Mask) | quintptr(pp); }

QMapNodeBase *minimumNode() { QMapNodeBase *n = this; while (n->left) n = n->left; return n; }
const QMapNodeBase *minimumNode() const { const QMapNodeBase *n = this; while (n->left) n = n->left; return n; }
};

template <class Key, class T>
struct QMapNode : public QMapNodeBase
{
Key key;
T value;

inline QMapNode *leftNode() const { return static_cast<QMapNode *>(left); }
inline QMapNode *rightNode() const { return static_cast<QMapNode *>(right); }

inline const QMapNode *nextNode() const { return static_cast<const QMapNode *>(QMapNodeBase::nextNode()); }
inline const QMapNode *previousNode() const { return static_cast<const QMapNode *>(QMapNodeBase::previousNode()); }
inline QMapNode *nextNode() { return static_cast<QMapNode *>(QMapNodeBase::nextNode()); }
inline QMapNode *previousNode() { return static_cast<QMapNode *>(QMapNodeBase::previousNode()); }

QMapNode *minimumNode() { return static_cast<QMapNode *>(QMapNodeBase::minimumNode()); }
const QMapNode *minimumNode() const { return static_cast<QMapNode *>(QMapNodeBase::minimumNode()); }

QMapNode<Key, T> *copy(QMapData<Key, T> *d) const;

void destroySubTree();

QMapNode<Key, T> *lowerBound(const Key &key);
QMapNode<Key, T> *upperBound(const Key &key);

private:
QMapNode() ;
QMapNode(const QMapNode &) ; QMapNode &operator=(const QMapNode &) ;
};

template <class Key, class T>
inline QMapNode<Key, T> *QMapNode<Key, T>::lowerBound(const Key &akey)
{
QMapNode<Key, T> *n = this;
QMapNode<Key, T> *last = 0;
while (n) {
if (!qMapLessThanKey(n->key, akey)) {
last = n;
n = n->leftNode();
} else {
n = n->rightNode();
}
}
return last;
}

template <class Key, class T>
inline QMapNode<Key, T> *QMapNode<Key, T>::upperBound(const Key &akey)
{
QMapNode<Key, T> *n = this;
QMapNode<Key, T> *last = 0;
while (n) {
if (qMapLessThanKey(akey, n->key)) {
last = n;
n = n->leftNode();
} else {
n = n->rightNode();
}
}
return last;
}



struct  QMapDataBase
{
QtPrivate::RefCount ref;
int size;
QMapNodeBase header;
QMapNodeBase *mostLeftNode;

void rotateLeft(QMapNodeBase *x);
void rotateRight(QMapNodeBase *x);
void rebalance(QMapNodeBase *x);
void freeNodeAndRebalance(QMapNodeBase *z);
void recalcMostLeftNode();

QMapNodeBase *createNode(int size, int alignment, QMapNodeBase *parent, bool left);
void freeTree(QMapNodeBase *root, int alignment);

static const QMapDataBase shared_null;

static QMapDataBase *createData();
static void freeData(QMapDataBase *d);
};

template <class Key, class T>
struct QMapData : public QMapDataBase
{
typedef QMapNode<Key, T> Node;

Node *root() const { return static_cast<Node *>(header.left); }

const Node *end() const { return static_cast<const Node *>(&header); }
Node *end() { return static_cast<Node *>(&header); }
const Node *begin() const { if (root()) return static_cast<const Node*>(mostLeftNode); return end(); }
Node *begin() { if (root()) return static_cast<Node*>(mostLeftNode); return end(); }

void deleteNode(Node *z);
Node *findNode(const Key &akey) const;
void nodeRange(const Key &akey, Node **first, Node **last);

Node *createNode(const Key &k, const T &v, Node *parent = 0, bool left = false)
{
Node *n = static_cast<Node *>(QMapDataBase::createNode(sizeof(Node), (size_t(::QtPrivate::AlignOf<Node>::Value)),
parent, left));
try {
new (&n->key) Key(k);
try {
new (&n->value) T(v);
} catch (...) {
n->key.~Key();
throw;
}
} catch (...) {
QMapDataBase::freeNodeAndRebalance(n);
throw;
}
return n;
}

static QMapData *create() {
return static_cast<QMapData *>(createData());
}

void destroy() {
if (root()) {
root()->destroySubTree();
freeTree(header.left, (size_t(::QtPrivate::AlignOf<Node>::Value)));
}
freeData(this);
}
};

template <class Key, class T>
QMapNode<Key, T> *QMapNode<Key, T>::copy(QMapData<Key, T> *d) const
{
QMapNode<Key, T> *n = d->createNode(key, value);
n->setColor(color());
if (left) {
n->left = leftNode()->copy(d);
n->left->setParent(n);
} else {
n->left = 0;
}
if (right) {
n->right = rightNode()->copy(d);
n->right->setParent(n);
} else {
n->right = 0;
}
return n;
}

template <class Key, class T>
void QMapNode<Key, T>::destroySubTree()
{
if (QTypeInfo<Key>::isComplex)
key.~Key();
if (QTypeInfo<T>::isComplex)
value.~T();
if (QTypeInfo<Key>::isComplex || QTypeInfo<T>::isComplex) {
if (left)
leftNode()->destroySubTree();
if (right)
rightNode()->destroySubTree();
}
}

template <class Key, class T>
void QMapData<Key, T>::deleteNode(QMapNode<Key, T> *z)
{
if (QTypeInfo<Key>::isComplex)
z->key.~Key();
if (QTypeInfo<T>::isComplex)
z->value.~T();
freeNodeAndRebalance(z);
}

template <class Key, class T>
QMapNode<Key, T> *QMapData<Key, T>::findNode(const Key &akey) const
{
Node *lb = root()->lowerBound(akey);
if (lb && !qMapLessThanKey(akey, lb->key))
return lb;
return 0;
}


template <class Key, class T>
void QMapData<Key, T>::nodeRange(const Key &akey, QMapNode<Key, T> **first, QMapNode<Key, T> **last)
{
Node *n = root();
Node *l = end();
while (n) {
if (qMapLessThanKey(akey, n->key)) {
l = n;
n = n->leftNode();
} else if (qMapLessThanKey(n->key, akey)) {
n = n->rightNode();
} else {
*first = n->leftNode()->lowerBound(akey);
if (!*first)
*first = n;
*last = n->rightNode()->upperBound(akey);
if (!*last)
*last = l;
return;
}
}
*first = *last = l;
}


template <class Key, class T>
class QMap
{
typedef QMapNode<Key, T> Node;

QMapData<Key, T> *d;

public:
inline QMap() : d(static_cast<QMapData<Key, T> *>(const_cast<QMapDataBase *>(&QMapDataBase::shared_null))) { }








# 340 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
QMap(const QMap<Key, T> &other);

inline ~QMap() { if (!d->ref.deref()) d->destroy(); }

QMap<Key, T> &operator=(const QMap<Key, T> &other);











# 356 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
inline void swap(QMap<Key, T> &other) { qSwap(d, other.d); }
explicit QMap(const typename std::map<Key, T> &other);
std::map<Key, T> toStdMap() const;

bool operator==(const QMap<Key, T> &other) const;
inline bool operator!=(const QMap<Key, T> &other) const { return !(*this == other); }

inline int size() const { return d->size; }

inline bool isEmpty() const { return d->size == 0; }

inline void detach() { if (d->ref.isShared()) detach_helper(); }
inline bool isDetached() const { return !d->ref.isShared(); }
inline void setSharable(bool sharable)
{
if (sharable == d->ref.isSharable())
return;
if (!sharable)
detach();

d->ref.setSharable(sharable);
}
inline bool isSharedWith(const QMap<Key, T> &other) const { return d == other.d; }

void clear();

int remove(const Key &key);
T take(const Key &key);

bool contains(const Key &key) const;
const Key key(const T &value, const Key &defaultKey = Key()) const;
const T value(const Key &key, const T &defaultValue = T()) const;
T &operator[](const Key &key);
const T operator[](const Key &key) const;

QList<Key> uniqueKeys() const;
QList<Key> keys() const;
QList<Key> keys(const T &value) const;
QList<T> values() const;
QList<T> values(const Key &key) const;
int count(const Key &key) const;

class const_iterator;

class iterator
{
friend class const_iterator;
Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;

inline iterator() : i(0) { }
inline iterator(Node *node) : i(node) { }

inline const Key &key() const { return i->key; }
inline T &value() const { return i->value; }
inline T &operator*() const { return i->value; }
inline T *operator->() const { return &i->value; }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }

inline iterator &operator++() {
i = i->nextNode();
return *this;
}
inline iterator operator++(int) {
iterator r = *this;
i = i->nextNode();
return r;
}
inline iterator &operator--() {
i = i->previousNode();
return *this;
}
inline iterator operator--(int) {
iterator r = *this;
i = i->previousNode();
return r;
}
inline iterator operator+(int j) const
{ iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { return *this = *this + j; }
inline iterator &operator-=(int j) { return *this = *this - j; }


# 447 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
public:
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }

# 453 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
friend class QMap<Key, T>;
};
friend class iterator;

class const_iterator
{
friend class iterator;
const Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() : i(0) { }
inline const_iterator(const Node *node) : i(node) { }



# 474 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
inline const_iterator(const iterator &o)

# 476 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
{ i = o.i; }

inline const Key &key() const { return i->key; }
inline const T &value() const { return i->value; }
inline const T &operator*() const { return i->value; }
inline const T *operator->() const { return &i->value; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }

inline const_iterator &operator++() {
i = i->nextNode();
return *this;
}
inline const_iterator operator++(int) {
const_iterator r = *this;
i = i->nextNode();
return r;
}
inline const_iterator &operator--() {
i = i->previousNode();
return *this;
}
inline const_iterator operator--(int) {
const_iterator r = *this;
i = i->previousNode();
return r;
}
inline const_iterator operator+(int j) const
{ const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { return *this = *this + j; }
inline const_iterator &operator-=(int j) { return *this = *this - j; }






# 514 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
friend class QMap<Key, T>;
};
friend class const_iterator;


inline iterator begin() { detach(); return iterator(d->begin()); }
inline const_iterator begin() const { return const_iterator(d->begin()); }
inline const_iterator constBegin() const { return const_iterator(d->begin()); }
inline const_iterator cbegin() const { return const_iterator(d->begin()); }
inline iterator end() { detach(); return iterator(d->end()); }
inline const_iterator end() const { return const_iterator(d->end()); }
inline const_iterator constEnd() const { return const_iterator(d->end()); }
inline const_iterator cend() const { return const_iterator(d->end()); }
iterator erase(iterator it);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return d->size; }
iterator find(const Key &key);
const_iterator find(const Key &key) const;
const_iterator constFind(const Key &key) const;
iterator lowerBound(const Key &key);
const_iterator lowerBound(const Key &key) const;
iterator upperBound(const Key &key);
const_iterator upperBound(const Key &key) const;
iterator insert(const Key &key, const T &value);
iterator insert(const_iterator pos, const Key &key, const T &value);
iterator insertMulti(const Key &key, const T &value);
iterator insertMulti(const_iterator pos, const Key &akey, const T &avalue);
QMap<Key, T> &unite(const QMap<Key, T> &other);


typedef Key key_type;
typedef T mapped_type;
typedef qptrdiff difference_type;
typedef int size_type;
inline bool empty() const { return isEmpty(); }
QPair<iterator, iterator> equal_range(const Key &akey);





# 558 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
private:
void detach_helper();
};

template <class Key, class T>
inline QMap<Key, T>::QMap(const QMap<Key, T> &other)
{
if (other.d->ref.ref()) {
d = other.d;
} else {
d = QMapData<Key, T>::create();
if (other.d->header.left) {
d->header.left = static_cast<Node *>(other.d->header.left)->copy(d);
d->header.left->setParent(&d->header);
d->recalcMostLeftNode();
}
}
}

template <class Key, class T>
inline QMap<Key, T> &QMap<Key, T>::operator=(const QMap<Key, T> &other)
{
if (d != other.d) {
QMap<Key, T> tmp(other);
tmp.swap(*this);
}
return *this;
}

template <class Key, class T>
inline void QMap<Key, T>::clear()
{
*this = QMap<Key, T>();
}


template <class Key, class T>
inline const T QMap<Key, T>::value(const Key &akey, const T &adefaultValue) const
{
Node *n = d->findNode(akey);
return n ? n->value : adefaultValue;
}

template <class Key, class T>
inline const T QMap<Key, T>::operator[](const Key &akey) const
{
return value(akey);
}

template <class Key, class T>
inline T &QMap<Key, T>::operator[](const Key &akey)
{
detach();
Node *n = d->findNode(akey);
if (!n)
return *insert(akey, T());
return n->value;
}

template <class Key, class T>
inline int QMap<Key, T>::count(const Key &akey) const
{
Node *firstNode;
Node *lastNode;
d->nodeRange(akey, &firstNode, &lastNode);

const_iterator first(firstNode);
const const_iterator last(lastNode);
int cnt = 0;
while (first != last) {
++cnt;
++first;
}
return cnt;
}

template <class Key, class T>
inline bool QMap<Key, T>::contains(const Key &akey) const
{
return d->findNode(akey) != 0;
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::insert(const Key &akey, const T &avalue)
{
detach();
Node *n = d->root();
Node *y = d->end();
Node *last = 0;
bool left = true;
while (n) {
y = n;
if (!qMapLessThanKey(n->key, akey)) {
last = n;
left = true;
n = n->leftNode();
} else {
left = false;
n = n->rightNode();
}
}
if (last && !qMapLessThanKey(akey, last->key)) {
last->value = avalue;
return iterator(last);
}
Node *z = d->createNode(akey, avalue, y, left);
return iterator(z);
}

template <class Key, class T>
typename QMap<Key, T>::iterator QMap<Key, T>::insert(const_iterator pos, const Key &akey, const T &avalue)
{
if (d->ref.isShared())
return this->insert(akey, avalue);

if (pos == constEnd()) {

Node *n = static_cast<Node *>(pos.i->left);
if (n) {
while (n->right)
n = static_cast<Node *>(n->right);

if (!qMapLessThanKey(n->key, akey))
return this->insert(akey, avalue); 




Node *z = d->createNode(akey, avalue, n, false); 
return iterator(z);
}
return this->insert(akey, avalue);
} else {


Node *next = const_cast<Node*>(pos.i);
if (qMapLessThanKey(next->key, akey))
return this->insert(akey, avalue); 

if (pos == constBegin()) {


if (!qMapLessThanKey(akey, next->key)) {
next->value = avalue; 
return iterator(next);
}

Node *z = d->createNode(akey, avalue, begin().i, true);
return iterator(z);
} else {
Node *prev = const_cast<Node*>(pos.i->previousNode());
if (!qMapLessThanKey(prev->key, akey)) {
return this->insert(akey, avalue); 
}

if (!qMapLessThanKey(akey, next->key)) {
next->value = avalue; 
return iterator(next);
}


if (prev->right == 0) {
Node *z = d->createNode(akey, avalue, prev, false);
return iterator(z);
}
if (next->left == 0) {
Node *z = d->createNode(akey, avalue, next, true);
return iterator(z);
}
qt_noop(); 
return this->insert(akey, avalue);
}
}
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::insertMulti(const Key &akey,
const T &avalue)
{
detach();
Node* y = d->end();
Node* x = static_cast<Node *>(d->root());
bool left = true;
while (x != 0) {
left = !qMapLessThanKey(x->key, akey);
y = x;
x = left ? x->leftNode() : x->rightNode();
}
Node *z = d->createNode(akey, avalue, y, left);
return iterator(z);
}

template <class Key, class T>
typename QMap<Key, T>::iterator QMap<Key, T>::insertMulti(const_iterator pos, const Key &akey, const T &avalue)
{
if (d->ref.isShared())
return this->insertMulti(akey, avalue);

if (pos == constEnd()) {

Node *n = static_cast<Node *>(pos.i->left);
if (n) {
while (n->right)
n = static_cast<Node *>(n->right);

if (!qMapLessThanKey(n->key, akey))
return this->insertMulti(akey, avalue); 
Node *z = d->createNode(akey, avalue, n, false); 
return iterator(z);
}
return this->insertMulti(akey, avalue);
} else {


Node *next = const_cast<Node*>(pos.i);
if (qMapLessThanKey(next->key, akey))
return this->insertMulti(akey, avalue); 

if (pos == constBegin()) {

Node *z = d->createNode(akey, avalue, begin().i, true);
return iterator(z);
} else {
Node *prev = const_cast<Node*>(pos.i->previousNode());
if (!qMapLessThanKey(prev->key, akey))
return this->insertMulti(akey, avalue); 


if (prev->right == 0) {
Node *z = d->createNode(akey, avalue, prev, false);
return iterator(z);
}
if (next->left == 0) {
Node *z = d->createNode(akey, avalue, next, true);
return iterator(z);
}
qt_noop(); 
return this->insertMulti(akey, avalue);
}
}
}


template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::constFind(const Key &akey) const
{
Node *n = d->findNode(akey);
return const_iterator(n ? n : d->end());
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::find(const Key &akey) const
{
return constFind(akey);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::find(const Key &akey)
{
detach();
Node *n = d->findNode(akey);
return iterator(n ? n : d->end());
}

template <class Key, class T>
inline QMap<Key, T> &QMap<Key, T>::unite(const QMap<Key, T> &other)
{
QMap<Key, T> copy(other);
const_iterator it = copy.constEnd();
const const_iterator b = copy.constBegin();
while (it != b) {
--it;
insertMulti(it.key(), it.value());
}
return *this;
}

template <class Key, class T>
QPair<typename QMap<Key, T>::iterator, typename QMap<Key, T>::iterator> QMap<Key, T>::equal_range(const Key &akey)
{
detach();
Node *first, *last;
d->nodeRange(akey, &first, &last);
return QPair<iterator, iterator>(iterator(first), iterator(last));
}























# 866 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
template <class Key, class T>
 int QMap<Key, T>::remove(const Key &akey)
{
detach();
int n = 0;
while (Node *node = d->findNode(akey)) {
d->deleteNode(node);
++n;
}
return n;
}

template <class Key, class T>
 T QMap<Key, T>::take(const Key &akey)
{
detach();

Node *node = d->findNode(akey);
if (node) {
T t = node->value;
d->deleteNode(node);
return t;
}
return T();
}

template <class Key, class T>
 typename QMap<Key, T>::iterator QMap<Key, T>::erase(iterator it)
{
if (it == iterator(d->end()))
return it;

Node *n = it.i;
++it;
d->deleteNode(n);
return it;
}

template <class Key, class T>
 void QMap<Key, T>::detach_helper()
{
QMapData<Key, T> *x = QMapData<Key, T>::create();
if (d->header.left) {
x->header.left = static_cast<Node *>(d->header.left)->copy(x);
x->header.left->setParent(&x->header);
}
if (!d->ref.deref())
d->destroy();
d = x;
d->recalcMostLeftNode();
}

template <class Key, class T>
 QList<Key> QMap<Key, T>::uniqueKeys() const
{
QList<Key> res;
res.reserve(size()); 
const_iterator i = begin();
if (i != end()) {
for (;;) {
const Key &aKey = i.key();
res.append(aKey);
do {
if (++i == end())
goto break_out_of_outer_loop;
} while (!qMapLessThanKey(aKey, i.key())); 
}
}
break_out_of_outer_loop:
return res;
}

template <class Key, class T>
 QList<Key> QMap<Key, T>::keys() const
{
QList<Key> res;
res.reserve(size());
const_iterator i = begin();
while (i != end()) {
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 QList<Key> QMap<Key, T>::keys(const T &avalue) const
{
QList<Key> res;
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 const Key QMap<Key, T>::key(const T &avalue, const Key &defaultKey) const
{
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
return i.key();
++i;
}

return defaultKey;
}

template <class Key, class T>
 QList<T> QMap<Key, T>::values() const
{
QList<T> res;
res.reserve(size());
const_iterator i = begin();
while (i != end()) {
res.append(i.value());
++i;
}
return res;
}

template <class Key, class T>
 QList<T> QMap<Key, T>::values(const Key &akey) const
{
QList<T> res;
Node *n = d->findNode(akey);
if (n) {
const_iterator it(n);
do {
res.append(*it);
++it;
} while (it != constEnd() && !qMapLessThanKey<Key>(akey, it.key()));
}
return res;
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::lowerBound(const Key &akey) const
{
Node *lb = d->root()->lowerBound(akey);
if (!lb)
lb = d->end();
return const_iterator(lb);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::lowerBound(const Key &akey)
{
detach();
Node *lb = d->root()->lowerBound(akey);
if (!lb)
lb = d->end();
return iterator(lb);
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator
QMap<Key, T>::upperBound(const Key &akey) const
{
Node *ub = d->root()->upperBound(akey);
if (!ub)
ub = d->end();
return const_iterator(ub);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::upperBound(const Key &akey)
{
detach();
Node *ub = d->root()->upperBound(akey);
if (!ub)
ub = d->end();
return iterator(ub);
}

template <class Key, class T>
 bool QMap<Key, T>::operator==(const QMap<Key, T> &other) const
{
if (size() != other.size())
return false;
if (d == other.d)
return true;

const_iterator it1 = begin();
const_iterator it2 = other.begin();

while (it1 != end()) {
if (!(it1.value() == it2.value()) || qMapLessThanKey(it1.key(), it2.key()) || qMapLessThanKey(it2.key(), it1.key()))
return false;
++it2;
++it1;
}
return true;
}

template <class Key, class T>
 QMap<Key, T>::QMap(const std::map<Key, T> &other)
{
d = QMapData<Key, T>::create();
typename std::map<Key,T>::const_iterator it = other.end();
while (it != other.begin()) {
--it;
d->createNode((*it).first, (*it).second, d->begin(), true); 
}
}

template <class Key, class T>
 std::map<Key, T> QMap<Key, T>::toStdMap() const
{
std::map<Key, T> map;
const_iterator it = end();
while (it != begin()) {
--it;
map.insert(map.begin(), std::pair<Key, T>(it.key(), it.value()));
}
return map;
}

template <class Key, class T>
class QMultiMap : public QMap<Key, T>
{
public:
QMultiMap() {}







# 1099 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
QMultiMap(const QMap<Key, T> &other) : QMap<Key, T>(other) {}
inline void swap(QMultiMap<Key, T> &other) { QMap<Key, T>::swap(other); }

inline typename QMap<Key, T>::iterator replace(const Key &key, const T &value)
{ return QMap<Key, T>::insert(key, value); }
inline typename QMap<Key, T>::iterator insert(const Key &key, const T &value)
{ return QMap<Key, T>::insertMulti(key, value); }
inline typename QMap<Key, T>::iterator insert(typename QMap<Key, T>::const_iterator pos, const Key &key, const T &value)
{ return QMap<Key, T>::insertMulti(pos, key, value); }

inline QMultiMap &operator+=(const QMultiMap &other)
{ this->unite(other); return *this; }
inline QMultiMap operator+(const QMultiMap &other) const
{ QMultiMap result = *this; result += other; return result; }









# 1122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
inline bool contains(const Key &key) const
{ return QMap<Key, T>::contains(key); }
inline int remove(const Key &key)
{ return QMap<Key, T>::remove(key); }
inline int count(const Key &key) const
{ return QMap<Key, T>::count(key); }
inline int count() const
{ return QMap<Key, T>::count(); }
inline typename QMap<Key, T>::iterator find(const Key &key)
{ return QMap<Key, T>::find(key); }
inline typename QMap<Key, T>::const_iterator find(const Key &key) const
{ return QMap<Key, T>::find(key); }
inline typename QMap<Key, T>::const_iterator constFind(const Key &key) const
{ return QMap<Key, T>::constFind(key); }


# 1138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"
bool contains(const Key &key, const T &value) const;

int remove(const Key &key, const T &value);

int count(const Key &key, const T &value) const;

typename QMap<Key, T>::iterator find(const Key &key, const T &value) {
typename QMap<Key, T>::iterator i(find(key));
typename QMap<Key, T>::iterator end(this->end());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QMap<Key, T>::const_iterator find(const Key &key, const T &value) const {
typename QMap<Key, T>::const_iterator i(constFind(key));
typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QMap<Key, T>::const_iterator constFind(const Key &key, const T &value) const
{ return find(key, value); }
private:
T &operator[](const Key &key);
const T operator[](const Key &key) const;
};

template <class Key, class T>
inline bool QMultiMap<Key, T>::contains(const Key &key, const T &value) const
{
return constFind(key, value) != QMap<Key, T>::constEnd();
}

template <class Key, class T>
inline int QMultiMap<Key, T>::remove(const Key &key, const T &value)
{
int n = 0;
typename QMap<Key, T>::iterator i(find(key));
typename QMap<Key, T>::iterator end(QMap<Key, T>::end());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value) {
i = this->erase(i);
++n;
} else {
++i;
}
}
return n;
}

template <class Key, class T>
inline int QMultiMap<Key, T>::count(const Key &key, const T &value) const
{
int n = 0;
typename QMap<Key, T>::const_iterator i(constFind(key));
typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
if (i.value() == value)
++n;
++i;
}
return n;
}

template <class Key, class T> class QMapIterator { typedef typename QMap<Key,T>::const_iterator const_iterator; typedef const_iterator Item; QMap<Key,T> c; const_iterator i, n; inline bool item_exists() const { return n != c.constEnd(); } public: inline QMapIterator(const QMap<Key,T> &container) : c(container), i(c.constBegin()), n(c.constEnd()) {} inline QMapIterator &operator=(const QMap<Key,T> &container) { c = container; i = c.constBegin(); n = c.constEnd(); return *this; } inline void toFront() { i = c.constBegin(); n = c.constEnd(); } inline void toBack() { i = c.constEnd(); n = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { const_iterator p = i; return --p; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while ((n = i) != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(n = --i) == t) return true; n = c.constEnd(); return false; } };
template <class Key, class T> class QMutableMapIterator { typedef typename QMap<Key,T>::iterator iterator; typedef typename QMap<Key,T>::const_iterator const_iterator; typedef iterator Item; QMap<Key,T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableMapIterator(QMap<Key,T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableMapIterator() { c->setSharable(true); } inline QMutableMapIterator &operator=(QMap<Key,T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = c->end(); } inline bool hasNext() const { return const_iterator(i) != c->constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return const_iterator(i) != c->constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { iterator p = i; return --p; } inline void remove() { if (const_iterator(n) != c->constEnd()) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) { if (const_iterator(n) != c->constEnd()) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while (const_iterator(n = i) != c->constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (const_iterator(i) != c->constBegin()) if (*(n = --i) == t) return true; n = c->end(); return false; } };




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"















































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"






# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"


class QBitArray;
class QByteArray;
class QString;
class QStringRef;
class QLatin1String;

inline uint qHash(char key, uint seed = 0)  { return uint(key) ^ seed; }
inline uint qHash(uchar key, uint seed = 0)  { return uint(key) ^ seed; }
inline uint qHash(signed char key, uint seed = 0)  { return uint(key) ^ seed; }
inline uint qHash(ushort key, uint seed = 0)  { return uint(key) ^ seed; }
inline uint qHash(short key, uint seed = 0)  { return uint(key) ^ seed; }
inline uint qHash(uint key, uint seed = 0)  { return key ^ seed; }
inline uint qHash(int key, uint seed = 0)  { return uint(key) ^ seed; }
inline uint qHash(ulong key, uint seed = 0) 
{
if (sizeof(ulong) > sizeof(uint)) {
return uint(((key >> (8 * sizeof(uint) - 1)) ^ key) & (~0U)) ^ seed;
} else {
return uint(key & (~0U)) ^ seed;
}
}
inline uint qHash(long key, uint seed = 0)  { return qHash(ulong(key), seed); }
inline uint qHash(quint64 key, uint seed = 0) 
{
if (sizeof(quint64) > sizeof(uint)) {
return uint(((key >> (8 * sizeof(uint) - 1)) ^ key) & (~0U)) ^ seed;
} else {
return uint(key & (~0U)) ^ seed;
}
}
inline uint qHash(qint64 key, uint seed = 0)  { return qHash(quint64(key), seed); }
inline uint qHash(QChar key, uint seed = 0)  { return qHash(key.unicode(), seed); }
 uint qHash(const QByteArray &key, uint seed = 0) ;
 uint qHash(const QString &key, uint seed = 0) ;
 uint qHash(const QStringRef &key, uint seed = 0) ;
 uint qHash(const QBitArray &key, uint seed = 0) ;
 uint qHash(QLatin1String key, uint seed = 0) ;
 uint qt_hash(const QString &key) ;
 uint qt_hash(const QStringRef &key) ;





# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
template <class T> inline uint qHash(const T *key, uint seed = 0) 
{
return qHash(reinterpret_cast<quintptr>(key), seed);
}




# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
template<typename T> inline uint qHash(const T &t, uint seed)

{ return (qHash(t) ^ seed); }

template <typename T1, typename T2> inline uint qHash(const QPair<T1, T2> &key, uint seed = 0)

{
uint h1 = qHash(key.first, seed);
uint h2 = qHash(key.second, seed);
return ((h1 << 16) | (h1 >> 16)) ^ h2 ^ seed;
}

struct  QHashData
{
struct Node {
Node *next;
uint h;
};

Node *fakeNext;
Node **buckets;
QtPrivate::RefCount ref;
int size;
int nodeSize;
short userNumBits;
short numBits;
int numBuckets;
uint seed;
uint sharable : 1;
uint strictAlignment : 1;
uint reserved : 30;

void *allocateNode(int nodeAlign);
void freeNode(void *node);
QHashData *detach_helper(void (*node_duplicate)(Node *, void *), void (*node_delete)(Node *),
int nodeSize, int nodeAlign);
bool willGrow();
void hasShrunk();
void rehash(int hint);
void free_helper(void (*node_delete)(Node *));
Node *firstNode();




# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
static Node *nextNode(Node *node);
static Node *previousNode(Node *node);

static const QHashData shared_null;
};

inline bool QHashData::willGrow()
{
if (size >= numBuckets) {
rehash(numBits + 1);
return true;
} else {
return false;
}
}

inline void QHashData::hasShrunk()
{
if (size <= (numBuckets >> 3) && numBits > userNumBits) {
try {
rehash(qMax(int(numBits) - 2, int(userNumBits)));
} catch (const std::bad_alloc &) {

}
}
}

inline QHashData::Node *QHashData::firstNode()
{
Node *e = reinterpret_cast<Node *>(this);
Node **bucket = buckets;
int n = numBuckets;
while (n--) {
if (*bucket != e)
return *bucket;
++bucket;
}
return e;
}

struct QHashDummyValue
{
};

inline bool operator==(const QHashDummyValue & , const QHashDummyValue & )
{
return true;
}

template<> class QTypeInfo<QHashDummyValue > { public: enum { isComplex = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QHashDummyValue)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QHashDummyValue) }; static inline const char *name() { return "QHashDummyValue"; } };

template <class Key, class T>
struct QHashNode
{
QHashNode *next;
const uint h;
const Key key;
T value;

inline QHashNode(const Key &key0, const T &value0, uint hash, QHashNode *n)
: next(n), h(hash), key(key0), value(value0) {}
inline bool same_key(uint h0, const Key &key0) const { return h0 == h && key0 == key; }
};

template <class Key, class T>
struct QHashDummyNode
{
QHashNode<Key, T> *next;
const uint h;
const Key key;

inline QHashDummyNode(const Key &key0, uint hash, QHashNode<Key, T> *n) : next(n), h(hash), key(key0) {}
};


























# 271 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
template <class Key, class T>
class QHash
{
typedef QHashDummyNode<Key, T> DummyNode;
typedef QHashNode<Key, T> Node;

union {
QHashData *d;
QHashNode<Key, T> *e;
};

static inline Node *concrete(QHashData::Node *node) {
return reinterpret_cast<Node *>(node);
}

static inline int alignOfNode() { return qMax<int>(sizeof(void*), (size_t(::QtPrivate::AlignOf<Node>::Value))); }
static inline int alignOfDummyNode() { return qMax<int>(sizeof(void*), (size_t(::QtPrivate::AlignOf<DummyNode>::Value))); }

public:
inline QHash() : d(const_cast<QHashData *>(&QHashData::shared_null)) { }









# 300 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
inline QHash(const QHash<Key, T> &other) : d(other.d) { d->ref.ref(); if (!d->sharable) detach(); }
inline ~QHash() { if (!d->ref.deref()) freeData(d); }

QHash<Key, T> &operator=(const QHash<Key, T> &other);





# 309 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
inline void swap(QHash<Key, T> &other) { qSwap(d, other.d); }

bool operator==(const QHash<Key, T> &other) const;
inline bool operator!=(const QHash<Key, T> &other) const { return !(*this == other); }

inline int size() const { return d->size; }

inline bool isEmpty() const { return d->size == 0; }

inline int capacity() const { return d->numBuckets; }
void reserve(int size);
inline void squeeze() { reserve(1); }

inline void detach() { if (d->ref.isShared()) detach_helper(); }
inline bool isDetached() const { return !d->ref.isShared(); }
inline void setSharable(bool sharable) { if (!sharable) detach(); if (d != &QHashData::shared_null) d->sharable = sharable; }
inline bool isSharedWith(const QHash<Key, T> &other) const { return d == other.d; }

void clear();

int remove(const Key &key);
T take(const Key &key);

bool contains(const Key &key) const;
const Key key(const T &value) const;
const Key key(const T &value, const Key &defaultKey) const;
const T value(const Key &key) const;
const T value(const Key &key, const T &defaultValue) const;
T &operator[](const Key &key);
const T operator[](const Key &key) const;

QList<Key> uniqueKeys() const;
QList<Key> keys() const;
QList<Key> keys(const T &value) const;
QList<T> values() const;
QList<T> values(const Key &key) const;
int count(const Key &key) const;

class const_iterator;

class iterator
{
friend class const_iterator;
friend class QHash<Key, T>;
QHashData::Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;

inline iterator() : i(0) { }
explicit inline iterator(void *node) : i(reinterpret_cast<QHashData::Node *>(node)) { }

inline const Key &key() const { return concrete(i)->key; }
inline T &value() const { return concrete(i)->value; }
inline T &operator*() const { return concrete(i)->value; }
inline T *operator->() const { return &concrete(i)->value; }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }

inline iterator &operator++() {
i = QHashData::nextNode(i);
return *this;
}
inline iterator operator++(int) {
iterator r = *this;
i = QHashData::nextNode(i);
return r;
}
inline iterator &operator--() {
i = QHashData::previousNode(i);
return *this;
}
inline iterator operator--(int) {
iterator r = *this;
i = QHashData::previousNode(i);
return r;
}
inline iterator operator+(int j) const
{ iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { return *this = *this + j; }
inline iterator &operator-=(int j) { return *this = *this - j; }


# 397 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
public:
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }

# 403 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
};
friend class iterator;

class const_iterator
{
friend class iterator;
QHashData::Node *i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() : i(0) { }
explicit inline const_iterator(void *node)
: i(reinterpret_cast<QHashData::Node *>(node)) { }



# 424 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
inline const_iterator(const iterator &o)

# 426 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
{ i = o.i; }

inline const Key &key() const { return concrete(i)->key; }
inline const T &value() const { return concrete(i)->value; }
inline const T &operator*() const { return concrete(i)->value; }
inline const T *operator->() const { return &concrete(i)->value; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }

inline const_iterator &operator++() {
i = QHashData::nextNode(i);
return *this;
}
inline const_iterator operator++(int) {
const_iterator r = *this;
i = QHashData::nextNode(i);
return r;
}
inline const_iterator &operator--() {
i = QHashData::previousNode(i);
return *this;
}
inline const_iterator operator--(int) {
const_iterator r = *this;
i = QHashData::previousNode(i);
return r;
}
inline const_iterator operator+(int j) const
{ const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { return *this = *this + j; }
inline const_iterator &operator-=(int j) { return *this = *this - j; }







# 465 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
};
friend class const_iterator;


inline iterator begin() { detach(); return iterator(d->firstNode()); }
inline const_iterator begin() const { return const_iterator(d->firstNode()); }
inline const_iterator cbegin() const { return const_iterator(d->firstNode()); }
inline const_iterator constBegin() const { return const_iterator(d->firstNode()); }
inline iterator end() { detach(); return iterator(e); }
inline const_iterator end() const { return const_iterator(e); }
inline const_iterator cend() const { return const_iterator(e); }
inline const_iterator constEnd() const { return const_iterator(e); }
iterator erase(iterator it);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return d->size; }
iterator find(const Key &key);
const_iterator find(const Key &key) const;
const_iterator constFind(const Key &key) const;
iterator insert(const Key &key, const T &value);
iterator insertMulti(const Key &key, const T &value);
QHash<Key, T> &unite(const QHash<Key, T> &other);


typedef T mapped_type;
typedef Key key_type;
typedef qptrdiff difference_type;
typedef int size_type;

inline bool empty() const { return isEmpty(); }






# 503 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
private:
void detach_helper();
void freeData(QHashData *d);
Node **findNode(const Key &key, uint *hp = 0) const;
Node *createNode(uint h, const Key &key, const T &value, Node **nextNode);
void deleteNode(Node *node);
static void deleteNode2(QHashData::Node *node);

static void duplicateNode(QHashData::Node *originalNode, void *newNode);
};


template <class Key, class T>
inline void QHash<Key, T>::deleteNode(Node *node)
{
deleteNode2(reinterpret_cast<QHashData::Node*>(node));
d->freeNode(node);
}

template <class Key, class T>
inline void QHash<Key, T>::deleteNode2(QHashData::Node *node)
{



# 528 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
concrete(node)->~Node();

# 530 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
}

template <class Key, class T>
inline void QHash<Key, T>::duplicateNode(QHashData::Node *node, void *newNode)
{
Node *concreteNode = concrete(node);
if (QTypeInfo<T>::isDummy) {
(void) new (newNode) DummyNode(concreteNode->key, concreteNode->h, 0);
} else {
(void) new (newNode) Node(concreteNode->key, concreteNode->value, concreteNode->h, 0);
}
}

template <class Key, class T>
inline typename QHash<Key, T>::Node *
QHash<Key, T>::createNode(uint ah, const Key &akey, const T &avalue, Node **anextNode)
{
Node *node;

if (QTypeInfo<T>::isDummy) {
node = reinterpret_cast<Node *>(new (d->allocateNode(alignOfDummyNode())) DummyNode(akey, ah, *anextNode));
} else {
node = new (d->allocateNode(alignOfNode())) Node(akey, avalue, ah, *anextNode);
}

*anextNode = node;
++d->size;
return node;
}

template <class Key, class T>
inline QHash<Key, T> &QHash<Key, T>::unite(const QHash<Key, T> &other)
{
QHash<Key, T> copy(other);
const_iterator it = copy.constEnd();
while (it != copy.constBegin()) {
--it;
insertMulti(it.key(), it.value());
}
return *this;
}

template <class Key, class T>
 void QHash<Key, T>::freeData(QHashData *x)
{
x->free_helper(deleteNode2);
}

template <class Key, class T>
inline void QHash<Key, T>::clear()
{
*this = QHash<Key,T>();
}

template <class Key, class T>
 void QHash<Key, T>::detach_helper()
{
QHashData *x = d->detach_helper(duplicateNode, deleteNode2,
QTypeInfo<T>::isDummy ? sizeof(DummyNode) : sizeof(Node),
QTypeInfo<T>::isDummy ? alignOfDummyNode() : alignOfNode());
if (!d->ref.deref())
freeData(d);
d = x;
}

template <class Key, class T>
inline QHash<Key, T> &QHash<Key, T>::operator=(const QHash<Key, T> &other)
{
if (d != other.d) {
QHashData *o = other.d;
o->ref.ref();
if (!d->ref.deref())
freeData(d);
d = o;
if (!d->sharable)
detach_helper();
}
return *this;
}

template <class Key, class T>
inline const T QHash<Key, T>::value(const Key &akey) const
{
Node *node;
if (d->size == 0 || (node = *findNode(akey)) == e) {
return T();
} else {
return node->value;
}
}

template <class Key, class T>
inline const T QHash<Key, T>::value(const Key &akey, const T &adefaultValue) const
{
Node *node;
if (d->size == 0 || (node = *findNode(akey)) == e) {
return adefaultValue;
} else {
return node->value;
}
}

template <class Key, class T>
 QList<Key> QHash<Key, T>::uniqueKeys() const
{
QList<Key> res;
res.reserve(size()); 
const_iterator i = begin();
if (i != end()) {
for (;;) {
const Key &aKey = i.key();
res.append(aKey);
do {
if (++i == end())
goto break_out_of_outer_loop;
} while (aKey == i.key());
}
}
break_out_of_outer_loop:
return res;
}

template <class Key, class T>
 QList<Key> QHash<Key, T>::keys() const
{
QList<Key> res;
res.reserve(size());
const_iterator i = begin();
while (i != end()) {
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 QList<Key> QHash<Key, T>::keys(const T &avalue) const
{
QList<Key> res;
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
res.append(i.key());
++i;
}
return res;
}

template <class Key, class T>
 const Key QHash<Key, T>::key(const T &avalue) const
{
return key(avalue, Key());
}

template <class Key, class T>
 const Key QHash<Key, T>::key(const T &avalue, const Key &defaultValue) const
{
const_iterator i = begin();
while (i != end()) {
if (i.value() == avalue)
return i.key();
++i;
}

return defaultValue;
}

template <class Key, class T>
 QList<T> QHash<Key, T>::values() const
{
QList<T> res;
res.reserve(size());
const_iterator i = begin();
while (i != end()) {
res.append(i.value());
++i;
}
return res;
}

template <class Key, class T>
 QList<T> QHash<Key, T>::values(const Key &akey) const
{
QList<T> res;
Node *node = *findNode(akey);
if (node != e) {
do {
res.append(node->value);
} while ((node = node->next) != e && node->key == akey);
}
return res;
}

template <class Key, class T>
 int QHash<Key, T>::count(const Key &akey) const
{
int cnt = 0;
Node *node = *findNode(akey);
if (node != e) {
do {
++cnt;
} while ((node = node->next) != e && node->key == akey);
}
return cnt;
}

template <class Key, class T>
inline const T QHash<Key, T>::operator[](const Key &akey) const
{
return value(akey);
}

template <class Key, class T>
inline T &QHash<Key, T>::operator[](const Key &akey)
{
detach();

uint h;
Node **node = findNode(akey, &h);
if (*node == e) {
if (d->willGrow())
node = findNode(akey, &h);
return createNode(h, akey, T(), node)->value;
}
return (*node)->value;
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::insert(const Key &akey,
const T &avalue)
{
detach();

uint h;
Node **node = findNode(akey, &h);
if (*node == e) {
if (d->willGrow())
node = findNode(akey, &h);
return iterator(createNode(h, akey, avalue, node));
}

if (!QTypeInfo<T>::isDummy)
(*node)->value = avalue;
return iterator(*node);
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::insertMulti(const Key &akey,
const T &avalue)
{
detach();
d->willGrow();

uint h;
Node **nextNode = findNode(akey, &h);
return iterator(createNode(h, akey, avalue, nextNode));
}

template <class Key, class T>
 int QHash<Key, T>::remove(const Key &akey)
{
if (isEmpty()) 
return 0;
detach();

int oldSize = d->size;
Node **node = findNode(akey);
if (*node != e) {
bool deleteNext = true;
do {
Node *next = (*node)->next;
deleteNext = (next != e && next->key == (*node)->key);
deleteNode(*node);
*node = next;
--d->size;
} while (deleteNext);
d->hasShrunk();
}
return oldSize - d->size;
}

template <class Key, class T>
 T QHash<Key, T>::take(const Key &akey)
{
if (isEmpty()) 
return T();
detach();

Node **node = findNode(akey);
if (*node != e) {
T t = (*node)->value;
Node *next = (*node)->next;
deleteNode(*node);
*node = next;
--d->size;
d->hasShrunk();
return t;
}
return T();
}

template <class Key, class T>
 typename QHash<Key, T>::iterator QHash<Key, T>::erase(iterator it)
{
if (it == iterator(e))
return it;

iterator ret = it;
++ret;

Node *node = concrete(it.i);
Node **node_ptr = reinterpret_cast<Node **>(&d->buckets[node->h % d->numBuckets]);
while (*node_ptr != node)
node_ptr = &(*node_ptr)->next;
*node_ptr = node->next;
deleteNode(node);
--d->size;
return ret;
}

template <class Key, class T>
inline void QHash<Key, T>::reserve(int asize)
{
detach();
d->rehash(-qMax(asize, 1));
}

template <class Key, class T>
inline typename QHash<Key, T>::const_iterator QHash<Key, T>::find(const Key &akey) const
{
return const_iterator(*findNode(akey));
}

template <class Key, class T>
inline typename QHash<Key, T>::const_iterator QHash<Key, T>::constFind(const Key &akey) const
{
return const_iterator(*findNode(akey));
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::find(const Key &akey)
{
detach();
return iterator(*findNode(akey));
}

template <class Key, class T>
inline bool QHash<Key, T>::contains(const Key &akey) const
{
return *findNode(akey) != e;
}

template <class Key, class T>
 typename QHash<Key, T>::Node **QHash<Key, T>::findNode(const Key &akey,
uint *ahp) const
{
Node **node;
uint h = 0;

if (d->numBuckets || ahp) {
h = qHash(akey, d->seed);
if (ahp)
*ahp = h;
}
if (d->numBuckets) {
node = reinterpret_cast<Node **>(&d->buckets[h % d->numBuckets]);
qt_noop();
while (*node != e && !(*node)->same_key(h, akey))
node = &(*node)->next;
} else {
node = const_cast<Node **>(reinterpret_cast<const Node * const *>(&e));
}
return node;
}

template <class Key, class T>
 bool QHash<Key, T>::operator==(const QHash<Key, T> &other) const
{
if (size() != other.size())
return false;
if (d == other.d)
return true;

const_iterator it = begin();

while (it != end()) {
const Key &akey = it.key();

const_iterator it2 = other.find(akey);
do {
if (it2 == other.end() || !(it2.key() == akey))
return false;
if (!QTypeInfo<T>::isDummy && !(it.value() == it2.value()))
return false;
++it;
++it2;
} while (it != end() && it.key() == akey);
}
return true;
}

template <class Key, class T>
class QMultiHash : public QHash<Key, T>
{
public:
QMultiHash() {}








# 944 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
QMultiHash(const QHash<Key, T> &other) : QHash<Key, T>(other) {}
inline void swap(QMultiHash<Key, T> &other) { QHash<Key, T>::swap(other); } 

inline typename QHash<Key, T>::iterator replace(const Key &key, const T &value)
{ return QHash<Key, T>::insert(key, value); }

inline typename QHash<Key, T>::iterator insert(const Key &key, const T &value)
{ return QHash<Key, T>::insertMulti(key, value); }

inline QMultiHash &operator+=(const QMultiHash &other)
{ this->unite(other); return *this; }
inline QMultiHash operator+(const QMultiHash &other) const
{ QMultiHash result = *this; result += other; return result; }









# 966 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
inline bool contains(const Key &key) const
{ return QHash<Key, T>::contains(key); }
inline int remove(const Key &key)
{ return QHash<Key, T>::remove(key); }
inline int count(const Key &key) const
{ return QHash<Key, T>::count(key); }
inline int count() const
{ return QHash<Key, T>::count(); }
inline typename QHash<Key, T>::iterator find(const Key &key)
{ return QHash<Key, T>::find(key); }
inline typename QHash<Key, T>::const_iterator find(const Key &key) const
{ return QHash<Key, T>::find(key); }
inline typename QHash<Key, T>::const_iterator constFind(const Key &key) const
{ return QHash<Key, T>::constFind(key); }


# 982 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"
bool contains(const Key &key, const T &value) const;

int remove(const Key &key, const T &value);

int count(const Key &key, const T &value) const;

typename QHash<Key, T>::iterator find(const Key &key, const T &value) {
typename QHash<Key, T>::iterator i(find(key));
typename QHash<Key, T>::iterator end(this->end());
while (i != end && i.key() == key) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QHash<Key, T>::const_iterator find(const Key &key, const T &value) const {
typename QHash<Key, T>::const_iterator i(constFind(key));
typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
while (i != end && i.key() == key) {
if (i.value() == value)
return i;
++i;
}
return end;
}
typename QHash<Key, T>::const_iterator constFind(const Key &key, const T &value) const
{ return find(key, value); }
private:
T &operator[](const Key &key);
const T operator[](const Key &key) const;
};

template <class Key, class T>
inline bool QMultiHash<Key, T>::contains(const Key &key, const T &value) const
{
return constFind(key, value) != QHash<Key, T>::constEnd();
}

template <class Key, class T>
inline int QMultiHash<Key, T>::remove(const Key &key, const T &value)
{
int n = 0;
typename QHash<Key, T>::iterator i(find(key));
typename QHash<Key, T>::iterator end(QHash<Key, T>::end());
while (i != end && i.key() == key) {
if (i.value() == value) {
i = this->erase(i);
++n;
} else {
++i;
}
}
return n;
}

template <class Key, class T>
inline int QMultiHash<Key, T>::count(const Key &key, const T &value) const
{
int n = 0;
typename QHash<Key, T>::const_iterator i(constFind(key));
typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
while (i != end && i.key() == key) {
if (i.value() == value)
++n;
++i;
}
return n;
}

template <class Key, class T> class QHashIterator { typedef typename QHash<Key,T>::const_iterator const_iterator; typedef const_iterator Item; QHash<Key,T> c; const_iterator i, n; inline bool item_exists() const { return n != c.constEnd(); } public: inline QHashIterator(const QHash<Key,T> &container) : c(container), i(c.constBegin()), n(c.constEnd()) {} inline QHashIterator &operator=(const QHash<Key,T> &container) { c = container; i = c.constBegin(); n = c.constEnd(); return *this; } inline void toFront() { i = c.constBegin(); n = c.constEnd(); } inline void toBack() { i = c.constEnd(); n = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { const_iterator p = i; return --p; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while ((n = i) != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(n = --i) == t) return true; n = c.constEnd(); return false; } };
template <class Key, class T> class QMutableHashIterator { typedef typename QHash<Key,T>::iterator iterator; typedef typename QHash<Key,T>::const_iterator const_iterator; typedef iterator Item; QHash<Key,T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableHashIterator(QHash<Key,T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableHashIterator() { c->setSharable(true); } inline QMutableHashIterator &operator=(QHash<Key,T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = c->end(); } inline bool hasNext() const { return const_iterator(i) != c->constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return const_iterator(i) != c->constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { iterator p = i; return --p; } inline void remove() { if (const_iterator(n) != c->constEnd()) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) { if (const_iterator(n) != c->constEnd()) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline const Key &key() const { qt_noop(); return n.key(); } inline bool findNext(const T &t) { while (const_iterator(n = i) != c->constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (const_iterator(i) != c->constBegin()) if (*(n = --i) == t) return true; n = c->end(); return false; } };




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"


# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"



class QBitArray;
class QDataStream;
class QDate;
class QDateTime;
class QEasingCurve;
class QLine;
class QLineF;
class QLocale;
class QMatrix;
class QTransform;
class QStringList;
class QTime;
class QPoint;
class QPointF;
class QSize;
class QSizeF;
class QRect;
class QRectF;

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
class QRegExp;


# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
class QRegularExpression;

# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
class QTextFormat;
class QTextLength;
class QUrl;
class QVariant;
class QVariantComparisonHelper;

template <typename T>
inline QVariant qVariantFromValue(const T &);

template<typename T>
inline T qvariant_cast(const QVariant &);

namespace QtPrivate {

template <typename Derived, typename Argument, typename ReturnType>
struct ObjectInvoker
{
static ReturnType invoke(Argument a)
{
return Derived::object(a);
}
};

template <typename Derived, typename Argument, typename ReturnType>
struct MetaTypeInvoker
{
static ReturnType invoke(Argument a)
{
return Derived::metaType(a);
}
};

template <typename Derived, typename T, typename Argument, typename ReturnType, bool = IsPointerToTypeDerivedFromQObject<T>::Value>
struct TreatAsQObjectBeforeMetaType : ObjectInvoker<Derived, Argument, ReturnType>
{
};

template <typename Derived, typename T, typename Argument, typename ReturnType>
struct TreatAsQObjectBeforeMetaType<Derived, T, Argument, ReturnType, false> : MetaTypeInvoker<Derived, Argument, ReturnType>
{
};

template<typename T> struct QVariantValueHelper;
}

class  QVariant
{
public:
enum Type {
Invalid = QMetaType::UnknownType,
Bool = QMetaType::Bool,
Int = QMetaType::Int,
UInt = QMetaType::UInt,
LongLong = QMetaType::LongLong,
ULongLong = QMetaType::ULongLong,
Double = QMetaType::Double,
Char = QMetaType::QChar,
Map = QMetaType::QVariantMap,
List = QMetaType::QVariantList,
String = QMetaType::QString,
StringList = QMetaType::QStringList,
ByteArray = QMetaType::QByteArray,
BitArray = QMetaType::QBitArray,
Date = QMetaType::QDate,
Time = QMetaType::QTime,
DateTime = QMetaType::QDateTime,
Url = QMetaType::QUrl,
Locale = QMetaType::QLocale,
Rect = QMetaType::QRect,
RectF = QMetaType::QRectF,
Size = QMetaType::QSize,
SizeF = QMetaType::QSizeF,
Line = QMetaType::QLine,
LineF = QMetaType::QLineF,
Point = QMetaType::QPoint,
PointF = QMetaType::QPointF,
RegExp = QMetaType::QRegExp,
RegularExpression = QMetaType::QRegularExpression,
Hash = QMetaType::QVariantHash,
EasingCurve = QMetaType::QEasingCurve,
Uuid = QMetaType::QUuid,
ModelIndex = QMetaType::QModelIndex,
LastCoreType = QMetaType::LastCoreType,

Font = QMetaType::QFont,
Pixmap = QMetaType::QPixmap,
Brush = QMetaType::QBrush,
Color = QMetaType::QColor,
Palette = QMetaType::QPalette,
Image = QMetaType::QImage,
Polygon = QMetaType::QPolygon,
Region = QMetaType::QRegion,
Bitmap = QMetaType::QBitmap,
Cursor = QMetaType::QCursor,
KeySequence = QMetaType::QKeySequence,
Pen = QMetaType::QPen,
TextLength = QMetaType::QTextLength,
TextFormat = QMetaType::QTextFormat,
Matrix = QMetaType::QMatrix,
Transform = QMetaType::QTransform,
Matrix4x4 = QMetaType::QMatrix4x4,
Vector2D = QMetaType::QVector2D,
Vector3D = QMetaType::QVector3D,
Vector4D = QMetaType::QVector4D,
Quaternion = QMetaType::QQuaternion,
PolygonF = QMetaType::QPolygonF,
Icon = QMetaType::QIcon,
LastGuiType = QMetaType::LastGuiType,

SizePolicy = QMetaType::QSizePolicy,

UserType = QMetaType::User,
LastType = 0xffffffff 
};

inline QVariant();
~QVariant();
QVariant(Type type);
QVariant(int typeId, const void *copy);
QVariant(int typeId, const void *copy, uint flags);
QVariant(const QVariant &other);


# 204 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(QDataStream &s);


# 207 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(int i);
QVariant(uint ui);
QVariant(qlonglong ll);
QVariant(qulonglong ull);
QVariant(bool b);
QVariant(double d);
QVariant(float f);

# 215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
 QVariant(const char *str);


# 218 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(const QByteArray &bytearray);
QVariant(const QBitArray &bitarray);
QVariant(const QString &string);
QVariant(QLatin1String string);
QVariant(const QStringList &stringlist);
QVariant(QChar qchar);
QVariant(const QDate &date);
QVariant(const QTime &time);
QVariant(const QDateTime &datetime);
QVariant(const QList<QVariant> &list);
QVariant(const QMap<QString,QVariant> &map);
QVariant(const QHash<QString,QVariant> &hash);

# 231 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(const QSize &size);
QVariant(const QSizeF &size);
QVariant(const QPoint &pt);
QVariant(const QPointF &pt);
QVariant(const QLine &line);
QVariant(const QLineF &line);
QVariant(const QRect &rect);
QVariant(const QRectF &rect);

# 240 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(const QLocale &locale);

# 242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(const QRegExp &regExp);



# 246 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(const QRegularExpression &re);

# 248 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant(const QUrl &url);
QVariant(const QEasingCurve &easing);
QVariant(const QUuid &uuid);
QVariant(const QModelIndex &modelIndex);
QVariant(const QJsonValue &jsonValue);
QVariant(const QJsonObject &jsonObject);
QVariant(const QJsonArray &jsonArray);
QVariant(const QJsonDocument &jsonDocument);


# 258 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QVariant& operator=(const QVariant &other);







# 266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
inline void swap(QVariant &other) { qSwap(d, other.d); }

Type type() const;
int userType() const;
const char *typeName() const;

bool canConvert(int targetTypeId) const;
bool convert(int targetTypeId);

inline bool isValid() const;
bool isNull() const;

void clear();

void detach();
inline bool isDetached() const;

int toInt(bool *ok = 0) const;
uint toUInt(bool *ok = 0) const;
qlonglong toLongLong(bool *ok = 0) const;
qulonglong toULongLong(bool *ok = 0) const;
bool toBool() const;
double toDouble(bool *ok = 0) const;
float toFloat(bool *ok = 0) const;
qreal toReal(bool *ok = 0) const;
QByteArray toByteArray() const;
QBitArray toBitArray() const;
QString toString() const;
QStringList toStringList() const;
QChar toChar() const;
QDate toDate() const;
QTime toTime() const;
QDateTime toDateTime() const;
QList<QVariant> toList() const;
QMap<QString, QVariant> toMap() const;
QHash<QString, QVariant> toHash() const;


# 304 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QPoint toPoint() const;
QPointF toPointF() const;
QRect toRect() const;
QSize toSize() const;
QSizeF toSizeF() const;
QLine toLine() const;
QLineF toLineF() const;
QRectF toRectF() const;

# 313 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QLocale toLocale() const;

# 315 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QRegExp toRegExp() const;



# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QRegularExpression toRegularExpression() const;

# 321 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
QUrl toUrl() const;
QEasingCurve toEasingCurve() const;
QUuid toUuid() const;
QModelIndex toModelIndex() const;
QJsonValue toJsonValue() const;
QJsonObject toJsonObject() const;
QJsonArray toJsonArray() const;
QJsonDocument toJsonDocument() const;



# 332 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
void load(QDataStream &ds);
void save(QDataStream &ds) const;

# 335 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
static const char *typeToName(int typeId);
static Type nameToType(const char *name);

void *data();
const void *constData() const;
inline const void *data() const { return constData(); }

template<typename T>
inline void setValue(const T &value);

template<typename T>
inline T value() const
{ return qvariant_cast<T>(*this); }

template<typename T>
static inline QVariant fromValue(const T &value)
{ return qVariantFromValue(value); }

template<typename T>
bool canConvert() const
{ return canConvert(qMetaTypeId<T>()); }

public:

# 359 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
struct PrivateShared
{
inline PrivateShared(void *v) : ptr(v), ref(1) { }
void *ptr;
QAtomicInt ref;
};
struct Private
{
inline Private(): type(Invalid), is_shared(false), is_null(true)
{ data.ptr = 0; }


explicit inline Private(uint variantType)
: type(variantType), is_shared(false), is_null(false)
{}

inline Private(const Private &other)
: data(other.data), type(other.type),
is_shared(other.is_shared), is_null(other.is_null)
{}
union Data
{
char c;
uchar uc;
short s;
signed char sc;
ushort us;
int i;
uint u;
long l;
ulong ul;
bool b;
double d;
float f;
qreal real;
qlonglong ll;
qulonglong ull;
QObject *o;
void *ptr;
PrivateShared *shared;
} data;
uint type : 30;
uint is_shared : 1;
uint is_null : 1;
};
public:
typedef void (*f_construct)(Private *, const void *);
typedef void (*f_clear)(Private *);
typedef bool (*f_null)(const Private *);

# 409 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
typedef void (*f_load)(Private *, QDataStream &);
typedef void (*f_save)(const Private *, QDataStream &);

# 412 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
typedef bool (*f_compare)(const Private *, const Private *);
typedef bool (*f_convert)(const QVariant::Private *d, int t, void *, bool *);
typedef bool (*f_canConvert)(const QVariant::Private *d, int t);
typedef void (*f_debugStream)(QDebug, const QVariant &);
struct Handler {
f_construct construct;
f_clear clear;
f_null isNull;

# 421 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
f_load load;
f_save save;

# 424 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
f_compare compare;
f_convert convert;
f_canConvert canConvert;
f_debugStream debugStream;
};


# 431 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
inline bool operator==(const QVariant &v) const
{ return cmp(v); }
inline bool operator!=(const QVariant &v) const
{ return !cmp(v); }

protected:
friend inline bool operator==(const QVariant &, const QVariantComparisonHelper &);

# 439 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
friend  QDebug operator<<(QDebug, const QVariant &);


# 442 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
template<typename T>
friend inline T qvariant_cast(const QVariant &);
template<typename T> friend struct QtPrivate::QVariantValueHelper;
protected:



# 449 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
Private d;
void create(int type, const void *copy);
bool cmp(const QVariant &other) const;
bool convert(const int t, void *ptr) const;

private:

inline QVariant(void *) ;






QVariant(QMetaType::Type) ;






QVariant(Qt::GlobalColor) ;
QVariant(Qt::BrushStyle) ;
QVariant(Qt::PenStyle) ;
QVariant(Qt::CursorShape) ;




# 478 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
public:
typedef Private DataPtr;
inline DataPtr &data_ptr() { return d; }
inline const DataPtr &data_ptr() const { return d; }
};

template <typename T>
inline QVariant qVariantFromValue(const T &t)
{
return QVariant(qMetaTypeId<T>(), &t, QTypeInfo<T>::isPointer);
}

template <>
inline QVariant qVariantFromValue(const QVariant &t) { return t; }

template <typename T>
inline void qVariantSetValue(QVariant &v, const T &t)
{

const uint type = qMetaTypeId<T>();
QVariant::Private &d = v.data_ptr();
if (v.isDetached() && (type == d.type || (type <= uint(QVariant::Char) && d.type <= uint(QVariant::Char)))) {
d.type = type;
d.is_null = false;
T *old = reinterpret_cast<T*>(d.is_shared ? d.data.shared->ptr : &d.data.ptr);
if (QTypeInfo<T>::isComplex)
old->~T();
new (old) T(t); 
} else {
v = QVariant(type, &t, QTypeInfo<T>::isPointer);
}
}

template <>
inline void qVariantSetValue<QVariant>(QVariant &v, const QVariant &t)
{
v = t;
}


inline QVariant::QVariant() {}
inline bool QVariant::isValid() const { return d.type != Invalid; }

template<typename T>
inline void QVariant::setValue(const T &avalue)
{ qVariantSetValue(*this, avalue); }


# 526 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
 QDataStream& operator>> (QDataStream& s, QVariant& p);
 QDataStream& operator<< (QDataStream& s, const QVariant& p);
 QDataStream& operator>> (QDataStream& s, QVariant::Type& p);
 QDataStream& operator<< (QDataStream& s, const QVariant::Type p);


# 532 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
inline bool QVariant::isDetached() const
{ return !d.is_shared || d.data.shared->ref.load() == 1; }







# 541 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"



class QVariantComparisonHelper
{
public:
inline QVariantComparisonHelper(const QVariant &var)
: v(&var) {}
private:
friend inline bool operator==(const QVariant &, const QVariantComparisonHelper &);
const QVariant *v;
};

inline bool operator==(const QVariant &v1, const QVariantComparisonHelper &v2)
{
return v1.cmp(*v2.v);
}

inline bool operator!=(const QVariant &v1, const QVariantComparisonHelper &v2)
{
return !operator==(v1, v2);
}


# 565 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
namespace QtPrivate {
template<typename T>
struct QVariantValueHelper : TreatAsQObjectBeforeMetaType<QVariantValueHelper<T>, T, const QVariant &, T>
{
static T metaType(const QVariant &v)
{
const int vid = qMetaTypeId<T>();
if (vid == v.userType())
return *reinterpret_cast<const T *>(v.constData());
if (vid < int(QMetaType::User)) {
T t;
if (v.convert(vid, &t))
return t;
}
return T();
}

# 582 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
static T object(const QVariant &v)
{
return qobject_cast<T>(QMetaType::typeFlags(v.userType()) & QMetaType::PointerToQObject ? v.d.data.o : 0);
}

# 587 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
};
}


# 591 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
template<typename T> inline T qvariant_cast(const QVariant &v)
{
return QtPrivate::QVariantValueHelper<T>::invoke(v);
}

template<> inline QVariant qvariant_cast<QVariant>(const QVariant &v)
{
if (v.userType() == QMetaType::QVariant)
return *reinterpret_cast<const QVariant *>(v.constData());
return v;
}












# 614 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
template<> class QTypeInfo<QVariant > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QVariant)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QVariant) }; static inline const char *name() { return "QVariant"; } }; template <> inline void qSwap<QVariant>(QVariant &value1, QVariant &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QVariant>(::QVariant &value1, ::QVariant &value2) { value1.swap(value2); } } 


# 617 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"
 QDebug operator<<(QDebug, const QVariant &);
 QDebug operator<<(QDebug, const QVariant::Type);


# 621 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"



# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"





# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"
class QVariantAnimationPrivate;
class  QVariantAnimation : public QAbstractAnimation
{
Q_OBJECT
Q_PROPERTY(QVariant startValue READ startValue WRITE setStartValue)
Q_PROPERTY(QVariant endValue READ endValue WRITE setEndValue)
Q_PROPERTY(QVariant currentValue READ currentValue NOTIFY valueChanged)
Q_PROPERTY(int duration READ duration WRITE setDuration)
Q_PROPERTY(QEasingCurve easingCurve READ easingCurve WRITE setEasingCurve)

public:
typedef QPair<qreal, QVariant> KeyValue;
typedef QVector<KeyValue> KeyValues;

QVariantAnimation(QObject *parent = 0);
~QVariantAnimation();

QVariant startValue() const;
void setStartValue(const QVariant &value);

QVariant endValue() const;
void setEndValue(const QVariant &value);

QVariant keyValueAt(qreal step) const;
void setKeyValueAt(qreal step, const QVariant &value);

KeyValues keyValues() const;
void setKeyValues(const KeyValues &values);

QVariant currentValue() const;

int duration() const;
void setDuration(int msecs);

QEasingCurve easingCurve() const;
void setEasingCurve(const QEasingCurve &easing);

typedef QVariant (*Interpolator)(const void *from, const void *to, qreal progress);

signals:
void valueChanged(const QVariant &value);

protected:
QVariantAnimation(QVariantAnimationPrivate &dd, QObject *parent = 0);
bool event(QEvent *event);

void updateCurrentTime(int);
void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);

virtual void updateCurrentValue(const QVariant &value);
virtual QVariant interpolated(const QVariant &from, const QVariant &to, qreal progress) const;

private:
template <typename T> friend void qRegisterAnimationInterpolator(QVariant (*func)(const T &, const T &, qreal));
static void registerInterpolator(Interpolator func, int interpolationType);

QVariantAnimation(const QVariantAnimation &) ; QVariantAnimation &operator=(const QVariantAnimation &) ;
inline QVariantAnimationPrivate* d_func() { return reinterpret_cast<QVariantAnimationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QVariantAnimationPrivate* d_func() const { return reinterpret_cast<const QVariantAnimationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QVariantAnimationPrivate;
};

template <typename T>
void qRegisterAnimationInterpolator(QVariant (*func)(const T &from, const T &to, qreal progress)) {
QVariantAnimation::registerInterpolator(reinterpret_cast<QVariantAnimation::Interpolator>(func), qMetaTypeId<T>());
}



# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpropertyanimation.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpropertyanimation.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpropertyanimation.h"
class QPropertyAnimationPrivate;
class  QPropertyAnimation : public QVariantAnimation
{
Q_OBJECT
Q_PROPERTY(QByteArray propertyName READ propertyName WRITE setPropertyName)
Q_PROPERTY(QObject* targetObject READ targetObject WRITE setTargetObject)

public:
QPropertyAnimation(QObject *parent = 0);
QPropertyAnimation(QObject *target, const QByteArray &propertyName, QObject *parent = 0);
~QPropertyAnimation();

QObject *targetObject() const;
void setTargetObject(QObject *target);

QByteArray propertyName() const;
void setPropertyName(const QByteArray &propertyName);

protected:
bool event(QEvent *event);
void updateCurrentValue(const QVariant &value);
void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);

private:
QPropertyAnimation(const QPropertyAnimation &) ; QPropertyAnimation &operator=(const QPropertyAnimation &) ;
inline QPropertyAnimationPrivate* d_func() { return reinterpret_cast<QPropertyAnimationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPropertyAnimationPrivate* d_func() const { return reinterpret_cast<const QPropertyAnimationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPropertyAnimationPrivate;
};



# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpropertyanimation.h"



# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsequentialanimationgroup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qanimationgroup.h"



















































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsequentialanimationgroup.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsequentialanimationgroup.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsequentialanimationgroup.h"
class QPauseAnimation;
class QSequentialAnimationGroupPrivate;

class  QSequentialAnimationGroup : public QAnimationGroup
{
Q_OBJECT
Q_PROPERTY(QAbstractAnimation* currentAnimation READ currentAnimation NOTIFY currentAnimationChanged)

public:
QSequentialAnimationGroup(QObject *parent = 0);
~QSequentialAnimationGroup();

QPauseAnimation *addPause(int msecs);
QPauseAnimation *insertPause(int index, int msecs);

QAbstractAnimation *currentAnimation() const;
int duration() const;

signals:
void currentAnimationChanged(QAbstractAnimation *current);

protected:
QSequentialAnimationGroup(QSequentialAnimationGroupPrivate &dd, QObject *parent);
bool event(QEvent *event);

void updateCurrentTime(int);
void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
void updateDirection(QAbstractAnimation::Direction direction);

private:
QSequentialAnimationGroup(const QSequentialAnimationGroup &) ; QSequentialAnimationGroup &operator=(const QSequentialAnimationGroup &) ;
inline QSequentialAnimationGroupPrivate* d_func() { return reinterpret_cast<QSequentialAnimationGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSequentialAnimationGroupPrivate* d_func() const { return reinterpret_cast<const QSequentialAnimationGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSequentialAnimationGroupPrivate;

};



# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsequentialanimationgroup.h"



# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariantanimation.h"





























































































































# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"
class QTextCodec;
class QIODevice;

class QTextDecoder;
class QTextEncoder;

class  QTextCodec
{
QTextCodec(const QTextCodec &) ; QTextCodec &operator=(const QTextCodec &) ;
public:
static QTextCodec* codecForName(const QByteArray &name);
static QTextCodec* codecForName(const char *name) { return codecForName(QByteArray(name)); }
static QTextCodec* codecForMib(int mib);

static QList<QByteArray> availableCodecs();
static QList<int> availableMibs();

static QTextCodec* codecForLocale();
static void setCodecForLocale(QTextCodec *c);





# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"
static QTextCodec *codecForHtml(const QByteArray &ba);
static QTextCodec *codecForHtml(const QByteArray &ba, QTextCodec *defaultCodec);

static QTextCodec *codecForUtfText(const QByteArray &ba);
static QTextCodec *codecForUtfText(const QByteArray &ba, QTextCodec *defaultCodec);

bool canEncode(QChar) const;
bool canEncode(const QString&) const;

QString toUnicode(const QByteArray&) const;
QString toUnicode(const char* chars) const;
QByteArray fromUnicode(const QString& uc) const;
enum ConversionFlag {
DefaultConversion,
ConvertInvalidToNull = 0x80000000,
IgnoreHeader = 0x1,
FreeFunction = 0x2
};
typedef QFlags<ConversionFlag> ConversionFlags;

struct  ConverterState {
ConverterState(ConversionFlags f = DefaultConversion)
: flags(f), remainingChars(0), invalidChars(0), d(0) { state_data[0] = state_data[1] = state_data[2] = 0; }
~ConverterState();
ConversionFlags flags;
int remainingChars;
int invalidChars;
uint state_data[3];
void *d;
private:
ConverterState(const ConverterState &) ; ConverterState &operator=(const ConverterState &) ;
};

QString toUnicode(const char *in, int length, ConverterState *state = 0) const
{ return convertToUnicode(in, length, state); }
QByteArray fromUnicode(const QChar *in, int length, ConverterState *state = 0) const
{ return convertFromUnicode(in, length, state); }

QTextDecoder* makeDecoder(ConversionFlags flags = DefaultConversion) const;
QTextEncoder* makeEncoder(ConversionFlags flags = DefaultConversion) const;

virtual QByteArray name() const = 0;
virtual QList<QByteArray> aliases() const;
virtual int mibEnum() const = 0;

protected:
virtual QString convertToUnicode(const char *in, int length, ConverterState *state) const = 0;
virtual QByteArray convertFromUnicode(const QChar *in, int length, ConverterState *state) const = 0;

QTextCodec();
virtual ~QTextCodec();

private:
friend struct QCoreGlobalData;
};
 inline QFlags<QTextCodec::ConversionFlags::enum_type> operator|(QTextCodec::ConversionFlags::enum_type f1, QTextCodec::ConversionFlags::enum_type f2) { return QFlags<QTextCodec::ConversionFlags::enum_type>(f1) | f2; }  inline QFlags<QTextCodec::ConversionFlags::enum_type> operator|(QTextCodec::ConversionFlags::enum_type f1, QFlags<QTextCodec::ConversionFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextCodec::ConversionFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class  QTextEncoder {
QTextEncoder(const QTextEncoder &) ; QTextEncoder &operator=(const QTextEncoder &) ;
public:
explicit QTextEncoder(const QTextCodec *codec) : c(codec), state() {}
QTextEncoder(const QTextCodec *codec, QTextCodec::ConversionFlags flags);
~QTextEncoder();
QByteArray fromUnicode(const QString& str);
QByteArray fromUnicode(const QChar *uc, int len);
bool hasFailure() const;
private:
const QTextCodec *c;
QTextCodec::ConverterState state;
};

class  QTextDecoder {
QTextDecoder(const QTextDecoder &) ; QTextDecoder &operator=(const QTextDecoder &) ;
public:
explicit QTextDecoder(const QTextCodec *codec) : c(codec), state() {}
QTextDecoder(const QTextCodec *codec, QTextCodec::ConversionFlags flags);
~QTextDecoder();
QString toUnicode(const char* chars, int len);
QString toUnicode(const QByteArray &ba);
void toUnicode(QString *target, const char *chars, int len);
bool hasFailure() const;
private:
const QTextCodec *c;
QTextCodec::ConverterState state;
};



# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextcodec.h"



# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcompilerdetection.h"







































































































































































































































































































































































































































































































































































































































































































































































# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"








# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"






inline void qbswap_helper(const uchar *src, uchar *dest, int size)
{
for (int i = 0; i < size ; ++i) dest[i] = src[size - 1 - i];
}







template <typename T> inline void qbswap(const T src, uchar *dest)
{
qbswap_helper(reinterpret_cast<const uchar *>(&src), dest, sizeof(T));
}



template <typename T> inline void qToUnaligned(const T src, uchar *dest)
{


const size_t size = sizeof(T);
memcpy(dest, &src, size);
}

















































# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <typename T> inline T qFromLittleEndian(const uchar *src);
template <> inline quint64 qFromLittleEndian<quint64>(const uchar *src)
{
return 0
| src[0]
| src[1] * static_cast<unsigned long long>(0x0000000000000100ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[2] * static_cast<unsigned long long>(0x0000000000010000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[3] * static_cast<unsigned long long>(0x0000000001000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[4] * static_cast<unsigned long long>(0x0000000100000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[5] * static_cast<unsigned long long>(0x0000010000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[6] * static_cast<unsigned long long>(0x0001000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[7] * static_cast<unsigned long long>(0x0100000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
;
}

template <> inline quint32 qFromLittleEndian<quint32>(const uchar *src)
{
return 0
| src[0]
| src[1] * quint32(0x00000100)
| src[2] * quint32(0x00010000)
| src[3] * quint32(0x01000000);
}

template <> inline quint16 qFromLittleEndian<quint16>(const uchar *src)
{
return quint16(0
| src[0]
| src[1] * 0x0100);
}


template <> inline qint64 qFromLittleEndian<qint64>(const uchar *src)
{ return static_cast<qint64>(qFromLittleEndian<quint64>(src)); }

template <> inline qint32 qFromLittleEndian<qint32>(const uchar *src)
{ return static_cast<qint32>(qFromLittleEndian<quint32>(src)); }

template <> inline qint16 qFromLittleEndian<qint16>(const uchar *src)
{ return static_cast<qint16>(qFromLittleEndian<quint16>(src)); }
# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"


# 176 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <> inline quint8 qFromLittleEndian<quint8>(const uchar *src)
{ return static_cast<quint8>(src[0]); }
template <> inline qint8 qFromLittleEndian<qint8>(const uchar *src)
{ return static_cast<qint8>(src[0]); }

















































# 229 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <class T> inline T qFromBigEndian(const uchar *src);
template<>
inline quint64 qFromBigEndian<quint64>(const uchar *src)
{
return 0
| src[7]
| src[6] * static_cast<unsigned long long>(0x0000000000000100ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[5] * static_cast<unsigned long long>(0x0000000000010000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[4] * static_cast<unsigned long long>(0x0000000001000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[3] * static_cast<unsigned long long>(0x0000000100000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[2] * static_cast<unsigned long long>(0x0000010000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[1] * static_cast<unsigned long long>(0x0001000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 

| src[0] * static_cast<unsigned long long>(0x0100000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
;
}

template<>
inline quint32 qFromBigEndian<quint32>(const uchar *src)
{
return 0
| src[3]
| src[2] * quint32(0x00000100)
| src[1] * quint32(0x00010000)
| src[0] * quint32(0x01000000);
}

template<>
inline quint16 qFromBigEndian<quint16>(const uchar *src)
{
return quint16( 0
| src[1]
| src[0] * quint16(0x0100));
}



template <> inline qint64 qFromBigEndian<qint64>(const uchar *src)
{ return static_cast<qint64>(qFromBigEndian<quint64>(src)); }

template <> inline qint32 qFromBigEndian<qint32>(const uchar *src)
{ return static_cast<qint32>(qFromBigEndian<quint32>(src)); }

template <> inline qint16 qFromBigEndian<qint16>(const uchar *src)
{ return static_cast<qint16>(qFromBigEndian<quint16>(src)); }
# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"


# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <> inline quint8 qFromBigEndian<quint8>(const uchar *src)
{ return static_cast<quint8>(src[0]); }
template <> inline qint8 qFromBigEndian<qint8>(const uchar *src)
{ return static_cast<qint8>(src[0]); }







template <typename T> T qbswap(T source);















# 301 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <> inline quint64 qbswap<quint64>(quint64 source)
{
return 0
| ((source & static_cast<unsigned long long>(0x00000000000000ffULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 56)
| ((source & static_cast<unsigned long long>(0x000000000000ff00ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 40)
| ((source & static_cast<unsigned long long>(0x0000000000ff0000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 24)
| ((source & static_cast<unsigned long long>(0x00000000ff000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) << 8)
| ((source & static_cast<unsigned long long>(0x000000ff00000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 8)
| ((source & static_cast<unsigned long long>(0x0000ff0000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 24)
| ((source & static_cast<unsigned long long>(0x00ff000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 40)
| ((source & static_cast<unsigned long long>(0xff00000000000000ULL) 
typedef long long qint64; 
typedef unsigned long long quint64; 
) >> 56);
}

template <> inline quint32 qbswap<quint32>(quint32 source)
{
return 0
| ((source & 0x000000ff) << 24)
| ((source & 0x0000ff00) << 8)
| ((source & 0x00ff0000) >> 8)
| ((source & 0xff000000) >> 24);
}

template <> inline quint16 qbswap<quint16>(quint16 source)
{
return quint16( 0
| ((source & 0x00ff) << 8)
| ((source & 0xff00) >> 8) );
}
# 329 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"


# 331 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"

template <> inline qint64 qbswap<qint64>(qint64 source)
{
return qbswap<quint64>(quint64(source));
}

template <> inline qint32 qbswap<qint32>(qint32 source)
{
return qbswap<quint32>(quint32(source));
}

template <> inline qint16 qbswap<qint16>(qint16 source)
{
return qbswap<quint16>(quint16(source));
}

















# 363 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <typename T> inline T qToBigEndian(T source)
{ return qbswap<T>(source); }
template <typename T> inline T qFromBigEndian(T source)
{ return qbswap<T>(source); }
template <typename T> inline T qToLittleEndian(T source)
{ return source; }
template <typename T> inline T qFromLittleEndian(T source)
{ return source; }
template <typename T> inline void qToBigEndian(T src, uchar *dest)
{ qbswap<T>(src, dest); }
template <typename T> inline void qToLittleEndian(T src, uchar *dest)
{ qToUnaligned<T>(src, dest); }



# 378 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qendian.h"
template <> inline quint8 qbswap<quint8>(quint8 source)
{
return source;
}

template <> inline qint8 qbswap<qint8>(qint8 source)
{
return source;
}




# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"
























































































































































































































































# 249 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 259 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 264 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 269 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 279 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 284 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 289 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 294 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 299 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 304 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 309 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 314 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 324 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 329 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 334 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 339 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 344 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 354 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 359 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 364 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 369 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 374 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 379 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 384 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 389 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 394 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 399 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 404 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 409 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 414 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 419 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 424 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 429 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 434 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 439 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 444 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 449 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 454 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 459 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 464 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 469 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 474 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 479 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 484 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 489 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 494 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 499 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 504 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 509 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 514 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 519 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 524 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 529 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 534 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 539 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 544 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 549 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 554 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 559 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 564 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 569 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 574 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 579 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 584 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 589 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 594 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 599 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 604 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 609 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 614 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 619 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 624 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 629 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 634 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 639 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 644 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 649 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 654 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 659 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 664 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 669 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 674 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 679 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfeatures.h"





# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































































































# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobalstatic.h"
























































# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qisenum.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qisenum.h"


























# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"



template <class T> class QSharedDataPointer;

class  QSharedData
{
public:
mutable QAtomicInt ref;

inline QSharedData() : ref(0) { }
inline QSharedData(const QSharedData &) : ref(0) { }

private:

QSharedData &operator=(const QSharedData &);
};

template <class T> class QSharedDataPointer
{
public:
typedef T Type;
typedef T *pointer;

inline void detach() { if (d && d->ref.load() != 1) detach_helper(); }
inline T &operator*() { detach(); return *d; }
inline const T &operator*() const { return *d; }
inline T *operator->() { detach(); return d; }
inline const T *operator->() const { return d; }
inline operator T *() { detach(); return d; }
inline operator const T *() const { return d; }
inline T *data() { detach(); return d; }
inline const T *data() const { return d; }
inline const T *constData() const { return d; }

inline bool operator==(const QSharedDataPointer<T> &other) const { return d == other.d; }
inline bool operator!=(const QSharedDataPointer<T> &other) const { return d != other.d; }

inline QSharedDataPointer() { d = 0; }
inline ~QSharedDataPointer() { if (d && !d->ref.deref()) delete d; }

explicit QSharedDataPointer(T *data);
inline QSharedDataPointer(const QSharedDataPointer<T> &o) : d(o.d) { if (d) d->ref.ref(); }
inline QSharedDataPointer<T> & operator=(const QSharedDataPointer<T> &o) {
if (o.d != d) {
if (o.d)
o.d->ref.ref();
T *old = d;
d = o.d;
if (old && !old->ref.deref())
delete old;
}
return *this;
}
inline QSharedDataPointer &operator=(T *o) {
if (o != d) {
if (o)
o->ref.ref();
T *old = d;
d = o;
if (old && !old->ref.deref())
delete old;
}
return *this;
}






# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"
inline bool operator!() const { return !d; }

inline void swap(QSharedDataPointer &other)
{ qSwap(d, other.d); }

protected:
T *clone();

private:
void detach_helper();

T *d;
};

template <class T> class QExplicitlySharedDataPointer
{
public:
typedef T Type;
typedef T *pointer;

inline T &operator*() const { return *d; }
inline T *operator->() { return d; }
inline T *operator->() const { return d; }
inline T *data() const { return d; }
inline const T *constData() const { return d; }

inline void detach() { if (d && d->ref.load() != 1) detach_helper(); }

inline void reset()
{
if(d && !d->ref.deref())
delete d;

d = 0;
}

inline operator bool () const { return d != 0; }

inline bool operator==(const QExplicitlySharedDataPointer<T> &other) const { return d == other.d; }
inline bool operator!=(const QExplicitlySharedDataPointer<T> &other) const { return d != other.d; }
inline bool operator==(const T *ptr) const { return d == ptr; }
inline bool operator!=(const T *ptr) const { return d != ptr; }

inline QExplicitlySharedDataPointer() { d = 0; }
inline ~QExplicitlySharedDataPointer() { if (d && !d->ref.deref()) delete d; }

explicit QExplicitlySharedDataPointer(T *data);
inline QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer<T> &o) : d(o.d) { if (d) d->ref.ref(); }

template<class X>
inline QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer<X> &o) : d(static_cast<T *>(o.data()))
{
if(d)
d->ref.ref();
}

inline QExplicitlySharedDataPointer<T> & operator=(const QExplicitlySharedDataPointer<T> &o) {
if (o.d != d) {
if (o.d)
o.d->ref.ref();
T *old = d;
d = o.d;
if (old && !old->ref.deref())
delete old;
}
return *this;
}
inline QExplicitlySharedDataPointer &operator=(T *o) {
if (o != d) {
if (o)
o->ref.ref();
T *old = d;
d = o;
if (old && !old->ref.deref())
delete old;
}
return *this;
}






# 203 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"
inline bool operator!() const { return !d; }

inline void swap(QExplicitlySharedDataPointer &other)
{ qSwap(d, other.d); }

protected:
T *clone();

private:
void detach_helper();

T *d;
};

template <class T>
inline QSharedDataPointer<T>::QSharedDataPointer(T *adata) : d(adata)
{ if (d) d->ref.ref(); }

template <class T>
inline T *QSharedDataPointer<T>::clone()
{
return new T(*d);
}

template <class T>
 void QSharedDataPointer<T>::detach_helper()
{
T *x = clone();
x->ref.ref();
if (!d->ref.deref())
delete d;
d = x;
}

template <class T>
inline T *QExplicitlySharedDataPointer<T>::clone()
{
return new T(*d);
}

template <class T>
 void QExplicitlySharedDataPointer<T>::detach_helper()
{
T *x = clone();
x->ref.ref();
if (!d->ref.deref())
delete d;
d = x;
}

template <class T>
inline QExplicitlySharedDataPointer<T>::QExplicitlySharedDataPointer(T *adata) : d(adata)
{ if (d) d->ref.ref(); }

template <class T>
inline void qSwap(QSharedDataPointer<T> &p1, QSharedDataPointer<T> &p2)
{ p1.swap(p2); }

template <class T>
inline void qSwap(QExplicitlySharedDataPointer<T> &p1, QExplicitlySharedDataPointer<T> &p2)
{ p1.swap(p2); }


namespace std {
template <class T>
inline void swap(::QSharedDataPointer<T> &p1, ::QSharedDataPointer<T> &p2)
{ p1.swap(p2); }

template <class T>
inline void swap(::QExplicitlySharedDataPointer<T> &p1, ::QExplicitlySharedDataPointer<T> &p2)
{ p1.swap(p2); }
}


template<typename T> class QTypeInfo<QSharedDataPointer<T> > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSharedDataPointer<T>)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSharedDataPointer<T>) }; static inline const char *name() { return "QSharedDataPointer<T>"; } };
template<typename T> class QTypeInfo<QExplicitlySharedDataPointer<T> > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QExplicitlySharedDataPointer<T>)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QExplicitlySharedDataPointer<T>) }; static inline const char *name() { return "QExplicitlySharedDataPointer<T>"; } };




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"






# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
















# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"



template <class T> class QWeakPointer;
template <class T> class QSharedPointer;

class QVariant;

template <class X, class T>
QSharedPointer<X> qSharedPointerCast(const QSharedPointer<T> &ptr);
template <class X, class T>
QSharedPointer<X> qSharedPointerDynamicCast(const QSharedPointer<T> &ptr);
template <class X, class T>
QSharedPointer<X> qSharedPointerConstCast(const QSharedPointer<T> &ptr);


# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X, class T>
QSharedPointer<X> qSharedPointerObjectCast(const QSharedPointer<T> &ptr);


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
namespace QtSharedPointer {
template <class T> class ExternalRefCount;

template <class X, class Y> QSharedPointer<X> copyAndSetPointer(X * ptr, const QSharedPointer<Y> &src);


 void internalSafetyCheckAdd(const void *, const volatile void *);
 void internalSafetyCheckRemove(const void *);

template <class T, typename Klass, typename RetVal>
inline void executeDeleter(T *t, RetVal (Klass:: *memberDeleter)())
{ (t->*memberDeleter)(); }
template <class T, typename Deleter>
inline void executeDeleter(T *t, Deleter d)
{ d(t); }
struct NormalDeleter {};


template <class T> struct RemovePointer;
template <class T> struct RemovePointer<T *> { typedef T Type; };
template <class T> struct RemovePointer<QSharedPointer<T> > { typedef T Type; };
template <class T> struct RemovePointer<QWeakPointer<T> > { typedef T Type; };











struct ExternalRefCountData
{
typedef void (*DestroyerFn)(ExternalRefCountData *);
QBasicAtomicInt weakref;
QBasicAtomicInt strongref;
DestroyerFn destroyer;

inline ExternalRefCountData(DestroyerFn d)
: destroyer(d)
{
strongref.store(1);
weakref.store(1);
}
inline ExternalRefCountData(Qt::Initialization) { }
~ExternalRefCountData() { qt_noop(); qt_noop(); }

void destroy() { destroyer(this); }


# 161 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
 static ExternalRefCountData *getAndRef(const QObject *);
 void setQObjectShared(const QObject *, bool enable);
 void checkQObjectShared(const QObject *);

# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
inline void checkQObjectShared(...) { }
inline void setQObjectShared(...) { }

inline void operator delete(void *ptr) { ::operator delete(ptr); }
inline void operator delete(void *, void *) { }
};


template <class T, typename Deleter>
struct CustomDeleter
{
Deleter deleter;
T *ptr;

CustomDeleter(T *p, Deleter d) : deleter(d), ptr(p) {}
void execute() { executeDeleter(ptr, deleter); }
};








template <class T>
struct CustomDeleter<T, NormalDeleter>
{
T *ptr;

CustomDeleter(T *p, NormalDeleter) : ptr(p) {}
void execute() { delete ptr; }
};






template <class T, typename Deleter>
struct ExternalRefCountWithCustomDeleter: public ExternalRefCountData
{
typedef ExternalRefCountWithCustomDeleter Self;
typedef ExternalRefCountData BaseClass;
CustomDeleter<T, Deleter> extra;

static inline void deleter(ExternalRefCountData *self)
{
Self *realself = static_cast<Self *>(self);
realself->extra.execute();


realself->extra.~CustomDeleter<T, Deleter>();
}
static void safetyCheckDeleter(ExternalRefCountData *self)
{
internalSafetyCheckRemove(self);
deleter(self);
}

static inline Self *create(T *ptr, Deleter userDeleter, DestroyerFn actualDeleter)
{
Self *d = static_cast<Self *>(::operator new(sizeof(Self)));


new (&d->extra) CustomDeleter<T, Deleter>(ptr, userDeleter);
new (d) BaseClass(actualDeleter); 

return d;
}
private:

ExternalRefCountWithCustomDeleter() ;
~ExternalRefCountWithCustomDeleter() ;
ExternalRefCountWithCustomDeleter(const ExternalRefCountWithCustomDeleter &) ; ExternalRefCountWithCustomDeleter &operator=(const ExternalRefCountWithCustomDeleter &) ;
};





template <class T>
struct ExternalRefCountWithContiguousData: public ExternalRefCountData
{
typedef ExternalRefCountData Parent;
T data;

static void deleter(ExternalRefCountData *self)
{
ExternalRefCountWithContiguousData *that =
static_cast<ExternalRefCountWithContiguousData *>(self);
that->data.~T();
}
static void safetyCheckDeleter(ExternalRefCountData *self)
{
internalSafetyCheckRemove(self);
deleter(self);
}

static inline ExternalRefCountData *create(T **ptr, DestroyerFn destroy)
{
ExternalRefCountWithContiguousData *d =
static_cast<ExternalRefCountWithContiguousData *>(::operator new(sizeof(ExternalRefCountWithContiguousData)));



new (d) Parent(destroy); 

*ptr = &d->data;
return d;
}

private:

ExternalRefCountWithContiguousData() ;
~ExternalRefCountWithContiguousData() ;
ExternalRefCountWithContiguousData(const ExternalRefCountWithContiguousData &) ; ExternalRefCountWithContiguousData &operator=(const ExternalRefCountWithContiguousData &) ;
};


# 285 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
 QWeakPointer<QObject> weakPointerFromVariant_internal(const QVariant &variant);
 QSharedPointer<QObject> sharedPointerFromVariant_internal(const QVariant &variant);

# 288 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
} 

template <class T> class QSharedPointer
{
typedef T *QSharedPointer:: *RestrictedBool;
typedef QtSharedPointer::ExternalRefCountData Data;
public:
typedef T Type;
typedef T element_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef qptrdiff difference_type;

inline T *data() const { return value; }
inline bool isNull() const { return !data(); }
inline operator RestrictedBool() const { return isNull() ? 0 : &QSharedPointer::value; }
inline bool operator !() const { return isNull(); }
inline T &operator*() const { return *data(); }
inline T *operator->() const { return data(); }

QSharedPointer() : value(0), d(0) { }
~QSharedPointer() { deref(); }

inline explicit QSharedPointer(T *ptr) : value(ptr) 
{ internalConstruct(ptr, QtSharedPointer::NormalDeleter()); }

template <typename Deleter>
inline QSharedPointer(T *ptr, Deleter deleter) : value(ptr) 
{ internalConstruct(ptr, deleter); }

inline QSharedPointer(const QSharedPointer<T> &other) : value(other.value), d(other.d)
{ if (d) ref(); }
inline QSharedPointer<T> &operator=(const QSharedPointer<T> &other)
{
QSharedPointer copy(other);
swap(copy);
return *this;
}








# 337 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X>
inline QSharedPointer(const QSharedPointer<X> &other) : value(other.value), d(other.d)
{ if (d) ref(); }

template <class X>
inline QSharedPointer<T> &operator=(const QSharedPointer<X> &other)
{
qt_noop(); 
internalCopy(other);
return *this;
}

template <class X>
inline QSharedPointer(const QWeakPointer<X> &other) : value(0), d(0)
{ *this = other; }

template <class X>
inline QSharedPointer<T> &operator=(const QWeakPointer<X> &other)
{ internalSet(other.d, other.value); return *this; }

inline void swap(QSharedPointer &other)
{ QSharedPointer<T>::internalSwap(other); }

inline void reset() { clear(); }
inline void reset(T *t)
{ QSharedPointer copy(t); swap(copy); }
template <typename Deleter>
inline void reset(T *t, Deleter deleter)
{ QSharedPointer copy(t, deleter); swap(copy); }

template <class X>
QSharedPointer<X> staticCast() const
{
return qSharedPointerCast<X, T>(*this);
}

template <class X>
QSharedPointer<X> dynamicCast() const
{
return qSharedPointerDynamicCast<X, T>(*this);
}

template <class X>
QSharedPointer<X> constCast() const
{
return qSharedPointerConstCast<X, T>(*this);
}


# 386 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X>
QSharedPointer<X> objectCast() const
{
return qSharedPointerObjectCast<X, T>(*this);
}


# 393 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
inline void clear() { QSharedPointer copy; swap(copy); }

QWeakPointer<T> toWeakRef() const;























# 419 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
static inline QSharedPointer<T> create()
{
typedef QtSharedPointer::ExternalRefCountWithContiguousData<T> Private;



# 425 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
typename Private::DestroyerFn destroy = &Private::deleter;

# 427 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
QSharedPointer<T> result(Qt::Uninitialized);
result.d = Private::create(&result.value, destroy);


new (result.data()) T();



# 435 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
result.d->setQObjectShared(result.value, true);
return result;
}


# 440 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
private:
explicit QSharedPointer(Qt::Initialization) {}

inline void deref()
{ deref(d); }
static inline void deref(Data *d)
{
if (!d) return;
if (!d->strongref.deref()) {
d->destroy();
}
if (!d->weakref.deref())
delete d;
}

template <typename Deleter>
inline void internalConstruct(T *ptr, Deleter deleter)
{
if (!ptr) {
d = 0;
return;
}

typedef QtSharedPointer::ExternalRefCountWithCustomDeleter<T, Deleter> Private;



# 467 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
typename Private::DestroyerFn actualDeleter = &Private::deleter;

# 469 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
d = Private::create(ptr, deleter, actualDeleter);




# 474 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
d->setQObjectShared(ptr, true);
}

template <class X>
inline void internalCopy(const QSharedPointer<X> &other)
{
Data *o = other.d;
T *actual = other.value;
if (o)
other.ref();
qSwap(d, o);
qSwap(this->value, actual);
deref(o);
}

inline void internalSwap(QSharedPointer &other)
{
qSwap(d, other.d);
qSwap(this->value, other.value);
}




# 498 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X> friend class QSharedPointer;
template <class X> friend class QWeakPointer;
template <class X, class Y> friend QSharedPointer<X> QtSharedPointer::copyAndSetPointer(X * ptr, const QSharedPointer<Y> &src);

# 502 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
inline void ref() const { d->weakref.ref(); d->strongref.ref(); }

inline void internalSet(Data *o, T *actual)
{
if (o) {


int tmp = o->strongref.load();
while (tmp > 0) {

if (o->strongref.testAndSetRelaxed(tmp, tmp + 1))
break; 
tmp = o->strongref.load(); 
}

if (tmp > 0) {
o->weakref.ref();
} else {
o->checkQObjectShared(actual);
o = 0;
}
}

qSwap(d, o);
qSwap(this->value, actual);
if (!d || d->strongref.load() == 0)
this->value = 0;


deref(o);
}

Type *value;
Data *d;
};

template <class T>
class QWeakPointer
{
typedef T *QWeakPointer:: *RestrictedBool;
typedef QtSharedPointer::ExternalRefCountData Data;

public:
typedef T element_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef qptrdiff difference_type;

inline bool isNull() const { return d == 0 || d->strongref.load() == 0 || value == 0; }
inline operator RestrictedBool() const { return isNull() ? 0 : &QWeakPointer::value; }
inline bool operator !() const { return isNull(); }
inline T *data() const { return d == 0 || d->strongref.load() == 0 ? 0 : value; }

inline QWeakPointer() : d(0), value(0) { }
inline ~QWeakPointer() { if (d && !d->weakref.deref()) delete d; }


# 562 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"














# 576 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
inline QWeakPointer(const QWeakPointer<T> &o) : d(o.d), value(o.value)
{ if (d) d->weakref.ref(); }
inline QWeakPointer<T> &operator=(const QWeakPointer<T> &o)
{
internalSet(o.d, o.value);
return *this;
}

inline QWeakPointer(const QSharedPointer<T> &o) : d(o.d), value(o.data())
{ if (d) d->weakref.ref();}
inline QWeakPointer<T> &operator=(const QSharedPointer<T> &o)
{
internalSet(o.d, o.value);
return *this;
}

template <class X>
inline QWeakPointer(const QWeakPointer<X> &o) : d(0), value(0)
{ *this = o; }

template <class X>
inline QWeakPointer<T> &operator=(const QWeakPointer<X> &o)
{


*this = o.toStrongRef();
return *this;
}

template <class X>
inline bool operator==(const QWeakPointer<X> &o) const
{ return d == o.d && value == static_cast<const T *>(o.value); }

template <class X>
inline bool operator!=(const QWeakPointer<X> &o) const
{ return !(*this == o); }

template <class X>
inline QWeakPointer(const QSharedPointer<X> &o) : d(0), value(0)
{ *this = o; }

template <class X>
inline QWeakPointer<T> &operator=(const QSharedPointer<X> &o)
{
qt_noop(); 
internalSet(o.d, o.data());
return *this;
}

template <class X>
inline bool operator==(const QSharedPointer<X> &o) const
{ return d == o.d; }

template <class X>
inline bool operator!=(const QSharedPointer<X> &o) const
{ return !(*this == o); }

inline void clear() { *this = QWeakPointer<T>(); }

inline QSharedPointer<T> toStrongRef() const { return QSharedPointer<T>(*this); }





# 641 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
private:




# 646 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X> friend class QSharedPointer;
template <class X> friend class QPointer;


# 650 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X>
inline QWeakPointer &assign(X *ptr)
{ return *this = QWeakPointer<X>(ptr, true); }


# 655 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X>
inline QWeakPointer(X *ptr, bool) : d(ptr ? Data::getAndRef(ptr) : 0), value(ptr)
{ }


# 660 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
inline void internalSet(Data *o, T *actual)
{
if (d == o) return;
if (o)
o->weakref.ref();
if (d && !d->weakref.deref())
delete d;
d = o;
value = actual;
}

Data *d;
T *value;
};




template <class T, class X>
bool operator==(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1.data() == ptr2.data();
}
template <class T, class X>
bool operator!=(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1.data() != ptr2.data();
}

template <class T, class X>
bool operator==(const QSharedPointer<T> &ptr1, const X *ptr2)
{
return ptr1.data() == ptr2;
}
template <class T, class X>
bool operator==(const T *ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1 == ptr2.data();
}
template <class T, class X>
bool operator!=(const QSharedPointer<T> &ptr1, const X *ptr2)
{
return !(ptr1 == ptr2);
}
template <class T, class X>
bool operator!=(const T *ptr1, const QSharedPointer<X> &ptr2)
{
return !(ptr2 == ptr1);
}

template <class T, class X>
bool operator==(const QSharedPointer<T> &ptr1, const QWeakPointer<X> &ptr2)
{
return ptr2 == ptr1;
}
template <class T, class X>
bool operator!=(const QSharedPointer<T> &ptr1, const QWeakPointer<X> &ptr2)
{
return ptr2 != ptr1;
}




template <class T, class X>
inline typename QSharedPointer<T>::difference_type operator-(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1.data() - ptr2.data();
}
template <class T, class X>
inline typename QSharedPointer<T>::difference_type operator-(const QSharedPointer<T> &ptr1, X *ptr2)
{
return ptr1.data() - ptr2;
}
template <class T, class X>
inline typename QSharedPointer<X>::difference_type operator-(T *ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1 - ptr2.data();
}




template <class T, class X>
inline bool operator<(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1.data() < ptr2.data();
}
template <class T, class X>
inline bool operator<(const QSharedPointer<T> &ptr1, X *ptr2)
{
return ptr1.data() < ptr2;
}
template <class T, class X>
inline bool operator<(T *ptr1, const QSharedPointer<X> &ptr2)
{
return ptr1 < ptr2.data();
}




template <class T>
inline uint qHash(const QSharedPointer<T> &ptr, uint seed = 0)
{
return ::qHash(ptr.data(), seed);
}


template <class T>
inline QWeakPointer<T> QSharedPointer<T>::toWeakRef() const
{
return QWeakPointer<T>(*this);
}

template <class T>
inline void qSwap(QSharedPointer<T> &p1, QSharedPointer<T> &p2)
{
p1.swap(p2);
}


namespace std {
template <class T>
inline void swap(::QSharedPointer<T> &p1, ::QSharedPointer<T> &p2)
{ p1.swap(p2); }
}


namespace QtSharedPointer {

template <class X, class T>
inline QSharedPointer<X> copyAndSetPointer(X *ptr, const QSharedPointer<T> &src)
{
QSharedPointer<X> result;
result.internalSet(src.d, ptr);
return result;
}
}


template <class X, class T>
inline QSharedPointer<X> qSharedPointerCast(const QSharedPointer<T> &src)
{
X *ptr = static_cast<X *>(src.data()); 
return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerCast(const QWeakPointer<T> &src)
{
return qSharedPointerCast<X, T>(src.toStrongRef());
}

template <class X, class T>
inline QSharedPointer<X> qSharedPointerDynamicCast(const QSharedPointer<T> &src)
{
X *ptr = dynamic_cast<X *>(src.data()); 
if (!ptr)
return QSharedPointer<X>();
return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerDynamicCast(const QWeakPointer<T> &src)
{
return qSharedPointerDynamicCast<X, T>(src.toStrongRef());
}

template <class X, class T>
inline QSharedPointer<X> qSharedPointerConstCast(const QSharedPointer<T> &src)
{
X *ptr = const_cast<X *>(src.data()); 
return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerConstCast(const QWeakPointer<T> &src)
{
return qSharedPointerConstCast<X, T>(src.toStrongRef());
}

template <class X, class T>
inline
QWeakPointer<X> qWeakPointerCast(const QSharedPointer<T> &src)
{
return qSharedPointerCast<X, T>(src).toWeakRef();
}


# 847 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template <class X, class T>
inline QSharedPointer<X> qSharedPointerObjectCast(const QSharedPointer<T> &src)
{
X *ptr = qobject_cast<X *>(src.data());
return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerObjectCast(const QWeakPointer<T> &src)
{
return qSharedPointerObjectCast<X>(src.toStrongRef());
}

template <class X, class T>
inline QSharedPointer<typename QtSharedPointer::RemovePointer<X>::Type>
qobject_cast(const QSharedPointer<T> &src)
{
return qSharedPointerObjectCast<typename QtSharedPointer::RemovePointer<X>::Type, T>(src);
}
template <class X, class T>
inline QSharedPointer<typename QtSharedPointer::RemovePointer<X>::Type>
qobject_cast(const QWeakPointer<T> &src)
{
return qSharedPointerObjectCast<typename QtSharedPointer::RemovePointer<X>::Type, T>(src);
}

template<typename T>
QWeakPointer<typename QtPrivate::QEnableIf<QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value, T>::Type>
qWeakPointerFromVariant(const QVariant &variant)
{
return QWeakPointer<T>(qobject_cast<T*>(QtSharedPointer::weakPointerFromVariant_internal(variant).data()));
}
template<typename T>
QSharedPointer<typename QtPrivate::QEnableIf<QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value, T>::Type>
qSharedPointerFromVariant(const QVariant &variant)
{
return qSharedPointerObjectCast<T>(QtSharedPointer::sharedPointerFromVariant_internal(variant));
}



# 887 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer_impl.h"
template<typename T> class QTypeInfo<QWeakPointer<T> > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QWeakPointer<T>)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QWeakPointer<T>) }; static inline const char *name() { return "QWeakPointer<T>"; } };
template<typename T> class QTypeInfo<QSharedPointer<T> > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSharedPointer<T>)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSharedPointer<T>) }; static inline const char *name() { return "QSharedPointer<T>"; } };





# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"










































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"



class  QDate
{
public:
enum MonthNameType {
DateFormat = 0,
StandaloneFormat
};
public:
QDate() { jd = nullJd(); }
QDate(int y, int m, int d);

bool isNull() const { return !isValid(); }
bool isValid() const { return jd >= minJd() && jd <= maxJd(); }

int year() const;
int month() const;
int day() const;
int dayOfWeek() const;
int dayOfYear() const;
int daysInMonth() const;
int daysInYear() const;
int weekNumber(int *yearNum = 0) const;


# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static QString shortMonthName(int month, MonthNameType type = DateFormat);
static QString shortDayName(int weekday, MonthNameType type = DateFormat);
static QString longMonthName(int month, MonthNameType type = DateFormat);
static QString longDayName(int weekday, MonthNameType type = DateFormat);


# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
QString toString(Qt::DateFormat f = Qt::TextDate) const;
QString toString(const QString &format) const;






# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
bool setDate(int year, int month, int day);

void getDate(int *year, int *month, int *day);

QDate addDays(qint64 days) const;
QDate addMonths(int months) const;
QDate addYears(int years) const;
qint64 daysTo(const QDate &) const;

bool operator==(const QDate &other) const { return jd == other.jd; }
bool operator!=(const QDate &other) const { return jd != other.jd; }
bool operator<(const QDate &other) const { return jd < other.jd; }
bool operator<=(const QDate &other) const { return jd <= other.jd; }
bool operator>(const QDate &other) const { return jd > other.jd; }
bool operator>=(const QDate &other) const { return jd >= other.jd; }

static QDate currentDate();

# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static QDate fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
static QDate fromString(const QString &s, const QString &format);

# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static bool isValid(int y, int m, int d);
static bool isLeapYear(int year);

static inline QDate fromJulianDay(qint64 jd)
{ QDate d; if (jd >= minJd() && jd <= maxJd()) d.jd = jd; return d; }
inline qint64 toJulianDay() const { return jd; }

private:
static inline qint64 nullJd() { return std::numeric_limits<qint64>::min(); }
static inline qint64 minJd() { return static_cast<long long>(-784350574879LL) 
; }
static inline qint64 maxJd() { return static_cast<long long>(784354017364LL) 
; }

qint64 jd;

friend class QDateTime;
friend class QDateTimePrivate;
# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"

# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
friend  QDataStream &operator<<(QDataStream &, const QDate &);
friend  QDataStream &operator>>(QDataStream &, QDate &);

# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
};
template<> class QTypeInfo<QDate > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDate)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDate) }; static inline const char *name() { return "QDate"; } };

class  QTime
{
public:
QTime(): mds(NullTime)



# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
{}
QTime(int h, int m, int s = 0, int ms = 0);

bool isNull() const { return mds == NullTime; }
bool isValid() const;

int hour() const;
int minute() const;
int second() const;
int msec() const;

# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
QString toString(Qt::DateFormat f = Qt::TextDate) const;
QString toString(const QString &format) const;

# 157 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
bool setHMS(int h, int m, int s, int ms = 0);

QTime addSecs(int secs) const;
int secsTo(const QTime &) const;
QTime addMSecs(int ms) const;
int msecsTo(const QTime &) const;

bool operator==(const QTime &other) const { return mds == other.mds; }
bool operator!=(const QTime &other) const { return mds != other.mds; }
bool operator<(const QTime &other) const { return mds < other.mds; }
bool operator<=(const QTime &other) const { return mds <= other.mds; }
bool operator>(const QTime &other) const { return mds > other.mds; }
bool operator>=(const QTime &other) const { return mds >= other.mds; }

static QTime currentTime();

# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static QTime fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
static QTime fromString(const QString &s, const QString &format);

# 176 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static bool isValid(int h, int m, int s, int ms = 0);

void start();
int restart();
int elapsed() const;
private:
enum TimeFlag { NullTime = -1 };
inline int ds() const { return mds == -1 ? 0 : mds; }
int mds;




# 189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
friend class QDateTime;
friend class QDateTimePrivate;

# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
friend  QDataStream &operator<<(QDataStream &, const QTime &);
friend  QDataStream &operator>>(QDataStream &, QTime &);

# 195 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
};
template<> class QTypeInfo<QTime > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTime)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTime) }; static inline const char *name() { return "QTime"; } };

class QDateTimePrivate;

class  QDateTime
{
public:
QDateTime();
explicit QDateTime(const QDate &);
QDateTime(const QDate &, const QTime &, Qt::TimeSpec spec = Qt::LocalTime);
QDateTime(const QDateTime &other);
~QDateTime();

QDateTime &operator=(const QDateTime &other);

inline void swap(QDateTime &other) { qSwap(d, other.d); }

bool isNull() const;
bool isValid() const;

QDate date() const;
QTime time() const;
Qt::TimeSpec timeSpec() const;
qint64 toMSecsSinceEpoch() const;
uint toTime_t() const;
void setDate(const QDate &date);
void setTime(const QTime &time);
void setTimeSpec(Qt::TimeSpec spec);
void setMSecsSinceEpoch(qint64 msecs);
void setTime_t(uint secsSince1Jan1970UTC);

# 227 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
QString toString(Qt::DateFormat f = Qt::TextDate) const;
QString toString(const QString &format) const;

# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
QDateTime addDays(qint64 days) const;
QDateTime addMonths(int months) const;
QDateTime addYears(int years) const;
QDateTime addSecs(qint64 secs) const;
QDateTime addMSecs(qint64 msecs) const;
QDateTime toTimeSpec(Qt::TimeSpec spec) const;
inline QDateTime toLocalTime() const { return toTimeSpec(Qt::LocalTime); }
inline QDateTime toUTC() const { return toTimeSpec(Qt::UTC); }
qint64 daysTo(const QDateTime &) const;
qint64 secsTo(const QDateTime &) const;
qint64 msecsTo(const QDateTime &) const;

bool operator==(const QDateTime &other) const;
inline bool operator!=(const QDateTime &other) const { return !(*this == other); }
bool operator<(const QDateTime &other) const;
inline bool operator<=(const QDateTime &other) const { return !(other < *this); }
inline bool operator>(const QDateTime &other) const { return other < *this; }
inline bool operator>=(const QDateTime &other) const { return !(*this < other); }

void setUtcOffset(int seconds);
int utcOffset() const;

static QDateTime currentDateTime();
static QDateTime currentDateTimeUtc();

# 255 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static QDateTime fromString(const QString &s, Qt::DateFormat f = Qt::TextDate);
static QDateTime fromString(const QString &s, const QString &format);

# 258 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
static QDateTime fromTime_t(uint secsSince1Jan1970UTC);
static QDateTime fromMSecsSinceEpoch(qint64 msecs);
static qint64 currentMSecsSinceEpoch() ;

private:
friend class QDateTimePrivate;
void detach();




QExplicitlySharedDataPointer<QDateTimePrivate> d;


# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
friend  QDataStream &operator<<(QDataStream &, const QDateTime &);
friend  QDataStream &operator>>(QDataStream &, QDateTime &);

# 275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
};
template<> class QTypeInfo<QDateTime > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDateTime)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDateTime) }; static inline const char *name() { return "QDateTime"; } }; template <> inline void qSwap<QDateTime>(QDateTime &value1, QDateTime &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDateTime>(::QDateTime &value1, ::QDateTime &value2) { value1.swap(value2); } } 


# 279 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
 QDataStream &operator<<(QDataStream &, const QDate &);
 QDataStream &operator>>(QDataStream &, QDate &);
 QDataStream &operator<<(QDataStream &, const QTime &);
 QDataStream &operator>>(QDataStream &, QTime &);
 QDataStream &operator<<(QDataStream &, const QDateTime &);
 QDataStream &operator>>(QDataStream &, QDateTime &);



# 288 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"
 QDebug operator<<(QDebug, const QDate &);
 QDebug operator<<(QDebug, const QTime &);
 QDebug operator<<(QDebug, const QDateTime &);


# 293 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"


 uint qHash(const QDateTime &key, uint seed = 0);
 uint qHash(const QDate &key, uint seed = 0) ;
 uint qHash(const QTime &key, uint seed = 0) ;




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"


class  QLibraryInfo
{
public:
static QString licensee();
static QString licensedProducts();


# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"
static QDate buildDate();


# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"
static bool isDebugBuild();

enum LibraryLocation
{
PrefixPath = 0,
DocumentationPath,
HeadersPath,
LibrariesPath,
LibraryExecutablesPath,
BinariesPath,
PluginsPath,
ImportsPath,
Qml2ImportsPath,
ArchDataPath,
DataPath,
TranslationsPath,
ExamplesPath,
TestsPath,













# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"
SettingsPath = 100
};
static QString location(LibraryLocation); 





# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibraryinfo.h"
private:
QLibraryInfo();
};




# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnumeric.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnumeric.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnumeric.h"



 bool qIsInf(double d);
 bool qIsNaN(double d);
 bool qIsFinite(double d);
 bool qIsInf(float f);
 bool qIsNaN(float f);
 bool qIsFinite(float f);
 double qSNaN();
 double qQNaN();
 double qInf();





# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnumeric.h"



# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocessordetection.h"





































































































































































































# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsysinfo.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsysinfo.h"
















































































































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemdetection.h"




























































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypeinfo.h"



























































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"








































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtypetraits.h"























































































































































































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"






# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



class QByteArray;
class QIODevicePrivate;

class  QIODevice

# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
: public QObject

# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
{

# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
Q_OBJECT

# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
public:
enum OpenModeFlag {
NotOpen = 0x0000,
ReadOnly = 0x0001,
WriteOnly = 0x0002,
ReadWrite = ReadOnly | WriteOnly,
Append = 0x0004,
Truncate = 0x0008,
Text = 0x0010,
Unbuffered = 0x0020
};
typedef QFlags<OpenModeFlag> OpenMode;

QIODevice();

# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
explicit QIODevice(QObject *parent);

# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
virtual ~QIODevice();

OpenMode openMode() const;

void setTextModeEnabled(bool enabled);
bool isTextModeEnabled() const;

bool isOpen() const;
bool isReadable() const;
bool isWritable() const;
virtual bool isSequential() const;

virtual bool open(OpenMode mode);
virtual void close();



virtual qint64 pos() const;
virtual qint64 size() const;
virtual bool seek(qint64 pos);
virtual bool atEnd() const;
virtual bool reset();

virtual qint64 bytesAvailable() const;
virtual qint64 bytesToWrite() const;

qint64 read(char *data, qint64 maxlen);
QByteArray read(qint64 maxlen);
QByteArray readAll();
qint64 readLine(char *data, qint64 maxlen);
QByteArray readLine(qint64 maxlen = 0);
virtual bool canReadLine() const;

qint64 write(const char *data, qint64 len);
qint64 write(const char *data);
inline qint64 write(const QByteArray &data)
{ return write(data.constData(), data.size()); }

qint64 peek(char *data, qint64 maxlen);
QByteArray peek(qint64 maxlen);

virtual bool waitForReadyRead(int msecs);
virtual bool waitForBytesWritten(int msecs);

void ungetChar(char c);
bool putChar(char c);
bool getChar(char *c);

QString errorString() const;


# 140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
signals:
void readyRead();
void bytesWritten(qint64 bytes);
void aboutToClose();
void readChannelFinished();


# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
protected:



# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
QIODevice(QIODevicePrivate &dd, QObject *parent = 0);

# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
virtual qint64 readData(char *data, qint64 maxlen) = 0;
virtual qint64 readLineData(char *data, qint64 maxlen);
virtual qint64 writeData(const char *data, qint64 len) = 0;

void setOpenMode(OpenMode openMode);

void setErrorString(const QString &errorString);





# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
private:
inline QIODevicePrivate* d_func() { return reinterpret_cast<QIODevicePrivate *>(qGetPtrHelper(d_ptr)); } inline const QIODevicePrivate* d_func() const { return reinterpret_cast<const QIODevicePrivate *>(qGetPtrHelper(d_ptr)); } friend class QIODevicePrivate;
QIODevice(const QIODevice &) ; QIODevice &operator=(const QIODevice &) ;
};

 inline QFlags<QIODevice::OpenMode::enum_type> operator|(QIODevice::OpenMode::enum_type f1, QIODevice::OpenMode::enum_type f2) { return QFlags<QIODevice::OpenMode::enum_type>(f1) | f2; }  inline QFlags<QIODevice::OpenMode::enum_type> operator|(QIODevice::OpenMode::enum_type f1, QFlags<QIODevice::OpenMode::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QIODevice::OpenMode::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"
class QDebug;
 QDebug operator<<(QDebug debug, QIODevice::OpenMode modes);


# 177 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"



class QObject;
class QBufferPrivate;

class  QBuffer : public QIODevice
{

# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"
Q_OBJECT


# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"
public:

# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"
explicit QBuffer(QObject *parent = 0);
QBuffer(QByteArray *buf, QObject *parent = 0);




# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"
~QBuffer();

QByteArray &buffer();
const QByteArray &buffer() const;
void setBuffer(QByteArray *a);

void setData(const QByteArray &data);
inline void setData(const char *data, int len);
const QByteArray &data() const;

bool open(OpenMode openMode);

void close();
qint64 size() const;
qint64 pos() const;
bool seek(qint64 off);
bool atEnd() const;
bool canReadLine() const;

protected:

# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"
void connectNotify(const QMetaMethod &);
void disconnectNotify(const QMetaMethod &);

# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbuffer.h"
qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

private:
inline QBufferPrivate* d_func() { return reinterpret_cast<QBufferPrivate *>(qGetPtrHelper(d_ptr)); } inline const QBufferPrivate* d_func() const { return reinterpret_cast<const QBufferPrivate *>(qGetPtrHelper(d_ptr)); } friend class QBufferPrivate;
QBuffer(const QBuffer &) ; QBuffer &operator=(const QBuffer &) ;


};

inline void QBuffer::setData(const char *adata, int alen)
{ setData(QByteArray(adata, alen)); }




# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"






# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"



class QByteArray;
class QIODevice;

template <typename T> class QList;
template <typename T> class QLinkedList;
template <typename T> class QVector;
template <typename T> class QSet;
template <class Key, class T> class QHash;
template <class Key, class T> class QMap;


# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"
class QDataStreamPrivate;
class  QDataStream
{
public:
enum Version {
Qt_1_0 = 1,
Qt_2_0 = 2,
Qt_2_1 = 3,
Qt_3_0 = 4,
Qt_3_1 = 5,
Qt_3_3 = 6,
Qt_4_0 = 7,
Qt_4_1 = Qt_4_0,
Qt_4_2 = 8,
Qt_4_3 = 9,
Qt_4_4 = 10,
Qt_4_5 = 11,
Qt_4_6 = 12,
Qt_4_7 = Qt_4_6,
Qt_4_8 = Qt_4_7,
Qt_4_9 = Qt_4_8,
Qt_5_0 = 13,
Qt_5_1 = 14



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"
};

enum ByteOrder {
BigEndian = QSysInfo::BigEndian,
LittleEndian = QSysInfo::LittleEndian
};

enum Status {
Ok,
ReadPastEnd,
ReadCorruptData,
WriteFailed
};

enum FloatingPointPrecision {
SinglePrecision,
DoublePrecision
};

QDataStream();
explicit QDataStream(QIODevice *);
QDataStream(QByteArray *, QIODevice::OpenMode flags);
QDataStream(const QByteArray &);
~QDataStream();

QIODevice *device() const;
void setDevice(QIODevice *);
void unsetDevice();

bool atEnd() const;

Status status() const;
void setStatus(Status status);
void resetStatus();

FloatingPointPrecision floatingPointPrecision() const;
void setFloatingPointPrecision(FloatingPointPrecision precision);

ByteOrder byteOrder() const;
void setByteOrder(ByteOrder);

int version() const;
void setVersion(int);

QDataStream &operator>>(qint8 &i);
QDataStream &operator>>(quint8 &i);
QDataStream &operator>>(qint16 &i);
QDataStream &operator>>(quint16 &i);
QDataStream &operator>>(qint32 &i);
QDataStream &operator>>(quint32 &i);
QDataStream &operator>>(qint64 &i);
QDataStream &operator>>(quint64 &i);

QDataStream &operator>>(bool &i);
QDataStream &operator>>(float &f);
QDataStream &operator>>(double &f);
QDataStream &operator>>(char *&str);

QDataStream &operator<<(qint8 i);
QDataStream &operator<<(quint8 i);
QDataStream &operator<<(qint16 i);
QDataStream &operator<<(quint16 i);
QDataStream &operator<<(qint32 i);
QDataStream &operator<<(quint32 i);
QDataStream &operator<<(qint64 i);
QDataStream &operator<<(quint64 i);
QDataStream &operator<<(bool i);
QDataStream &operator<<(float f);
QDataStream &operator<<(double f);
QDataStream &operator<<(const char *str);

QDataStream &readBytes(char *&, uint &len);
int readRawData(char *, int len);

QDataStream &writeBytes(const char *, uint len);
int writeRawData(const char *, int len);

int skipRawData(int len);

private:
QDataStream(const QDataStream &) ; QDataStream &operator=(const QDataStream &) ;

QScopedPointer<QDataStreamPrivate> d;

QIODevice *dev;
bool owndev;
bool noswap;
ByteOrder byteorder;
int ver;
Status q_status;
};






inline QIODevice *QDataStream::device() const
{ return dev; }

inline QDataStream::ByteOrder QDataStream::byteOrder() const
{ return byteorder; }

inline int QDataStream::version() const
{ return ver; }

inline void QDataStream::setVersion(int v)
{ ver = v; }

inline QDataStream &QDataStream::operator>>(quint8 &i)
{ return *this >> reinterpret_cast<qint8&>(i); }

inline QDataStream &QDataStream::operator>>(quint16 &i)
{ return *this >> reinterpret_cast<qint16&>(i); }

inline QDataStream &QDataStream::operator>>(quint32 &i)
{ return *this >> reinterpret_cast<qint32&>(i); }

inline QDataStream &QDataStream::operator>>(quint64 &i)
{ return *this >> reinterpret_cast<qint64&>(i); }

inline QDataStream &QDataStream::operator<<(quint8 i)
{ return *this << qint8(i); }

inline QDataStream &QDataStream::operator<<(quint16 i)
{ return *this << qint16(i); }

inline QDataStream &QDataStream::operator<<(quint32 i)
{ return *this << qint32(i); }

inline QDataStream &QDataStream::operator<<(quint64 i)
{ return *this << qint64(i); }

template <typename T>
QDataStream& operator>>(QDataStream& s, QList<T>& l)
{
l.clear();
quint32 c;
s >> c;
l.reserve(c);
for(quint32 i = 0; i < c; ++i)
{
T t;
s >> t;
l.append(t);
if (s.atEnd())
break;
}
return s;
}

template <typename T>
QDataStream& operator<<(QDataStream& s, const QList<T>& l)
{
s << quint32(l.size());
for (int i = 0; i < l.size(); ++i)
s << l.at(i);
return s;
}

template <typename T>
QDataStream& operator>>(QDataStream& s, QLinkedList<T>& l)
{
l.clear();
quint32 c;
s >> c;
for(quint32 i = 0; i < c; ++i)
{
T t;
s >> t;
l.append(t);
if (s.atEnd())
break;
}
return s;
}

template <typename T>
QDataStream& operator<<(QDataStream& s, const QLinkedList<T>& l)
{
s << quint32(l.size());
typename QLinkedList<T>::ConstIterator it = l.constBegin();
for(; it != l.constEnd(); ++it)
s << *it;
return s;
}

template<typename T>
QDataStream& operator>>(QDataStream& s, QVector<T>& v)
{
v.clear();
quint32 c;
s >> c;
v.resize(c);
for(quint32 i = 0; i < c; ++i) {
T t;
s >> t;
v[i] = t;
}
return s;
}

template<typename T>
QDataStream& operator<<(QDataStream& s, const QVector<T>& v)
{
s << quint32(v.size());
for (typename QVector<T>::const_iterator it = v.begin(); it != v.end(); ++it)
s << *it;
return s;
}

template <typename T>
QDataStream &operator>>(QDataStream &in, QSet<T> &set)
{
set.clear();
quint32 c;
in >> c;
for (quint32 i = 0; i < c; ++i) {
T t;
in >> t;
set << t;
if (in.atEnd())
break;
}
return in;
}

template <typename T>
QDataStream& operator<<(QDataStream &out, const QSet<T> &set)
{
out << quint32(set.size());
typename QSet<T>::const_iterator i = set.constBegin();
while (i != set.constEnd()) {
out << *i;
++i;
}
return out;
}

template <class Key, class T>
 QDataStream &operator>>(QDataStream &in, QHash<Key, T> &hash)
{
QDataStream::Status oldStatus = in.status();
in.resetStatus();
hash.clear();

quint32 n;
in >> n;

for (quint32 i = 0; i < n; ++i) {
if (in.status() != QDataStream::Ok)
break;

Key k;
T t;
in >> k >> t;
hash.insertMulti(k, t);
}

if (in.status() != QDataStream::Ok)
hash.clear();
if (oldStatus != QDataStream::Ok)
in.setStatus(oldStatus);
return in;
}

template <class Key, class T>
 QDataStream &operator<<(QDataStream &out, const QHash<Key, T>& hash)
{
out << quint32(hash.size());
typename QHash<Key, T>::ConstIterator it = hash.end();
typename QHash<Key, T>::ConstIterator begin = hash.begin();
while (it != begin) {
--it;
out << it.key() << it.value();
}
return out;
}




# 375 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"
template <class aKey, class aT>
 QDataStream &operator>>(QDataStream &in, QMap<aKey, aT> &map)

# 378 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"
{
QDataStream::Status oldStatus = in.status();
in.resetStatus();
map.clear();

quint32 n;
in >> n;

map.detach();
for (quint32 i = 0; i < n; ++i) {
if (in.status() != QDataStream::Ok)
break;

aKey key;
aT value;
in >> key >> value;
map.insertMulti(key, value);
}
if (in.status() != QDataStream::Ok)
map.clear();
if (oldStatus != QDataStream::Ok)
in.setStatus(oldStatus);
return in;
}

template <class Key, class T>
 QDataStream &operator<<(QDataStream &out, const QMap<Key, T> &map)
{
out << quint32(map.size());
typename QMap<Key, T>::ConstIterator it = map.end();
typename QMap<Key, T>::ConstIterator begin = map.begin();
while (it != begin) {
--it;
out << it.key() << it.value();
}
return out;
}


# 417 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"
template <class T1, class T2>
inline QDataStream& operator>>(QDataStream& s, QPair<T1, T2>& p)
{
s >> p.first >> p.second;
return s;
}

template <class T1, class T2>
inline QDataStream& operator<<(QDataStream& s, const QPair<T1, T2>& p)
{
s << p.first << p.second;
return s;
}




# 434 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"



# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"



































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"















































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"



class QDataStream;
class QDate;
class QDateTime;
class QTime;
class QVariant;
class QTextStream;
class QTextStreamPrivate;

class QLocalePrivate;

class  QLocale
{

Q_ENUMS(Language)
Q_ENUMS(Country)
Q_ENUMS(MeasurementSystem)
friend class QString;
friend class QStringRef;
friend class QByteArray;
friend class QIntValidator;
friend class QDoubleValidatorPrivate;
friend class QTextStream;
friend class QTextStreamPrivate;

public:


enum Language {
AnyLanguage = 0,
C = 1,
Abkhazian = 2,
Oromo = 3,
Afar = 4,
Afrikaans = 5,
Albanian = 6,
Amharic = 7,
Arabic = 8,
Armenian = 9,
Assamese = 10,
Aymara = 11,
Azerbaijani = 12,
Bashkir = 13,
Basque = 14,
Bengali = 15,
Dzongkha = 16,
Bihari = 17,
Bislama = 18,
Breton = 19,
Bulgarian = 20,
Burmese = 21,
Belarusian = 22,
Khmer = 23,
Catalan = 24,
Chinese = 25,
Corsican = 26,
Croatian = 27,
Czech = 28,
Danish = 29,
Dutch = 30,
English = 31,
Esperanto = 32,
Estonian = 33,
Faroese = 34,
Fijian = 35,
Finnish = 36,
French = 37,
WesternFrisian = 38,
Gaelic = 39,
Galician = 40,
Georgian = 41,
German = 42,
Greek = 43,
Greenlandic = 44,
Guarani = 45,
Gujarati = 46,
Hausa = 47,
Hebrew = 48,
Hindi = 49,
Hungarian = 50,
Icelandic = 51,
Indonesian = 52,
Interlingua = 53,
Interlingue = 54,
Inuktitut = 55,
Inupiak = 56,
Irish = 57,
Italian = 58,
Japanese = 59,
Javanese = 60,
Kannada = 61,
Kashmiri = 62,
Kazakh = 63,
Kinyarwanda = 64,
Kirghiz = 65,
Korean = 66,
Kurdish = 67,
Rundi = 68,
Lao = 69,
Latin = 70,
Latvian = 71,
Lingala = 72,
Lithuanian = 73,
Macedonian = 74,
Malagasy = 75,
Malay = 76,
Malayalam = 77,
Maltese = 78,
Maori = 79,
Marathi = 80,
Marshallese = 81,
Mongolian = 82,
NauruLanguage = 83,
Nepali = 84,
NorwegianBokmal = 85,
Occitan = 86,
Oriya = 87,
Pashto = 88,
Persian = 89,
Polish = 90,
Portuguese = 91,
Punjabi = 92,
Quechua = 93,
Romansh = 94,
Romanian = 95,
Russian = 96,
Samoan = 97,
Sango = 98,
Sanskrit = 99,
Serbian = 100,
Ossetic = 101,
SouthernSotho = 102,
Tswana = 103,
Shona = 104,
Sindhi = 105,
Sinhala = 106,
Swati = 107,
Slovak = 108,
Slovenian = 109,
Somali = 110,
Spanish = 111,
Sundanese = 112,
Swahili = 113,
Swedish = 114,
Sardinian = 115,
Tajik = 116,
Tamil = 117,
Tatar = 118,
Telugu = 119,
Thai = 120,
Tibetan = 121,
Tigrinya = 122,
Tongan = 123,
Tsonga = 124,
Turkish = 125,
Turkmen = 126,
Tahitian = 127,
Uighur = 128,
Ukrainian = 129,
Urdu = 130,
Uzbek = 131,
Vietnamese = 132,
Volapuk = 133,
Welsh = 134,
Wolof = 135,
Xhosa = 136,
Yiddish = 137,
Yoruba = 138,
Zhuang = 139,
Zulu = 140,
NorwegianNynorsk = 141,
Bosnian = 142,
Divehi = 143,
Manx = 144,
Cornish = 145,
Akan = 146,
Konkani = 147,
Ga = 148,
Igbo = 149,
Kamba = 150,
Syriac = 151,
Blin = 152,
Geez = 153,
Koro = 154,
Sidamo = 155,
Atsam = 156,
Tigre = 157,
Jju = 158,
Friulian = 159,
Venda = 160,
Ewe = 161,
Walamo = 162,
Hawaiian = 163,
Tyap = 164,
Nyanja = 165,
Filipino = 166,
SwissGerman = 167,
SichuanYi = 168,
Kpelle = 169,
LowGerman = 170,
SouthNdebele = 171,
NorthernSotho = 172,
NorthernSami = 173,
Taroko = 174,
Gusii = 175,
Taita = 176,
Fulah = 177,
Kikuyu = 178,
Samburu = 179,
Sena = 180,
NorthNdebele = 181,
Rombo = 182,
Tachelhit = 183,
Kabyle = 184,
Nyankole = 185,
Bena = 186,
Vunjo = 187,
Bambara = 188,
Embu = 189,
Cherokee = 190,
Morisyen = 191,
Makonde = 192,
Langi = 193,
Ganda = 194,
Bemba = 195,
Kabuverdianu = 196,
Meru = 197,
Kalenjin = 198,
Nama = 199,
Machame = 200,
Colognian = 201,
Masai = 202,
Soga = 203,
Luyia = 204,
Asu = 205,
Teso = 206,
Saho = 207,
KoyraChiini = 208,
Rwa = 209,
Luo = 210,
Chiga = 211,
CentralMoroccoTamazight = 212,
KoyraboroSenni = 213,
Shambala = 214,
Bodo = 215,
Avaric = 216,
Chamorro = 217,
Chechen = 218,
Church = 219,
Chuvash = 220,
Cree = 221,
Haitian = 222,
Herero = 223,
HiriMotu = 224,
Kanuri = 225,
Komi = 226,
Kongo = 227,
Kwanyama = 228,
Limburgish = 229,
LubaKatanga = 230,
Luxembourgish = 231,
Navaho = 232,
Ndonga = 233,
Ojibwa = 234,
Pali = 235,
Walloon = 236,
Aghem = 237,
Basaa = 238,
Zarma = 239,
Duala = 240,
JolaFonyi = 241,
Ewondo = 242,
Bafia = 243,
MakhuwaMeetto = 244,
Mundang = 245,
Kwasio = 246,
Nuer = 247,
Sakha = 248,
Sangu = 249,
CongoSwahili = 250,
Tasawaq = 251,
Vai = 252,
Walser = 253,
Yangben = 254,
Avestan = 255,
Asturian = 256,
Ngomba = 257,
Kako = 258,
Meta = 259,
Ngiemboon = 260,
Aragonese = 261,
Akkadian = 262,
AncientEgyptian = 263,
AncientGreek = 264,
Aramaic = 265,
Balinese = 266,
Bamun = 267,
BatakToba = 268,
Buginese = 269,
Buhid = 270,
Carian = 271,
Chakma = 272,
ClassicalMandaic = 273,
Coptic = 274,
Dogri = 275,
EasternCham = 276,
EasternKayah = 277,
Etruscan = 278,
Gothic = 279,
Hanunoo = 280,
Ingush = 281,
LargeFloweryMiao = 282,
Lepcha = 283,
Limbu = 284,
Lisu = 285,
Lu = 286,
Lycian = 287,
Lydian = 288,
Mandingo = 289,
Manipuri = 290,
Meroitic = 291,
NorthernThai = 292,
OldIrish = 293,
OldNorse = 294,
OldPersian = 295,
OldTurkish = 296,
Pahlavi = 297,
Parthian = 298,
Phoenician = 299,
PrakritLanguage = 300,
Rejang = 301,
Sabaean = 302,
Samaritan = 303,
Santali = 304,
Saurashtra = 305,
Sora = 306,
Sylheti = 307,
Tagbanwa = 308,
TaiDam = 309,
TaiNua = 310,
Ugaritic = 311,
Norwegian = NorwegianBokmal,
Moldavian = Romanian,
SerboCroatian = Serbian,
Tagalog = Filipino,
Twi = Akan,
Afan = Oromo,
Byelorussian = Belarusian,
Bhutani = Dzongkha,
Cambodian = Khmer,
Kurundi = Rundi,
RhaetoRomance = Romansh,
Chewa = Nyanja,
Frisian = WesternFrisian,
Uigur = Uighur,
LastLanguage = Ugaritic
};

enum Script {
AnyScript = 0,
ArabicScript = 1,
CyrillicScript = 2,
DeseretScript = 3,
GurmukhiScript = 4,
SimplifiedHanScript = 5,
TraditionalHanScript = 6,
LatinScript = 7,
MongolianScript = 8,
TifinaghScript = 9,
ArmenianScript = 10,
BengaliScript = 11,
CherokeeScript = 12,
DevanagariScript = 13,
EthiopicScript = 14,
GeorgianScript = 15,
GreekScript = 16,
GujaratiScript = 17,
HebrewScript = 18,
JapaneseScript = 19,
KhmerScript = 20,
KannadaScript = 21,
KoreanScript = 22,
LaoScript = 23,
MalayalamScript = 24,
MyanmarScript = 25,
OriyaScript = 26,
TamilScript = 27,
TeluguScript = 28,
ThaanaScript = 29,
ThaiScript = 30,
TibetanScript = 31,
SinhalaScript = 32,
SyriacScript = 33,
YiScript = 34,
VaiScript = 35,
AvestanScript = 36,
BalineseScript = 37,
BamumScript = 38,
BatakScript = 39,
BopomofoScript = 40,
BrahmiScript = 41,
BugineseScript = 42,
BuhidScript = 43,
CanadianAboriginalScript = 44,
CarianScript = 45,
ChakmaScript = 46,
ChamScript = 47,
CopticScript = 48,
CypriotScript = 49,
EgyptianHieroglyphsScript = 50,
FraserScript = 51,
GlagoliticScript = 52,
GothicScript = 53,
HanScript = 54,
HangulScript = 55,
HanunooScript = 56,
ImperialAramaicScript = 57,
InscriptionalPahlaviScript = 58,
InscriptionalParthianScript = 59,
JavaneseScript = 60,
KaithiScript = 61,
KatakanaScript = 62,
KayahLiScript = 63,
KharoshthiScript = 64,
LannaScript = 65,
LepchaScript = 66,
LimbuScript = 67,
LinearBScript = 68,
LycianScript = 69,
LydianScript = 70,
MandaeanScript = 71,
MeiteiMayekScript = 72,
MeroiticScript = 73,
MeroiticCursiveScript = 74,
NkoScript = 75,
NewTaiLueScript = 76,
OghamScript = 77,
OlChikiScript = 78,
OldItalicScript = 79,
OldPersianScript = 80,
OldSouthArabianScript = 81,
OrkhonScript = 82,
OsmanyaScript = 83,
PhagsPaScript = 84,
PhoenicianScript = 85,
PollardPhoneticScript = 86,
RejangScript = 87,
RunicScript = 88,
SamaritanScript = 89,
SaurashtraScript = 90,
SharadaScript = 91,
ShavianScript = 92,
SoraSompengScript = 93,
CuneiformScript = 94,
SundaneseScript = 95,
SylotiNagriScript = 96,
TagalogScript = 97,
TagbanwaScript = 98,
TaiLeScript = 99,
TaiVietScript = 100,
TakriScript = 101,
UgariticScript = 102,
BrailleScript = 103,
HiraganaScript = 104,
SimplifiedChineseScript = SimplifiedHanScript,
TraditionalChineseScript = TraditionalHanScript,
LastScript = HiraganaScript
};
enum Country {
AnyCountry = 0,
Afghanistan = 1,
Albania = 2,
Algeria = 3,
AmericanSamoa = 4,
Andorra = 5,
Angola = 6,
Anguilla = 7,
Antarctica = 8,
AntiguaAndBarbuda = 9,
Argentina = 10,
Armenia = 11,
Aruba = 12,
Australia = 13,
Austria = 14,
Azerbaijan = 15,
Bahamas = 16,
Bahrain = 17,
Bangladesh = 18,
Barbados = 19,
Belarus = 20,
Belgium = 21,
Belize = 22,
Benin = 23,
Bermuda = 24,
Bhutan = 25,
Bolivia = 26,
BosniaAndHerzegowina = 27,
Botswana = 28,
BouvetIsland = 29,
Brazil = 30,
BritishIndianOceanTerritory = 31,
Brunei = 32,
Bulgaria = 33,
BurkinaFaso = 34,
Burundi = 35,
Cambodia = 36,
Cameroon = 37,
Canada = 38,
CapeVerde = 39,
CaymanIslands = 40,
CentralAfricanRepublic = 41,
Chad = 42,
Chile = 43,
China = 44,
ChristmasIsland = 45,
CocosIslands = 46,
Colombia = 47,
Comoros = 48,
CongoKinshasa = 49,
CongoBrazzaville = 50,
CookIslands = 51,
CostaRica = 52,
IvoryCoast = 53,
Croatia = 54,
Cuba = 55,
Cyprus = 56,
CzechRepublic = 57,
Denmark = 58,
Djibouti = 59,
Dominica = 60,
DominicanRepublic = 61,
EastTimor = 62,
Ecuador = 63,
Egypt = 64,
ElSalvador = 65,
EquatorialGuinea = 66,
Eritrea = 67,
Estonia = 68,
Ethiopia = 69,
FalklandIslands = 70,
FaroeIslands = 71,
Fiji = 72,
Finland = 73,
France = 74,
Guernsey = 75,
FrenchGuiana = 76,
FrenchPolynesia = 77,
FrenchSouthernTerritories = 78,
Gabon = 79,
Gambia = 80,
Georgia = 81,
Germany = 82,
Ghana = 83,
Gibraltar = 84,
Greece = 85,
Greenland = 86,
Grenada = 87,
Guadeloupe = 88,
Guam = 89,
Guatemala = 90,
Guinea = 91,
GuineaBissau = 92,
Guyana = 93,
Haiti = 94,
HeardAndMcDonaldIslands = 95,
Honduras = 96,
HongKong = 97,
Hungary = 98,
Iceland = 99,
India = 100,
Indonesia = 101,
Iran = 102,
Iraq = 103,
Ireland = 104,
Israel = 105,
Italy = 106,
Jamaica = 107,
Japan = 108,
Jordan = 109,
Kazakhstan = 110,
Kenya = 111,
Kiribati = 112,
NorthKorea = 113,
SouthKorea = 114,
Kuwait = 115,
Kyrgyzstan = 116,
Laos = 117,
Latvia = 118,
Lebanon = 119,
Lesotho = 120,
Liberia = 121,
Libya = 122,
Liechtenstein = 123,
Lithuania = 124,
Luxembourg = 125,
Macau = 126,
Macedonia = 127,
Madagascar = 128,
Malawi = 129,
Malaysia = 130,
Maldives = 131,
Mali = 132,
Malta = 133,
MarshallIslands = 134,
Martinique = 135,
Mauritania = 136,
Mauritius = 137,
Mayotte = 138,
Mexico = 139,
Micronesia = 140,
Moldova = 141,
Monaco = 142,
Mongolia = 143,
Montserrat = 144,
Morocco = 145,
Mozambique = 146,
Myanmar = 147,
Namibia = 148,
NauruCountry = 149,
Nepal = 150,
Netherlands = 151,
CuraSao = 152,
NewCaledonia = 153,
NewZealand = 154,
Nicaragua = 155,
Niger = 156,
Nigeria = 157,
Niue = 158,
NorfolkIsland = 159,
NorthernMarianaIslands = 160,
Norway = 161,
Oman = 162,
Pakistan = 163,
Palau = 164,
PalestinianTerritories = 165,
Panama = 166,
PapuaNewGuinea = 167,
Paraguay = 168,
Peru = 169,
Philippines = 170,
Pitcairn = 171,
Poland = 172,
Portugal = 173,
PuertoRico = 174,
Qatar = 175,
Reunion = 176,
Romania = 177,
Russia = 178,
Rwanda = 179,
SaintKittsAndNevis = 180,
SaintLucia = 181,
SaintVincentAndTheGrenadines = 182,
Samoa = 183,
SanMarino = 184,
SaoTomeAndPrincipe = 185,
SaudiArabia = 186,
Senegal = 187,
Seychelles = 188,
SierraLeone = 189,
Singapore = 190,
Slovakia = 191,
Slovenia = 192,
SolomonIslands = 193,
Somalia = 194,
SouthAfrica = 195,
SouthGeorgiaAndTheSouthSandwichIslands = 196,
Spain = 197,
SriLanka = 198,
SaintHelena = 199,
SaintPierreAndMiquelon = 200,
Sudan = 201,
Suriname = 202,
SvalbardAndJanMayenIslands = 203,
Swaziland = 204,
Sweden = 205,
Switzerland = 206,
Syria = 207,
Taiwan = 208,
Tajikistan = 209,
Tanzania = 210,
Thailand = 211,
Togo = 212,
Tokelau = 213,
Tonga = 214,
TrinidadAndTobago = 215,
Tunisia = 216,
Turkey = 217,
Turkmenistan = 218,
TurksAndCaicosIslands = 219,
Tuvalu = 220,
Uganda = 221,
Ukraine = 222,
UnitedArabEmirates = 223,
UnitedKingdom = 224,
UnitedStates = 225,
UnitedStatesMinorOutlyingIslands = 226,
Uruguay = 227,
Uzbekistan = 228,
Vanuatu = 229,
VaticanCityState = 230,
Venezuela = 231,
Vietnam = 232,
BritishVirginIslands = 233,
UnitedStatesVirginIslands = 234,
WallisAndFutunaIslands = 235,
WesternSahara = 236,
Yemen = 237,
CanaryIslands = 238,
Zambia = 239,
Zimbabwe = 240,
ClippertonIsland = 241,
Montenegro = 242,
Serbia = 243,
SaintBarthelemy = 244,
SaintMartin = 245,
LatinAmericaAndTheCaribbean = 246,
AscensionIsland = 247,
AlandIslands = 248,
DiegoGarcia = 249,
CeutaAndMelilla = 250,
IsleOfMan = 251,
Jersey = 252,
TristanDaCunha = 253,
SouthSudan = 254,
Bonaire = 255,
SintMaarten = 256,
DemocraticRepublicOfCongo = CongoKinshasa,
PeoplesRepublicOfCongo = CongoBrazzaville,
DemocraticRepublicOfKorea = NorthKorea,
RepublicOfKorea = SouthKorea,
RussianFederation = Russia,
SyrianArabRepublic = Syria,
LastCountry = SintMaarten
};


enum MeasurementSystem {
MetricSystem,
ImperialUSSystem,
ImperialUKSystem,
ImperialSystem = ImperialUSSystem 
};

enum FormatType { LongFormat, ShortFormat, NarrowFormat };
enum NumberOption {
OmitGroupSeparator = 0x01,
RejectGroupSeparator = 0x02
};
typedef QFlags<NumberOption> NumberOptions;

enum CurrencySymbolFormat {
CurrencyIsoCode,
CurrencySymbol,
CurrencyDisplayName
};

QLocale();
QLocale(const QString &name);
QLocale(Language language, Country country = AnyCountry);
QLocale(Language language, Script script, Country country);
QLocale(const QLocale &other);
~QLocale();

QLocale &operator=(const QLocale &other);

Language language() const;
Script script() const;
Country country() const;
QString name() const;

QString bcp47Name() const;
QString nativeLanguageName() const;
QString nativeCountryName() const;

short toShort(const QString &s, bool *ok = 0) const;
ushort toUShort(const QString &s, bool *ok = 0) const;
int toInt(const QString &s, bool *ok = 0) const;
uint toUInt(const QString &s, bool *ok = 0) const;
qlonglong toLongLong(const QString &s, bool *ok = 0) const;
qulonglong toULongLong(const QString &s, bool *ok = 0) const;
float toFloat(const QString &s, bool *ok = 0) const;
double toDouble(const QString &s, bool *ok = 0) const;

short toShort(const QStringRef &s, bool *ok = 0) const;
ushort toUShort(const QStringRef &s, bool *ok = 0) const;
int toInt(const QStringRef &s, bool *ok = 0) const;
uint toUInt(const QStringRef &s, bool *ok = 0) const;
qlonglong toLongLong(const QStringRef &s, bool *ok = 0) const;
qulonglong toULongLong(const QStringRef &s, bool *ok = 0) const;
float toFloat(const QStringRef &s, bool *ok = 0) const;
double toDouble(const QStringRef &s, bool *ok = 0) const;

QString toString(qlonglong i) const;
QString toString(qulonglong i) const;
inline QString toString(short i) const;
inline QString toString(ushort i) const;
inline QString toString(int i) const;
inline QString toString(uint i) const;
QString toString(double i, char f = 'g', int prec = 6) const;
inline QString toString(float i, char f = 'g', int prec = 6) const;
QString toString(const QDate &date, const QString &formatStr) const;
QString toString(const QDate &date, FormatType format = LongFormat) const;
QString toString(const QTime &time, const QString &formatStr) const;
QString toString(const QTime &time, FormatType format = LongFormat) const;
QString toString(const QDateTime &dateTime, FormatType format = LongFormat) const;
QString toString(const QDateTime &dateTime, const QString &format) const;

QString dateFormat(FormatType format = LongFormat) const;
QString timeFormat(FormatType format = LongFormat) const;
QString dateTimeFormat(FormatType format = LongFormat) const;

# 863 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"
QDate toDate(const QString &string, FormatType = LongFormat) const;
QTime toTime(const QString &string, FormatType = LongFormat) const;
QDateTime toDateTime(const QString &string, FormatType format = LongFormat) const;
QDate toDate(const QString &string, const QString &format) const;
QTime toTime(const QString &string, const QString &format) const;
QDateTime toDateTime(const QString &string, const QString &format) const;


# 871 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"


QChar decimalPoint() const;
QChar groupSeparator() const;
QChar percent() const;
QChar zeroDigit() const;
QChar negativeSign() const;
QChar positiveSign() const;
QChar exponential() const;

QString monthName(int, FormatType format = LongFormat) const;
QString standaloneMonthName(int, FormatType format = LongFormat) const;
QString dayName(int, FormatType format = LongFormat) const;
QString standaloneDayName(int, FormatType format = LongFormat) const;

Qt::DayOfWeek firstDayOfWeek() const;
QList<Qt::DayOfWeek> weekdays() const;

QString amText() const;
QString pmText() const;

MeasurementSystem measurementSystem() const;

Qt::LayoutDirection textDirection() const;

QString toUpper(const QString &str) const;
QString toLower(const QString &str) const;

QString currencySymbol(CurrencySymbolFormat = CurrencySymbol) const;
QString toCurrencyString(qlonglong, const QString &symbol = QString()) const;
QString toCurrencyString(qulonglong, const QString &symbol = QString()) const;
inline QString toCurrencyString(short, const QString &symbol = QString()) const;
inline QString toCurrencyString(ushort, const QString &symbol = QString()) const;
inline QString toCurrencyString(int, const QString &symbol = QString()) const;
inline QString toCurrencyString(uint, const QString &symbol = QString()) const;
QString toCurrencyString(double, const QString &symbol = QString()) const;
inline QString toCurrencyString(float, const QString &symbol = QString()) const;

QStringList uiLanguages() const;

bool operator==(const QLocale &other) const;
bool operator!=(const QLocale &other) const;

static QString languageToString(Language language);
static QString countryToString(Country country);
static QString scriptToString(Script script);
static void setDefault(const QLocale &locale);

static QLocale c() { return QLocale(C); }
static QLocale system();

static QList<QLocale> matchingLocales(QLocale::Language language, QLocale::Script script, QLocale::Country country);
static QList<Country> countriesForLanguage(Language lang);

void setNumberOptions(NumberOptions options);
NumberOptions numberOptions() const;

enum QuotationStyle { StandardQuotation, AlternateQuotation };
QString quoteString(const QString &str, QuotationStyle style = StandardQuotation) const;
QString quoteString(const QStringRef &str, QuotationStyle style = StandardQuotation) const;

QString createSeparatedList(const QStringList &strl) const;

private:
QLocale(QLocalePrivate &dd);
friend class QLocalePrivate;
QSharedDataPointer<QLocalePrivate> d;
};
template<> class QTypeInfo<QLocale > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLocale)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QLocale) }; static inline const char *name() { return "QLocale"; } };
 inline QFlags<QLocale::NumberOptions::enum_type> operator|(QLocale::NumberOptions::enum_type f1, QLocale::NumberOptions::enum_type f2) { return QFlags<QLocale::NumberOptions::enum_type>(f1) | f2; }  inline QFlags<QLocale::NumberOptions::enum_type> operator|(QLocale::NumberOptions::enum_type f1, QFlags<QLocale::NumberOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QLocale::NumberOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

inline QString QLocale::toString(short i) const
{ return toString(qlonglong(i)); }
inline QString QLocale::toString(ushort i) const
{ return toString(qulonglong(i)); }
inline QString QLocale::toString(int i) const
{ return toString(qlonglong(i)); }
inline QString QLocale::toString(uint i) const
{ return toString(qulonglong(i)); }
inline QString QLocale::toString(float i, char f, int prec) const
{ return toString(double(i), f, prec); }

inline QString QLocale::toCurrencyString(short i, const QString &symbol) const
{ return toCurrencyString(qlonglong(i), symbol); }
inline QString QLocale::toCurrencyString(ushort i, const QString &symbol) const
{ return toCurrencyString(qulonglong(i), symbol); }
inline QString QLocale::toCurrencyString(int i, const QString &symbol) const
{ return toCurrencyString(qlonglong(i), symbol); }
inline QString QLocale::toCurrencyString(uint i, const QString &symbol) const
{ return toCurrencyString(qulonglong(i), symbol); }
inline QString QLocale::toCurrencyString(float i, const QString &symbol) const
{ return toCurrencyString(double(i), symbol); }


# 965 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"
 QDataStream &operator<<(QDataStream &, const QLocale &);
 QDataStream &operator>>(QDataStream &, QLocale &);



# 970 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"
 QDebug operator<<(QDebug, const QLocale &);


# 973 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"



# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"








# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"



class QTextCodec;
class QTextDecoder;

class QTextStreamPrivate;
class  QTextStream 
{
inline QTextStreamPrivate* d_func() { return reinterpret_cast<QTextStreamPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextStreamPrivate* d_func() const { return reinterpret_cast<const QTextStreamPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextStreamPrivate;

public:
enum RealNumberNotation {
SmartNotation,
FixedNotation,
ScientificNotation
};
enum FieldAlignment {
AlignLeft,
AlignRight,
AlignCenter,
AlignAccountingStyle
};
enum Status {
Ok,
ReadPastEnd,
ReadCorruptData,
WriteFailed
};
enum NumberFlag {
ShowBase = 0x1,
ForcePoint = 0x2,
ForceSign = 0x4,
UppercaseBase = 0x8,
UppercaseDigits = 0x10
};
typedef QFlags<NumberFlag> NumberFlags;

QTextStream();
explicit QTextStream(QIODevice *device);
explicit QTextStream(FILE *fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
explicit QTextStream(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
explicit QTextStream(QByteArray *array, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
explicit QTextStream(const QByteArray &array, QIODevice::OpenMode openMode = QIODevice::ReadOnly);
virtual ~QTextStream();


# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"
void setCodec(QTextCodec *codec);
void setCodec(const char *codecName);
QTextCodec *codec() const;
void setAutoDetectUnicode(bool enabled);
bool autoDetectUnicode() const;
void setGenerateByteOrderMark(bool generate);
bool generateByteOrderMark() const;


# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"
void setLocale(const QLocale &locale);
QLocale locale() const;

void setDevice(QIODevice *device);
QIODevice *device() const;

void setString(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
QString *string() const;

Status status() const;
void setStatus(Status status);
void resetStatus();

bool atEnd() const;
void reset();
void flush();
bool seek(qint64 pos);
qint64 pos() const;

void skipWhiteSpace();

QString readLine(qint64 maxlen = 0);
QString readAll();
QString read(qint64 maxlen);

void setFieldAlignment(FieldAlignment alignment);
FieldAlignment fieldAlignment() const;

void setPadChar(QChar ch);
QChar padChar() const;

void setFieldWidth(int width);
int fieldWidth() const;

void setNumberFlags(NumberFlags flags);
NumberFlags numberFlags() const;

void setIntegerBase(int base);
int integerBase() const;

void setRealNumberNotation(RealNumberNotation notation);
RealNumberNotation realNumberNotation() const;

void setRealNumberPrecision(int precision);
int realNumberPrecision() const;

QTextStream &operator>>(QChar &ch);
QTextStream &operator>>(char &ch);
QTextStream &operator>>(signed short &i);
QTextStream &operator>>(unsigned short &i);
QTextStream &operator>>(signed int &i);
QTextStream &operator>>(unsigned int &i);
QTextStream &operator>>(signed long &i);
QTextStream &operator>>(unsigned long &i);
QTextStream &operator>>(qlonglong &i);
QTextStream &operator>>(qulonglong &i);
QTextStream &operator>>(float &f);
QTextStream &operator>>(double &f);
QTextStream &operator>>(QString &s);
QTextStream &operator>>(QByteArray &array);
QTextStream &operator>>(char *c);

QTextStream &operator<<(QChar ch);
QTextStream &operator<<(char ch);
QTextStream &operator<<(signed short i);
QTextStream &operator<<(unsigned short i);
QTextStream &operator<<(signed int i);
QTextStream &operator<<(unsigned int i);
QTextStream &operator<<(signed long i);
QTextStream &operator<<(unsigned long i);
QTextStream &operator<<(qlonglong i);
QTextStream &operator<<(qulonglong i);
QTextStream &operator<<(float f);
QTextStream &operator<<(double f);
QTextStream &operator<<(const QString &s);
QTextStream &operator<<(QLatin1String s);
QTextStream &operator<<(const QByteArray &array);
QTextStream &operator<<(const char *c);
QTextStream &operator<<(const void *ptr);

private:
QTextStream(const QTextStream &) ; QTextStream &operator=(const QTextStream &) ;
friend class QDebugStateSaverPrivate;

QScopedPointer<QTextStreamPrivate> d_ptr;
};

 inline QFlags<QTextStream::NumberFlags::enum_type> operator|(QTextStream::NumberFlags::enum_type f1, QTextStream::NumberFlags::enum_type f2) { return QFlags<QTextStream::NumberFlags::enum_type>(f1) | f2; }  inline QFlags<QTextStream::NumberFlags::enum_type> operator|(QTextStream::NumberFlags::enum_type f1, QFlags<QTextStream::NumberFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextStream::NumberFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }





typedef QTextStream & (*QTextStreamFunction)(QTextStream &);
typedef void (QTextStream::*QTSMFI)(int); 
typedef void (QTextStream::*QTSMFC)(QChar); 


class  QTextStreamManipulator
{
public:
QTextStreamManipulator(QTSMFI m, int a) { mf = m; mc = 0; arg = a; }
QTextStreamManipulator(QTSMFC m, QChar c) { mf = 0; mc = m; ch = c; arg = -1; }
void exec(QTextStream &s) { if (mf) { (s.*mf)(arg); } else { (s.*mc)(ch); } }

private:
QTSMFI mf; 
QTSMFC mc; 
int arg; 
QChar ch;
};

inline QTextStream &operator>>(QTextStream &s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &operator<<(QTextStream &s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &operator<<(QTextStream &s, QTextStreamManipulator m)
{ m.exec(s); return s; }

 QTextStream &bin(QTextStream &s);
 QTextStream &oct(QTextStream &s);
 QTextStream &dec(QTextStream &s);
 QTextStream &hex(QTextStream &s);

 QTextStream &showbase(QTextStream &s);
 QTextStream &forcesign(QTextStream &s);
 QTextStream &forcepoint(QTextStream &s);
 QTextStream &noshowbase(QTextStream &s);
 QTextStream &noforcesign(QTextStream &s);
 QTextStream &noforcepoint(QTextStream &s);

 QTextStream &uppercasebase(QTextStream &s);
 QTextStream &uppercasedigits(QTextStream &s);
 QTextStream &lowercasebase(QTextStream &s);
 QTextStream &lowercasedigits(QTextStream &s);

 QTextStream &fixed(QTextStream &s);
 QTextStream &scientific(QTextStream &s);

 QTextStream &left(QTextStream &s);
 QTextStream &right(QTextStream &s);
 QTextStream &center(QTextStream &s);

 QTextStream &endl(QTextStream &s);
 QTextStream &flush(QTextStream &s);
 QTextStream &reset(QTextStream &s);

 QTextStream &bom(QTextStream &s);

 QTextStream &ws(QTextStream &s);

inline QTextStreamManipulator qSetFieldWidth(int width)
{
QTSMFI func = &QTextStream::setFieldWidth;
return QTextStreamManipulator(func,width);
}

inline QTextStreamManipulator qSetPadChar(QChar ch)
{
QTSMFC func = &QTextStream::setPadChar;
return QTextStreamManipulator(func, ch);
}

inline QTextStreamManipulator qSetRealNumberPrecision(int precision)
{
QTSMFI func = &QTextStream::setRealNumberPrecision;
return QTextStreamManipulator(func, precision);
}




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"





# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"



template <class T>
class QSet
{
typedef QHash<T, QHashDummyValue> Hash;

public:
inline QSet() {}








# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"
inline QSet(const QSet<T> &other) : q_hash(other.q_hash) {}

inline QSet<T> &operator=(const QSet<T> &other)
{ q_hash = other.q_hash; return *this; }




# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"
inline void swap(QSet<T> &other) { q_hash.swap(other.q_hash); }

inline bool operator==(const QSet<T> &other) const
{ return q_hash == other.q_hash; }
inline bool operator!=(const QSet<T> &other) const
{ return q_hash != other.q_hash; }

inline int size() const { return q_hash.size(); }

inline bool isEmpty() const { return q_hash.isEmpty(); }

inline int capacity() const { return q_hash.capacity(); }
inline void reserve(int size);
inline void squeeze() { q_hash.squeeze(); }

inline void detach() { q_hash.detach(); }
inline bool isDetached() const { return q_hash.isDetached(); }
inline void setSharable(bool sharable) { q_hash.setSharable(sharable); }

inline void clear() { q_hash.clear(); }

inline bool remove(const T &value) { return q_hash.remove(value) != 0; }

inline bool contains(const T &value) const { return q_hash.contains(value); }

bool contains(const QSet<T> &set) const;

class const_iterator;

class iterator
{
typedef QHash<T, QHashDummyValue> Hash;
typename Hash::iterator i;
friend class const_iterator;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline iterator() {}
inline iterator(typename Hash::iterator o) : i(o) {}
inline iterator(const iterator &o) : i(o.i) {}
inline iterator &operator=(const iterator &o) { i = o.i; return *this; }
inline const T &operator*() const { return i.key(); }
inline const T *operator->() const { return &i.key(); }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }
inline iterator &operator++() { ++i; return *this; }
inline iterator operator++(int) { iterator r = *this; ++i; return r; }
inline iterator &operator--() { --i; return *this; }
inline iterator operator--(int) { iterator r = *this; --i; return r; }
inline iterator operator+(int j) const { return i + j; }
inline iterator operator-(int j) const { return i - j; }
inline iterator &operator+=(int j) { i += j; return *this; }
inline iterator &operator-=(int j) { i -= j; return *this; }
};

class const_iterator
{
typedef QHash<T, QHashDummyValue> Hash;
typename Hash::const_iterator i;
friend class iterator;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() {}
inline const_iterator(typename Hash::const_iterator o) : i(o) {}
inline const_iterator(const const_iterator &o) : i(o.i) {}
inline const_iterator(const iterator &o)
: i(o.i) {}
inline const_iterator &operator=(const const_iterator &o) { i = o.i; return *this; }
inline const T &operator*() const { return i.key(); }
inline const T *operator->() const { return &i.key(); }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline const_iterator &operator++() { ++i; return *this; }
inline const_iterator operator++(int) { const_iterator r = *this; ++i; return r; }
inline const_iterator &operator--() { --i; return *this; }
inline const_iterator operator--(int) { const_iterator r = *this; --i; return r; }
inline const_iterator operator+(int j) const { return i + j; }
inline const_iterator operator-(int j) const { return i - j; }
inline const_iterator &operator+=(int j) { i += j; return *this; }
inline const_iterator &operator-=(int j) { i -= j; return *this; }
};


inline iterator begin() { return q_hash.begin(); }
inline const_iterator begin() const { return q_hash.begin(); }
inline const_iterator cbegin() const { return q_hash.begin(); }
inline const_iterator constBegin() const { return q_hash.constBegin(); }
inline iterator end() { return q_hash.end(); }
inline const_iterator end() const { return q_hash.end(); }
inline const_iterator cend() const { return q_hash.end(); }
inline const_iterator constEnd() const { return q_hash.constEnd(); }
iterator erase(iterator i)
{ return q_hash.erase(reinterpret_cast<typename Hash::iterator &>(i)); }


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return q_hash.count(); }
inline iterator insert(const T &value)
{ return static_cast<typename Hash::iterator>(q_hash.insert(value, QHashDummyValue())); }
iterator find(const T &value) { return q_hash.find(value); }
const_iterator find(const T &value) const { return q_hash.find(value); }
inline const_iterator constFind(const T &value) const { return find(value); }
QSet<T> &unite(const QSet<T> &other);
QSet<T> &intersect(const QSet<T> &other);
QSet<T> &subtract(const QSet<T> &other);


typedef T key_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef qptrdiff difference_type;
typedef int size_type;

inline bool empty() const { return isEmpty(); }

inline QSet<T> &operator<<(const T &value) { insert(value); return *this; }
inline QSet<T> &operator|=(const QSet<T> &other) { unite(other); return *this; }
inline QSet<T> &operator|=(const T &value) { insert(value); return *this; }
inline QSet<T> &operator&=(const QSet<T> &other) { intersect(other); return *this; }
inline QSet<T> &operator&=(const T &value)
{ QSet<T> result; if (contains(value)) result.insert(value); return (*this = result); }
inline QSet<T> &operator+=(const QSet<T> &other) { unite(other); return *this; }
inline QSet<T> &operator+=(const T &value) { insert(value); return *this; }
inline QSet<T> &operator-=(const QSet<T> &other) { subtract(other); return *this; }
inline QSet<T> &operator-=(const T &value) { remove(value); return *this; }
inline QSet<T> operator|(const QSet<T> &other) const
{ QSet<T> result = *this; result |= other; return result; }
inline QSet<T> operator&(const QSet<T> &other) const
{ QSet<T> result = *this; result &= other; return result; }
inline QSet<T> operator+(const QSet<T> &other) const
{ QSet<T> result = *this; result += other; return result; }
inline QSet<T> operator-(const QSet<T> &other) const
{ QSet<T> result = *this; result -= other; return result; }

QList<T> toList() const;
inline QList<T> values() const { return toList(); }

static QSet<T> fromList(const QList<T> &list);

private:
Hash q_hash;
};

template <class T>
inline void QSet<T>::reserve(int asize) { q_hash.reserve(asize); }

template <class T>
inline QSet<T> &QSet<T>::unite(const QSet<T> &other)
{
QSet<T> copy(other);
typename QSet<T>::const_iterator i = copy.constEnd();
while (i != copy.constBegin()) {
--i;
insert(*i);
}
return *this;
}

template <class T>
inline QSet<T> &QSet<T>::intersect(const QSet<T> &other)
{
QSet<T> copy1(*this);
QSet<T> copy2(other);
typename QSet<T>::const_iterator i = copy1.constEnd();
while (i != copy1.constBegin()) {
--i;
if (!copy2.contains(*i))
remove(*i);
}
return *this;
}

template <class T>
inline QSet<T> &QSet<T>::subtract(const QSet<T> &other)
{
QSet<T> copy1(*this);
QSet<T> copy2(other);
typename QSet<T>::const_iterator i = copy1.constEnd();
while (i != copy1.constBegin()) {
--i;
if (copy2.contains(*i))
remove(*i);
}
return *this;
}

template <class T>
inline bool QSet<T>::contains(const QSet<T> &other) const
{
typename QSet<T>::const_iterator i = other.constBegin();
while (i != other.constEnd()) {
if (!contains(*i))
return false;
++i;
}
return true;
}

template <typename T>
 QList<T> QSet<T>::toList() const
{
QList<T> result;
result.reserve(size());
typename QSet<T>::const_iterator i = constBegin();
while (i != constEnd()) {
result.append(*i);
++i;
}
return result;
}

template <typename T>
 QSet<T> QList<T>::toSet() const
{
QSet<T> result;
result.reserve(size());
for (int i = 0; i < size(); ++i)
result.insert(at(i));
return result;
}

template <typename T>
QSet<T> QSet<T>::fromList(const QList<T> &list)
{
return list.toSet();
}

template <typename T>
QList<T> QList<T>::fromSet(const QSet<T> &set)
{
return set.toList();
}

template <class T> class QSetIterator { typedef typename QSet<T>::const_iterator const_iterator; QSet<T> c; const_iterator i; public: inline QSetIterator(const QSet<T> &container) : c(container), i(c.constBegin()) {} inline QSetIterator &operator=(const QSet<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };

template <typename T>
class QMutableSetIterator
{
typedef typename QSet<T>::iterator iterator;
QSet<T> *c;
iterator i, n;
inline bool item_exists() const { return c->constEnd() != n; }

public:
inline QMutableSetIterator(QSet<T> &container)
: c(&container)
{ c->setSharable(false); i = c->begin(); n = c->end(); }
inline ~QMutableSetIterator()
{ c->setSharable(true); }
inline QMutableSetIterator &operator=(QSet<T> &container)
{ c->setSharable(true); c = &container; c->setSharable(false);
i = c->begin(); n = c->end(); return *this; }
inline void toFront() { i = c->begin(); n = c->end(); }
inline void toBack() { i = c->end(); n = i; }
inline bool hasNext() const { return c->constEnd() != i; }
inline const T &next() { n = i++; return *n; }
inline const T &peekNext() const { return *i; }
inline bool hasPrevious() const { return c->constBegin() != i; }
inline const T &previous() { n = --i; return *n; }
inline const T &peekPrevious() const { iterator p = i; return *--p; }
inline void remove()
{ if (c->constEnd() != n) { i = c->erase(n); n = c->end(); } }
inline const T &value() const { qt_noop(); return *n; }
inline bool findNext(const T &t)
{ while (c->constEnd() != (n = i)) if (*i++ == t) return true; return false; }
inline bool findPrevious(const T &t)
{ while (c->constBegin() != i) if (*(n = --i) == t) return true;
n = c->end(); return false; }
};




# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"
struct  QContiguousCacheData
{
QBasicAtomicInt ref;
int alloc;
int count;
int start;
int offset;
uint sharable : 1;
uint reserved : 31;






static QContiguousCacheData *allocateData(int size, int alignment);
static void freeData(QContiguousCacheData *data);




# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"
};

template <typename T>
struct QContiguousCacheTypedData: private QContiguousCacheData
{

T array[1];

static inline void freeData(QContiguousCacheTypedData *data) { QContiguousCacheData::freeData(data); }
};

template<typename T>
class QContiguousCache {
typedef QContiguousCacheTypedData<T> Data;
union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; };
public:

typedef T value_type;
typedef value_type* pointer;
typedef const value_type* const_pointer;
typedef value_type& reference;
typedef const value_type& const_reference;
typedef qptrdiff difference_type;
typedef int size_type;

explicit QContiguousCache(int capacity = 0);
QContiguousCache(const QContiguousCache<T> &v) : d(v.d) { d->ref.ref(); if (!d->sharable) detach_helper(); }

inline ~QContiguousCache() { if (!d) return; if (!d->ref.deref()) freeData(p); }

inline void detach() { if (d->ref.load() != 1) detach_helper(); }
inline bool isDetached() const { return d->ref.load() == 1; }
inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }

QContiguousCache<T> &operator=(const QContiguousCache<T> &other);




# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"
inline void swap(QContiguousCache<T> &other) { qSwap(d, other.d); }
bool operator==(const QContiguousCache<T> &other) const;
inline bool operator!=(const QContiguousCache<T> &other) const { return !(*this == other); }

inline int capacity() const {return d->alloc; }
inline int count() const { return d->count; }
inline int size() const { return d->count; }

inline bool isEmpty() const { return d->count == 0; }
inline bool isFull() const { return d->count == d->alloc; }
inline int available() const { return d->alloc - d->count; }

void clear();
void setCapacity(int size);

const T &at(int pos) const;
T &operator[](int i);
const T &operator[](int i) const;

void append(const T &value);
void prepend(const T &value);
void insert(int pos, const T &value);

inline bool containsIndex(int pos) const { return pos >= d->offset && pos - d->offset < d->count; }
inline int firstIndex() const { return d->offset; }
inline int lastIndex() const { return d->offset + d->count - 1; }

inline const T &first() const { qt_noop(); return p->array[d->start]; }
inline const T &last() const { qt_noop(); return p->array[(d->start + d->count -1) % d->alloc]; }
inline T &first() { qt_noop(); detach(); return p->array[d->start]; }
inline T &last() { qt_noop(); detach(); return p->array[(d->start + d->count -1) % d->alloc]; }

void removeFirst();
T takeFirst();
void removeLast();
T takeLast();

inline bool areIndexesValid() const
{ return d->offset >= 0 && d->offset < INT_MAX - d->count && (d->offset % d->alloc) == d->start; }

inline void normalizeIndexes() { d->offset = d->start; }




# 159 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"
private:
void detach_helper();

QContiguousCacheData *allocateData(int aalloc);
void freeData(Data *x);
int sizeOfTypedData() {


return reinterpret_cast<const char *>(&(reinterpret_cast<const Data *>(this))->array[1]) - reinterpret_cast<const char *>(this);
}
int alignOfTypedData() const
{
return qMax<int>(sizeof(void*), (size_t(::QtPrivate::AlignOf<Data>::Value)));
}
};

template <typename T>
void QContiguousCache<T>::detach_helper()
{
union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; } x;

x.d = allocateData(d->alloc);
x.d->ref.store(1);
x.d->count = d->count;
x.d->start = d->start;
x.d->offset = d->offset;
x.d->alloc = d->alloc;
x.d->sharable = true;
x.d->reserved = 0;

T *dest = x.p->array + x.d->start;
T *src = p->array + d->start;
int oldcount = x.d->count;
while (oldcount--) {
if (QTypeInfo<T>::isComplex) {
new (dest) T(*src);
} else {
*dest = *src;
}
dest++;
if (dest == x.p->array + x.d->alloc)
dest = x.p->array;
src++;
if (src == p->array + d->alloc)
src = p->array;
}

if (!d->ref.deref())
freeData(p);
d = x.d;
}

template <typename T>
void QContiguousCache<T>::setCapacity(int asize)
{
if (asize == d->alloc)
return;
detach();
union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; } x;
x.d = allocateData(asize);
x.d->alloc = asize;
x.d->count = qMin(d->count, asize);
x.d->offset = d->offset + d->count - x.d->count;
if(asize)
x.d->start = x.d->offset % x.d->alloc;
else
x.d->start = 0;

int oldcount = x.d->count;
if(oldcount)
{
T *dest = x.p->array + (x.d->start + x.d->count-1) % x.d->alloc;
T *src = p->array + (d->start + d->count-1) % d->alloc;
while (oldcount--) {
if (QTypeInfo<T>::isComplex) {
new (dest) T(*src);
} else {
*dest = *src;
}
if (dest == x.p->array)
dest = x.p->array + x.d->alloc;
dest--;
if (src == p->array)
src = p->array + d->alloc;
src--;
}
}

freeData(p);
d = x.d;
}

template <typename T>
void QContiguousCache<T>::clear()
{
if (d->ref.load() == 1) {
if (QTypeInfo<T>::isComplex) {
int oldcount = d->count;
T * i = p->array + d->start;
T * e = p->array + d->alloc;
while (oldcount--) {
i->~T();
i++;
if (i == e)
i = p->array;
}
}
d->count = d->start = d->offset = 0;
} else {
union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; } x;
x.d = allocateData(d->alloc);
x.d->ref.store(1);
x.d->alloc = d->alloc;
x.d->count = x.d->start = x.d->offset = 0;
x.d->sharable = true;
if (!d->ref.deref()) freeData(p);
d = x.d;
}
}

template <typename T>
inline QContiguousCacheData *QContiguousCache<T>::allocateData(int aalloc)
{
return QContiguousCacheData::allocateData(sizeOfTypedData() + (aalloc - 1) * sizeof(T), alignOfTypedData());
}

template <typename T>
QContiguousCache<T>::QContiguousCache(int cap)
{
d = allocateData(cap);
d->ref.store(1);
d->alloc = cap;
d->count = d->start = d->offset = 0;
d->sharable = true;
}

template <typename T>
QContiguousCache<T> &QContiguousCache<T>::operator=(const QContiguousCache<T> &other)
{
other.d->ref.ref();
if (!d->ref.deref())
freeData(d);
d = other.d;
if (!d->sharable)
detach_helper();
return *this;
}

template <typename T>
bool QContiguousCache<T>::operator==(const QContiguousCache<T> &other) const
{
if (other.d == d)
return true;
if (other.d->start != d->start
|| other.d->count != d->count
|| other.d->offset != d->offset
|| other.d->alloc != d->alloc)
return false;
for (int i = firstIndex(); i <= lastIndex(); ++i)
if (!(at(i) == other.at(i)))
return false;
return true;
}

template <typename T>
void QContiguousCache<T>::freeData(Data *x)
{
if (QTypeInfo<T>::isComplex) {
int oldcount = d->count;
T * i = p->array + d->start;
T * e = p->array + d->alloc;
while (oldcount--) {
i->~T();
i++;
if (i == e)
i = p->array;
}
}
x->freeData(x);
}
template <typename T>
void QContiguousCache<T>::append(const T &value)
{
if (!d->alloc)
return; 
detach();
if (QTypeInfo<T>::isComplex) {
if (d->count == d->alloc)
(p->array + (d->start+d->count) % d->alloc)->~T();
new (p->array + (d->start+d->count) % d->alloc) T(value);
} else {
p->array[(d->start+d->count) % d->alloc] = value;
}

if (d->count == d->alloc) {
d->start++;
d->start %= d->alloc;
d->offset++;
} else {
d->count++;
}
}

template<typename T>
void QContiguousCache<T>::prepend(const T &value)
{
if (!d->alloc)
return; 
detach();
if (d->start)
d->start--;
else
d->start = d->alloc-1;
d->offset--;

if (d->count != d->alloc)
d->count++;
else
if (d->count == d->alloc)
(p->array + d->start)->~T();

if (QTypeInfo<T>::isComplex)
new (p->array + d->start) T(value);
else
p->array[d->start] = value;
}

template<typename T>
void QContiguousCache<T>::insert(int pos, const T &value)
{
qt_noop();
if (!d->alloc)
return; 
detach();
if (containsIndex(pos)) {
if (QTypeInfo<T>::isComplex) {
(p->array + pos % d->alloc)->~T();
new (p->array + pos % d->alloc) T(value);
} else {
p->array[pos % d->alloc] = value;
}
} else if (pos == d->offset-1)
prepend(value);
else if (pos == d->offset+d->count)
append(value);
else {

clear();
d->offset = pos;
d->start = pos % d->alloc;
d->count = 1;
if (QTypeInfo<T>::isComplex)
new (p->array + d->start) T(value);
else
p->array[d->start] = value;
}
}

template <typename T>
inline const T &QContiguousCache<T>::at(int pos) const
{ qt_noop(); return p->array[pos % d->alloc]; }
template <typename T>
inline const T &QContiguousCache<T>::operator[](int pos) const
{ qt_noop(); return p->array[pos % d->alloc]; }

template <typename T>
inline T &QContiguousCache<T>::operator[](int pos)
{
detach();
if (!containsIndex(pos))
insert(pos, T());
return p->array[pos % d->alloc];
}

template <typename T>
inline void QContiguousCache<T>::removeFirst()
{
qt_noop();
detach();
d->count--;
if (QTypeInfo<T>::isComplex)
(p->array + d->start)->~T();
d->start = (d->start + 1) % d->alloc;
d->offset++;
}

template <typename T>
inline void QContiguousCache<T>::removeLast()
{
qt_noop();
detach();
d->count--;
if (QTypeInfo<T>::isComplex)
(p->array + (d->start + d->count) % d->alloc)->~T();
}

template <typename T>
inline T QContiguousCache<T>::takeFirst()
{ T t = first(); removeFirst(); return t; }

template <typename T>
inline T QContiguousCache<T>::takeLast()
{ T t = last(); removeLast(); return t; }




# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"


# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"



class  QDebug
{
friend class QMessageLogger;
friend class QDebugStateSaverPrivate;
struct Stream {
Stream(QIODevice *device) : ts(device), ref(1), type(QtDebugMsg), space(true), message_output(false) {}
Stream(QString *string) : ts(string, QIODevice::WriteOnly), ref(1), type(QtDebugMsg), space(true), message_output(false) {}
Stream(QtMsgType t) : ts(&buffer, QIODevice::WriteOnly), ref(1), type(t), space(true), message_output(true) {}
QTextStream ts;
QString buffer;
int ref;
QtMsgType type;
bool space;
bool message_output;
QMessageLogContext context;
} *stream;
public:
inline QDebug(QIODevice *device) : stream(new Stream(device)) {}
inline QDebug(QString *string) : stream(new Stream(string)) {}
inline QDebug(QtMsgType t) : stream(new Stream(t)) {}
inline QDebug(const QDebug &o):stream(o.stream) { ++stream->ref; }
inline QDebug &operator=(const QDebug &other);
inline ~QDebug() {
if (!--stream->ref) {
if(stream->message_output) {
try {
qt_message_output(stream->type,
stream->context,
stream->buffer);
} catch (std::bad_alloc&) {  }
}
delete stream;
}
}
inline void swap(QDebug &other) { qSwap(stream, other.stream); }

inline QDebug &space() { stream->space = true; stream->ts << ' '; return *this; }
inline QDebug &nospace() { stream->space = false; return *this; }
inline QDebug &maybeSpace() { if (stream->space) stream->ts << ' '; return *this; }

bool autoInsertSpaces() const { return stream->space; }
void setAutoInsertSpaces(bool b) { stream->space = b; }

inline QDebug &operator<<(QChar t) { stream->ts << '\'' << t << '\''; return maybeSpace(); }
inline QDebug &operator<<(bool t) { stream->ts << (t ? "true" : "false"); return maybeSpace(); }
inline QDebug &operator<<(char t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(signed short t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(unsigned short t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(signed int t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(unsigned int t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(signed long t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(unsigned long t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(qint64 t)
{ stream->ts << QString::number(t); return maybeSpace(); }
inline QDebug &operator<<(quint64 t)
{ stream->ts << QString::number(t); return maybeSpace(); }
inline QDebug &operator<<(float t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(double t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(const char* t) { stream->ts << QString::fromUtf8(t); return maybeSpace(); }
inline QDebug &operator<<(const QString & t) { stream->ts << '\"' << t << '\"'; return maybeSpace(); }
inline QDebug &operator<<(const QStringRef & t) { return operator<<(t.toString()); }
inline QDebug &operator<<(QLatin1String t) { stream->ts << '\"' << t << '\"'; return maybeSpace(); }
inline QDebug &operator<<(const QByteArray & t) { stream->ts << '\"' << t << '\"'; return maybeSpace(); }
inline QDebug &operator<<(const void * t) { stream->ts << t; return maybeSpace(); }
inline QDebug &operator<<(QTextStreamFunction f) {
stream->ts << f;
return *this;
}

inline QDebug &operator<<(QTextStreamManipulator m)
{ stream->ts << m; return *this; }
};

template<> class QTypeInfo<QDebug > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDebug)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDebug) }; static inline const char *name() { return "QDebug"; } }; template <> inline void qSwap<QDebug>(QDebug &value1, QDebug &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDebug>(::QDebug &value1, ::QDebug &value2) { value1.swap(value2); } } 

class QDebugStateSaverPrivate;
class  QDebugStateSaver
{
public:
QDebugStateSaver(QDebug &dbg);
~QDebugStateSaver();
private:
QDebugStateSaver(const QDebugStateSaver &) ; QDebugStateSaver &operator=(const QDebugStateSaver &) ;
QScopedPointer<QDebugStateSaverPrivate> d;
};

class QNoDebug
{
public:
inline QNoDebug &operator<<(QTextStreamFunction) { return *this; }
inline QNoDebug &operator<<(QTextStreamManipulator) { return *this; }
inline QNoDebug &space() { return *this; }
inline QNoDebug &nospace() { return *this; }
inline QNoDebug &maybeSpace() { return *this; }

template<typename T>
inline QNoDebug &operator<<(const T &) { return *this; }
};

inline QDebug &QDebug::operator=(const QDebug &other)
{
if (this != &other) {
QDebug copy(other);
qSwap(stream, copy.stream);
}
return *this;
}





# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <class T>
inline QDebug operator<<(QDebug debug, const QList<T> &list)

# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << '(';
for (typename QList<T>::size_type i = 0; i < list.count(); ++i) {
if (i)
debug << ", ";
debug << list.at(i);
}
debug << ')';
return debug.space();
}





# 189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <typename T>
inline QDebug operator<<(QDebug debug, const QVector<T> &vec)

# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << "QVector";
return operator<<(debug, vec.toList());
}





# 201 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <class aKey, class aT>
inline QDebug operator<<(QDebug debug, const QMap<aKey, aT> &map)

# 204 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << "QMap(";
for (typename QMap<aKey, aT>::const_iterator it = map.constBegin();
it != map.constEnd(); ++it) {
debug << '(' << it.key() << ", " << it.value() << ')';
}
debug << ')';
return debug.space();
}





# 218 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <class aKey, class aT>
inline QDebug operator<<(QDebug debug, const QHash<aKey, aT> &hash)

# 221 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << "QHash(";
for (typename QHash<aKey, aT>::const_iterator it = hash.constBegin();
it != hash.constEnd(); ++it)
debug << '(' << it.key() << ", " << it.value() << ')';
debug << ')';
return debug.space();
}





# 234 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <class T1, class T2>
inline QDebug operator<<(QDebug debug, const QPair<T1, T2> &pair)

# 237 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << "QPair(" << pair.first << ',' << pair.second << ')';
return debug.space();
}

template <typename T>
inline QDebug operator<<(QDebug debug, const QSet<T> &set)
{
debug.nospace() << "QSet";
return operator<<(debug, set.toList());
}





# 253 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <class T>
inline QDebug operator<<(QDebug debug, const QContiguousCache<T> &cache)

# 256 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << "QContiguousCache(";
for (int i = cache.firstIndex(); i <= cache.lastIndex(); ++i) {
debug << cache[i];
if (i != cache.lastIndex())
debug << ", ";
}
debug << ')';
return debug.space();
}





# 271 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
template <class T>
inline QDebug operator<<(QDebug debug, const QFlags<T> &flags)

# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"
{
debug.nospace() << "QFlags(";
bool needSeparator = false;
for (uint i = 0; i < sizeof(T) * 8; ++i) {
if (flags.testFlag(T(1 << i))) {
if (needSeparator)
debug.nospace() << '|';
else
needSeparator = true;
debug.nospace() << "0x" << QByteArray::number(typename QFlags<T>::Int(1) << i, 16).constData();
}
}
debug << ')';
return debug.space();
}




# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"


class QFileDevicePrivate;

class  QFileDevice : public QIODevice
{

# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"
Q_OBJECT

# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"
inline QFileDevicePrivate* d_func() { return reinterpret_cast<QFileDevicePrivate *>(qGetPtrHelper(d_ptr)); } inline const QFileDevicePrivate* d_func() const { return reinterpret_cast<const QFileDevicePrivate *>(qGetPtrHelper(d_ptr)); } friend class QFileDevicePrivate;

public:
enum FileError {
NoError = 0,
ReadError = 1,
WriteError = 2,
FatalError = 3,
ResourceError = 4,
OpenError = 5,
AbortError = 6,
TimeOutError = 7,
UnspecifiedError = 8,
RemoveError = 9,
RenameError = 10,
PositionError = 11,
ResizeError = 12,
PermissionsError = 13,
CopyError = 14
};

enum Permission {
ReadOwner = 0x4000, WriteOwner = 0x2000, ExeOwner = 0x1000,
ReadUser = 0x0400, WriteUser = 0x0200, ExeUser = 0x0100,
ReadGroup = 0x0040, WriteGroup = 0x0020, ExeGroup = 0x0010,
ReadOther = 0x0004, WriteOther = 0x0002, ExeOther = 0x0001
};
typedef QFlags<Permission> Permissions;

enum FileHandleFlag {
AutoCloseHandle = 0x0001,
DontCloseHandle = 0
};
typedef QFlags<FileHandleFlag> FileHandleFlags;

~QFileDevice();

FileError error() const;
void unsetError();

virtual void close();

bool isSequential() const;

int handle() const;
virtual QString fileName() const;

qint64 pos() const;
bool seek(qint64 offset);
bool atEnd() const;
bool flush();

qint64 size() const;

virtual bool resize(qint64 sz);
virtual Permissions permissions() const;
virtual bool setPermissions(Permissions permissionSpec);

enum MemoryMapFlags {
NoOptions = 0
};

uchar *map(qint64 offset, qint64 size, MemoryMapFlags flags = NoOptions);
bool unmap(uchar *address);

protected:
QFileDevice();



# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"
explicit QFileDevice(QObject *parent);
QFileDevice(QFileDevicePrivate &dd, QObject *parent = 0);


# 131 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"
qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);
qint64 readLineData(char *data, qint64 maxlen);

private:
QFileDevice(const QFileDevice &) ; QFileDevice &operator=(const QFileDevice &) ;
};

 inline QFlags<QFileDevice::Permissions::enum_type> operator|(QFileDevice::Permissions::enum_type f1, QFileDevice::Permissions::enum_type f2) { return QFlags<QFileDevice::Permissions::enum_type>(f1) | f2; }  inline QFlags<QFileDevice::Permissions::enum_type> operator|(QFileDevice::Permissions::enum_type f1, QFlags<QFileDevice::Permissions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QFileDevice::Permissions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"







# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"


class QTemporaryFile;
class QFilePrivate;

class  QFile : public QFileDevice
{

# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
Q_OBJECT

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
inline QFilePrivate* d_func() { return reinterpret_cast<QFilePrivate *>(qGetPtrHelper(d_ptr)); } inline const QFilePrivate* d_func() const { return reinterpret_cast<const QFilePrivate *>(qGetPtrHelper(d_ptr)); } friend class QFilePrivate;

public:
QFile();
QFile(const QString &name);

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
explicit QFile(QObject *parent);
QFile(const QString &name, QObject *parent);

# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
~QFile();

QString fileName() const;
void setFileName(const QString &name);












# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
static inline QByteArray encodeName(const QString &fileName)
{
return fileName.toLocal8Bit();
}
static QString decodeName(const QByteArray &localFileName)
{
return QString::fromLocal8Bit(localFileName);
}

# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
inline static QString decodeName(const char *localFileName)
{ return decodeName(QByteArray(localFileName)); }








# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
bool exists() const;
static bool exists(const QString &fileName);

QString readLink() const;
static QString readLink(const QString &fileName);
inline QString symLinkTarget() const { return readLink(); }
inline static QString symLinkTarget(const QString &fileName) { return readLink(fileName); }

bool remove();
static bool remove(const QString &fileName);

bool rename(const QString &newName);
static bool rename(const QString &oldName, const QString &newName);

bool link(const QString &newName);
static bool link(const QString &oldname, const QString &newName);

bool copy(const QString &newName);
static bool copy(const QString &fileName, const QString &newName);

bool open(OpenMode flags);
bool open(FILE *f, OpenMode ioFlags, FileHandleFlags handleFlags=DontCloseHandle);
bool open(int fd, OpenMode ioFlags, FileHandleFlags handleFlags=DontCloseHandle);

qint64 size() const;

bool resize(qint64 sz);
static bool resize(const QString &filename, qint64 sz);

Permissions permissions() const;
static Permissions permissions(const QString &filename);
bool setPermissions(Permissions permissionSpec);
static bool setPermissions(const QString &filename, Permissions permissionSpec);

protected:



# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
QFile(QFilePrivate &dd, QObject *parent = 0);


# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"
private:
friend class QTemporaryFile;
QFile(const QFile &) ; QFile &operator=(const QFile &) ;
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"



class QDir;
class QDirIteratorPrivate;
class QDateTime;
class QFileInfoPrivate;

class  QFileInfo
{
friend class QDirIteratorPrivate;
public:
explicit QFileInfo(QFileInfoPrivate *d);

QFileInfo();
QFileInfo(const QString &file);
QFileInfo(const QFile &file);
QFileInfo(const QDir &dir, const QString &file);
QFileInfo(const QFileInfo &fileinfo);
~QFileInfo();

QFileInfo &operator=(const QFileInfo &fileinfo);





# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"
inline void swap(QFileInfo &other)
{ qSwap(d_ptr, other.d_ptr); }

bool operator==(const QFileInfo &fileinfo) const;
inline bool operator!=(const QFileInfo &fileinfo) const { return !(operator==(fileinfo)); }

void setFile(const QString &file);
void setFile(const QFile &file);
void setFile(const QDir &dir, const QString &file);
bool exists() const;
void refresh();

QString filePath() const;
QString absoluteFilePath() const;
QString canonicalFilePath() const;
QString fileName() const;
QString baseName() const;
QString completeBaseName() const;
QString suffix() const;
QString bundleName() const;
QString completeSuffix() const;

QString path() const;
QString absolutePath() const;
QString canonicalPath() const;
QDir dir() const;
QDir absoluteDir() const;

bool isReadable() const;
bool isWritable() const;
bool isExecutable() const;
bool isHidden() const;
bool isNativePath() const;

bool isRelative() const;
inline bool isAbsolute() const { return !isRelative(); }
bool makeAbsolute();

bool isFile() const;
bool isDir() const;
bool isSymLink() const;
bool isRoot() const;
bool isBundle() const;

QString readLink() const;
inline QString symLinkTarget() const { return readLink(); }

QString owner() const;
uint ownerId() const;
QString group() const;
uint groupId() const;

bool permission(QFile::Permissions permissions) const;
QFile::Permissions permissions() const;

qint64 size() const;

QDateTime created() const;
QDateTime lastModified() const;
QDateTime lastRead() const;

bool caching() const;
void setCaching(bool on);

protected:
QSharedDataPointer<QFileInfoPrivate> d_ptr;

private:
QFileInfoPrivate* d_func();
inline const QFileInfoPrivate* d_func() const
{
return d_ptr.constData();
}
};

template<> class QTypeInfo<QFileInfo > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFileInfo)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFileInfo) }; static inline const char *name() { return "QFileInfo"; } }; template <> inline void qSwap<QFileInfo>(QFileInfo &value1, QFileInfo &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QFileInfo>(::QFileInfo &value1, ::QFileInfo &value2) { value1.swap(value2); } } 

typedef QList<QFileInfo> QFileInfoList;



 template <> struct QMetaTypeId< QFileInfo > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QFileInfo >("QFileInfo", reinterpret_cast< QFileInfo *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"



































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"


















































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"



struct QRegExpPrivate;
class QStringList;

class  QRegExp
{
public:
enum PatternSyntax {
RegExp,
Wildcard,
FixedString,
RegExp2,
WildcardUnix,
W3CXmlSchema11 };
enum CaretMode { CaretAtZero, CaretAtOffset, CaretWontMatch };

QRegExp();
explicit QRegExp(const QString &pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive,
PatternSyntax syntax = RegExp);
QRegExp(const QRegExp &rx);
~QRegExp();
QRegExp &operator=(const QRegExp &rx);




# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"
inline void swap(QRegExp &other) { qSwap(priv, other.priv); }

bool operator==(const QRegExp &rx) const;
inline bool operator!=(const QRegExp &rx) const { return !operator==(rx); }

bool isEmpty() const;
bool isValid() const;
QString pattern() const;
void setPattern(const QString &pattern);
Qt::CaseSensitivity caseSensitivity() const;
void setCaseSensitivity(Qt::CaseSensitivity cs);
PatternSyntax patternSyntax() const;
void setPatternSyntax(PatternSyntax syntax);

bool isMinimal() const;
void setMinimal(bool minimal);

bool exactMatch(const QString &str) const;

int indexIn(const QString &str, int offset = 0, CaretMode caretMode = CaretAtZero) const;
int lastIndexIn(const QString &str, int offset = -1, CaretMode caretMode = CaretAtZero) const;
int matchedLength() const;

# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"
int captureCount() const;
QStringList capturedTexts() const;
QStringList capturedTexts();
QString cap(int nth = 0) const;
QString cap(int nth = 0);
int pos(int nth = 0) const;
int pos(int nth = 0);
QString errorString() const;
QString errorString();


# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"
static QString escape(const QString &str);

private:
QRegExpPrivate *priv;
};

template<> class QTypeInfo<QRegExp > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRegExp)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRegExp) }; static inline const char *name() { return "QRegExp"; } };


# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"
 QDataStream &operator<<(QDataStream &out, const QRegExp &regExp);
 QDataStream &operator>>(QDataStream &in, QRegExp &regExp);



# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"
 QDebug operator<<(QDebug, const QRegExp &);


# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"





# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringmatcher.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringmatcher.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringmatcher.h"



class QStringMatcherPrivate;

class  QStringMatcher
{
public:
QStringMatcher();
explicit QStringMatcher(const QString &pattern,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
QStringMatcher(const QChar *uc, int len,
Qt::CaseSensitivity cs = Qt::CaseSensitive);
QStringMatcher(const QStringMatcher &other);
~QStringMatcher();

QStringMatcher &operator=(const QStringMatcher &other);

void setPattern(const QString &pattern);
void setCaseSensitivity(Qt::CaseSensitivity cs);

int indexIn(const QString &str, int from = 0) const;
int indexIn(const QChar *str, int length, int from = 0) const;
QString pattern() const;
inline Qt::CaseSensitivity caseSensitivity() const { return q_cs; }

private:
QStringMatcherPrivate *d_ptr;
QString q_pattern;
Qt::CaseSensitivity q_cs;





# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringmatcher.h"
struct Data {
uchar q_skiptable[256];
const QChar *uc;
int len;
};
union {
uint q_data[256];
Data p;
};



# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringmatcher.h"
};




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"



class QRegExp;
class QRegularExpression;

typedef QListIterator<QString> QStringListIterator;
typedef QMutableListIterator<QString> QMutableStringListIterator;

class QStringList : public QList<QString>
{
public:
inline QStringList() { }
inline explicit QStringList(const QString &i) { append(i); }
inline QStringList(const QStringList &l) : QList<QString>(l) { }
inline QStringList(const QList<QString> &l) : QList<QString>(l) { }




# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline void sort(Qt::CaseSensitivity cs = Qt::CaseSensitive);
inline int removeDuplicates();

inline QString join(const QString &sep) const;
inline QString join(QChar sep) const;

inline QStringList filter(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
inline bool contains(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

inline QStringList &replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

inline QStringList operator+(const QStringList &other) const
{ QStringList n = *this; n += other; return n; }
inline QStringList &operator<<(const QString &str)
{ append(str); return *this; }
inline QStringList &operator<<(const QStringList &l)
{ *this += l; return *this; }


# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline QStringList filter(const QRegExp &rx) const;
inline QStringList &replaceInStrings(const QRegExp &rx, const QString &after);
inline int indexOf(const QRegExp &rx, int from = 0) const;
inline int lastIndexOf(const QRegExp &rx, int from = -1) const;
inline int indexOf(QRegExp &rx, int from = 0) const;
inline int lastIndexOf(QRegExp &rx, int from = -1) const;




# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline QStringList filter(const QRegularExpression &re) const;
inline QStringList &replaceInStrings(const QRegularExpression &re, const QString &after);
inline int indexOf(const QRegularExpression &re, int from = 0) const;
inline int lastIndexOf(const QRegularExpression &re, int from = -1) const;







# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline int indexOf(const QString &str, int from = 0) const
{ return QList<QString>::indexOf(str, from); }
inline int lastIndexOf(const QString &str, int from = -1) const
{ return QList<QString>::lastIndexOf(str, from); }

# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
};

template<> class QTypeInfo<QStringList > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QStringList)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QStringList) }; static inline const char *name() { return "QStringList"; } };

namespace QtPrivate {
void  QStringList_sort(QStringList *that, Qt::CaseSensitivity cs);
int  QStringList_removeDuplicates(QStringList *that);
QString  QStringList_join(const QStringList *that, const QChar *sep, int seplen);
QStringList  QStringList_filter(const QStringList *that, const QString &str,
Qt::CaseSensitivity cs);

bool  QStringList_contains(const QStringList *that, const QString &str, Qt::CaseSensitivity cs);
void  QStringList_replaceInStrings(QStringList *that, const QString &before, const QString &after,
Qt::CaseSensitivity cs);


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
void  QStringList_replaceInStrings(QStringList *that, const QRegExp &rx, const QString &after);
QStringList  QStringList_filter(const QStringList *that, const QRegExp &re);
int  QStringList_indexOf(const QStringList *that, const QRegExp &rx, int from);
int  QStringList_lastIndexOf(const QStringList *that, const QRegExp &rx, int from);
int  QStringList_indexOf(const QStringList *that, QRegExp &rx, int from);
int  QStringList_lastIndexOf(const QStringList *that, QRegExp &rx, int from);




# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
void  QStringList_replaceInStrings(QStringList *that, const QRegularExpression &rx, const QString &after);
QStringList  QStringList_filter(const QStringList *that, const QRegularExpression &re);
int  QStringList_indexOf(const QStringList *that, const QRegularExpression &re, int from);
int  QStringList_lastIndexOf(const QStringList *that, const QRegularExpression &re, int from);


# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
}

inline void QStringList::sort(Qt::CaseSensitivity cs)
{
QtPrivate::QStringList_sort(this, cs);
}

inline int QStringList::removeDuplicates()
{
return QtPrivate::QStringList_removeDuplicates(this);
}

inline QString QStringList::join(const QString &sep) const
{
return QtPrivate::QStringList_join(this, sep.constData(), sep.length());
}

inline QString QStringList::join(QChar sep) const
{
return QtPrivate::QStringList_join(this, &sep, 1);
}

inline QStringList QStringList::filter(const QString &str, Qt::CaseSensitivity cs) const
{
return QtPrivate::QStringList_filter(this, str, cs);
}

inline bool QStringList::contains(const QString &str, Qt::CaseSensitivity cs) const
{
return QtPrivate::QStringList_contains(this, str, cs);
}

inline QStringList &QStringList::replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs)
{
QtPrivate::QStringList_replaceInStrings(this, before, after, cs);
return *this;
}


# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline QStringList &QStringList::replaceInStrings(const QRegExp &rx, const QString &after)
{
QtPrivate::QStringList_replaceInStrings(this, rx, after);
return *this;
}

inline QStringList QStringList::filter(const QRegExp &rx) const
{
return QtPrivate::QStringList_filter(this, rx);
}

inline int QStringList::indexOf(const QRegExp &rx, int from) const
{
return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(const QRegExp &rx, int from) const
{
return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}

inline int QStringList::indexOf(QRegExp &rx, int from) const
{
return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(QRegExp &rx, int from) const
{
return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}




# 222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline QStringList &QStringList::replaceInStrings(const QRegularExpression &rx, const QString &after)
{
QtPrivate::QStringList_replaceInStrings(this, rx, after);
return *this;
}

inline QStringList QStringList::filter(const QRegularExpression &rx) const
{
return QtPrivate::QStringList_filter(this, rx);
}

inline int QStringList::indexOf(const QRegularExpression &rx, int from) const
{
return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(const QRegularExpression &rx, int from) const
{
return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}




# 246 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"
inline QDataStream &operator>>(QDataStream &in, QStringList &list)
{
return operator>>(in, static_cast<QList<QString> &>(list));
}
inline QDataStream &operator<<(QDataStream &out, const QStringList &list)
{
return operator<<(out, static_cast<const QList<QString> &>(list));
}


# 256 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"



class QDirIterator;
class QDirPrivate;

class  QDir
{
public:
enum Filter { Dirs = 0x001,
Files = 0x002,
Drives = 0x004,
NoSymLinks = 0x008,
AllEntries = Dirs | Files | Drives,
TypeMask = 0x00f,

Readable = 0x010,
Writable = 0x020,
Executable = 0x040,
PermissionMask = 0x070,

Modified = 0x080,
Hidden = 0x100,
System = 0x200,

AccessMask = 0x3F0,

AllDirs = 0x400,
CaseSensitive = 0x800,
NoDot = 0x2000,
NoDotDot = 0x4000,
NoDotAndDotDot = NoDot | NoDotDot,

NoFilter = -1
};
typedef QFlags<Filter> Filters;

enum SortFlag { Name = 0x00,
Time = 0x01,
Size = 0x02,
Unsorted = 0x03,
SortByMask = 0x03,

DirsFirst = 0x04,
Reversed = 0x08,
IgnoreCase = 0x10,
DirsLast = 0x20,
LocaleAware = 0x40,
Type = 0x80,
NoSort = -1
};
typedef QFlags<SortFlag> SortFlags;

QDir(const QDir &);
QDir(const QString &path = QString());
QDir(const QString &path, const QString &nameFilter,
SortFlags sort = SortFlags(Name | IgnoreCase), Filters filter = AllEntries);
~QDir();

QDir &operator=(const QDir &);
QDir &operator=(const QString &path);





# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"
inline void swap(QDir &other)
{ qSwap(d_ptr, other.d_ptr); }

void setPath(const QString &path);
QString path() const;
QString absolutePath() const;
QString canonicalPath() const;

static void addResourceSearchPath(const QString &path);

static void setSearchPaths(const QString &prefix, const QStringList &searchPaths);
static void addSearchPath(const QString &prefix, const QString &path);
static QStringList searchPaths(const QString &prefix);

QString dirName() const;
QString filePath(const QString &fileName) const;
QString absoluteFilePath(const QString &fileName) const;
QString relativeFilePath(const QString &fileName) const;

static QString toNativeSeparators(const QString &pathName);
static QString fromNativeSeparators(const QString &pathName);

bool cd(const QString &dirName);
bool cdUp();

QStringList nameFilters() const;
void setNameFilters(const QStringList &nameFilters);

Filters filter() const;
void setFilter(Filters filter);
SortFlags sorting() const;
void setSorting(SortFlags sort);

uint count() const;
QString operator[](int) const;

static QStringList nameFiltersFromString(const QString &nameFilter);

QStringList entryList(Filters filters = NoFilter, SortFlags sort = NoSort) const;
QStringList entryList(const QStringList &nameFilters, Filters filters = NoFilter,
SortFlags sort = NoSort) const;

QFileInfoList entryInfoList(Filters filters = NoFilter, SortFlags sort = NoSort) const;
QFileInfoList entryInfoList(const QStringList &nameFilters, Filters filters = NoFilter,
SortFlags sort = NoSort) const;

bool mkdir(const QString &dirName) const;
bool rmdir(const QString &dirName) const;
bool mkpath(const QString &dirPath) const;
bool rmpath(const QString &dirPath) const;

bool removeRecursively();

bool isReadable() const;
bool exists() const;
bool isRoot() const;

static bool isRelativePath(const QString &path);
inline static bool isAbsolutePath(const QString &path) { return !isRelativePath(path); }
bool isRelative() const;
inline bool isAbsolute() const { return !isRelative(); }
bool makeAbsolute();

bool operator==(const QDir &dir) const;
inline bool operator!=(const QDir &dir) const { return !operator==(dir); }

bool remove(const QString &fileName);
bool rename(const QString &oldName, const QString &newName);
bool exists(const QString &name) const;

static QFileInfoList drives();

static QChar separator();

static bool setCurrent(const QString &path);
static inline QDir current() { return QDir(currentPath()); }
static QString currentPath();

static inline QDir home() { return QDir(homePath()); }
static QString homePath();
static inline QDir root() { return QDir(rootPath()); }
static QString rootPath();
static inline QDir temp() { return QDir(tempPath()); }
static QString tempPath();


# 202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"
static bool match(const QStringList &filters, const QString &fileName);
static bool match(const QString &filter, const QString &fileName);


# 206 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"
static QString cleanPath(const QString &path);
void refresh() const;

protected:
explicit QDir(QDirPrivate &d);

QSharedDataPointer<QDirPrivate> d_ptr;

private:
friend class QDirIterator;

QDirPrivate* d_func();
inline const QDirPrivate* d_func() const
{
return d_ptr.constData();
}

};

template<> class QTypeInfo<QDir > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDir)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDir) }; static inline const char *name() { return "QDir"; } }; template <> inline void qSwap<QDir>(QDir &value1, QDir &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDir>(::QDir &value1, ::QDir &value2) { value1.swap(value2); } } 
 inline QFlags<QDir::Filters::enum_type> operator|(QDir::Filters::enum_type f1, QDir::Filters::enum_type f2) { return QFlags<QDir::Filters::enum_type>(f1) | f2; }  inline QFlags<QDir::Filters::enum_type> operator|(QDir::Filters::enum_type f1, QFlags<QDir::Filters::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QDir::Filters::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QDir::SortFlags::enum_type> operator|(QDir::SortFlags::enum_type f1, QDir::SortFlags::enum_type f2) { return QFlags<QDir::SortFlags::enum_type>(f1) | f2; }  inline QFlags<QDir::SortFlags::enum_type> operator|(QDir::SortFlags::enum_type f1, QFlags<QDir::SortFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QDir::SortFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"
class QDebug;
 QDebug operator<<(QDebug debug, QDir::Filters filters);
 QDebug operator<<(QDebug debug, const QDir &dir);


# 235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"



# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdiriterator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"













































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdiriterator.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdiriterator.h"



class QDirIteratorPrivate;
class  QDirIterator {
public:
enum IteratorFlag {
NoIteratorFlags = 0x0,
FollowSymlinks = 0x1,
Subdirectories = 0x2
};
typedef QFlags<IteratorFlag> IteratorFlags;

QDirIterator(const QDir &dir, IteratorFlags flags = NoIteratorFlags);
QDirIterator(const QString &path,
IteratorFlags flags = NoIteratorFlags);
QDirIterator(const QString &path,
QDir::Filters filter,
IteratorFlags flags = NoIteratorFlags);
QDirIterator(const QString &path,
const QStringList &nameFilters,
QDir::Filters filters = QDir::NoFilter,
IteratorFlags flags = NoIteratorFlags);

~QDirIterator();

QString next();
bool hasNext() const;

QString fileName() const;
QString filePath() const;
QFileInfo fileInfo() const;
QString path() const;

private:
QDirIterator(const QDirIterator &) ; QDirIterator &operator=(const QDirIterator &) ;

QScopedPointer<QDirIteratorPrivate> d;
friend class QDir;
};

 inline QFlags<QDirIterator::IteratorFlags::enum_type> operator|(QDirIterator::IteratorFlags::enum_type f1, QDirIterator::IteratorFlags::enum_type f2) { return QFlags<QDirIterator::IteratorFlags::enum_type>(f1) | f2; }  inline QFlags<QDirIterator::IteratorFlags::enum_type> operator|(QDirIterator::IteratorFlags::enum_type f1, QFlags<QDirIterator::IteratorFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QDirIterator::IteratorFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"



























































































































































# 32 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"















































































































































# 33 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"
































































































































































# 34 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"



class QFileSystemWatcherPrivate;

class  QFileSystemWatcher : public QObject
{
Q_OBJECT
inline QFileSystemWatcherPrivate* d_func() { return reinterpret_cast<QFileSystemWatcherPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFileSystemWatcherPrivate* d_func() const { return reinterpret_cast<const QFileSystemWatcherPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFileSystemWatcherPrivate;

public:
QFileSystemWatcher(QObject *parent = 0);
QFileSystemWatcher(const QStringList &paths, QObject *parent = 0);
~QFileSystemWatcher();

bool addPath(const QString &file);
QStringList addPaths(const QStringList &files);
bool removePath(const QString &file);
QStringList removePaths(const QStringList &files);

QStringList files() const;
QStringList directories() const;

signals:
void fileChanged(const QString &path

# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"
, QPrivateSignal

# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"
);
void directoryChanged(const QString &path

# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"
, QPrivateSignal

# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfilesystemwatcher.h"
);

private:


};





# 35 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 36 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlockfile.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlockfile.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlockfile.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlockfile.h"


class QLockFilePrivate;

class  QLockFile
{
public:
QLockFile(const QString &fileName);
~QLockFile();

bool lock();
bool tryLock(int timeout = 0);
void unlock();

void setStaleLockTime(int);
int staleLockTime() const;

bool isLocked() const;
bool getLockInfo(qint64 *pid, QString *hostname, QString *appname) const;
bool removeStaleLockFile();

enum LockError {
NoError = 0,
LockFailedError = 1,
PermissionError = 2,
UnknownError = 3
};
LockError error() const;

protected:
QScopedPointer<QLockFilePrivate> d_ptr;

private:
inline QLockFilePrivate* d_func() { return reinterpret_cast<QLockFilePrivate *>(qGetPtrHelper(d_ptr)); } inline const QLockFilePrivate* d_func() const { return reinterpret_cast<const QLockFilePrivate *>(qGetPtrHelper(d_ptr)); } friend class QLockFilePrivate;
QLockFile(const QLockFile &) ; QLockFile &operator=(const QLockFile &) ;
};




# 37 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"






# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
typedef qint64 Q_PID;






# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
class QProcessPrivate;
class QProcessEnvironmentPrivate;

class  QProcessEnvironment
{
public:
QProcessEnvironment();
QProcessEnvironment(const QProcessEnvironment &other);
~QProcessEnvironment();
QProcessEnvironment &operator=(const QProcessEnvironment &other);

inline void swap(QProcessEnvironment &other) { qSwap(d, other.d); }

bool operator==(const QProcessEnvironment &other) const;
inline bool operator!=(const QProcessEnvironment &other) const
{ return !(*this == other); }

bool isEmpty() const;
void clear();

bool contains(const QString &name) const;
void insert(const QString &name, const QString &value);
void remove(const QString &name);
QString value(const QString &name, const QString &defaultValue = QString()) const;

QStringList toStringList() const;

QStringList keys() const;

void insert(const QProcessEnvironment &e);

static QProcessEnvironment systemEnvironment();

private:
friend class QProcessPrivate;
friend class QProcessEnvironmentPrivate;
QSharedDataPointer<QProcessEnvironmentPrivate> d;
};

template<> class QTypeInfo<QProcessEnvironment > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QProcessEnvironment)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QProcessEnvironment) }; static inline const char *name() { return "QProcessEnvironment"; } }; template <> inline void qSwap<QProcessEnvironment>(QProcessEnvironment &value1, QProcessEnvironment &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QProcessEnvironment>(::QProcessEnvironment &value1, ::QProcessEnvironment &value2) { value1.swap(value2); } } 

class  QProcess : public QIODevice
{
Q_OBJECT
public:
enum ProcessError {
FailedToStart, 
Crashed,
Timedout,
ReadError,
WriteError,
UnknownError
};
enum ProcessState {
NotRunning,
Starting,
Running
};
enum ProcessChannel {
StandardOutput,
StandardError
};
enum ProcessChannelMode {
SeparateChannels,
MergedChannels,
ForwardedChannels
};
enum ExitStatus {
NormalExit,
CrashExit
};

explicit QProcess(QObject *parent = 0);
virtual ~QProcess();

void start(const QString &program, const QStringList &arguments, OpenMode mode = ReadWrite);
void start(const QString &command, OpenMode mode = ReadWrite);
void start(OpenMode mode = ReadWrite);
bool open(OpenMode mode = ReadWrite) ;

QString program() const;
void setProgram(const QString &program);

QStringList arguments() const;
void setArguments(const QStringList & arguments);

ProcessChannelMode readChannelMode() const;
void setReadChannelMode(ProcessChannelMode mode);
ProcessChannelMode processChannelMode() const;
void setProcessChannelMode(ProcessChannelMode mode);

ProcessChannel readChannel() const;
void setReadChannel(ProcessChannel channel);

void closeReadChannel(ProcessChannel channel);
void closeWriteChannel();

void setStandardInputFile(const QString &fileName);
void setStandardOutputFile(const QString &fileName, OpenMode mode = Truncate);
void setStandardErrorFile(const QString &fileName, OpenMode mode = Truncate);
void setStandardOutputProcess(QProcess *destination);






# 169 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
QString workingDirectory() const;
void setWorkingDirectory(const QString &dir);

void setEnvironment(const QStringList &environment);
QStringList environment() const;
void setProcessEnvironment(const QProcessEnvironment &environment);
QProcessEnvironment processEnvironment() const;

QProcess::ProcessError error() const;
QProcess::ProcessState state() const;


Q_PID pid() const;

bool waitForStarted(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);
bool waitForBytesWritten(int msecs = 30000);
bool waitForFinished(int msecs = 30000);

QByteArray readAllStandardOutput();
QByteArray readAllStandardError();

int exitCode() const;
QProcess::ExitStatus exitStatus() const;


qint64 bytesAvailable() const;
qint64 bytesToWrite() const;
bool isSequential() const;
bool canReadLine() const;
void close();
bool atEnd() const;

static int execute(const QString &program, const QStringList &arguments);
static int execute(const QString &program);

static bool startDetached(const QString &program, const QStringList &arguments, const QString &workingDirectory,
qint64 *pid = 0);
static bool startDetached(const QString &program, const QStringList &arguments);
static bool startDetached(const QString &program);

static QStringList systemEnvironment();

public slots:
void terminate();
void kill();

signals:
void started(

# 219 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
QPrivateSignal

# 221 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
);
void finished(int exitCode); 
void finished(int exitCode, QProcess::ExitStatus exitStatus);
void error(QProcess::ProcessError error);
void stateChanged(QProcess::ProcessState state

# 227 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
, QPrivateSignal

# 229 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
);

void readyReadStandardOutput(

# 233 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
QPrivateSignal

# 235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
);
void readyReadStandardError(

# 238 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
QPrivateSignal

# 240 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"
);

protected:
void setProcessState(ProcessState state);

virtual void setupChildProcess();


qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

private:
inline QProcessPrivate* d_func() { return reinterpret_cast<QProcessPrivate *>(qGetPtrHelper(d_ptr)); } inline const QProcessPrivate* d_func() const { return reinterpret_cast<const QProcessPrivate *>(qGetPtrHelper(d_ptr)); } friend class QProcessPrivate;
QProcess(const QProcess &) ; QProcess &operator=(const QProcess &) ;







friend class QProcessManager;
};



# 266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qprocess.h"



# 38 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresource.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresource.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresource.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresource.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresource.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresource.h"



class QResourcePrivate;

class  QResource
{
public:
QResource(const QString &file=QString(), const QLocale &locale=QLocale());
~QResource();

void setFileName(const QString &file);
QString fileName() const;
QString absoluteFilePath() const;

void setLocale(const QLocale &locale);
QLocale locale() const;

bool isValid() const;

bool isCompressed() const;
qint64 size() const;
const uchar *data() const;

static void addSearchPath(const QString &path);
static QStringList searchPaths();

static bool registerResource(const QString &rccFilename, const QString &resourceRoot=QString());
static bool unregisterResource(const QString &rccFilename, const QString &resourceRoot=QString());

static bool registerResource(const uchar *rccData, const QString &resourceRoot=QString());
static bool unregisterResource(const uchar *rccData, const QString &resourceRoot=QString());

protected:
friend class QResourceFileEngine;
friend class QResourceFileEngineIterator;
bool isDir() const;
inline bool isFile() const { return !isDir(); }
QStringList children() const;

protected:
QScopedPointer<QResourcePrivate> d_ptr;

private:
inline QResourcePrivate* d_func() { return reinterpret_cast<QResourcePrivate *>(qGetPtrHelper(d_ptr)); } inline const QResourcePrivate* d_func() const { return reinterpret_cast<const QResourcePrivate *>(qGetPtrHelper(d_ptr)); } friend class QResourcePrivate;
};




# 39 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsavefile.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsavefile.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfiledevice.h"















































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsavefile.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsavefile.h"






# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsavefile.h"


class QAbstractFileEngine;
class QSaveFilePrivate;

class  QSaveFile : public QFileDevice
{
Q_OBJECT
inline QSaveFilePrivate* d_func() { return reinterpret_cast<QSaveFilePrivate *>(qGetPtrHelper(d_ptr)); } inline const QSaveFilePrivate* d_func() const { return reinterpret_cast<const QSaveFilePrivate *>(qGetPtrHelper(d_ptr)); } friend class QSaveFilePrivate;

public:

explicit QSaveFile(const QString &name);
explicit QSaveFile(QObject *parent = 0);
explicit QSaveFile(const QString &name, QObject *parent);
~QSaveFile();

QString fileName() const ;
void setFileName(const QString &name);

bool open(OpenMode flags) ;
bool commit();

void cancelWriting();

void setDirectWriteFallback(bool enabled);
bool directWriteFallback() const;

protected:
qint64 writeData(const char *data, qint64 len) ;

private:
void close() ;

private:
QSaveFile(const QSaveFile &) ; QSaveFile &operator=(const QSaveFile &) ;
};






# 40 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"







# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"






# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
class QIODevice;
class QSettingsPrivate;


# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
class  QSettings : public QObject



# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
{

# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
Q_OBJECT



# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
inline QSettingsPrivate* d_func() { return reinterpret_cast<QSettingsPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSettingsPrivate* d_func() const { return reinterpret_cast<const QSettingsPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSettingsPrivate;

public:
enum Status {
NoError = 0,
AccessError,
FormatError
};

enum Format {
NativeFormat,
IniFormat,

InvalidFormat = 16,
CustomFormat1,
CustomFormat2,
CustomFormat3,
CustomFormat4,
CustomFormat5,
CustomFormat6,
CustomFormat7,
CustomFormat8,
CustomFormat9,
CustomFormat10,
CustomFormat11,
CustomFormat12,
CustomFormat13,
CustomFormat14,
CustomFormat15,
CustomFormat16
};

enum Scope {
UserScope,
SystemScope
};


# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
explicit QSettings(const QString &organization,
const QString &application = QString(), QObject *parent = 0);
QSettings(Scope scope, const QString &organization,
const QString &application = QString(), QObject *parent = 0);
QSettings(Format format, Scope scope, const QString &organization,
const QString &application = QString(), QObject *parent = 0);
QSettings(const QString &fileName, Format format, QObject *parent = 0);
explicit QSettings(QObject *parent = 0);









# 132 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
~QSettings();

void clear();
void sync();
Status status() const;

void beginGroup(const QString &prefix);
void endGroup();
QString group() const;

int beginReadArray(const QString &prefix);
void beginWriteArray(const QString &prefix, int size = -1);
void endArray();
void setArrayIndex(int i);

QStringList allKeys() const;
QStringList childKeys() const;
QStringList childGroups() const;
bool isWritable() const;

void setValue(const QString &key, const QVariant &value);
QVariant value(const QString &key, const QVariant &defaultValue = QVariant()) const;

void remove(const QString &key);
bool contains(const QString &key) const;

void setFallbacksEnabled(bool b);
bool fallbacksEnabled() const;

QString fileName() const;
Format format() const;
Scope scope() const;
QString organizationName() const;
QString applicationName() const;


# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
void setIniCodec(QTextCodec *codec);
void setIniCodec(const char *codecName);
QTextCodec *iniCodec() const;


# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
static void setDefaultFormat(Format format);
static Format defaultFormat();
static void setSystemIniPath(const QString &dir); 
static void setUserIniPath(const QString &dir); 
static void setPath(Format format, Scope scope, const QString &path);

typedef QMap<QString, QVariant> SettingsMap;
typedef bool (*ReadFunc)(QIODevice &device, SettingsMap &map);
typedef bool (*WriteFunc)(QIODevice &device, const SettingsMap &map);

static Format registerFormat(const QString &extension, ReadFunc readFunc, WriteFunc writeFunc,
Qt::CaseSensitivity caseSensitivity = Qt::CaseSensitive);

protected:

# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
bool event(QEvent *event);


# 191 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsettings.h"
private:
QSettings(const QSettings &) ; QSettings &operator=(const QSettings &) ;
};






# 41 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"
class  QStandardPaths
{
public:

enum StandardLocation {
DesktopLocation,
DocumentsLocation,
FontsLocation,
ApplicationsLocation,
MusicLocation,
MoviesLocation,
PicturesLocation,
TempLocation,
HomeLocation,
DataLocation,
CacheLocation,
GenericDataLocation,
RuntimeLocation,
ConfigLocation,
DownloadLocation,
GenericCacheLocation
};

static QString writableLocation(StandardLocation type);
static QStringList standardLocations(StandardLocation type);

enum LocateOption {
LocateFile = 0x0,
LocateDirectory = 0x1
};
typedef QFlags<LocateOption> LocateOptions;

static QString locate(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile);
static QStringList locateAll(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile);

# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"
static QString displayName(StandardLocation type);


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"
static QString findExecutable(const QString &executableName, const QStringList &paths = QStringList());

static void enableTestMode(bool testMode);
static bool isTestModeEnabled();

private:

QStandardPaths();
~QStandardPaths();
};



# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"



# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporarydir.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"













































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporarydir.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporarydir.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporarydir.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporarydir.h"
class QTemporaryDirPrivate;

class  QTemporaryDir
{
public:
QTemporaryDir();
explicit QTemporaryDir(const QString &templateName);
~QTemporaryDir();

bool isValid() const;

bool autoRemove() const;
void setAutoRemove(bool b);
bool remove();

QString path() const;

private:
QScopedPointer<QTemporaryDirPrivate> d_ptr;

QTemporaryDir(const QTemporaryDir &) ; QTemporaryDir &operator=(const QTemporaryDir &) ;
};



# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporarydir.h"



# 43 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"



























































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"






# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"





# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
class QTemporaryFilePrivate;
class QLockFilePrivate;

class  QTemporaryFile : public QFile
{

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
Q_OBJECT

# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
inline QTemporaryFilePrivate* d_func() { return reinterpret_cast<QTemporaryFilePrivate *>(qGetPtrHelper(d_ptr)); } inline const QTemporaryFilePrivate* d_func() const { return reinterpret_cast<const QTemporaryFilePrivate *>(qGetPtrHelper(d_ptr)); } friend class QTemporaryFilePrivate;

public:
QTemporaryFile();
explicit QTemporaryFile(const QString &templateName);

# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
explicit QTemporaryFile(QObject *parent);
QTemporaryFile(const QString &templateName, QObject *parent);

# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
~QTemporaryFile();

bool autoRemove() const;
void setAutoRemove(bool b);


bool open() { return open(QIODevice::ReadWrite); }

QString fileName() const;
QString fileTemplate() const;
void setFileTemplate(const QString &name);

# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
 inline static QTemporaryFile *createLocalFile(const QString &fileName)
{ return createNativeFile(fileName); }
 inline static QTemporaryFile *createLocalFile(QFile &file)
{ return createNativeFile(file); }

# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"
inline static QTemporaryFile *createNativeFile(const QString &fileName)
{ QFile file(fileName); return createNativeFile(file); }
static QTemporaryFile *createNativeFile(QFile &file);

protected:
bool open(OpenMode flags);

private:
friend class QFile;
friend class QLockFilePrivate;
QTemporaryFile(const QTemporaryFile &) ; QTemporaryFile &operator=(const QTemporaryFile &) ;
};



# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtemporaryfile.h"



# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"




























































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"



class QUrlQuery;
class QUrlPrivate;
class QDataStream;

template <typename E1, typename E2>
class QUrlTwoFlags
{
int i;
typedef int QUrlTwoFlags:: *Zero;
public:
 inline QUrlTwoFlags(E1 f) : i(f) {}
 inline QUrlTwoFlags(E2 f) : i(f) {}
 inline QUrlTwoFlags(QFlag f) : i(f) {}
 inline QUrlTwoFlags(QFlags<E1> f) : i(f.operator int()) {}
 inline QUrlTwoFlags(QFlags<E2> f) : i(f.operator int()) {}
 inline QUrlTwoFlags(Zero = 0) : i(0) {}

inline QUrlTwoFlags &operator&=(int mask) { i &= mask; return *this; }
inline QUrlTwoFlags &operator&=(uint mask) { i &= mask; return *this; }
inline QUrlTwoFlags &operator|=(QUrlTwoFlags f) { i |= f.i; return *this; }
inline QUrlTwoFlags &operator|=(E1 f) { i |= f; return *this; }
inline QUrlTwoFlags &operator|=(E2 f) { i |= f; return *this; }
inline QUrlTwoFlags &operator^=(QUrlTwoFlags f) { i ^= f.i; return *this; }
inline QUrlTwoFlags &operator^=(E1 f) { i ^= f; return *this; }
inline QUrlTwoFlags &operator^=(E2 f) { i ^= f; return *this; }

 inline operator QFlags<E1>() const { return E1(i); }
 inline operator QFlags<E2>() const { return E2(i); }
 inline operator int() const { return i; }
 inline bool operator!() const { return !i; }

 inline QUrlTwoFlags operator|(QUrlTwoFlags f) const
{ return QUrlTwoFlags(E1(i | f.i)); }
 inline QUrlTwoFlags operator|(E1 f) const
{ return QUrlTwoFlags(E1(i | f)); }
 inline QUrlTwoFlags operator|(E2 f) const
{ return QUrlTwoFlags(E2(i | f)); }
 inline QUrlTwoFlags operator^(QUrlTwoFlags f) const
{ return QUrlTwoFlags(E1(i ^ f.i)); }
 inline QUrlTwoFlags operator^(E1 f) const
{ return QUrlTwoFlags(E1(i ^ f)); }
 inline QUrlTwoFlags operator^(E2 f) const
{ return QUrlTwoFlags(E2(i ^ f)); }
 inline QUrlTwoFlags operator&(int mask) const
{ return QUrlTwoFlags(E1(i & mask)); }
 inline QUrlTwoFlags operator&(uint mask) const
{ return QUrlTwoFlags(E1(i & mask)); }
 inline QUrlTwoFlags operator&(E1 f) const
{ return QUrlTwoFlags(E1(i & f)); }
 inline QUrlTwoFlags operator&(E2 f) const
{ return QUrlTwoFlags(E2(i & f)); }
 inline QUrlTwoFlags operator~() const
{ return QUrlTwoFlags(E1(~i)); }

inline bool testFlag(E1 f) const { return (i & f) == f && (f != 0 || i == int(f)); }
inline bool testFlag(E2 f) const { return (i & f) == f && (f != 0 || i == int(f)); }
};

template<typename E1, typename E2>
class QTypeInfo<QUrlTwoFlags<E1, E2> > : public QTypeInfoMerger<QUrlTwoFlags<E1, E2>, E1, E2> {};

class QUrl;

 uint qHash(const QUrl &url, uint seed = 0) ;

class  QUrl
{
public:
enum ParsingMode {
TolerantMode,
StrictMode,
DecodedMode
};


enum UrlFormattingOption {
None = 0x0,
RemoveScheme = 0x1,
RemovePassword = 0x2,
RemoveUserInfo = RemovePassword | 0x4,
RemovePort = 0x8,
RemoveAuthority = RemoveUserInfo | RemovePort | 0x10,
RemovePath = 0x20,
RemoveQuery = 0x40,
RemoveFragment = 0x80,

PreferLocalFile = 0x200,
StripTrailingSlash = 0x400
};

enum ComponentFormattingOption {
PrettyDecoded = 0x000000,
EncodeSpaces = 0x100000,
EncodeUnicode = 0x200000,
EncodeDelimiters = 0x400000 | 0x800000,
EncodeReserved = 0x1000000,
DecodeReserved = 0x2000000,


FullyEncoded = EncodeSpaces | EncodeUnicode | EncodeDelimiters | EncodeReserved,
FullyDecoded = FullyEncoded | DecodeReserved | 0x4000000
};
typedef QFlags<ComponentFormattingOption> ComponentFormattingOptions;



# 162 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
typedef QUrlTwoFlags<UrlFormattingOption, ComponentFormattingOption> FormattingOptions;


# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
QUrl();
QUrl(const QUrl &copy);
QUrl &operator =(const QUrl &copy);



# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
QUrl(const QString &url, ParsingMode mode = TolerantMode);
QUrl &operator=(const QString &url);







# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
~QUrl();

inline void swap(QUrl &other) { qSwap(d, other.d); }

void setUrl(const QString &url, ParsingMode mode = TolerantMode);
QString url(FormattingOptions options = FormattingOptions(PrettyDecoded)) const;
QString toString(FormattingOptions options = FormattingOptions(PrettyDecoded)) const;
QString toDisplayString(FormattingOptions options = FormattingOptions(PrettyDecoded)) const;

QByteArray toEncoded(FormattingOptions options = FullyEncoded) const;
static QUrl fromEncoded(const QByteArray &url, ParsingMode mode = TolerantMode);

static QUrl fromUserInput(const QString &userInput);

bool isValid() const;
QString errorString() const;

bool isEmpty() const;
void clear();

void setScheme(const QString &scheme);
QString scheme() const;

void setAuthority(const QString &authority, ParsingMode mode = TolerantMode);
QString authority(ComponentFormattingOptions options = PrettyDecoded) const;

void setUserInfo(const QString &userInfo, ParsingMode mode = TolerantMode);
QString userInfo(ComponentFormattingOptions options = PrettyDecoded) const;

void setUserName(const QString &userName, ParsingMode mode = TolerantMode);
QString userName(ComponentFormattingOptions options = PrettyDecoded) const;

void setPassword(const QString &password, ParsingMode mode = TolerantMode);
QString password(ComponentFormattingOptions = PrettyDecoded) const;

void setHost(const QString &host, ParsingMode mode = TolerantMode);
QString host(ComponentFormattingOptions = PrettyDecoded) const;
QString topLevelDomain(ComponentFormattingOptions options = PrettyDecoded) const;

void setPort(int port);
int port(int defaultPort = -1) const;

void setPath(const QString &path, ParsingMode mode = TolerantMode);
QString path(ComponentFormattingOptions options = PrettyDecoded) const;

bool hasQuery() const;
void setQuery(const QString &query, ParsingMode mode = TolerantMode);
void setQuery(const QUrlQuery &query);
QString query(ComponentFormattingOptions = PrettyDecoded) const;

bool hasFragment() const;
QString fragment(ComponentFormattingOptions options = PrettyDecoded) const;
void setFragment(const QString &fragment, ParsingMode mode = TolerantMode);

QUrl resolved(const QUrl &relative) const;

bool isRelative() const;
bool isParentOf(const QUrl &url) const;

bool isLocalFile() const;
static QUrl fromLocalFile(const QString &localfile);
QString toLocalFile() const;

void detach();
bool isDetached() const;

bool operator <(const QUrl &url) const;
bool operator ==(const QUrl &url) const;
bool operator !=(const QUrl &url) const;

static QString fromPercentEncoding(const QByteArray &);
static QByteArray toPercentEncoding(const QString &,
const QByteArray &exclude = QByteArray(),
const QByteArray &include = QByteArray());


































































# 320 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
private:
static QString fromEncodedComponent_helper(const QByteArray &ba);

public:
static QString fromAce(const QByteArray &);
static QByteArray toAce(const QString &);
static QStringList idnWhitelist();
static QStringList toStringList(const QList<QUrl> &uris, FormattingOptions options = FormattingOptions(PrettyDecoded));
static QList<QUrl> fromStringList(const QStringList &uris, ParsingMode mode = TolerantMode);

static void setIdnWhitelist(const QStringList &);
friend  uint qHash(const QUrl &url, uint seed) ;

private:
QUrlPrivate *d;
friend class QUrlQuery;

public:
typedef QUrlPrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template<> class QTypeInfo<QUrl > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QUrl)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QUrl) }; static inline const char *name() { return "QUrl"; } }; template <> inline void qSwap<QUrl>(QUrl &value1, QUrl &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QUrl>(::QUrl &value1, ::QUrl &value2) { value1.swap(value2); } } 
 inline QFlags<QUrl::ComponentFormattingOptions::enum_type> operator|(QUrl::ComponentFormattingOptions::enum_type f1, QUrl::ComponentFormattingOptions::enum_type f2) { return QFlags<QUrl::ComponentFormattingOptions::enum_type>(f1) | f2; }  inline QFlags<QUrl::ComponentFormattingOptions::enum_type> operator|(QUrl::ComponentFormattingOptions::enum_type f1, QFlags<QUrl::ComponentFormattingOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QUrl::ComponentFormattingOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


 inline QUrl::FormattingOptions operator|(QUrl::UrlFormattingOption f1, QUrl::UrlFormattingOption f2)
{ return QUrl::FormattingOptions(f1) | f2; }
 inline QUrl::FormattingOptions operator|(QUrl::UrlFormattingOption f1, QUrl::FormattingOptions f2)
{ return f2 | f1; }
 inline QIncompatibleFlag operator|(QUrl::UrlFormattingOption f1, int f2)
{ return QIncompatibleFlag(int(f1) | f2); }


inline QUrl::FormattingOptions &operator|=(QUrl::FormattingOptions &i, QUrl::ComponentFormattingOptions f)
{ i |= QUrl::UrlFormattingOption(int(f)); return i; }
 inline QUrl::FormattingOptions operator|(QUrl::UrlFormattingOption i, QUrl::ComponentFormattingOption f)
{ return i | QUrl::UrlFormattingOption(int(f)); }
 inline QUrl::FormattingOptions operator|(QUrl::UrlFormattingOption i, QUrl::ComponentFormattingOptions f)
{ return i | QUrl::UrlFormattingOption(int(f)); }
 inline QUrl::FormattingOptions operator|(QUrl::ComponentFormattingOption f, QUrl::UrlFormattingOption i)
{ return i | QUrl::UrlFormattingOption(int(f)); }
 inline QUrl::FormattingOptions operator|(QUrl::ComponentFormattingOptions f, QUrl::UrlFormattingOption i)
{ return i | QUrl::UrlFormattingOption(int(f)); }
 inline QUrl::FormattingOptions operator|(QUrl::FormattingOptions i, QUrl::ComponentFormattingOptions f)
{ return i | QUrl::UrlFormattingOption(int(f)); }
 inline QUrl::FormattingOptions operator|(QUrl::ComponentFormattingOption f, QUrl::FormattingOptions i)
{ return i | QUrl::UrlFormattingOption(int(f)); }
 inline QUrl::FormattingOptions operator|(QUrl::ComponentFormattingOptions f, QUrl::FormattingOptions i)
{ return i | QUrl::UrlFormattingOption(int(f)); }





# 375 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
 QDataStream &operator<<(QDataStream &, const QUrl &);
 QDataStream &operator>>(QDataStream &, QUrl &);



# 380 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"
 QDebug operator<<(QDebug, const QUrl &);


# 383 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"







# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"






# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"


class QUrlQueryPrivate;
class  QUrlQuery
{
public:
QUrlQuery();
explicit QUrlQuery(const QUrl &url);
explicit QUrlQuery(const QString &queryString);
QUrlQuery(const QUrlQuery &other);
QUrlQuery &operator=(const QUrlQuery &other);




# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"
~QUrlQuery();

bool operator==(const QUrlQuery &other) const;
bool operator!=(const QUrlQuery &other) const
{ return !(*this == other); }

void swap(QUrlQuery &other) { qSwap(d, other.d); }

bool isEmpty() const;
bool isDetached() const;
void clear();

QString query(QUrl::ComponentFormattingOptions encoding = QUrl::PrettyDecoded) const;
void setQuery(const QString &queryString);
QString toString(QUrl::ComponentFormattingOptions encoding = QUrl::PrettyDecoded) const
{ return query(encoding); }

void setQueryDelimiters(QChar valueDelimiter, QChar pairDelimiter);
QChar queryValueDelimiter() const;
QChar queryPairDelimiter() const;

void setQueryItems(const QList<QPair<QString, QString> > &query);
QList<QPair<QString, QString> > queryItems(QUrl::ComponentFormattingOptions encoding = QUrl::PrettyDecoded) const;

bool hasQueryItem(const QString &key) const;
void addQueryItem(const QString &key, const QString &value);
void removeQueryItem(const QString &key);
QString queryItemValue(const QString &key, QUrl::ComponentFormattingOptions encoding = QUrl::PrettyDecoded) const;
QStringList allQueryItemValues(const QString &key, QUrl::ComponentFormattingOptions encoding = QUrl::PrettyDecoded) const;
void removeAllQueryItems(const QString &key);

static QChar defaultQueryValueDelimiter()
{ return QChar(ushort('=')); }
static QChar defaultQueryPairDelimiter()
{ return QChar(ushort('&')); }

private:
friend class QUrl;
QSharedDataPointer<QUrlQueryPrivate> d;
public:
typedef QSharedDataPointer<QUrlQueryPrivate> DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template<> class QTypeInfo<QUrlQuery > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QUrlQuery)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QUrlQuery) }; static inline const char *name() { return "QUrlQuery"; } }; template <> inline void qSwap<QUrlQuery>(QUrlQuery &value1, QUrlQuery &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QUrlQuery>(::QUrlQuery &value1, ::QUrlQuery &value2) { value1.swap(value2); } } 



























































# 172 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurlquery.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"



class QAbstractItemModel;
class QPersistentModelIndex;

class  QModelIndex
{
friend class QAbstractItemModel;
public:
 inline QModelIndex() : r(-1), c(-1), i(0), m(0) {}

 inline int row() const { return r; }
 inline int column() const { return c; }
 inline quintptr internalId() const { return i; }
inline void *internalPointer() const { return reinterpret_cast<void*>(i); }
inline QModelIndex parent() const;
inline QModelIndex sibling(int row, int column) const;
inline QModelIndex child(int row, int column) const;
inline QVariant data(int role = Qt::DisplayRole) const;
inline Qt::ItemFlags flags() const;
 inline const QAbstractItemModel *model() const { return m; }
 inline bool isValid() const { return (r >= 0) && (c >= 0) && (m != 0); }
 inline bool operator==(const QModelIndex &other) const
{ return (other.r == r) && (other.i == i) && (other.c == c) && (other.m == m); }
 inline bool operator!=(const QModelIndex &other) const
{ return !(*this == other); }
 inline bool operator<(const QModelIndex &other) const
{
return r < other.r
|| (r == other.r && (c < other.c
|| (c == other.c && (i < other.i
|| (i == other.i && m < other.m )))));
}
private:
inline QModelIndex(int arow, int acolumn, void *ptr, const QAbstractItemModel *amodel)
: r(arow), c(acolumn), i(reinterpret_cast<quintptr>(ptr)), m(amodel) {}
 inline QModelIndex(int arow, int acolumn, quintptr id, const QAbstractItemModel *amodel)
: r(arow), c(acolumn), i(id), m(amodel) {}
int r, c;
quintptr i;
const QAbstractItemModel *m;
};
template<> class QTypeInfo<QModelIndex > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QModelIndex)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QModelIndex) }; static inline const char *name() { return "QModelIndex"; } };


# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
 QDebug operator<<(QDebug, const QModelIndex &);


# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
class QPersistentModelIndexData;


uint qHash(const QPersistentModelIndex &index, uint seed = 0);

class  QPersistentModelIndex
{
public:
QPersistentModelIndex();
QPersistentModelIndex(const QModelIndex &index);
QPersistentModelIndex(const QPersistentModelIndex &other);
~QPersistentModelIndex();
bool operator<(const QPersistentModelIndex &other) const;
bool operator==(const QPersistentModelIndex &other) const;
inline bool operator!=(const QPersistentModelIndex &other) const
{ return !operator==(other); }
QPersistentModelIndex &operator=(const QPersistentModelIndex &other);
inline void swap(QPersistentModelIndex &other) { qSwap(d, other.d); }
bool operator==(const QModelIndex &other) const;
bool operator!=(const QModelIndex &other) const;
QPersistentModelIndex &operator=(const QModelIndex &other);
operator const QModelIndex&() const;
int row() const;
int column() const;
void *internalPointer() const;
quintptr internalId() const;
QModelIndex parent() const;
QModelIndex sibling(int row, int column) const;
QModelIndex child(int row, int column) const;
QVariant data(int role = Qt::DisplayRole) const;
Qt::ItemFlags flags() const;
const QAbstractItemModel *model() const;
bool isValid() const;
private:
QPersistentModelIndexData *d;
friend uint qHash(const QPersistentModelIndex &, uint seed);

# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
friend  QDebug operator<<(QDebug, const QPersistentModelIndex &);

# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
};
template<> class QTypeInfo<QPersistentModelIndex > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPersistentModelIndex)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPersistentModelIndex) }; static inline const char *name() { return "QPersistentModelIndex"; } }; template <> inline void qSwap<QPersistentModelIndex>(QPersistentModelIndex &value1, QPersistentModelIndex &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QPersistentModelIndex>(::QPersistentModelIndex &value1, ::QPersistentModelIndex &value2) { value1.swap(value2); } } 

inline uint qHash(const QPersistentModelIndex &index, uint seed)
{ return qHash(index.d, seed); }



# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
 QDebug operator<<(QDebug, const QPersistentModelIndex &);


# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
template<typename T> class QList;
typedef QList<QModelIndex> QModelIndexList;

class QMimeData;
class QAbstractItemModelPrivate;
template <class Key, class T> class QMap;


class  QAbstractItemModel : public QObject
{
Q_OBJECT
Q_ENUMS(LayoutChangeHint)

friend class QPersistentModelIndexData;
friend class QAbstractItemViewPrivate;
friend class QIdentityProxyModel;
public:

explicit QAbstractItemModel(QObject *parent = 0);
virtual ~QAbstractItemModel();

bool hasIndex(int row, int column, const QModelIndex &parent = QModelIndex()) const;
virtual QModelIndex index(int row, int column,
const QModelIndex &parent = QModelIndex()) const = 0;
virtual QModelIndex parent(const QModelIndex &child) const = 0;

virtual QModelIndex sibling(int row, int column, const QModelIndex &idx) const;
virtual int rowCount(const QModelIndex &parent = QModelIndex()) const = 0;
virtual int columnCount(const QModelIndex &parent = QModelIndex()) const = 0;
virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;

virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const = 0;
virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

virtual QVariant headerData(int section, Qt::Orientation orientation,
int role = Qt::DisplayRole) const;
virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role = Qt::EditRole);

virtual QMap<int, QVariant> itemData(const QModelIndex &index) const;
virtual bool setItemData(const QModelIndex &index, const QMap<int, QVariant> &roles);

virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QModelIndexList &indexes) const;
virtual bool canDropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent) const;
virtual bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
virtual Qt::DropActions supportedDropActions() const;

virtual Qt::DropActions supportedDragActions() const;





# 205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
virtual bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
virtual bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
virtual bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
virtual bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());
virtual bool moveRows(const QModelIndex &sourceParent, int sourceRow, int count,
const QModelIndex &destinationParent, int destinationChild);
virtual bool moveColumns(const QModelIndex &sourceParent, int sourceColumn, int count,
const QModelIndex &destinationParent, int destinationChild);

inline bool insertRow(int row, const QModelIndex &parent = QModelIndex());
inline bool insertColumn(int column, const QModelIndex &parent = QModelIndex());
inline bool removeRow(int row, const QModelIndex &parent = QModelIndex());
inline bool removeColumn(int column, const QModelIndex &parent = QModelIndex());
inline bool moveRow(const QModelIndex &sourceParent, int sourceRow,
const QModelIndex &destinationParent, int destinationChild);
inline bool moveColumn(const QModelIndex &sourceParent, int sourceColumn,
const QModelIndex &destinationParent, int destinationChild);

virtual void fetchMore(const QModelIndex &parent);
virtual bool canFetchMore(const QModelIndex &parent) const;
virtual Qt::ItemFlags flags(const QModelIndex &index) const;
virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
virtual QModelIndex buddy(const QModelIndex &index) const;
virtual QModelIndexList match(const QModelIndex &start, int role,
const QVariant &value, int hits = 1,
Qt::MatchFlags flags =
Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
virtual QSize span(const QModelIndex &index) const;

virtual QHash<int,QByteArray> roleNames() const;


# 237 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
enum LayoutChangeHint
{
NoLayoutChangeHint,
VerticalSortHint,
HorizontalSortHint
};

signals:
void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>());
void headerDataChanged(Qt::Orientation orientation, int first, int last);
void layoutChanged(const QList<QPersistentModelIndex> &parents = QList<QPersistentModelIndex>(), QAbstractItemModel::LayoutChangeHint hint = QAbstractItemModel::NoLayoutChangeHint);
void layoutAboutToBeChanged(const QList<QPersistentModelIndex> &parents = QList<QPersistentModelIndex>(), QAbstractItemModel::LayoutChangeHint hint = QAbstractItemModel::NoLayoutChangeHint);

void rowsAboutToBeInserted(const QModelIndex &parent, int first, int last

# 257 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 259 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void rowsInserted(const QModelIndex &parent, int first, int last

# 262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 264 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

void rowsAboutToBeRemoved(const QModelIndex &parent, int first, int last

# 268 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 270 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void rowsRemoved(const QModelIndex &parent, int first, int last

# 273 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

void columnsAboutToBeInserted(const QModelIndex &parent, int first, int last

# 279 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 281 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void columnsInserted(const QModelIndex &parent, int first, int last

# 284 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 286 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

void columnsAboutToBeRemoved(const QModelIndex &parent, int first, int last

# 290 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 292 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void columnsRemoved(const QModelIndex &parent, int first, int last

# 295 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 297 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

void modelAboutToBeReset(

# 301 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
QPrivateSignal

# 303 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void modelReset(

# 306 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
QPrivateSignal

# 308 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

void rowsAboutToBeMoved( const QModelIndex &sourceParent, int sourceStart, int sourceEnd, const QModelIndex &destinationParent, int destinationRow

# 312 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 314 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void rowsMoved( const QModelIndex &parent, int start, int end, const QModelIndex &destination, int row

# 317 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

void columnsAboutToBeMoved( const QModelIndex &sourceParent, int sourceStart, int sourceEnd, const QModelIndex &destinationParent, int destinationColumn

# 323 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 325 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);
void columnsMoved( const QModelIndex &parent, int start, int end, const QModelIndex &destination, int column

# 328 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
, QPrivateSignal

# 330 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
);

public slots:
virtual bool submit();
virtual void revert();

protected slots:

void resetInternalData();

protected:
QAbstractItemModel(QAbstractItemModelPrivate &dd, QObject *parent = 0);

inline QModelIndex createIndex(int row, int column, void *data = 0) const;
inline QModelIndex createIndex(int row, int column, quintptr id) const;

void encodeData(const QModelIndexList &indexes, QDataStream &stream) const;
bool decodeData(int row, int column, const QModelIndex &parent, QDataStream &stream);

void beginInsertRows(const QModelIndex &parent, int first, int last);
void endInsertRows();

void beginRemoveRows(const QModelIndex &parent, int first, int last);
void endRemoveRows();

bool beginMoveRows(const QModelIndex &sourceParent, int sourceFirst, int sourceLast, const QModelIndex &destinationParent, int destinationRow);
void endMoveRows();

void beginInsertColumns(const QModelIndex &parent, int first, int last);
void endInsertColumns();

void beginRemoveColumns(const QModelIndex &parent, int first, int last);
void endRemoveColumns();

bool beginMoveColumns(const QModelIndex &sourceParent, int sourceFirst, int sourceLast, const QModelIndex &destinationParent, int destinationColumn);
void endMoveColumns();










# 376 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
void beginResetModel();
void endResetModel();

void changePersistentIndex(const QModelIndex &from, const QModelIndex &to);
void changePersistentIndexList(const QModelIndexList &from, const QModelIndexList &to);
QModelIndexList persistentIndexList() const;








# 390 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"
private:
void doSetRoleNames(const QHash<int,QByteArray> &roleNames);
void doSetSupportedDragActions(Qt::DropActions actions);

inline QAbstractItemModelPrivate* d_func() { return reinterpret_cast<QAbstractItemModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractItemModelPrivate* d_func() const { return reinterpret_cast<const QAbstractItemModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractItemModelPrivate;
QAbstractItemModel(const QAbstractItemModel &) ; QAbstractItemModel &operator=(const QAbstractItemModel &) ;
};

inline bool QAbstractItemModel::insertRow(int arow, const QModelIndex &aparent)
{ return insertRows(arow, 1, aparent); }
inline bool QAbstractItemModel::insertColumn(int acolumn, const QModelIndex &aparent)
{ return insertColumns(acolumn, 1, aparent); }
inline bool QAbstractItemModel::removeRow(int arow, const QModelIndex &aparent)
{ return removeRows(arow, 1, aparent); }
inline bool QAbstractItemModel::removeColumn(int acolumn, const QModelIndex &aparent)
{ return removeColumns(acolumn, 1, aparent); }
inline bool QAbstractItemModel::moveRow(const QModelIndex &sourceParent, int sourceRow,
const QModelIndex &destinationParent, int destinationChild)
{ return moveRows(sourceParent, sourceRow, 1, destinationParent, destinationChild); }
inline bool QAbstractItemModel::moveColumn(const QModelIndex &sourceParent, int sourceColumn,
const QModelIndex &destinationParent, int destinationChild)
{ return moveColumns(sourceParent, sourceColumn, 1, destinationParent, destinationChild); }
inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, void *adata) const
{ return QModelIndex(arow, acolumn, adata, this); }
inline QModelIndex QAbstractItemModel::createIndex(int arow, int acolumn, quintptr aid) const
{ return QModelIndex(arow, acolumn, aid, this); }

class  QAbstractTableModel : public QAbstractItemModel
{
Q_OBJECT

public:
explicit QAbstractTableModel(QObject *parent = 0);
~QAbstractTableModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);

Qt::ItemFlags flags(const QModelIndex &index) const ;
protected:
QAbstractTableModel(QAbstractItemModelPrivate &dd, QObject *parent);

private:
QAbstractTableModel(const QAbstractTableModel &) ; QAbstractTableModel &operator=(const QAbstractTableModel &) ;
QModelIndex parent(const QModelIndex &child) const;
bool hasChildren(const QModelIndex &parent) const;
};

class  QAbstractListModel : public QAbstractItemModel
{
Q_OBJECT

public:
explicit QAbstractListModel(QObject *parent = 0);
~QAbstractListModel();

QModelIndex index(int row, int column = 0, const QModelIndex &parent = QModelIndex()) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);

Qt::ItemFlags flags(const QModelIndex &index) const ;
protected:
QAbstractListModel(QAbstractItemModelPrivate &dd, QObject *parent);

private:
QAbstractListModel(const QAbstractListModel &) ; QAbstractListModel &operator=(const QAbstractListModel &) ;
QModelIndex parent(const QModelIndex &child) const;
int columnCount(const QModelIndex &parent) const;
bool hasChildren(const QModelIndex &parent) const;
};



inline QModelIndex QModelIndex::parent() const
{ return m ? m->parent(*this) : QModelIndex(); }

inline QModelIndex QModelIndex::sibling(int arow, int acolumn) const
{ return m ? (r == arow && c == acolumn) ? *this : m->sibling(arow, acolumn, *this) : QModelIndex(); }

inline QModelIndex QModelIndex::child(int arow, int acolumn) const
{ return m ? m->index(arow, acolumn, *this) : QModelIndex(); }

inline QVariant QModelIndex::data(int arole) const
{ return m ? m->data(*this, arole) : QVariant(); }

inline Qt::ItemFlags QModelIndex::flags() const
{ return m ? m->flags(*this) : Qt::ItemFlags(0); }

inline uint qHash(const QModelIndex &index)
{ return uint((index.row() << 4) + index.column() + index.internalId()); }




# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"
class QAbstractProxyModelPrivate;
class QItemSelection;

class  QAbstractProxyModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(QAbstractItemModel* sourceModel READ sourceModel WRITE setSourceModel NOTIFY sourceModelChanged)

public:
explicit QAbstractProxyModel(QObject *parent = 0);
~QAbstractProxyModel();

virtual void setSourceModel(QAbstractItemModel *sourceModel);
QAbstractItemModel *sourceModel() const;

virtual QModelIndex mapToSource(const QModelIndex &proxyIndex) const = 0;
virtual QModelIndex mapFromSource(const QModelIndex &sourceIndex) const = 0;

virtual QItemSelection mapSelectionToSource(const QItemSelection &selection) const;
virtual QItemSelection mapSelectionFromSource(const QItemSelection &selection) const;

bool submit();
void revert();

QVariant data(const QModelIndex &proxyIndex, int role = Qt::DisplayRole) const;
QVariant headerData(int section, Qt::Orientation orientation, int role) const;
QMap<int, QVariant> itemData(const QModelIndex &index) const;
Qt::ItemFlags flags(const QModelIndex &index) const;

bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
bool setItemData(const QModelIndex& index, const QMap<int, QVariant> &roles);
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole);

QModelIndex buddy(const QModelIndex &index) const;
bool canFetchMore(const QModelIndex &parent) const;
void fetchMore(const QModelIndex &parent);
void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
QSize span(const QModelIndex &index) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
QModelIndex sibling(int row, int column, const QModelIndex &idx) const;

QMimeData* mimeData(const QModelIndexList &indexes) const;
QStringList mimeTypes() const;
Qt::DropActions supportedDropActions() const;

signals:
void sourceModelChanged(

# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"
QPrivateSignal

# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"
);

protected slots:
void resetInternalData();

protected:
QAbstractProxyModel(QAbstractProxyModelPrivate &, QObject *parent);

private:
inline QAbstractProxyModelPrivate* d_func() { return reinterpret_cast<QAbstractProxyModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractProxyModelPrivate* d_func() const { return reinterpret_cast<const QAbstractProxyModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractProxyModelPrivate;
QAbstractProxyModel(const QAbstractProxyModel &) ; QAbstractProxyModel &operator=(const QAbstractProxyModel &) ;

};



# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"



# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qidentityproxymodel.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"
























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qidentityproxymodel.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qidentityproxymodel.h"



class QIdentityProxyModelPrivate;

class  QIdentityProxyModel : public QAbstractProxyModel
{
Q_OBJECT
public:
explicit QIdentityProxyModel(QObject* parent = 0);
~QIdentityProxyModel();

int columnCount(const QModelIndex& parent = QModelIndex()) const;
QModelIndex index(int row, int column, const QModelIndex& parent = QModelIndex()) const;
QModelIndex mapFromSource(const QModelIndex& sourceIndex) const;
QModelIndex mapToSource(const QModelIndex& proxyIndex) const;
QModelIndex parent(const QModelIndex& child) const;
int rowCount(const QModelIndex& parent = QModelIndex()) const;
QVariant headerData(int section, Qt::Orientation orientation, int role) const;
bool dropMimeData(const QMimeData* data, Qt::DropAction action, int row, int column, const QModelIndex& parent);
QModelIndex sibling(int row, int column, const QModelIndex &idx) const;

QItemSelection mapSelectionFromSource(const QItemSelection& selection) const;
QItemSelection mapSelectionToSource(const QItemSelection& selection) const;
QModelIndexList match(const QModelIndex& start, int role, const QVariant& value, int hits = 1, Qt::MatchFlags flags = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
void setSourceModel(QAbstractItemModel* sourceModel);

bool insertColumns(int column, int count, const QModelIndex& parent = QModelIndex());
bool insertRows(int row, int count, const QModelIndex& parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex& parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex& parent = QModelIndex());

protected:
QIdentityProxyModel(QIdentityProxyModelPrivate &dd, QObject* parent);

private:
inline QIdentityProxyModelPrivate* d_func() { return reinterpret_cast<QIdentityProxyModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QIdentityProxyModelPrivate* d_func() const { return reinterpret_cast<const QIdentityProxyModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QIdentityProxyModelPrivate;
QIdentityProxyModel(const QIdentityProxyModel &) ; QIdentityProxyModel &operator=(const QIdentityProxyModel &) ;






















};







# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"















































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"
class  QItemSelectionRange
{

public:
inline QItemSelectionRange() {}
inline QItemSelectionRange(const QItemSelectionRange &other)
: tl(other.tl), br(other.br) {}
inline QItemSelectionRange(const QModelIndex &topLeft, const QModelIndex &bottomRight);
explicit inline QItemSelectionRange(const QModelIndex &index)
{ tl = index; br = tl; }

inline int top() const { return tl.row(); }
inline int left() const { return tl.column(); }
inline int bottom() const { return br.row(); }
inline int right() const { return br.column(); }
inline int width() const { return br.column() - tl.column() + 1; }
inline int height() const { return br.row() - tl.row() + 1; }

inline const QPersistentModelIndex &topLeft() const { return tl; }
inline const QPersistentModelIndex &bottomRight() const { return br; }
inline QModelIndex parent() const { return tl.parent(); }
inline const QAbstractItemModel *model() const { return tl.model(); }

inline bool contains(const QModelIndex &index) const
{
return (parent() == index.parent()
&& tl.row() <= index.row() && tl.column() <= index.column()
&& br.row() >= index.row() && br.column() >= index.column());
}

inline bool contains(int row, int column, const QModelIndex &parentIndex) const
{
return (parent() == parentIndex
&& tl.row() <= row && tl.column() <= column
&& br.row() >= row && br.column() >= column);
}

bool intersects(const QItemSelectionRange &other) const;




# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"
QItemSelectionRange intersected(const QItemSelectionRange &other) const;


inline bool operator==(const QItemSelectionRange &other) const
{ return (tl == other.tl && br == other.br); }
inline bool operator!=(const QItemSelectionRange &other) const
{ return !operator==(other); }
inline bool operator<(const QItemSelectionRange &other) const
{


if (other.tl.model() == tl.model()) {

const QModelIndex topLeftParent = tl.parent();
const QModelIndex otherTopLeftParent = other.tl.parent();
if (topLeftParent == otherTopLeftParent) {
if (other.tl.row() == tl.row()) {
if (other.tl.column() == tl.column()) {
if (other.br.row() == br.row()) {
return br.column() < other.br.column();
}
return br.row() < other.br.row();
}
return tl.column() < other.tl.column();
}
return tl.row() < other.tl.row();
}
return topLeftParent < otherTopLeftParent;
}
return tl.model() < other.tl.model();
}

inline bool isValid() const
{
return (tl.isValid() && br.isValid() && tl.parent() == br.parent()
&& top() <= bottom() && left() <= right());
}

bool isEmpty() const;

QModelIndexList indexes() const;

private:
QPersistentModelIndex tl, br;
};
template<> class QTypeInfo<QItemSelectionRange > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QItemSelectionRange)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QItemSelectionRange) }; static inline const char *name() { return "QItemSelectionRange"; } };

inline QItemSelectionRange::QItemSelectionRange(const QModelIndex &atopLeft,
const QModelIndex &abottomRight)
{ tl = atopLeft; br = abottomRight; }

class QItemSelection;
class QItemSelectionModelPrivate;

class  QItemSelectionModel : public QObject
{
Q_OBJECT
inline QItemSelectionModelPrivate* d_func() { return reinterpret_cast<QItemSelectionModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QItemSelectionModelPrivate* d_func() const { return reinterpret_cast<const QItemSelectionModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QItemSelectionModelPrivate;


public:

enum SelectionFlag {
NoUpdate = 0x0000,
Clear = 0x0001,
Select = 0x0002,
Deselect = 0x0004,
Toggle = 0x0008,
Current = 0x0010,
Rows = 0x0020,
Columns = 0x0040,
SelectCurrent = Select | Current,
ToggleCurrent = Toggle | Current,
ClearAndSelect = Clear | Select
};

typedef QFlags<SelectionFlag> SelectionFlags;

explicit QItemSelectionModel(QAbstractItemModel *model);
explicit QItemSelectionModel(QAbstractItemModel *model, QObject *parent);
virtual ~QItemSelectionModel();

QModelIndex currentIndex() const;

bool isSelected(const QModelIndex &index) const;
bool isRowSelected(int row, const QModelIndex &parent) const;
bool isColumnSelected(int column, const QModelIndex &parent) const;

bool rowIntersectsSelection(int row, const QModelIndex &parent) const;
bool columnIntersectsSelection(int column, const QModelIndex &parent) const;

bool hasSelection() const;

QModelIndexList selectedIndexes() const;
QModelIndexList selectedRows(int column = 0) const;
QModelIndexList selectedColumns(int row = 0) const;
const QItemSelection selection() const;

const QAbstractItemModel *model() const;

public slots:
virtual void setCurrentIndex(const QModelIndex &index, QItemSelectionModel::SelectionFlags command);
virtual void select(const QModelIndex &index, QItemSelectionModel::SelectionFlags command);
virtual void select(const QItemSelection &selection, QItemSelectionModel::SelectionFlags command);
virtual void clear();
virtual void reset();

void clearSelection();
virtual void clearCurrentIndex();

signals:
void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);
void currentRowChanged(const QModelIndex &current, const QModelIndex &previous);
void currentColumnChanged(const QModelIndex &current, const QModelIndex &previous);

protected:
QItemSelectionModel(QItemSelectionModelPrivate &dd, QAbstractItemModel *model);
void emitSelectionChanged(const QItemSelection &newSelection, const QItemSelection &oldSelection);

private:
QItemSelectionModel(const QItemSelectionModel &) ; QItemSelectionModel &operator=(const QItemSelectionModel &) ;






};

 inline QFlags<QItemSelectionModel::SelectionFlags::enum_type> operator|(QItemSelectionModel::SelectionFlags::enum_type f1, QItemSelectionModel::SelectionFlags::enum_type f2) { return QFlags<QItemSelectionModel::SelectionFlags::enum_type>(f1) | f2; }  inline QFlags<QItemSelectionModel::SelectionFlags::enum_type> operator|(QItemSelectionModel::SelectionFlags::enum_type f1, QFlags<QItemSelectionModel::SelectionFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QItemSelectionModel::SelectionFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


inline uint qHash(const QItemSelectionRange &) { return 0; }

class  QItemSelection : public QList<QItemSelectionRange>
{
public:
QItemSelection() {}
QItemSelection(const QModelIndex &topLeft, const QModelIndex &bottomRight);
void select(const QModelIndex &topLeft, const QModelIndex &bottomRight);
bool contains(const QModelIndex &index) const;
QModelIndexList indexes() const;
void merge(const QItemSelection &other, QItemSelectionModel::SelectionFlags command);
static void split(const QItemSelectionRange &range,
const QItemSelectionRange &other,
QItemSelection *result);
};


# 247 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"
 QDebug operator<<(QDebug, const QItemSelectionRange &);




# 252 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"



# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsortfilterproxymodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractproxymodel.h"
























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsortfilterproxymodel.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"






































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsortfilterproxymodel.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsortfilterproxymodel.h"



class QSortFilterProxyModelPrivate;
class QSortFilterProxyModelLessThan;
class QSortFilterProxyModelGreaterThan;

class  QSortFilterProxyModel : public QAbstractProxyModel
{
friend class QSortFilterProxyModelLessThan;
friend class QSortFilterProxyModelGreaterThan;

Q_OBJECT
Q_PROPERTY(QRegExp filterRegExp READ filterRegExp WRITE setFilterRegExp)
Q_PROPERTY(int filterKeyColumn READ filterKeyColumn WRITE setFilterKeyColumn)
Q_PROPERTY(bool dynamicSortFilter READ dynamicSortFilter WRITE setDynamicSortFilter)
Q_PROPERTY(Qt::CaseSensitivity filterCaseSensitivity READ filterCaseSensitivity WRITE setFilterCaseSensitivity)
Q_PROPERTY(Qt::CaseSensitivity sortCaseSensitivity READ sortCaseSensitivity WRITE setSortCaseSensitivity)
Q_PROPERTY(bool isSortLocaleAware READ isSortLocaleAware WRITE setSortLocaleAware)
Q_PROPERTY(int sortRole READ sortRole WRITE setSortRole)
Q_PROPERTY(int filterRole READ filterRole WRITE setFilterRole)

public:
explicit QSortFilterProxyModel(QObject *parent = 0);
~QSortFilterProxyModel();

void setSourceModel(QAbstractItemModel *sourceModel);

QModelIndex mapToSource(const QModelIndex &proxyIndex) const;
QModelIndex mapFromSource(const QModelIndex &sourceIndex) const;

QItemSelection mapSelectionToSource(const QItemSelection &proxySelection) const;
QItemSelection mapSelectionFromSource(const QItemSelection &sourceSelection) const;

QRegExp filterRegExp() const;
void setFilterRegExp(const QRegExp &regExp);

int filterKeyColumn() const;
void setFilterKeyColumn(int column);

Qt::CaseSensitivity filterCaseSensitivity() const;
void setFilterCaseSensitivity(Qt::CaseSensitivity cs);

Qt::CaseSensitivity sortCaseSensitivity() const;
void setSortCaseSensitivity(Qt::CaseSensitivity cs);

bool isSortLocaleAware() const;
void setSortLocaleAware(bool on);

int sortColumn() const;
Qt::SortOrder sortOrder() const;

bool dynamicSortFilter() const;
void setDynamicSortFilter(bool enable);

int sortRole() const;
void setSortRole(int role);

int filterRole() const;
void setFilterRole(int role);

public slots:
void setFilterRegExp(const QString &pattern);
void setFilterWildcard(const QString &pattern);
void setFilterFixedString(const QString &pattern);
void clear();
void invalidate();

protected:
virtual bool filterAcceptsRow(int source_row, const QModelIndex &source_parent) const;
virtual bool filterAcceptsColumn(int source_column, const QModelIndex &source_parent) const;
virtual bool lessThan(const QModelIndex &left, const QModelIndex &right) const;

void filterChanged();
void invalidateFilter();

public:

# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsortfilterproxymodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsortfilterproxymodel.h"
QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex parent(const QModelIndex &child) const;
QModelIndex sibling(int row, int column, const QModelIndex &idx) const;

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;

QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;
bool setHeaderData(int section, Qt::Orientation orientation,
const QVariant &value, int role = Qt::EditRole);

QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);

bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

void fetchMore(const QModelIndex &parent);
bool canFetchMore(const QModelIndex &parent) const;
Qt::ItemFlags flags(const QModelIndex &index) const;

QModelIndex buddy(const QModelIndex &index) const;
QModelIndexList match(const QModelIndex &start, int role,
const QVariant &value, int hits = 1,
Qt::MatchFlags flags =
Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const;
QSize span(const QModelIndex &index) const;
void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList mimeTypes() const;
Qt::DropActions supportedDropActions() const;
private:
inline QSortFilterProxyModelPrivate* d_func() { return reinterpret_cast<QSortFilterProxyModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSortFilterProxyModelPrivate* d_func() const { return reinterpret_cast<const QSortFilterProxyModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSortFilterProxyModelPrivate;
QSortFilterProxyModel(const QSortFilterProxyModel &) ; QSortFilterProxyModel &operator=(const QSortFilterProxyModel &) ;




















};






# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlistmodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlistmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlistmodel.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlistmodel.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlistmodel.h"
class  QStringListModel : public QAbstractListModel
{
Q_OBJECT
public:
explicit QStringListModel(QObject *parent = 0);
explicit QStringListModel(const QStringList &strings, QObject *parent = 0);

int rowCount(const QModelIndex &parent = QModelIndex()) const;
QModelIndex sibling(int row, int column, const QModelIndex &idx) const;

QVariant data(const QModelIndex &index, int role) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

Qt::ItemFlags flags(const QModelIndex &index) const;

bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());

void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList stringList() const;
void setStringList(const QStringList &strings);

Qt::DropActions supportedDropActions() const;

private:
QStringListModel(const QStringListModel &) ; QStringListModel &operator=(const QStringListModel &) ;
QStringList lst;
};



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlistmodel.h"



# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonarray.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"


class QDebug;
class QVariant;
class QJsonArray;
class QJsonObject;

namespace QJsonPrivate {
class Data;
class Base;
class Object;
class Header;
class Array;
class Value;
class Entry;
}

class  QJsonValue
{
public:
enum Type {
Null = 0x0,
Bool = 0x1,
Double = 0x2,
String = 0x3,
Array = 0x4,
Object = 0x5,
Undefined = 0x80
};

QJsonValue(Type = Null);
QJsonValue(bool b);
QJsonValue(double n);
QJsonValue(int n);
QJsonValue(const QString &s);
QJsonValue(QLatin1String s);
QJsonValue(const QJsonArray &a);
QJsonValue(const QJsonObject &o);

~QJsonValue();

QJsonValue(const QJsonValue &other);
QJsonValue &operator =(const QJsonValue &other);

static QJsonValue fromVariant(const QVariant &variant);
QVariant toVariant() const;

Type type() const;
inline bool isNull() const { return type() == Null; }
inline bool isBool() const { return type() == Bool; }
inline bool isDouble() const { return type() == Double; }
inline bool isString() const { return type() == String; }
inline bool isArray() const { return type() == Array; }
inline bool isObject() const { return type() == Object; }
inline bool isUndefined() const { return type() == Undefined; }

bool toBool(bool defaultValue = false) const;
double toDouble(double defaultValue = 0) const;
QString toString(const QString &defaultValue = QString()) const;
QJsonArray toArray() const;
QJsonArray toArray(const QJsonArray &defaultValue) const;
QJsonObject toObject() const;
QJsonObject toObject(const QJsonObject &defaultValue) const;

bool operator==(const QJsonValue &other) const;
bool operator!=(const QJsonValue &other) const;

private:

inline QJsonValue(const void *) {}
friend class QJsonPrivate::Value;
friend class QJsonArray;
friend class QJsonObject;
friend  QDebug operator<<(QDebug, const QJsonValue &);

QJsonValue(QJsonPrivate::Data *d, QJsonPrivate::Base *b, const QJsonPrivate::Value& v);

void detach();

union {
quint64 ui;
bool b;
double dbl;
QStringData *stringData;
QJsonPrivate::Base *base;
};
QJsonPrivate::Data *d; 
Type t;
};

class  QJsonValueRef
{
public:
QJsonValueRef(QJsonArray *array, int idx)
: a(array), is_object(false), index(idx) {}
QJsonValueRef(QJsonObject *object, int idx)
: o(object), is_object(true), index(idx) {}

inline operator QJsonValue() const { return toValue(); }
QJsonValueRef &operator = (const QJsonValue &val);
QJsonValueRef &operator = (const QJsonValueRef &val);

inline QJsonValue::Type type() const { return toValue().type(); }
inline bool isNull() const { return type() == QJsonValue::Null; }
inline bool isBool() const { return type() == QJsonValue::Bool; }
inline bool isDouble() const { return type() == QJsonValue::Double; }
inline bool isString() const { return type() == QJsonValue::String; }
inline bool isArray() const { return type() == QJsonValue::Array; }
inline bool isObject() const { return type() == QJsonValue::Object; }
inline bool isUndefined() const { return type() == QJsonValue::Undefined; }

inline bool toBool() const { return toValue().toBool(); }
inline double toDouble() const { return toValue().toDouble(); }
inline QString toString() const { return toValue().toString(); }
QJsonArray toArray() const;
QJsonObject toObject() const;

inline bool operator==(const QJsonValue &other) const { return toValue() == other; }
inline bool operator!=(const QJsonValue &other) const { return toValue() != other; }

private:
QJsonValue toValue() const;

union {
QJsonArray *a;
QJsonObject *o;
};
uint is_object : 1;
uint index : 31;
};


# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"
 QDebug operator<<(QDebug, const QJsonValue &);


# 183 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonarray.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonarray.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonarray.h"


class QDebug;
class QStringList;
template <typename T> class QList;
typedef QList<QVariant> QVariantList;

class  QJsonArray
{
public:
QJsonArray();
~QJsonArray();

QJsonArray(const QJsonArray &other);
QJsonArray &operator =(const QJsonArray &other);

static QJsonArray fromStringList(const QStringList &list);
static QJsonArray fromVariantList(const QVariantList &list);
QVariantList toVariantList() const;

int size() const;
inline int count() const { return size(); }

bool isEmpty() const;
QJsonValue at(int i) const;
QJsonValue first() const;
QJsonValue last() const;

void prepend(const QJsonValue &value);
void append(const QJsonValue &value);
void removeAt(int i);
QJsonValue takeAt(int i);
inline void removeFirst() { removeAt(0); }
inline void removeLast() { removeAt(size() - 1); }

void insert(int i, const QJsonValue &value);
void replace(int i, const QJsonValue &value);

bool contains(const QJsonValue &element) const;
QJsonValueRef operator[](int i);
QJsonValue operator[](int i) const;

bool operator==(const QJsonArray &other) const;
bool operator!=(const QJsonArray &other) const;

class const_iterator;

class iterator {
public:
QJsonArray *a;
int i;
typedef std::random_access_iterator_tag iterator_category;
typedef int difference_type;
typedef QJsonValue value_type;

typedef QJsonValueRef reference;

inline iterator() : a(0), i(0) { }
explicit inline iterator(QJsonArray *array, int index) : a(array), i(index) { }

inline QJsonValueRef operator*() const { return QJsonValueRef(a, i); }

inline QJsonValueRef operator[](int j) const { return QJsonValueRef(a, i + j); }

inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator<(const iterator& other) const { return i < other.i; }
inline bool operator<=(const iterator& other) const { return i <= other.i; }
inline bool operator>(const iterator& other) const { return i > other.i; }
inline bool operator>=(const iterator& other) const { return i >= other.i; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline bool operator<(const const_iterator& other) const { return i < other.i; }
inline bool operator<=(const const_iterator& other) const { return i <= other.i; }
inline bool operator>(const const_iterator& other) const { return i > other.i; }
inline bool operator>=(const const_iterator& other) const { return i >= other.i; }
inline iterator &operator++() { ++i; return *this; }
inline iterator operator++(int) { iterator n = *this; ++i; return n; }
inline iterator &operator--() { i--; return *this; }
inline iterator operator--(int) { iterator n = *this; i--; return n; }
inline iterator &operator+=(int j) { i+=j; return *this; }
inline iterator &operator-=(int j) { i-=j; return *this; }
inline iterator operator+(int j) const { return iterator(a, i+j); }
inline iterator operator-(int j) const { return iterator(a, i-j); }
inline int operator-(iterator j) const { return i - j.i; }
};
friend class iterator;

class const_iterator {
public:
const QJsonArray *a;
int i;
typedef std::random_access_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef QJsonValue value_type;

typedef QJsonValue reference;

inline const_iterator() : a(0), i(0) { }
explicit inline const_iterator(const QJsonArray *array, int index) : a(array), i(index) { }
inline const_iterator(const const_iterator &o) : a(o.a), i(o.i) {}
inline const_iterator(const iterator &o) : a(o.a), i(o.i) {}

inline QJsonValue operator*() const { return a->at(i); }

inline QJsonValue operator[](int j) const { return a->at(i+j); }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline bool operator<(const const_iterator& other) const { return i < other.i; }
inline bool operator<=(const const_iterator& other) const { return i <= other.i; }
inline bool operator>(const const_iterator& other) const { return i > other.i; }
inline bool operator>=(const const_iterator& other) const { return i >= other.i; }
inline const_iterator &operator++() { ++i; return *this; }
inline const_iterator operator++(int) { const_iterator n = *this; ++i; return n; }
inline const_iterator &operator--() { i--; return *this; }
inline const_iterator operator--(int) { const_iterator n = *this; i--; return n; }
inline const_iterator &operator+=(int j) { i+=j; return *this; }
inline const_iterator &operator-=(int j) { i-=j; return *this; }
inline const_iterator operator+(int j) const { return const_iterator(a, i+j); }
inline const_iterator operator-(int j) const { return const_iterator(a, i-j); }
inline int operator-(const_iterator j) const { return i - j.i; }
};
friend class const_iterator;


inline iterator begin() { detach(); return iterator(this, 0); }
inline const_iterator begin() const { return const_iterator(this, 0); }
inline const_iterator constBegin() const { return const_iterator(this, 0); }
inline iterator end() { detach(); return iterator(this, size()); }
inline const_iterator end() const { return const_iterator(this, size()); }
inline const_iterator constEnd() const { return const_iterator(this, size()); }
iterator insert(iterator before, const QJsonValue &value) { insert(before.i, value); return before; }
iterator erase(iterator it) { removeAt(it.i); return it; }


typedef iterator Iterator;
typedef const_iterator ConstIterator;


inline void push_back(const QJsonValue &t) { append(t); }
inline void push_front(const QJsonValue &t) { prepend(t); }
inline void pop_front() { removeFirst(); }
inline void pop_back() { removeLast(); }
inline bool empty() const { return isEmpty(); }
typedef int size_type;
typedef QJsonValue value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef QJsonValueRef reference;
typedef QJsonValue const_reference;
typedef int difference_type;

private:
friend class QJsonPrivate::Data;
friend class QJsonValue;
friend class QJsonDocument;
friend  QDebug operator<<(QDebug, const QJsonArray &);

QJsonArray(QJsonPrivate::Data *data, QJsonPrivate::Array *array);
void compact();
void detach(uint reserve = 0);

QJsonPrivate::Data *d;
QJsonPrivate::Array *a;
};


# 215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonarray.h"
 QDebug operator<<(QDebug, const QJsonArray &);


# 218 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonarray.h"



# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"

























































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"


class QDebug;

namespace QJsonPrivate {
class Parser;
}

struct  QJsonParseError
{
enum ParseError {
NoError = 0,
UnterminatedObject,
MissingNameSeparator,
UnterminatedArray,
MissingValueSeparator,
IllegalValue,
TerminationByNumber,
IllegalNumber,
IllegalEscapeSequence,
IllegalUTF8String,
UnterminatedString,
MissingObject,
DeepNesting,
DocumentTooLarge
};

QString errorString() const;

int offset;
ParseError error;
};

class  QJsonDocument
{
public:

# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"
static const uint BinaryFormatTag = ('q') | ('b' << 8) | ('j' << 16) | ('s' << 24);




# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"
QJsonDocument();
explicit QJsonDocument(const QJsonObject &object);
explicit QJsonDocument(const QJsonArray &array);
~QJsonDocument();

QJsonDocument(const QJsonDocument &other);
QJsonDocument &operator =(const QJsonDocument &other);

enum DataValidation {
Validate,
BypassValidation
};

static QJsonDocument fromRawData(const char *data, int size, DataValidation validation = Validate);
const char *rawData(int *size) const;

static QJsonDocument fromBinaryData(const QByteArray &data, DataValidation validation = Validate);
QByteArray toBinaryData() const;

static QJsonDocument fromVariant(const QVariant &variant);
QVariant toVariant() const;

enum JsonFormat {
Indented,
Compact
};

static QJsonDocument fromJson(const QByteArray &json, QJsonParseError *error = 0);




# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"
QByteArray toJson() const; 
QByteArray toJson(JsonFormat format) const;


# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"
bool isEmpty() const;
bool isArray() const;
bool isObject() const;

QJsonObject object() const;
QJsonArray array() const;

void setObject(const QJsonObject &object);
void setArray(const QJsonArray &array);

bool operator==(const QJsonDocument &other) const;
bool operator!=(const QJsonDocument &other) const { return !(*this == other); }

bool isNull() const;

private:
friend class QJsonValue;
friend class QJsonPrivate::Data;
friend class QJsonPrivate::Parser;
friend  QDebug operator<<(QDebug, const QJsonDocument &);

QJsonDocument(QJsonPrivate::Data *data);

QJsonPrivate::Data *d;
};


# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"
 QDebug operator<<(QDebug, const QJsonDocument &);


# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsondocument.h"



# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"

























































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonobject.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonobject.h"


class QDebug;
template <class Key, class T> class QMap;
typedef QMap<QString, QVariant> QVariantMap;

class  QJsonObject
{
public:
QJsonObject();
~QJsonObject();

QJsonObject(const QJsonObject &other);
QJsonObject &operator =(const QJsonObject &other);

static QJsonObject fromVariantMap(const QVariantMap &map);
QVariantMap toVariantMap() const;

QStringList keys() const;
int size() const;
inline int count() const { return size(); }
inline int length() const { return size(); }
bool isEmpty() const;

QJsonValue value(const QString &key) const;
QJsonValue operator[] (const QString &key) const;
QJsonValueRef operator[] (const QString &key);

void remove(const QString &key);
QJsonValue take(const QString &key);
bool contains(const QString &key) const;

bool operator==(const QJsonObject &other) const;
bool operator!=(const QJsonObject &other) const;

class const_iterator;

class iterator
{
friend class const_iterator;
friend class QJsonObject;
QJsonObject *o;
int i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef int difference_type;
typedef QJsonValue value_type;

typedef QJsonValueRef reference;

 inline iterator() : o(0), i(0) {}
 inline iterator(QJsonObject *obj, int index) : o(obj), i(index) {}

inline QString key() const { return o->keyAt(i); }
inline QJsonValueRef value() const { return QJsonValueRef(o, i); }
inline QJsonValueRef operator*() const { return QJsonValueRef(o, i); }

inline bool operator==(const iterator &other) const { return i == other.i; }
inline bool operator!=(const iterator &other) const { return i != other.i; }

inline iterator &operator++() { ++i; return *this; }
inline iterator operator++(int) { iterator r = *this; ++i; return r; }
inline iterator &operator--() { --i; return *this; }
inline iterator operator--(int) { iterator r = *this; --i; return r; }
inline iterator operator+(int j) const
{ iterator r = *this; r.i += j; return r; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { i += j; return *this; }
inline iterator &operator-=(int j) { i -= j; return *this; }

public:
inline bool operator==(const const_iterator &other) const { return i == other.i; }
inline bool operator!=(const const_iterator &other) const { return i != other.i; }
};
friend class iterator;

class const_iterator
{
friend class iterator;
const QJsonObject *o;
int i;

public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef int difference_type;
typedef QJsonValue value_type;
typedef QJsonValue reference;

 inline const_iterator() : o(0), i(0) {}
 inline const_iterator(const QJsonObject *obj, int index)
: o(obj), i(index) {}
inline const_iterator(const iterator &other)
: o(other.o), i(other.i) {}

inline QString key() const { return o->keyAt(i); }
inline QJsonValue value() const { return o->valueAt(i); }
inline QJsonValue operator*() const { return o->valueAt(i); }

inline bool operator==(const const_iterator &other) const { return i == other.i; }
inline bool operator!=(const const_iterator &other) const { return i != other.i; }

inline const_iterator &operator++() { ++i; return *this; }
inline const_iterator operator++(int) { const_iterator r = *this; ++i; return r; }
inline const_iterator &operator--() { --i; return *this; }
inline const_iterator operator--(int) { const_iterator r = *this; --i; return r; }
inline const_iterator operator+(int j) const
{ const_iterator r = *this; r.i += j; return r; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { i += j; return *this; }
inline const_iterator &operator-=(int j) { i -= j; return *this; }

inline bool operator==(const iterator &other) const { return i == other.i; }
inline bool operator!=(const iterator &other) const { return i != other.i; }
};
friend class const_iterator;


inline iterator begin() { detach(); return iterator(this, 0); }
inline const_iterator begin() const { return const_iterator(this, 0); }
inline const_iterator constBegin() const { return const_iterator(this, 0); }
inline iterator end() { detach(); return iterator(this, size()); }
inline const_iterator end() const { return const_iterator(this, size()); }
inline const_iterator constEnd() const { return const_iterator(this, size()); }
iterator erase(iterator it);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
iterator find(const QString &key);
const_iterator find(const QString &key) const { return constFind(key); }
const_iterator constFind(const QString &key) const;
iterator insert(const QString &key, const QJsonValue &value);


typedef QJsonValue mapped_type;
typedef QString key_type;
typedef int size_type;

inline bool empty() const { return isEmpty(); }

private:
friend class QJsonPrivate::Data;
friend class QJsonValue;
friend class QJsonDocument;
friend class QJsonValueRef;

friend  QDebug operator<<(QDebug, const QJsonObject &);

QJsonObject(QJsonPrivate::Data *data, QJsonPrivate::Object *object);
void detach(uint reserve = 0);
void compact();

QString keyAt(int i) const;
QJsonValue valueAt(int i) const;
void setValueAt(int i, const QJsonValue &val);

QJsonPrivate::Data *d;
QJsonPrivate::Object *o;
};


# 210 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonobject.h"
 QDebug operator<<(QDebug, const QJsonObject &);


# 213 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonobject.h"



# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qjsonvalue.h"

























































































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventloop.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventloop.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventloop.h"



class QEventLoopPrivate;

class  QEventLoop : public QObject
{
Q_OBJECT
inline QEventLoopPrivate* d_func() { return reinterpret_cast<QEventLoopPrivate *>(qGetPtrHelper(d_ptr)); } inline const QEventLoopPrivate* d_func() const { return reinterpret_cast<const QEventLoopPrivate *>(qGetPtrHelper(d_ptr)); } friend class QEventLoopPrivate;

public:
explicit QEventLoop(QObject *parent = 0);
~QEventLoop();

enum ProcessEventsFlag {
AllEvents = 0x00,
ExcludeUserInputEvents = 0x01,
ExcludeSocketNotifiers = 0x02,
WaitForMoreEvents = 0x04,
X11ExcludeTimers = 0x08,
EventLoopExec = 0x20,
DialogExec = 0x40
};
typedef QFlags<ProcessEventsFlag> ProcessEventsFlags;

bool processEvents(ProcessEventsFlags flags = AllEvents);
void processEvents(ProcessEventsFlags flags, int maximumTime);

int exec(ProcessEventsFlags flags = AllEvents);
void exit(int returnCode = 0);
bool isRunning() const;

void wakeUp();

bool event(QEvent *event);

public slots:
void quit();
};

 inline QFlags<QEventLoop::ProcessEventsFlags::enum_type> operator|(QEventLoop::ProcessEventsFlags::enum_type f1, QEventLoop::ProcessEventsFlags::enum_type f2) { return QFlags<QEventLoop::ProcessEventsFlags::enum_type>(f1) | f2; }  inline QFlags<QEventLoop::ProcessEventsFlags::enum_type> operator|(QEventLoop::ProcessEventsFlags::enum_type f1, QFlags<QEventLoop::ProcessEventsFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QEventLoop::ProcessEventsFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


class QEventLoopLockerPrivate;

class  QEventLoopLocker
{
public:
QEventLoopLocker();
explicit QEventLoopLocker(QEventLoop *loop);
explicit QEventLoopLocker(QThread *thread);
~QEventLoopLocker();

private:
QEventLoopLocker(const QEventLoopLocker &) ; QEventLoopLocker &operator=(const QEventLoopLocker &) ;
QEventLoopLockerPrivate *d_ptr;
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"


class QAbstractNativeEventFilter;
class QAbstractEventDispatcherPrivate;
class QSocketNotifier;





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"
class  QAbstractEventDispatcher : public QObject
{
Q_OBJECT
inline QAbstractEventDispatcherPrivate* d_func() { return reinterpret_cast<QAbstractEventDispatcherPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractEventDispatcherPrivate* d_func() const { return reinterpret_cast<const QAbstractEventDispatcherPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractEventDispatcherPrivate;

public:
struct TimerInfo
{
int timerId;
int interval;
Qt::TimerType timerType;

inline TimerInfo(int id, int i, Qt::TimerType t)
: timerId(id), interval(i), timerType(t)
{ }
};

explicit QAbstractEventDispatcher(QObject *parent = 0);
~QAbstractEventDispatcher();

static QAbstractEventDispatcher *instance(QThread *thread = 0);

virtual bool processEvents(QEventLoop::ProcessEventsFlags flags) = 0;
virtual bool hasPendingEvents() = 0;

virtual void registerSocketNotifier(QSocketNotifier *notifier) = 0;
virtual void unregisterSocketNotifier(QSocketNotifier *notifier) = 0;







# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"
int registerTimer(int interval, Qt::TimerType timerType, QObject *object);
virtual void registerTimer(int timerId, int interval, Qt::TimerType timerType, QObject *object) = 0;
virtual bool unregisterTimer(int timerId) = 0;
virtual bool unregisterTimers(QObject *object) = 0;
virtual QList<TimerInfo> registeredTimers(QObject *object) const = 0;

virtual int remainingTime(int timerId) = 0;






# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"
virtual void wakeUp() = 0;
virtual void interrupt() = 0;
virtual void flush() = 0;

virtual void startingUp();
virtual void closingDown();

void installNativeEventFilter(QAbstractNativeEventFilter *filterObj);
void removeNativeEventFilter(QAbstractNativeEventFilter *filterObj);
bool filterNativeEvent(const QByteArray &eventType, void *message, long *result);




# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracteventdispatcher.h"
signals:
void aboutToBlock();
void awake();

protected:
QAbstractEventDispatcher(QAbstractEventDispatcherPrivate &,
QObject *parent);
};




# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractnativeeventfilter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractnativeeventfilter.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractnativeeventfilter.h"


class QAbstractNativeEventFilterPrivate;

class  QAbstractNativeEventFilter
{
public:
QAbstractNativeEventFilter();
virtual ~QAbstractNativeEventFilter();

virtual bool nativeEventFilter(const QByteArray &eventType, void *message, long *result) = 0;

private:
QAbstractNativeEventFilter(const QAbstractNativeEventFilter &) ; QAbstractNativeEventFilter &operator=(const QAbstractNativeEventFilter &) ;
QAbstractNativeEventFilterPrivate *d;
};




# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasictimer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasictimer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasictimer.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasictimer.h"



class QObject;

class  QBasicTimer
{
int id;
public:
inline QBasicTimer() : id(0) {}
inline ~QBasicTimer() { if (id) stop(); }

inline bool isActive() const { return id != 0; }
inline int timerId() const { return id; }

void start(int msec, QObject *obj);
void start(int msec, Qt::TimerType timerType, QObject *obj);
void stop();
};
template<> class QTypeInfo<QBasicTimer > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBasicTimer)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QBasicTimer) }; static inline const char *name() { return "QBasicTimer"; } };




# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"



class QEventPrivate;
class  QEvent 
{


Q_ENUMS(Type)
public:
enum Type {






None = 0, 
Timer = 1, 
MouseButtonPress = 2, 
MouseButtonRelease = 3, 
MouseButtonDblClick = 4, 
MouseMove = 5, 
KeyPress = 6, 
KeyRelease = 7, 
FocusIn = 8, 
FocusOut = 9, 
FocusAboutToChange = 23, 
Enter = 10, 
Leave = 11, 
Paint = 12, 
Move = 13, 
Resize = 14, 
Create = 15, 
Destroy = 16, 
Show = 17, 
Hide = 18, 
Close = 19, 
Quit = 20, 
ParentChange = 21, 
ParentAboutToChange = 131, 
ThreadChange = 22, 
WindowActivate = 24, 
WindowDeactivate = 25, 
ShowToParent = 26, 
HideToParent = 27, 
Wheel = 31, 
WindowTitleChange = 33, 
WindowIconChange = 34, 
ApplicationWindowIconChange = 35, 
ApplicationFontChange = 36, 
ApplicationLayoutDirectionChange = 37, 
ApplicationPaletteChange = 38, 
PaletteChange = 39, 
Clipboard = 40, 
Speech = 42, 
MetaCall = 43, 
SockAct = 50, 
WinEventAct = 132, 
DeferredDelete = 52, 
DragEnter = 60, 
DragMove = 61, 
DragLeave = 62, 
Drop = 63, 
DragResponse = 64, 
ChildAdded = 68, 
ChildPolished = 69, 
ChildRemoved = 71, 
ShowWindowRequest = 73, 
PolishRequest = 74, 
Polish = 75, 
LayoutRequest = 76, 
UpdateRequest = 77, 
UpdateLater = 78, 

EmbeddingControl = 79, 
ActivateControl = 80, 
DeactivateControl = 81, 
ContextMenu = 82, 
InputMethod = 83, 
TabletMove = 87, 
LocaleChange = 88, 
LanguageChange = 89, 
LayoutDirectionChange = 90, 
Style = 91, 
TabletPress = 92, 
TabletRelease = 93, 
OkRequest = 94, 
HelpRequest = 95, 

IconDrag = 96, 

FontChange = 97, 
EnabledChange = 98, 
ActivationChange = 99, 
StyleChange = 100, 
IconTextChange = 101, 
ModifiedChange = 102, 
MouseTrackingChange = 109, 

WindowBlocked = 103, 
WindowUnblocked = 104, 
WindowStateChange = 105,

ToolTip = 110,
WhatsThis = 111,
StatusTip = 112,

ActionChanged = 113,
ActionAdded = 114,
ActionRemoved = 115,

FileOpen = 116, 

Shortcut = 117, 
ShortcutOverride = 51, 

WhatsThisClicked = 118,

ToolBarChange = 120, 

ApplicationActivate = 121, 
ApplicationActivated = ApplicationActivate, 
ApplicationDeactivate = 122, 
ApplicationDeactivated = ApplicationDeactivate, 

QueryWhatsThis = 123, 
EnterWhatsThisMode = 124,
LeaveWhatsThisMode = 125,

ZOrderChange = 126, 

HoverEnter = 127, 
HoverLeave = 128, 
HoverMove = 129, 







# 191 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
AcceptDropsChange = 152,

ZeroTimerEvent = 154, 

GraphicsSceneMouseMove = 155, 
GraphicsSceneMousePress = 156,
GraphicsSceneMouseRelease = 157,
GraphicsSceneMouseDoubleClick = 158,
GraphicsSceneContextMenu = 159,
GraphicsSceneHoverEnter = 160,
GraphicsSceneHoverMove = 161,
GraphicsSceneHoverLeave = 162,
GraphicsSceneHelp = 163,
GraphicsSceneDragEnter = 164,
GraphicsSceneDragMove = 165,
GraphicsSceneDragLeave = 166,
GraphicsSceneDrop = 167,
GraphicsSceneWheel = 168,

KeyboardLayoutChange = 169, 

DynamicPropertyChange = 170, 

TabletEnterProximity = 171,
TabletLeaveProximity = 172,

NonClientAreaMouseMove = 173,
NonClientAreaMouseButtonPress = 174,
NonClientAreaMouseButtonRelease = 175,
NonClientAreaMouseButtonDblClick = 176,

MacSizeChange = 177, 

ContentsRectChange = 178, 

MacGLWindowChange = 179, 

FutureCallOut = 180,

GraphicsSceneResize = 181,
GraphicsSceneMove = 182,

CursorChange = 183,
ToolTipChange = 184,

NetworkReplyUpdated = 185, 

GrabMouse = 186,
UngrabMouse = 187,
GrabKeyboard = 188,
UngrabKeyboard = 189,
MacGLClearDrawable = 191, 

StateMachineSignal = 192,
StateMachineWrapped = 193,

TouchBegin = 194,
TouchUpdate = 195,
TouchEnd = 196,


# 252 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
NativeGesture = 197, 

# 254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
RequestSoftwareInputPanel = 199,
CloseSoftwareInputPanel = 200,

WinIdChange = 203,

# 259 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
Gesture = 198,
GestureOverride = 202,

# 262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
ScrollPrepare = 204,
Scroll = 205,

Expose = 206,

InputMethodQuery = 207,
OrientationChange = 208, 

TouchCancel = 209,

ThemeChange = 210,

SockClose = 211, 

PlatformPanel = 212,

StyleAnimationUpdate = 213, 
ApplicationStateChange = 214,




User = 1000, 
MaxUser = 65535 
};

explicit QEvent(Type type);
QEvent(const QEvent &other);
virtual ~QEvent();
QEvent &operator=(const QEvent &other);
inline Type type() const { return static_cast<Type>(t); }
inline bool spontaneous() const { return spont; }

inline void setAccepted(bool accepted) { m_accept = accepted; }
inline bool isAccepted() const { return m_accept; }

inline void accept() { m_accept = true; }
inline void ignore() { m_accept = false; }

static int registerEventType(int hint = -1);

protected:
QEventPrivate *d;
ushort t;

private:
ushort posted : 1;
ushort spont : 1;
ushort m_accept : 1;
ushort reserved : 13;

friend class QCoreApplication;
friend class QCoreApplicationPrivate;
friend class QThreadData;
friend class QApplication;
friend class QApplicationPrivate;
friend class QShortcutMap;
friend class QETWidget;
friend class QGraphicsView;
friend class QGraphicsViewPrivate;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;

# 325 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
friend class QGestureManager;

# 327 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"
};

class  QTimerEvent : public QEvent
{
public:
explicit QTimerEvent( int timerId );
~QTimerEvent();
int timerId() const { return id; }
protected:
int id;
};

class QObject;

class  QChildEvent : public QEvent
{
public:
QChildEvent( Type type, QObject *child );
~QChildEvent();
QObject *child() const { return c; }
bool added() const { return type() == ChildAdded; }
bool polished() const { return type() == ChildPolished; }
bool removed() const { return type() == ChildRemoved; }
protected:
QObject *c;
};

class  QDynamicPropertyChangeEvent : public QEvent
{
public:
explicit QDynamicPropertyChangeEvent(const QByteArray &name);
~QDynamicPropertyChangeEvent();

inline QByteArray propertyName() const { return n; }

private:
QByteArray n;
};

class  QDeferredDeleteEvent : public QEvent
{
public:
explicit QDeferredDeleteEvent();
~QDeferredDeleteEvent();
int loopLevel() const { return level; }
private:
int level;
friend class QCoreApplication;
};




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventloop.h"











































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"











# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"



class QCoreApplicationPrivate;
class QTextCodec;
class QTranslator;
class QPostEventList;
class QStringList;
class QAbstractEventDispatcher;
class QAbstractNativeEventFilter;



# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
class  QCoreApplication

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
: public QObject

# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
{

# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
Q_OBJECT
Q_PROPERTY(QString applicationName READ applicationName WRITE setApplicationName NOTIFY applicationNameChanged)
Q_PROPERTY(QString applicationVersion READ applicationVersion WRITE setApplicationVersion NOTIFY applicationVersionChanged)
Q_PROPERTY(QString organizationName READ organizationName WRITE setOrganizationName NOTIFY organizationNameChanged)
Q_PROPERTY(QString organizationDomain READ organizationDomain WRITE setOrganizationDomain NOTIFY organizationDomainChanged)
Q_PROPERTY(bool quitLockEnabled READ isQuitLockEnabled WRITE setQuitLockEnabled)


# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
inline QCoreApplicationPrivate* d_func() { return reinterpret_cast<QCoreApplicationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QCoreApplicationPrivate* d_func() const { return reinterpret_cast<const QCoreApplicationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QCoreApplicationPrivate;
public:
enum { ApplicationFlags = 0x050101
};

QCoreApplication(int &argc, char **argv

# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
, int = ApplicationFlags

# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
);

~QCoreApplication();

static QStringList arguments();

static void setAttribute(Qt::ApplicationAttribute attribute, bool on = true);
static bool testAttribute(Qt::ApplicationAttribute attribute);

static void setOrganizationDomain(const QString &orgDomain);
static QString organizationDomain();
static void setOrganizationName(const QString &orgName);
static QString organizationName();
static void setApplicationName(const QString &application);
static QString applicationName();
static void setApplicationVersion(const QString &version);
static QString applicationVersion();

static QCoreApplication *instance() { return self; }


# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static int exec();
static void processEvents(QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents);
static void processEvents(QEventLoop::ProcessEventsFlags flags, int maxtime);
static void exit(int retcode=0);

static bool sendEvent(QObject *receiver, QEvent *event);
static void postEvent(QObject *receiver, QEvent *event, int priority = Qt::NormalEventPriority);
static void sendPostedEvents(QObject *receiver = 0, int event_type = 0);
static void removePostedEvents(QObject *receiver, int eventType = 0);
static bool hasPendingEvents();
static QAbstractEventDispatcher *eventDispatcher();
static void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher);

virtual bool notify(QObject *, QEvent *);

static bool startingUp();
static bool closingDown();


# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static QString applicationDirPath();
static QString applicationFilePath();
static qint64 applicationPid();


# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static void setLibraryPaths(const QStringList &);
static QStringList libraryPaths();
static void addLibraryPath(const QString &);
static void removeLibraryPath(const QString &);



# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static bool installTranslator(QTranslator * messageFile);
static bool removeTranslator(QTranslator * messageFile);


# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static QString translate(const char * context,
const char * key,
const char * disambiguation = 0,
int n = -1);








# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static void flush();

void installNativeEventFilter(QAbstractNativeEventFilter *filterObj);
void removeNativeEventFilter(QAbstractNativeEventFilter *filterObj);

static bool isQuitLockEnabled();
static void setQuitLockEnabled(bool enabled);

public slots:
static void quit();

signals:
void aboutToQuit(

# 179 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
QPrivateSignal

# 181 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
);

void organizationNameChanged();
void organizationDomainChanged();
void applicationNameChanged();
void applicationVersionChanged();

protected:
bool event(QEvent *);

virtual bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);


# 194 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
protected:
QCoreApplication(QCoreApplicationPrivate &p);





# 201 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
private:

# 203 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
static bool sendSpontaneousEvent(QObject *receiver, QEvent *event);
bool notifyInternal(QObject *receiver, QEvent *event);


# 207 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
void init();

static QCoreApplication *self;

QCoreApplication(const QCoreApplication &) ; QCoreApplication &operator=(const QCoreApplication &) ;

friend class QApplication;
friend class QApplicationPrivate;
friend class QGuiApplication;
friend class QGuiApplicationPrivate;
friend class QETWidget;
friend class QWidget;
friend class QWidgetWindow;
friend class QWidgetPrivate;

# 222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
friend class QEventDispatcherUNIXPrivate;
friend class QCocoaEventDispatcherPrivate;
friend bool qt_sendSpontaneousEvent(QObject*, QEvent*);

# 226 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
friend  QString qAppName();
friend class QClassFactory;
};


# 231 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
inline bool QCoreApplication::sendEvent(QObject *receiver, QEvent *event)
{ if (event) event->spont = false; return self ? self->notifyInternal(receiver, event) : false; }

inline bool QCoreApplication::sendSpontaneousEvent(QObject *receiver, QEvent *event)
{ if (event) event->spont = true; return self ? self->notifyInternal(receiver, event) : false; }










# 253 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"
typedef void (*QtStartUpFunction)();
typedef void (*QtCleanUpFunction)();

 void qAddPreRoutine(QtStartUpFunction);
 void qAddPostRoutine(QtCleanUpFunction);
 void qRemovePostRoutine(QtCleanUpFunction);
 QString qAppName(); 










# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"



# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"






















































































































































































































































































































































































# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventloop.h"











































































































# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"


















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
extern  const qreal qt_sine_table[256];

inline int qCeil(qreal v)
{

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return int(ceilf(float(v)));
else

# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return int(ceil(v));
}

inline int qFloor(qreal v)
{

# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return int(floorf(float(v)));
else

# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return int(floor(v));
}

inline qreal qFabs(qreal v)
{

# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if(sizeof(qreal) == sizeof(float))
return fabsf(float(v));
else

# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return fabs(v);
}

inline qreal qSin(qreal v)
{

# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return sinf(float(v));
else

# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return sin(v);
}

inline qreal qCos(qreal v)
{

# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return cosf(float(v));
else

# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return cos(v);
}

inline qreal qTan(qreal v)
{

# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return tanf(float(v));
else

# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return tan(v);
}

inline qreal qAcos(qreal v)
{

# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return acosf(float(v));
else

# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return acos(v);
}

inline qreal qAsin(qreal v)
{

# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return asinf(float(v));
else

# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return asin(v);
}

inline qreal qAtan(qreal v)
{

# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return atanf(float(v));
else

# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return atan(v);
}

inline qreal qAtan2(qreal y, qreal x)
{

# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return atan2f(float(y), float(x));
else

# 157 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return atan2(y, x);
}

inline qreal qSqrt(qreal v)
{

# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return sqrtf(float(v));
else

# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return sqrt(v);
}

inline qreal qLn(qreal v)
{

# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return logf(float(v));
else

# 177 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return log(v);
}

inline qreal qExp(qreal v)
{


return exp(v);
}

inline qreal qPow(qreal x, qreal y)
{

# 190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
if (sizeof(qreal) == sizeof(float))
return powf(float(x), float(y));
else

# 194 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
return pow(x, y);
}





















































# 249 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmath.h"
inline qreal qFastSin(qreal x)
{
int si = int(x * (0.5 * 256 / (3.14159265358979323846))); 
qreal d = x - si * (2.0 * (3.14159265358979323846) / 256);
int ci = si + 256 / 4;
si &= 256 - 1;
ci &= 256 - 1;
return qt_sine_table[si] + (qt_sine_table[ci] - 0.5 * qt_sine_table[si] * d) * d;
}

inline qreal qFastCos(qreal x)
{
int ci = int(x * (0.5 * 256 / (3.14159265358979323846))); 
qreal d = x - ci * (2.0 * (3.14159265358979323846) / 256);
int si = ci + 256 / 4;
si &= 256 - 1;
ci &= 256 - 1;
return qt_sine_table[si] - (qt_sine_table[ci] + 0.5 * qt_sine_table[si] * d) * d;
}

 inline float qDegreesToRadians(float degrees)
{
return degrees * float((3.14159265358979323846)/180);
}

 inline double qDegreesToRadians(double degrees)
{
return degrees * ((3.14159265358979323846) / 180);
}

 inline float qRadiansToDegrees(float radians)
{
return radians * float(180/(3.14159265358979323846));
}

 inline double qRadiansToDegrees(double radians)
{
return radians * (180 / (3.14159265358979323846));
}




# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"



template <typename T> class QList;

class  QMetaMethod
{
public:
inline QMetaMethod() : mobj(0),handle(0) {}

QByteArray methodSignature() const;
QByteArray name() const;
const char *typeName() const;
int returnType() const;
int parameterCount() const;
int parameterType(int index) const;
void getParameterTypes(int *types) const;
QList<QByteArray> parameterTypes() const;
QList<QByteArray> parameterNames() const;
const char *tag() const;
enum Access { Private, Protected, Public };
Access access() const;
enum MethodType { Method, Signal, Slot, Constructor };
MethodType methodType() const;
enum Attributes { Compatibility = 0x1, Cloned = 0x2, Scriptable = 0x4 };
int attributes() const;
int methodIndex() const;
int revision() const;

inline const QMetaObject *enclosingMetaObject() const { return mobj; }

bool invoke(QObject *object,
Qt::ConnectionType connectionType,
QGenericReturnArgument returnValue,
QGenericArgument val0 = QGenericArgument(0),
QGenericArgument val1 = QGenericArgument(),
QGenericArgument val2 = QGenericArgument(),
QGenericArgument val3 = QGenericArgument(),
QGenericArgument val4 = QGenericArgument(),
QGenericArgument val5 = QGenericArgument(),
QGenericArgument val6 = QGenericArgument(),
QGenericArgument val7 = QGenericArgument(),
QGenericArgument val8 = QGenericArgument(),
QGenericArgument val9 = QGenericArgument()) const;
inline bool invoke(QObject *object,
QGenericReturnArgument returnValue,
QGenericArgument val0 = QGenericArgument(0),
QGenericArgument val1 = QGenericArgument(),
QGenericArgument val2 = QGenericArgument(),
QGenericArgument val3 = QGenericArgument(),
QGenericArgument val4 = QGenericArgument(),
QGenericArgument val5 = QGenericArgument(),
QGenericArgument val6 = QGenericArgument(),
QGenericArgument val7 = QGenericArgument(),
QGenericArgument val8 = QGenericArgument(),
QGenericArgument val9 = QGenericArgument()) const
{
return invoke(object, Qt::AutoConnection, returnValue,
val0, val1, val2, val3, val4, val5, val6, val7, val8, val9);
}
inline bool invoke(QObject *object,
Qt::ConnectionType connectionType,
QGenericArgument val0 = QGenericArgument(0),
QGenericArgument val1 = QGenericArgument(),
QGenericArgument val2 = QGenericArgument(),
QGenericArgument val3 = QGenericArgument(),
QGenericArgument val4 = QGenericArgument(),
QGenericArgument val5 = QGenericArgument(),
QGenericArgument val6 = QGenericArgument(),
QGenericArgument val7 = QGenericArgument(),
QGenericArgument val8 = QGenericArgument(),
QGenericArgument val9 = QGenericArgument()) const
{
return invoke(object, connectionType, QGenericReturnArgument(),
val0, val1, val2, val3, val4, val5, val6, val7, val8, val9);
}
inline bool invoke(QObject *object,
QGenericArgument val0 = QGenericArgument(0),
QGenericArgument val1 = QGenericArgument(),
QGenericArgument val2 = QGenericArgument(),
QGenericArgument val3 = QGenericArgument(),
QGenericArgument val4 = QGenericArgument(),
QGenericArgument val5 = QGenericArgument(),
QGenericArgument val6 = QGenericArgument(),
QGenericArgument val7 = QGenericArgument(),
QGenericArgument val8 = QGenericArgument(),
QGenericArgument val9 = QGenericArgument()) const
{
return invoke(object, Qt::AutoConnection, QGenericReturnArgument(),
val0, val1, val2, val3, val4, val5, val6, val7, val8, val9);
}

inline bool isValid() const { return mobj != 0; }




# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"
template <typename Func>
static inline QMetaMethod fromSignal(Func signal)
{
typedef QtPrivate::FunctionPointer<Func> SignalType;
reinterpret_cast<typename SignalType::Object *>(0)->qt_check_for_QOBJECT_macro(
*reinterpret_cast<typename SignalType::Object *>(0));
return fromSignalImpl(&SignalType::Object::staticMetaObject,
reinterpret_cast<void **>(&signal));
}


# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"
private:






# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"
static QMetaMethod fromSignalImpl(const QMetaObject *, void **);

const QMetaObject *mobj;
uint handle;
friend class QMetaMethodPrivate;
friend struct QMetaObject;
friend struct QMetaObjectPrivate;
friend class QObject;
friend bool operator==(const QMetaMethod &m1, const QMetaMethod &m2);
friend bool operator!=(const QMetaMethod &m1, const QMetaMethod &m2);
};
template<> class QTypeInfo<QMetaMethod > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMetaMethod)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMetaMethod) }; static inline const char *name() { return "QMetaMethod"; } };

inline bool operator==(const QMetaMethod &m1, const QMetaMethod &m2)
{ return m1.mobj == m2.mobj && m1.handle == m2.handle; }
inline bool operator!=(const QMetaMethod &m1, const QMetaMethod &m2)
{ return !(m1 == m2); }

class  QMetaEnum
{
public:
inline QMetaEnum() : mobj(0),handle(0) {}

const char *name() const;
bool isFlag() const;

int keyCount() const;
const char *key(int index) const;
int value(int index) const;

const char *scope() const;

int keyToValue(const char *key, bool *ok = 0) const;
const char* valueToKey(int value) const;
int keysToValue(const char * keys, bool *ok = 0) const;
QByteArray valueToKeys(int value) const;

inline const QMetaObject *enclosingMetaObject() const { return mobj; }

inline bool isValid() const { return name() != 0; }
private:
const QMetaObject *mobj;
uint handle;
friend struct QMetaObject;
};
template<> class QTypeInfo<QMetaEnum > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMetaEnum)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMetaEnum) }; static inline const char *name() { return "QMetaEnum"; } };

class  QMetaProperty
{
public:
QMetaProperty();

const char *name() const;
const char *typeName() const;
QVariant::Type type() const;
int userType() const;
int propertyIndex() const;

bool isReadable() const;
bool isWritable() const;
bool isResettable() const;
bool isDesignable(const QObject *obj = 0) const;
bool isScriptable(const QObject *obj = 0) const;
bool isStored(const QObject *obj = 0) const;
bool isEditable(const QObject *obj = 0) const;
bool isUser(const QObject *obj = 0) const;
bool isConstant() const;
bool isFinal() const;

bool isFlagType() const;
bool isEnumType() const;
QMetaEnum enumerator() const;

bool hasNotifySignal() const;
QMetaMethod notifySignal() const;
int notifySignalIndex() const;

int revision() const;

QVariant read(const QObject *obj) const;
bool write(QObject *obj, const QVariant &value) const;
bool reset(QObject *obj) const;

bool hasStdCppSet() const;
inline bool isValid() const { return isReadable(); }
inline const QMetaObject *enclosingMetaObject() const { return mobj; }

private:
const QMetaObject *mobj;
uint handle;
int idx;
QMetaEnum menum;
friend struct QMetaObject;
friend struct QMetaObjectPrivate;
};

class  QMetaClassInfo
{
public:
inline QMetaClassInfo() : mobj(0),handle(0) {}
const char *name() const;
const char *value() const;
inline const QMetaObject *enclosingMetaObject() const { return mobj; }
private:
const QMetaObject *mobj;
uint handle;
friend struct QMetaObject;
};
template<> class QTypeInfo<QMetaClassInfo > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMetaClassInfo)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMetaClassInfo) }; static inline const char *name() { return "QMetaClassInfo"; } };




# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedata.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedata.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedata.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedata.h"



class QUrl;
class QMimeDataPrivate;

class  QMimeData : public QObject
{
Q_OBJECT
public:
QMimeData();
~QMimeData();

QList<QUrl> urls() const;
void setUrls(const QList<QUrl> &urls);
bool hasUrls() const;

QString text() const;
void setText(const QString &text);
bool hasText() const;

QString html() const;
void setHtml(const QString &html);
bool hasHtml() const;

QVariant imageData() const;
void setImageData(const QVariant &image);
bool hasImage() const;

QVariant colorData() const;
void setColorData(const QVariant &color);
bool hasColor() const;

QByteArray data(const QString &mimetype) const;
void setData(const QString &mimetype, const QByteArray &data);
void removeFormat(const QString &mimetype);

virtual bool hasFormat(const QString &mimetype) const;
virtual QStringList formats() const;

void clear();
protected:
virtual QVariant retrieveData(const QString &mimetype,
QVariant::Type preferredType) const;
private:
QMimeData(const QMimeData &) ; QMimeData &operator=(const QMimeData &) ;
inline QMimeDataPrivate* d_func() { return reinterpret_cast<QMimeDataPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMimeDataPrivate* d_func() const { return reinterpret_cast<const QMimeDataPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMimeDataPrivate;
};




# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectcleanuphandler.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectcleanuphandler.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectcleanuphandler.h"



class  QObjectCleanupHandler : public QObject
{
Q_OBJECT

public:
QObjectCleanupHandler();
~QObjectCleanupHandler();

QObject* add(QObject* object);
void remove(QObject *object);
bool isEmpty() const;
void clear();

private:

QObjectList cleanupObjects;

private slots:
void objectDestroyed(QObject *);
};




# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpointer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpointer.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpointer.h"


class QVariant;

template <class T>
class QPointer
{
template<typename U>
struct TypeSelector
{
typedef QObject Type;
};
template<typename U>
struct TypeSelector<const U>
{
typedef const QObject Type;
};
typedef typename TypeSelector<T>::Type QObjectType;
QWeakPointer<QObjectType> wp;
public:
inline QPointer() { }
inline QPointer(T *p) : wp(p, true) { }

inline ~QPointer() { }

inline QPointer<T> &operator=(T* p)
{ wp.assign(static_cast<QObjectType*>(p)); return *this; }

inline T* data() const
{ return static_cast<T*>( wp.data()); }
inline T* operator->() const
{ return data(); }
inline T& operator*() const
{ return *data(); }
inline operator T*() const
{ return data(); }

inline bool isNull() const
{ return wp.isNull(); }

inline void clear()
{ wp.clear(); }
};
template <class T> class QTypeInfo<QPointer<T> > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPointer<T>)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPointer<T>) }; static inline const char *name() { return "QPointer<T>"; } };

template <class T>
inline bool operator==(const T *o, const QPointer<T> &p)
{ return o == p.operator->(); }

template<class T>
inline bool operator==(const QPointer<T> &p, const T *o)
{ return p.operator->() == o; }

template <class T>
inline bool operator==(T *o, const QPointer<T> &p)
{ return o == p.operator->(); }

template<class T>
inline bool operator==(const QPointer<T> &p, T *o)
{ return p.operator->() == o; }

template<class T>
inline bool operator==(const QPointer<T> &p1, const QPointer<T> &p2)
{ return p1.operator->() == p2.operator->(); }

template <class T>
inline bool operator!=(const T *o, const QPointer<T> &p)
{ return o != p.operator->(); }

template<class T>
inline bool operator!= (const QPointer<T> &p, const T *o)
{ return p.operator->() != o; }

template <class T>
inline bool operator!=(T *o, const QPointer<T> &p)
{ return o != p.operator->(); }

template<class T>
inline bool operator!= (const QPointer<T> &p, T *o)
{ return p.operator->() != o; }

template<class T>
inline bool operator!= (const QPointer<T> &p1, const QPointer<T> &p2)
{ return p1.operator->() != p2.operator->() ; }

template<typename T>
QPointer<T>
qPointerFromVariant(const QVariant &variant)
{
return QPointer<T>(qobject_cast<T*>(QtSharedPointer::weakPointerFromVariant_internal(variant).data()));
}






# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"
class QSharedMemoryPrivate;

class  QSharedMemory : public QObject
{
Q_OBJECT
inline QSharedMemoryPrivate* d_func() { return reinterpret_cast<QSharedMemoryPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSharedMemoryPrivate* d_func() const { return reinterpret_cast<const QSharedMemoryPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSharedMemoryPrivate;

public:
enum AccessMode
{
ReadOnly,
ReadWrite
};

enum SharedMemoryError
{
NoError,
PermissionDenied,
InvalidSize,
KeyError,
AlreadyExists,
NotFound,
LockError,
OutOfResources,
UnknownError
};

QSharedMemory(QObject *parent = 0);
QSharedMemory(const QString &key, QObject *parent = 0);
~QSharedMemory();

void setKey(const QString &key);
QString key() const;
void setNativeKey(const QString &key);
QString nativeKey() const;

bool create(int size, AccessMode mode = ReadWrite);
int size() const;

bool attach(AccessMode mode = ReadWrite);
bool isAttached() const;
bool detach();

void *data();
const void* constData() const;
const void *data() const;


# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"
bool lock();
bool unlock();


# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"
SharedMemoryError error() const;
QString errorString() const;

private:
QSharedMemory(const QSharedMemory &) ; QSharedMemory &operator=(const QSharedMemory &) ;
};



# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedmemory.h"




# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignalmapper.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignalmapper.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignalmapper.h"


class QSignalMapperPrivate;

class  QSignalMapper : public QObject
{
Q_OBJECT
inline QSignalMapperPrivate* d_func() { return reinterpret_cast<QSignalMapperPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSignalMapperPrivate* d_func() const { return reinterpret_cast<const QSignalMapperPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSignalMapperPrivate;
public:
explicit QSignalMapper(QObject *parent = 0);
~QSignalMapper();

void setMapping(QObject *sender, int id);
void setMapping(QObject *sender, const QString &text);
void setMapping(QObject *sender, QWidget *widget);
void setMapping(QObject *sender, QObject *object);
void removeMappings(QObject *sender);

QObject *mapping(int id) const;
QObject *mapping(const QString &text) const;
QObject *mapping(QWidget *widget) const;
QObject *mapping(QObject *object) const;

signals:
void mapped(int);
void mapped(const QString &);
void mapped(QWidget *);
void mapped(QObject *);

public slots:
void map();
void map(QObject *sender);

private:
QSignalMapper(const QSignalMapper &) ; QSignalMapper &operator=(const QSignalMapper &) ;

};




# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsocketnotifier.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsocketnotifier.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsocketnotifier.h"


class QSocketNotifierPrivate;
class  QSocketNotifier : public QObject
{
Q_OBJECT
inline QSocketNotifierPrivate* d_func() { return reinterpret_cast<QSocketNotifierPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSocketNotifierPrivate* d_func() const { return reinterpret_cast<const QSocketNotifierPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSocketNotifierPrivate;

public:
enum Type { Read, Write, Exception };

QSocketNotifier(qintptr socket, Type, QObject *parent = 0);
~QSocketNotifier();

qintptr socket() const;
Type type() const;

bool isEnabled() const;

public slots:
void setEnabled(bool);

signals:
void activated(int socket

# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsocketnotifier.h"
, QPrivateSignal

# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsocketnotifier.h"
);

protected:
bool event(QEvent *);

private:
QSocketNotifier(const QSocketNotifier &) ; QSocketNotifier &operator=(const QSocketNotifier &) ;
};




# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemsemaphore.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemsemaphore.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemsemaphore.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemsemaphore.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemsemaphore.h"
class QSystemSemaphorePrivate;

class  QSystemSemaphore
{

public:
enum AccessMode
{
Open,
Create
};

enum SystemSemaphoreError
{
NoError,
PermissionDenied,
KeyError,
AlreadyExists,
NotFound,
OutOfResources,
UnknownError
};

QSystemSemaphore(const QString &key, int initialValue = 0, AccessMode mode = Open);
~QSystemSemaphore();

void setKey(const QString &key, int initialValue = 0, AccessMode mode = Open);
QString key() const;

bool acquire();
bool release(int n = 1);

SystemSemaphoreError error() const;
QString errorString() const;

private:
QSystemSemaphore(const QSystemSemaphore &) ; QSystemSemaphore &operator=(const QSystemSemaphore &) ;
QScopedPointer<QSystemSemaphorePrivate> d;
};



# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsystemsemaphore.h"




# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbasictimer.h"







































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"



class  QTimer : public QObject
{
Q_OBJECT
Q_PROPERTY(bool singleShot READ isSingleShot WRITE setSingleShot)
Q_PROPERTY(int interval READ interval WRITE setInterval)
Q_PROPERTY(int remainingTime READ remainingTime)
Q_PROPERTY(Qt::TimerType timerType READ timerType WRITE setTimerType)
Q_PROPERTY(bool active READ isActive)
public:
explicit QTimer(QObject *parent = 0);
~QTimer();

inline bool isActive() const { return id >= 0; }
int timerId() const { return id; }

void setInterval(int msec);
int interval() const { return inter; }

int remainingTime() const;

void setTimerType(Qt::TimerType atype) { this->type = atype; }
Qt::TimerType timerType() const { return Qt::TimerType(type); }

inline void setSingleShot(bool singleShot);
inline bool isSingleShot() const { return single; }

static void singleShot(int msec, const QObject *receiver, const char *member);
static void singleShot(int msec, Qt::TimerType timerType, const QObject *receiver, const char *member);

public slots:
void start(int msec);

void start();
void stop();

signals:
void timeout(

# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"
QPrivateSignal

# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"
);

protected:
void timerEvent(QTimerEvent *);

private:
QTimer(const QTimer &) ; QTimer &operator=(const QTimer &) ;

inline int startTimer(int){ return -1;}
inline void killTimer(int){}

int id, inter, del;
uint single : 1;
uint nulltimer : 1;
uint type : 2;

};

inline void QTimer::setSingleShot(bool asingleShot) { single = asingleShot; }






# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtranslator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtranslator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtranslator.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtranslator.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtranslator.h"
class QLocale;
class QTranslatorPrivate;

class  QTranslator : public QObject
{
Q_OBJECT
public:
explicit QTranslator(QObject *parent = 0);
~QTranslator();

virtual QString translate(const char *context, const char *sourceText,
const char *disambiguation = 0, int n = -1) const;

virtual bool isEmpty() const;

bool load(const QString & filename,
const QString & directory = QString(),
const QString & search_delimiters = QString(),
const QString & suffix = QString());
bool load(const QLocale & locale,
const QString & filename,
const QString & prefix = QString(),
const QString & directory = QString(),
const QString & suffix = QString());
bool load(const uchar *data, int len, const QString &directory = QString());

private:
QTranslator(const QTranslator &) ; QTranslator &operator=(const QTranslator &) ;
inline QTranslatorPrivate* d_func() { return reinterpret_cast<QTranslatorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTranslatorPrivate* d_func() const { return reinterpret_cast<const QTranslatorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTranslatorPrivate;
};



# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtranslator.h"



# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwineventnotifier.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwineventnotifier.h"










































# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedatabase.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimetype.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimetype.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimetype.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimetype.h"


class QMimeTypePrivate;
class QFileinfo;
class QStringList;

class  QMimeType
{
public:
QMimeType();
QMimeType(const QMimeType &other);
QMimeType &operator=(const QMimeType &other);







# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimetype.h"
void swap(QMimeType &other)
{
qSwap(d, other.d);
}
explicit QMimeType(const QMimeTypePrivate &dd);
~QMimeType();

bool operator==(const QMimeType &other) const;

inline bool operator!=(const QMimeType &other) const
{
return !operator==(other);
}

bool isValid() const;

bool isDefault() const;

QString name() const;
QString comment() const;
QString genericIconName() const;
QString iconName() const;
QStringList globPatterns() const;
QStringList parentMimeTypes() const;
QStringList allAncestors() const;
QStringList aliases() const;
QStringList suffixes() const;
QString preferredSuffix() const;

bool inherits(const QString &mimeTypeName) const;

QString filterString() const;

protected:
friend class QMimeTypeParserBase;
friend class MimeTypeMapEntry;
friend class QMimeDatabasePrivate;
friend class QMimeXMLProvider;
friend class QMimeBinaryProvider;
friend class QMimeTypePrivate;

QExplicitlySharedDataPointer<QMimeTypePrivate> d;
};

template<> class QTypeInfo<QMimeType > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMimeType)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMimeType) }; static inline const char *name() { return "QMimeType"; } }; template <> inline void qSwap<QMimeType>(QMimeType &value1, QMimeType &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QMimeType>(::QMimeType &value1, ::QMimeType &value2) { value1.swap(value2); } } 



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedatabase.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedatabase.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimedatabase.h"


class QByteArray;
class QFileInfo;
class QIODevice;
class QUrl;

class QMimeDatabasePrivate;
class  QMimeDatabase
{
QMimeDatabase(const QMimeDatabase &) ; QMimeDatabase &operator=(const QMimeDatabase &) ;

public:
QMimeDatabase();
~QMimeDatabase();

QMimeType mimeTypeForName(const QString &nameOrAlias) const;

enum MatchMode {
MatchDefault = 0x0,
MatchExtension = 0x1,
MatchContent = 0x2
};

QMimeType mimeTypeForFile(const QString &fileName, MatchMode mode = MatchDefault) const;
QMimeType mimeTypeForFile(const QFileInfo &fileInfo, MatchMode mode = MatchDefault) const;
QList<QMimeType> mimeTypesForFileName(const QString &fileName) const;

QMimeType mimeTypeForData(const QByteArray &data) const;
QMimeType mimeTypeForData(QIODevice *device) const;

QMimeType mimeTypeForUrl(const QUrl &url) const;
QMimeType mimeTypeForFileNameAndData(const QString &fileName, QIODevice *device) const;
QMimeType mimeTypeForFileNameAndData(const QString &fileName, const QByteArray &data) const;

QString suffixForFileName(const QString &fileName) const;

QList<QMimeType> allMimeTypes() const;

private:
QMimeDatabasePrivate *d;
};



# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmimetype.h"


















































































































# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"



struct  QFactoryInterface
{
virtual ~QFactoryInterface() {}
virtual QStringList keys() const = 0;
};


template <> inline const char *qobject_interface_iid<QFactoryInterface *>() { return "org.qt-project.Qt.QFactoryInterface"; } template <> inline QFactoryInterface *qobject_cast<QFactoryInterface *>(QObject *object) { return reinterpret_cast<QFactoryInterface *>((object ? object->qt_metacast("org.qt-project.Qt.QFactoryInterface") : 0)); } template <> inline QFactoryInterface *qobject_cast<QFactoryInterface *>(const QObject *object) { return reinterpret_cast<QFactoryInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QFactoryInterface") : 0)); }




# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibrary.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibrary.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibrary.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibrary.h"
class QLibraryPrivate;

class  QLibrary : public QObject
{
Q_OBJECT
Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
Q_PROPERTY(LoadHints loadHints READ loadHints WRITE setLoadHints)

public:
enum LoadHint {
ResolveAllSymbolsHint = 0x01,
ExportExternalSymbolsHint = 0x02,
LoadArchiveMemberHint = 0x04,
PreventUnloadHint = 0x08
};
typedef QFlags<LoadHint> LoadHints;

explicit QLibrary(QObject *parent = 0);
explicit QLibrary(const QString& fileName, QObject *parent = 0);
explicit QLibrary(const QString& fileName, int verNum, QObject *parent = 0);
explicit QLibrary(const QString& fileName, const QString &version, QObject *parent = 0);
~QLibrary();

QFunctionPointer resolve(const char *symbol);
static QFunctionPointer resolve(const QString &fileName, const char *symbol);
static QFunctionPointer resolve(const QString &fileName, int verNum, const char *symbol);
static QFunctionPointer resolve(const QString &fileName, const QString &version, const char *symbol);

bool load();
bool unload();
bool isLoaded() const;

static bool isLibrary(const QString &fileName);

void setFileName(const QString &fileName);
QString fileName() const;

void setFileNameAndVersion(const QString &fileName, int verNum);
void setFileNameAndVersion(const QString &fileName, const QString &version);
QString errorString() const;

void setLoadHints(LoadHints hints);
LoadHints loadHints() const;
private:
QLibraryPrivate *d;
bool did_load;
QLibrary(const QLibrary &) ; QLibrary &operator=(const QLibrary &) ;
};

 inline QFlags<QLibrary::LoadHints::enum_type> operator|(QLibrary::LoadHints::enum_type f1, QLibrary::LoadHints::enum_type f2) { return QFlags<QLibrary::LoadHints::enum_type>(f1) | f2; }  inline QFlags<QLibrary::LoadHints::enum_type> operator|(QLibrary::LoadHints::enum_type f1, QFlags<QLibrary::LoadHints::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QLibrary::LoadHints::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibrary.h"



# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpointer.h"

















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"











# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"
typedef QObject *(*QtPluginInstanceFunction)();
typedef const char *(*QtPluginMetaDataFunction)();

struct QStaticPlugin
{
QtPluginInstanceFunction instance;
QtPluginMetaDataFunction metaData;
};

void  qRegisterStaticPluginFunction(QStaticPlugin staticPlugin);





































# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"



# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpluginloader.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlibrary.h"










































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpluginloader.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpluginloader.h"


class QLibraryPrivate;
class QJsonObject;

class  QPluginLoader : public QObject
{
Q_OBJECT
Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
Q_PROPERTY(QLibrary::LoadHints loadHints READ loadHints WRITE setLoadHints)
public:
explicit QPluginLoader(QObject *parent = 0);
explicit QPluginLoader(const QString &fileName, QObject *parent = 0);
~QPluginLoader();

QObject *instance();
QJsonObject metaData() const;

static QObjectList staticInstances();

bool load();
bool unload();
bool isLoaded() const;

void setFileName(const QString &fileName);
QString fileName() const;

QString errorString() const;

void setLoadHints(QLibrary::LoadHints loadHints);
QLibrary::LoadHints loadHints() const;

private:
QLibraryPrivate *d;
bool did_load;
QPluginLoader(const QPluginLoader &) ; QPluginLoader &operator=(const QPluginLoader &) ;
};






# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
















# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"



class  QUuid
{
public:
enum Variant {
VarUnknown =-1,
NCS = 0, 
DCE = 2, 
Microsoft = 6, 
Reserved = 7 
};

enum Version {
VerUnknown =-1,
Time = 1, 
EmbeddedPOSIX = 2, 
Md5 = 3, 
Name = Md5,
Random = 4, 
Sha1 = 5 
};








# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
QUuid()
{
data1 = 0;
data2 = 0;
data3 = 0;
for(int i = 0; i < 8; i++)
data4[i] = 0;
}
QUuid(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)
{
data1 = l;
data2 = w1;
data3 = w2;
data4[0] = b1;
data4[1] = b2;
data4[2] = b3;
data4[3] = b4;
data4[4] = b5;
data4[5] = b6;
data4[6] = b7;
data4[7] = b8;
}


# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
QUuid(const QString &);
QUuid(const char *);
QString toString() const;
QUuid(const QByteArray &);
QByteArray toByteArray() const;
QByteArray toRfc4122() const;
static QUuid fromRfc4122(const QByteArray &);
bool isNull() const;

bool operator==(const QUuid &orig) const
{
uint i;
if (data1 != orig.data1 || data2 != orig.data2 ||
data3 != orig.data3)
return false;

for(i = 0; i < 8; i++)
if (data4[i] != orig.data4[i])
return false;

return true;
}

bool operator!=(const QUuid &orig) const
{
return !(*this == orig);
}

bool operator<(const QUuid &other) const;
bool operator>(const QUuid &other) const;










































# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
static QUuid createUuid();

# 190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
static QUuid createUuidV3(const QUuid &ns, const QByteArray &baseData);
static QUuid createUuidV5(const QUuid &ns, const QByteArray &baseData);
static inline QUuid createUuidV3(const QUuid &ns, const QString &baseData)
{
return QUuid::createUuidV3(ns, baseData.toUtf8());
}

static inline QUuid createUuidV5(const QUuid &ns, const QString &baseData)
{
return QUuid::createUuidV5(ns, baseData.toUtf8());
}



# 204 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
QUuid::Variant variant() const;
QUuid::Version version() const;

uint data1;
ushort data2;
ushort data3;
uchar data4[8];
};

template<> class QTypeInfo<QUuid > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QUuid)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QUuid) }; static inline const char *name() { return "QUuid"; } };


# 216 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
 QDataStream &operator<<(QDataStream &, const QUuid &);
 QDataStream &operator>>(QDataStream &, QUuid &);



# 221 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
 QDebug operator<<(QDebug, const QUuid &);


# 224 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/quuid.h"
 uint qHash(const QUuid &uuid, uint seed = 0) ;




# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"
class QState;
class QStateMachine;

class QAbstractStatePrivate;
class  QAbstractState : public QObject
{
Q_OBJECT
public:
~QAbstractState();

QState *parentState() const;
QStateMachine *machine() const;

signals:
void entered(

# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"
QPrivateSignal

# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"
);
void exited(

# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"
QPrivateSignal

# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"
);

protected:
QAbstractState(QState *parent = 0);

virtual void onEntry(QEvent *event) = 0;
virtual void onExit(QEvent *event) = 0;

bool event(QEvent *e);

protected:
QAbstractState(QAbstractStatePrivate &dd, QState *parent);

private:
QAbstractState(const QAbstractState &) ; QAbstractState &operator=(const QAbstractState &) ;
inline QAbstractStatePrivate* d_func() { return reinterpret_cast<QAbstractStatePrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractStatePrivate* d_func() const { return reinterpret_cast<const QAbstractStatePrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractStatePrivate;
};



# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"



# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
class QEvent;
class QAbstractState;
class QState;
class QStateMachine;


# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
class QAbstractAnimation;


# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
class QAbstractTransitionPrivate;
class  QAbstractTransition : public QObject
{
Q_OBJECT
Q_PROPERTY(QState* sourceState READ sourceState)
Q_PROPERTY(QAbstractState* targetState READ targetState WRITE setTargetState)
Q_PROPERTY(QList<QAbstractState*> targetStates READ targetStates WRITE setTargetStates)
public:
QAbstractTransition(QState *sourceState = 0);
virtual ~QAbstractTransition();

QState *sourceState() const;
QAbstractState *targetState() const;
void setTargetState(QAbstractState* target);
QList<QAbstractState*> targetStates() const;
void setTargetStates(const QList<QAbstractState*> &targets);

QStateMachine *machine() const;


# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
void addAnimation(QAbstractAnimation *animation);
void removeAnimation(QAbstractAnimation *animation);
QList<QAbstractAnimation*> animations() const;


# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
signals:
void triggered(

# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
QPrivateSignal

# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"
);

protected:
virtual bool eventTest(QEvent *event) = 0;

virtual void onTransition(QEvent *event) = 0;

bool event(QEvent *e);

protected:
QAbstractTransition(QAbstractTransitionPrivate &dd, QState *parent);

private:
QAbstractTransition(const QAbstractTransition &) ; QAbstractTransition &operator=(const QAbstractTransition &) ;
inline QAbstractTransitionPrivate* d_func() { return reinterpret_cast<QAbstractTransitionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractTransitionPrivate* d_func() const { return reinterpret_cast<const QAbstractTransitionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractTransitionPrivate;
};



# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"



# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"


















































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"






















































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"
class QEventTransitionPrivate;
class  QEventTransition : public QAbstractTransition
{
Q_OBJECT
Q_PROPERTY(QObject* eventSource READ eventSource WRITE setEventSource)
Q_PROPERTY(QEvent::Type eventType READ eventType WRITE setEventType)
public:
QEventTransition(QState *sourceState = 0);
QEventTransition(QObject *object, QEvent::Type type, QState *sourceState = 0);
~QEventTransition();

QObject *eventSource() const;
void setEventSource(QObject *object);

QEvent::Type eventType() const;
void setEventType(QEvent::Type type);

protected:
bool eventTest(QEvent *event);
void onTransition(QEvent *event);

bool event(QEvent *e);

protected:
QEventTransition(QEventTransitionPrivate &dd, QState *parent);
QEventTransition(QEventTransitionPrivate &dd, QObject *object,
QEvent::Type type, QState *parent);

private:
QEventTransition(const QEventTransition &) ; QEventTransition &operator=(const QEventTransition &) ;
inline QEventTransitionPrivate* d_func() { return reinterpret_cast<QEventTransitionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QEventTransitionPrivate* d_func() const { return reinterpret_cast<const QEventTransitionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QEventTransitionPrivate;
};



# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"



# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfinalstate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"

































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfinalstate.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfinalstate.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfinalstate.h"
class QFinalStatePrivate;
class  QFinalState : public QAbstractState
{
Q_OBJECT
public:
QFinalState(QState *parent = 0);
~QFinalState();

protected:
void onEntry(QEvent *event);
void onExit(QEvent *event);

bool event(QEvent *e);

private:
QFinalState(const QFinalState &) ; QFinalState &operator=(const QFinalState &) ;
inline QFinalStatePrivate* d_func() { return reinterpret_cast<QFinalStatePrivate *>(qGetPtrHelper(d_ptr)); } inline const QFinalStatePrivate* d_func() const { return reinterpret_cast<const QFinalStatePrivate *>(qGetPtrHelper(d_ptr)); } friend class QFinalStatePrivate;
};



# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfinalstate.h"



# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhistorystate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"

































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhistorystate.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhistorystate.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhistorystate.h"
class QHistoryStatePrivate;
class  QHistoryState : public QAbstractState
{
Q_OBJECT
Q_PROPERTY(QAbstractState* defaultState READ defaultState WRITE setDefaultState)
Q_PROPERTY(HistoryType historyType READ historyType WRITE setHistoryType)
Q_ENUMS(HistoryType)
public:
enum HistoryType {
ShallowHistory,
DeepHistory
};

QHistoryState(QState *parent = 0);
QHistoryState(HistoryType type, QState *parent = 0);
~QHistoryState();

QAbstractState *defaultState() const;
void setDefaultState(QAbstractState *state);

HistoryType historyType() const;
void setHistoryType(HistoryType type);

protected:
void onEntry(QEvent *event);
void onExit(QEvent *event);

bool event(QEvent *e);

private:
QHistoryState(const QHistoryState &) ; QHistoryState &operator=(const QHistoryState &) ;
inline QHistoryStatePrivate* d_func() { return reinterpret_cast<QHistoryStatePrivate *>(qGetPtrHelper(d_ptr)); } inline const QHistoryStatePrivate* d_func() const { return reinterpret_cast<const QHistoryStatePrivate *>(qGetPtrHelper(d_ptr)); } friend class QHistoryStatePrivate;
};



# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhistorystate.h"



# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignaltransition.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstracttransition.h"


















































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignaltransition.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignaltransition.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignaltransition.h"
class QSignalTransitionPrivate;
class  QSignalTransition : public QAbstractTransition
{
Q_OBJECT
Q_PROPERTY(QObject* senderObject READ senderObject WRITE setSenderObject)
Q_PROPERTY(QByteArray signal READ signal WRITE setSignal)
public:
QSignalTransition(QState *sourceState = 0);
QSignalTransition(const QObject *sender, const char *signal,
QState *sourceState = 0);
~QSignalTransition();

QObject *senderObject() const;
void setSenderObject(const QObject *sender);

QByteArray signal() const;
void setSignal(const QByteArray &signal);

protected:
bool eventTest(QEvent *event);
void onTransition(QEvent *event);

bool event(QEvent *e);

private:
QSignalTransition(const QSignalTransition &) ; QSignalTransition &operator=(const QSignalTransition &) ;
inline QSignalTransitionPrivate* d_func() { return reinterpret_cast<QSignalTransitionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSignalTransitionPrivate* d_func() const { return reinterpret_cast<const QSignalTransitionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSignalTransitionPrivate;
};



# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsignaltransition.h"



# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractstate.h"

































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
class QAbstractTransition;
class QSignalTransition;

class QStatePrivate;
class  QState : public QAbstractState
{
Q_OBJECT
Q_PROPERTY(QAbstractState* initialState READ initialState WRITE setInitialState)
Q_PROPERTY(QAbstractState* errorState READ errorState WRITE setErrorState)
Q_PROPERTY(ChildMode childMode READ childMode WRITE setChildMode)
Q_ENUMS(ChildMode RestorePolicy)
public:
enum ChildMode {
ExclusiveStates,
ParallelStates
};

enum RestorePolicy {
DontRestoreProperties,
RestoreProperties
};

QState(QState *parent = 0);
QState(ChildMode childMode, QState *parent = 0);
~QState();

QAbstractState *errorState() const;
void setErrorState(QAbstractState *state);

void addTransition(QAbstractTransition *transition);
QSignalTransition *addTransition(const QObject *sender, const char *signal, QAbstractState *target);
QAbstractTransition *addTransition(QAbstractState *target);
void removeTransition(QAbstractTransition *transition);
QList<QAbstractTransition*> transitions() const;

QAbstractState *initialState() const;
void setInitialState(QAbstractState *state);

ChildMode childMode() const;
void setChildMode(ChildMode mode);


# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
void assignProperty(QObject *object, const char *name,
const QVariant &value);


# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
signals:
void finished(

# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
QPrivateSignal

# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
);
void propertiesAssigned(

# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
QPrivateSignal

# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"
);

protected:
void onEntry(QEvent *event);
void onExit(QEvent *event);

bool event(QEvent *e);

protected:
QState(QStatePrivate &dd, QState *parent);

private:
QState(const QState &) ; QState &operator=(const QState &) ;
inline QStatePrivate* d_func() { return reinterpret_cast<QStatePrivate *>(qGetPtrHelper(d_ptr)); } inline const QStatePrivate* d_func() const { return reinterpret_cast<const QStatePrivate *>(qGetPtrHelper(d_ptr)); } friend class QStatePrivate;
};



# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstate.h"


































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"






















































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"















































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
class QStateMachinePrivate;
class QAbstractAnimation;
class  QStateMachine : public QState
{
Q_OBJECT
Q_PROPERTY(QString errorString READ errorString)
Q_PROPERTY(QState::RestorePolicy globalRestorePolicy READ globalRestorePolicy WRITE setGlobalRestorePolicy)

# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
Q_PROPERTY(bool animated READ isAnimated WRITE setAnimated)

# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
public:
class  SignalEvent : public QEvent
{
public:
SignalEvent(QObject *sender, int signalIndex,
const QList<QVariant> &arguments);
~SignalEvent();

inline QObject *sender() const { return m_sender; }
inline int signalIndex() const { return m_signalIndex; }
inline QList<QVariant> arguments() const { return m_arguments; }

private:
QObject *m_sender;
int m_signalIndex;
QList<QVariant> m_arguments;

friend class QSignalTransitionPrivate;
};

class  WrappedEvent : public QEvent
{
public:
WrappedEvent(QObject *object, QEvent *event);
~WrappedEvent();

inline QObject *object() const { return m_object; }
inline QEvent *event() const { return m_event; }

private:
QObject *m_object;
QEvent *m_event;
};

enum EventPriority {
NormalPriority,
HighPriority
};

enum Error {
NoError,
NoInitialStateError,
NoDefaultStateInHistoryStateError,
NoCommonAncestorForTransitionError
};

explicit QStateMachine(QObject *parent = 0);
explicit QStateMachine(QState::ChildMode childMode, QObject *parent = 0);
~QStateMachine();

void addState(QAbstractState *state);
void removeState(QAbstractState *state);

Error error() const;
QString errorString() const;
void clearError();

bool isRunning() const;


# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
bool isAnimated() const;
void setAnimated(bool enabled);

void addDefaultAnimation(QAbstractAnimation *animation);
QList<QAbstractAnimation *> defaultAnimations() const;
void removeDefaultAnimation(QAbstractAnimation *animation);


# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
QState::RestorePolicy globalRestorePolicy() const;
void setGlobalRestorePolicy(QState::RestorePolicy restorePolicy);

void postEvent(QEvent *event, EventPriority priority = NormalPriority);
int postDelayedEvent(QEvent *event, int delay);
bool cancelDelayedEvent(int id);

QSet<QAbstractState*> configuration() const;


# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
bool eventFilter(QObject *watched, QEvent *event);


# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
public slots:
void start();
void stop();

signals:
void started(

# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
QPrivateSignal

# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
);
void stopped(

# 161 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
QPrivateSignal

# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"
);

protected:
void onEntry(QEvent *event);
void onExit(QEvent *event);

virtual void beginSelectTransitions(QEvent *event);
virtual void endSelectTransitions(QEvent *event);

virtual void beginMicrostep(QEvent *event);
virtual void endMicrostep(QEvent *event);

bool event(QEvent *e);

protected:
QStateMachine(QStateMachinePrivate &dd, QObject *parent);

private:
QStateMachine(const QStateMachine &) ; QStateMachine &operator=(const QStateMachine &) ;
inline QStateMachinePrivate* d_func() { return reinterpret_cast<QStateMachinePrivate *>(qGetPtrHelper(d_ptr)); } inline const QStateMachinePrivate* d_func() const { return reinterpret_cast<const QStateMachinePrivate *>(qGetPtrHelper(d_ptr)); } friend class QStateMachinePrivate;



# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"


# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"


};



# 194 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstatemachine.h"



# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"






# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"





# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"
class  QException : public std::exception
{
public:
virtual void raise() const;
virtual QException *clone() const;
};

class  QUnhandledException : public QException
{
public:
void raise() const;
QUnhandledException *clone() const;
};

namespace QtPrivate {

class Base;
class  ExceptionHolder
{
public:
ExceptionHolder(QException *exception = 0);
ExceptionHolder(const ExceptionHolder &other);
void operator=(const ExceptionHolder &other);
~ExceptionHolder();
QException *exception() const;
QExplicitlySharedDataPointer<Base> base;
};

class  ExceptionStore
{
public:
void setException(const QException &e);
bool hasException() const;
ExceptionHolder exception();
void throwPossibleException();
bool hasThrown() const;
ExceptionHolder exceptionHolder;
};

} 
















# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"





# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrunnable.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrunnable.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrunnable.h"



class QRunnable
{
int ref;

friend class QThreadPool;
friend class QThreadPoolPrivate;
friend class QThreadPoolThread;

public:
virtual void run() = 0;

QRunnable() : ref(0) { }
virtual ~QRunnable() { }

bool autoDelete() const { return ref != -1; }
void setAutoDelete(bool _autoDelete) { ref = _autoDelete ? 0 : -1; }
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"




















































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qexception.h"

























































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"













# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"
namespace QtPrivate {

class ResultItem
{
public:
ResultItem(const void *_result, int _count) : m_count(_count), result(_result) { } 
ResultItem(const void *_result) : m_count(0), result(_result) { } 
ResultItem() : m_count(0), result(0) { }
bool isValid() const { return result != 0; }
bool isVector() const { return m_count != 0; }
int count() const { return (m_count == 0) ? 1 : m_count; }
int m_count; 
const void *result; 
};

class  ResultIteratorBase
{
public:
ResultIteratorBase();
ResultIteratorBase(QMap<int, ResultItem>::const_iterator _mapIterator, int _vectorIndex = 0);
int vectorIndex() const;
int resultIndex() const;

ResultIteratorBase operator++();
int batchSize() const;
void batchedAdvance();
bool operator==(const ResultIteratorBase &other) const;
bool operator!=(const ResultIteratorBase &other) const;
bool isVector() const;
bool canIncrementVectorIndex() const;
protected:
QMap<int, ResultItem>::const_iterator mapIterator;
int m_vectorIndex;
};

template <typename T>
class ResultIterator : public ResultIteratorBase
{
public:
ResultIterator(const ResultIteratorBase &base)
: ResultIteratorBase(base) { }

const T &value() const
{
return *pointer();
}

const T *pointer() const
{
if (mapIterator.value().isVector())
return &(reinterpret_cast<const QVector<T> *>(mapIterator.value().result)->at(m_vectorIndex));
else
return reinterpret_cast<const T *>(mapIterator.value().result);
}
};

class  ResultStoreBase
{
public:
ResultStoreBase();
void setFilterMode(bool enable);
bool filterMode() const;
int addResult(int index, const void *result);
int addResults(int index, const void *results, int vectorSize, int logicalCount);
ResultIteratorBase begin() const;
ResultIteratorBase end() const;
bool hasNextResult() const;
ResultIteratorBase resultAt(int index) const;
bool contains(int index) const;
int count() const;
virtual ~ResultStoreBase() { }

protected:
int insertResultItem(int index, ResultItem &resultItem);
void insertResultItemIfValid(int index, ResultItem &resultItem);
void syncPendingResults();
void syncResultCount();
int updateInsertIndex(int index, int _count);

QMap<int, ResultItem> m_results;
int insertIndex; 
int resultCount; 

bool m_filterMode;
QMap<int, ResultItem> pendingResults;
int filteredResults;

};

template <typename T>
class ResultStore : public ResultStoreBase
{
public:
ResultStore() { }

ResultStore(const ResultStoreBase &base)
: ResultStoreBase(base) { }

int addResult(int index, const T *result)
{
if (result == 0)
return ResultStoreBase::addResult(index, result);
else
return ResultStoreBase::addResult(index, new T(*result));
}

int addResults(int index, const QVector<T> *results)
{
return ResultStoreBase::addResults(index, new QVector<T>(*results), results->count(), results->count());
}

int addResults(int index, const QVector<T> *results, int totalCount)
{
if (m_filterMode == true && results->count() != totalCount && 0 == results->count())
return ResultStoreBase::addResults(index, 0, 0, totalCount);
else
return ResultStoreBase::addResults(index, new QVector<T>(*results), results->count(), totalCount);
}

int addCanceledResult(int index)
{
return addResult(index, 0);
}

int addCanceledResults(int index, int _count)
{
QVector<T> empty;
return addResults(index, &empty, _count);
}

ResultIterator<T> begin() const
{
return static_cast<ResultIterator<T> >(ResultStoreBase::begin());
}

ResultIterator<T> end() const
{
return static_cast<ResultIterator<T> >(ResultStoreBase::end());
}

ResultIterator<T> resultAt(int index) const
{
return static_cast<ResultIterator<T> >(ResultStoreBase::resultAt(index));
}

void clear()
{
QMap<int, ResultItem>::const_iterator mapIterator = m_results.constBegin();
while (mapIterator != m_results.constEnd()) {
if (mapIterator.value().isVector())
delete reinterpret_cast<const QVector<T> *>(mapIterator.value().result);
else
delete reinterpret_cast<const T *>(mapIterator.value().result);
++mapIterator;
}
resultCount = 0;
m_results.clear();
}

~ResultStore()
{
clear();
}

};

} 



# 235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"





# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"



template <typename T> class QFuture;
class QFutureInterfaceBasePrivate;
class QFutureWatcherBase;
class QFutureWatcherBasePrivate;

class  QFutureInterfaceBase
{
public:
enum State {
NoState = 0x00,
Running = 0x01,
Started = 0x02,
Finished = 0x04,
Canceled = 0x08,
Paused = 0x10,
Throttled = 0x20
};

QFutureInterfaceBase(State initialState = NoState);
QFutureInterfaceBase(const QFutureInterfaceBase &other);
virtual ~QFutureInterfaceBase();


void reportStarted();
void reportFinished();
void reportCanceled();

# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"
void reportException(const QException &e);

# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"
void reportResultsReady(int beginIndex, int endIndex);

void setRunnable(QRunnable *runnable);
void setFilterMode(bool enable);
void setProgressRange(int minimum, int maximum);
int progressMinimum() const;
int progressMaximum() const;
bool isProgressUpdateNeeded() const;
void setProgressValue(int progressValue);
int progressValue() const;
void setProgressValueAndText(int progressValue, const QString &progressText);
QString progressText() const;

void setExpectedResultCount(int resultCount);
int expectedResultCount();
int resultCount() const;

bool queryState(State state) const;
bool isRunning() const;
bool isStarted() const;
bool isCanceled() const;
bool isFinished() const;
bool isPaused() const;
bool isThrottled() const;
bool isResultReadyAt(int index) const;

void cancel();
void setPaused(bool paused);
void togglePaused();
void setThrottled(bool enable);

void waitForFinished();
bool waitForNextResult();
void waitForResult(int resultIndex);
void waitForResume();

QMutex *mutex() const;
QtPrivate::ExceptionStore &exceptionStore();
QtPrivate::ResultStoreBase &resultStoreBase();
const QtPrivate::ResultStoreBase &resultStoreBase() const;

inline bool operator==(const QFutureInterfaceBase &other) const { return d == other.d; }
inline bool operator!=(const QFutureInterfaceBase &other) const { return d != other.d; }
QFutureInterfaceBase &operator=(const QFutureInterfaceBase &other);

protected:
bool refT() const;
bool derefT() const;
public:


# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"
private:

# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"
QFutureInterfaceBasePrivate *d;

private:
friend class QFutureWatcherBase;
friend class QFutureWatcherBasePrivate;
};

template <typename T>
class QFutureInterface : public QFutureInterfaceBase
{
public:
QFutureInterface(State initialState = NoState)
: QFutureInterfaceBase(initialState)
{
refT();
}
QFutureInterface(const QFutureInterface &other)
: QFutureInterfaceBase(other)
{
refT();
}
~QFutureInterface()
{
if (!derefT())
resultStore().clear();
}

static QFutureInterface canceledResult()
{ return QFutureInterface(State(Started | Finished | Canceled)); }

QFutureInterface &operator=(const QFutureInterface &other)
{
other.refT();
if (!derefT())
resultStore().clear();
QFutureInterfaceBase::operator=(other);
return *this;
}

inline QFuture<T> future(); 

inline void reportResult(const T *result, int index = -1);
inline void reportResult(const T &result, int index = -1);
inline void reportResults(const QVector<T> &results, int beginIndex = -1, int count = -1);
inline void reportFinished(const T *result = 0);

inline const T &resultReference(int index) const;
inline const T *resultPointer(int index) const;
inline QList<T> results();
private:
QtPrivate::ResultStore<T> &resultStore()
{ return static_cast<QtPrivate::ResultStore<T> &>(resultStoreBase()); }
const QtPrivate::ResultStore<T> &resultStore() const
{ return static_cast<const QtPrivate::ResultStore<T> &>(resultStoreBase()); }
};

template <typename T>
inline void QFutureInterface<T>::reportResult(const T *result, int index)
{
QMutexLocker locker(mutex());
if (this->queryState(Canceled) || this->queryState(Finished)) {
return;
}

QtPrivate::ResultStore<T> &store = resultStore();


if (store.filterMode()) {
const int resultCountBefore = store.count();
store.addResult(index, result);
this->reportResultsReady(resultCountBefore, resultCountBefore + store.count());
} else {
const int insertIndex = store.addResult(index, result);
this->reportResultsReady(insertIndex, insertIndex + 1);
}
}

template <typename T>
inline void QFutureInterface<T>::reportResult(const T &result, int index)
{
reportResult(&result, index);
}

template <typename T>
inline void QFutureInterface<T>::reportResults(const QVector<T> &_results, int beginIndex, int count)
{
QMutexLocker locker(mutex());
if (this->queryState(Canceled) || this->queryState(Finished)) {
return;
}

QtPrivate::ResultStore<T> &store = resultStore();

if (store.filterMode()) {
const int resultCountBefore = store.count();
store.addResults(beginIndex, &_results, count);
this->reportResultsReady(resultCountBefore, store.count());
} else {
const int insertIndex = store.addResults(beginIndex, &_results, count);
this->reportResultsReady(insertIndex, insertIndex + _results.count());
}
}

template <typename T>
inline void QFutureInterface<T>::reportFinished(const T *result)
{
if (result)
reportResult(result);
QFutureInterfaceBase::reportFinished();
}

template <typename T>
inline const T &QFutureInterface<T>::resultReference(int index) const
{
QMutexLocker lock(mutex());
return resultStore().resultAt(index).value();
}

template <typename T>
inline const T *QFutureInterface<T>::resultPointer(int index) const
{
QMutexLocker lock(mutex());
return resultStore().resultAt(index).pointer();
}

template <typename T>
inline QList<T> QFutureInterface<T>::results()
{
if (this->isCanceled()) {
exceptionStore().throwPossibleException();
return QList<T>();
}
QFutureInterfaceBase::waitForResult(-1);

QList<T> res;
QMutexLocker lock(mutex());

QtPrivate::ResultIterator<T> it = resultStore().begin();
while (it != resultStore().end()) {
res.append(it.value());
++it;
}

return res;
}

template <>
class QFutureInterface<void> : public QFutureInterfaceBase
{
public:
QFutureInterface<void>(State initialState = NoState)
: QFutureInterfaceBase(initialState)
{ }
QFutureInterface<void>(const QFutureInterface<void> &other)
: QFutureInterfaceBase(other)
{ }

static QFutureInterface<void> canceledResult()
{ return QFutureInterface(State(Started | Finished | Canceled)); }

QFutureInterface<void> &operator=(const QFutureInterface<void> &other)
{
QFutureInterfaceBase::operator=(other);
return *this;
}

inline QFuture<void> future(); 

void reportResult(const void *, int) { }
void reportResults(const QVector<void> &, int) { }
void reportFinished(const void * = 0) { QFutureInterfaceBase::reportFinished(); }
};





# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"



template <typename T>
class QFutureWatcher;
template <>
class QFutureWatcher<void>;

template <typename T>
class QFuture
{
public:
QFuture()
: d(QFutureInterface<T>::canceledResult())
{ }
explicit QFuture(QFutureInterface<T> *p) 
: d(*p)
{ }
QFuture(const QFuture &other)
: d(other.d)
{ }
~QFuture()
{ }

inline QFuture &operator=(const QFuture &other);
bool operator==(const QFuture &other) const { return (d == other.d); }
bool operator!=(const QFuture &other) const { return (d != other.d); }

void cancel() { d.cancel(); }
bool isCanceled() const { return d.isCanceled(); }

void setPaused(bool paused) { d.setPaused(paused); }
bool isPaused() const { return d.isPaused(); }
void pause() { setPaused(true); }
void resume() { setPaused(false); }
void togglePaused() { d.togglePaused(); }

bool isStarted() const { return d.isStarted(); }
bool isFinished() const { return d.isFinished(); }
bool isRunning() const { return d.isRunning(); }

int resultCount() const { return d.resultCount(); }
int progressValue() const { return d.progressValue(); }
int progressMinimum() const { return d.progressMinimum(); }
int progressMaximum() const { return d.progressMaximum(); }
QString progressText() const { return d.progressText(); }
void waitForFinished() { d.waitForFinished(); }

inline T result() const;
inline T resultAt(int index) const;
bool isResultReadyAt(int resultIndex) const { return d.isResultReadyAt(resultIndex); }

operator T() const { return result(); }
QList<T> results() const { return d.results(); }

class const_iterator
{
public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;

inline const_iterator() {}
inline const_iterator(QFuture const * const _future, int _index) : future(_future), index(_index) {}
inline const_iterator(const const_iterator &o) : future(o.future), index(o.index) {}
inline const_iterator &operator=(const const_iterator &o)
{ future = o.future; index = o.index; return *this; }
inline const T &operator*() const { return future->d.resultReference(index); }
inline const T *operator->() const { return future->d.resultPointer(index); }

inline bool operator!=(const const_iterator &other) const
{
if (index == -1 && other.index == -1) 
return false;
if (other.index == -1)
return (future->isRunning() || (index < future->resultCount()));
return (index != other.index);
}

inline bool operator==(const const_iterator &o) const { return !operator!=(o); }
inline const_iterator &operator++() { ++index; return *this; }
inline const_iterator operator++(int) { const_iterator r = *this; ++index; return r; }
inline const_iterator &operator--() { --index; return *this; }
inline const_iterator operator--(int) { const_iterator r = *this; --index; return r; }
inline const_iterator operator+(int j) const { return const_iterator(future, index + j); }
inline const_iterator operator-(int j) const { return const_iterator(future, index - j); }
inline const_iterator &operator+=(int j) { index += j; return *this; }
inline const_iterator &operator-=(int j) { index -= j; return *this; }
private:
QFuture const * future;
int index;
};
friend class const_iterator;
typedef const_iterator ConstIterator;

const_iterator begin() const { return const_iterator(this, 0); }
const_iterator constBegin() const { return const_iterator(this, 0); }
const_iterator end() const { return const_iterator(this, -1); }
const_iterator constEnd() const { return const_iterator(this, -1); }

private:
friend class QFutureWatcher<T>;

public: 
mutable QFutureInterface<T> d;
};

template <typename T>
inline QFuture<T> &QFuture<T>::operator=(const QFuture<T> &other)
{
d = other.d;
return *this;
}

template <typename T>
inline T QFuture<T>::result() const
{
d.waitForResult(0);
return d.resultReference(0);
}

template <typename T>
inline T QFuture<T>::resultAt(int index) const
{
d.waitForResult(index);
return d.resultReference(index);
}

template <typename T>
inline QFuture<T> QFutureInterface<T>::future()
{
return QFuture<T>(this);
}

template <class T> class QFutureIterator { typedef typename QFuture<T>::const_iterator const_iterator; QFuture<T> c; const_iterator i; public: inline QFutureIterator(const QFuture<T> &container) : c(container), i(c.constBegin()) {} inline QFutureIterator &operator=(const QFuture<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };

template <>
class QFuture<void>
{
public:
QFuture()
: d(QFutureInterface<void>::canceledResult())
{ }
explicit QFuture(QFutureInterfaceBase *p) 
: d(*p)
{ }
QFuture(const QFuture &other)
: d(other.d)
{ }
~QFuture()
{ }

QFuture &operator=(const QFuture &other);
bool operator==(const QFuture &other) const { return (d == other.d); }
bool operator!=(const QFuture &other) const { return (d != other.d); }


# 211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"
template <typename T>
QFuture(const QFuture<T> &other)
: d(other.d)
{ }

template <typename T>
QFuture<void> &operator=(const QFuture<T> &other)
{
d = other.d;
return *this;
}


# 224 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"
void cancel() { d.cancel(); }
bool isCanceled() const { return d.isCanceled(); }

void setPaused(bool paused) { d.setPaused(paused); }
bool isPaused() const { return d.isPaused(); }
void pause() { setPaused(true); }
void resume() { setPaused(false); }
void togglePaused() { d.togglePaused(); }

bool isStarted() const { return d.isStarted(); }
bool isFinished() const { return d.isFinished(); }
bool isRunning() const { return d.isRunning(); }

int resultCount() const { return d.resultCount(); }
int progressValue() const { return d.progressValue(); }
int progressMinimum() const { return d.progressMinimum(); }
int progressMaximum() const { return d.progressMaximum(); }
QString progressText() const { return d.progressText(); }
void waitForFinished() { d.waitForFinished(); }

private:
friend class QFutureWatcher<void>;




# 250 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"
mutable QFutureInterfaceBase d;
};

inline QFuture<void> &QFuture<void>::operator=(const QFuture<void> &other)
{
d = other.d;
return *this;
}

inline QFuture<void> QFutureInterface<void>::future()
{
return QFuture<void>(this);
}

template <typename T>
QFuture<void> qToVoidFuture(const QFuture<T> &future)
{
return QFuture<void>(future.d);
}






# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfutureinterface.h"


























































































































































































































































































































# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturesynchronizer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"


















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturesynchronizer.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturesynchronizer.h"



template <typename T>
class QFutureSynchronizer
{
QFutureSynchronizer(const QFutureSynchronizer &) ; QFutureSynchronizer &operator=(const QFutureSynchronizer &) ;

public:
QFutureSynchronizer() : m_cancelOnWait(false) { }
explicit QFutureSynchronizer(const QFuture<T> &future)
: m_cancelOnWait(false)
{ addFuture(future); }
~QFutureSynchronizer() { waitForFinished(); }

void setFuture(const QFuture<T> &future)
{
waitForFinished();
m_futures.clear();
addFuture(future);
}

void addFuture(const QFuture<T> &future)
{
m_futures.append(future);
}

void waitForFinished()
{
if (m_cancelOnWait) {
for (int i = 0; i < m_futures.count(); ++i) {
m_futures[i].cancel();
}
}

for (int i = 0; i < m_futures.count(); ++i) {
m_futures[i].waitForFinished();
}
}

void clearFutures()
{
m_futures.clear();
}

QList<QFuture<T> > futures() const
{
return m_futures;
}

void setCancelOnWait(bool enabled)
{
m_cancelOnWait = enabled;
}

bool cancelOnWait() const
{
return m_cancelOnWait;
}

protected:
QList<QFuture<T> > m_futures;
bool m_cancelOnWait;
};





# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturewatcher.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"


















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturewatcher.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturewatcher.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturewatcher.h"



class QEvent;

class QFutureWatcherBasePrivate;
class  QFutureWatcherBase : public QObject
{
Q_OBJECT
inline QFutureWatcherBasePrivate* d_func() { return reinterpret_cast<QFutureWatcherBasePrivate *>(qGetPtrHelper(d_ptr)); } inline const QFutureWatcherBasePrivate* d_func() const { return reinterpret_cast<const QFutureWatcherBasePrivate *>(qGetPtrHelper(d_ptr)); } friend class QFutureWatcherBasePrivate;

public:
explicit QFutureWatcherBase(QObject *parent = 0);


int progressValue() const;
int progressMinimum() const;
int progressMaximum() const;
QString progressText() const;

bool isStarted() const;
bool isFinished() const;
bool isRunning() const;
bool isCanceled() const;
bool isPaused() const;

void waitForFinished();

void setPendingResultsLimit(int limit);

bool event(QEvent *event);

signals:
void started();
void finished();
void canceled();
void paused();
void resumed();
void resultReadyAt(int resultIndex);
void resultsReadyAt(int beginIndex, int endIndex);
void progressRangeChanged(int minimum, int maximum);
void progressValueChanged(int progressValue);
void progressTextChanged(const QString &progressText);

public slots:
void cancel();
void setPaused(bool paused);
void pause();
void resume();
void togglePaused();

protected:
void connectNotify (const QMetaMethod &signal);
void disconnectNotify (const QMetaMethod &signal);


void connectOutputInterface();
void disconnectOutputInterface(bool pendingAssignment = false);

private:

virtual const QFutureInterfaceBase &futureInterface() const = 0;
virtual QFutureInterfaceBase &futureInterface() = 0;
};

template <typename T>
class QFutureWatcher : public QFutureWatcherBase
{
public:
explicit QFutureWatcher(QObject *_parent = 0)
: QFutureWatcherBase(_parent)
{ }
~QFutureWatcher()
{ disconnectOutputInterface(); }

void setFuture(const QFuture<T> &future);
QFuture<T> future() const
{ return m_future; }

T result() const { return m_future.result(); }
T resultAt(int index) const { return m_future.resultAt(index); }





































# 169 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturewatcher.h"
private:
QFuture<T> m_future;
const QFutureInterfaceBase &futureInterface() const { return m_future.d; }
QFutureInterfaceBase &futureInterface() { return m_future.d; }
};

template <typename T>
inline void QFutureWatcher<T>::setFuture(const QFuture<T> &_future)
{
if (_future == m_future)
return;

disconnectOutputInterface(true);
m_future = _future;
connectOutputInterface();
}

template <>
class QFutureWatcher<void> : public QFutureWatcherBase
{
public:
explicit QFutureWatcher(QObject *_parent = 0)
: QFutureWatcherBase(_parent)
{ }
~QFutureWatcher()
{ disconnectOutputInterface(); }

void setFuture(const QFuture<void> &future);
QFuture<void> future() const
{ return m_future; }

private:
QFuture<void> m_future;
const QFutureInterfaceBase &futureInterface() const { return m_future.d; }
QFutureInterfaceBase &futureInterface() { return m_future.d; }
};

inline void QFutureWatcher<void>::setFuture(const QFuture<void> &_future)
{
if (_future == m_future)
return;

disconnectOutputInterface(true);
m_future = _future;
connectOutputInterface();
}





# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qgenericatomic.h"


















































































































































































































































# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmutex.h"




















































































































































































































# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qreadwritelock.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qreadwritelock.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qreadwritelock.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qreadwritelock.h"
struct QReadWriteLockPrivate;

class  QReadWriteLock
{
public:
enum RecursionMode { NonRecursive, Recursive };

explicit QReadWriteLock(RecursionMode recursionMode = NonRecursive);
~QReadWriteLock();

void lockForRead();
bool tryLockForRead();
bool tryLockForRead(int timeout);

void lockForWrite();
bool tryLockForWrite();
bool tryLockForWrite(int timeout);

void unlock();

private:
QReadWriteLock(const QReadWriteLock &) ; QReadWriteLock &operator=(const QReadWriteLock &) ;
QReadWriteLockPrivate *d;

friend class QWaitCondition;
};






# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qreadwritelock.h"
class  QReadLocker
{
public:
inline QReadLocker(QReadWriteLock *readWriteLock);

inline ~QReadLocker()
{ unlock(); }

inline void unlock()
{
if (q_val) {
if ((q_val & quintptr(1u)) == quintptr(1u)) {
q_val &= ~quintptr(1u);
readWriteLock()->unlock();
}
}
}

inline void relock()
{
if (q_val) {
if ((q_val & quintptr(1u)) == quintptr(0u)) {
readWriteLock()->lockForRead();
q_val |= quintptr(1u);
}
}
}

inline QReadWriteLock *readWriteLock() const
{ return reinterpret_cast<QReadWriteLock *>(q_val & ~quintptr(1u)); }

private:
QReadLocker(const QReadLocker &) ; QReadLocker &operator=(const QReadLocker &) ;
quintptr q_val;
};

inline QReadLocker::QReadLocker(QReadWriteLock *areadWriteLock)
: q_val(reinterpret_cast<quintptr>(areadWriteLock))
{
qt_noop();
relock();
}

class  QWriteLocker
{
public:
inline QWriteLocker(QReadWriteLock *readWriteLock);

inline ~QWriteLocker()
{ unlock(); }

inline void unlock()
{
if (q_val) {
if ((q_val & quintptr(1u)) == quintptr(1u)) {
q_val &= ~quintptr(1u);
readWriteLock()->unlock();
}
}
}

inline void relock()
{
if (q_val) {
if ((q_val & quintptr(1u)) == quintptr(0u)) {
readWriteLock()->lockForWrite();
q_val |= quintptr(1u);
}
}
}

inline QReadWriteLock *readWriteLock() const
{ return reinterpret_cast<QReadWriteLock *>(q_val & ~quintptr(1u)); }


private:
QWriteLocker(const QWriteLocker &) ; QWriteLocker &operator=(const QWriteLocker &) ;
quintptr q_val;
};

inline QWriteLocker::QWriteLocker(QReadWriteLock *areadWriteLock)
: q_val(reinterpret_cast<quintptr>(areadWriteLock))
{
qt_noop();
relock();
}


























































# 228 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qreadwritelock.h"



# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qresultstore.h"









































































































































































































































# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrunnable.h"






































































# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsemaphore.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsemaphore.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsemaphore.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsemaphore.h"
class QSemaphorePrivate;

class  QSemaphore
{
public:
explicit QSemaphore(int n = 0);
~QSemaphore();

void acquire(int n = 1);
bool tryAcquire(int n = 1);
bool tryAcquire(int n, int timeout);

void release(int n = 1);

int available() const;

private:
QSemaphore(const QSemaphore &) ; QSemaphore &operator=(const QSemaphore &) ;

QSemaphorePrivate *d;
};



# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsemaphore.h"



# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"



class QThreadData;
class QThreadPrivate;
class QAbstractEventDispatcher;


# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"
class  QThread : public QObject
{
Q_OBJECT
public:
static Qt::HANDLE currentThreadId() ;
static QThread *currentThread();
static int idealThreadCount() ;
static void yieldCurrentThread();

explicit QThread(QObject *parent = 0);
~QThread();

enum Priority {
IdlePriority,

LowestPriority,
LowPriority,
NormalPriority,
HighPriority,
HighestPriority,

TimeCriticalPriority,

InheritPriority
};

void setPriority(Priority priority);
Priority priority() const;

bool isFinished() const;
bool isRunning() const;

void setStackSize(uint stackSize);
uint stackSize() const;

void exit(int retcode = 0);

QAbstractEventDispatcher *eventDispatcher() const;
void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher);

bool event(QEvent *event);

public slots:
void start(Priority = InheritPriority);
void terminate();
void quit();

public:

bool wait(unsigned long time = ULONG_MAX);

static void sleep(unsigned long);
static void msleep(unsigned long);
static void usleep(unsigned long);

signals:
void started(

# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"
QPrivateSignal

# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"
);
void finished(

# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"
QPrivateSignal

# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"
);

protected:
virtual void run();
int exec();

static void setTerminationEnabled(bool enabled = true);

protected:
QThread(QThreadPrivate &dd, QObject *parent = 0);

private:
inline QThreadPrivate* d_func() { return reinterpret_cast<QThreadPrivate *>(qGetPtrHelper(d_ptr)); } inline const QThreadPrivate* d_func() const { return reinterpret_cast<const QThreadPrivate *>(qGetPtrHelper(d_ptr)); } friend class QThreadPrivate;

friend class QCoreApplication;
friend class QThreadData;
};
























# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"



# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadpool.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadpool.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthread.h"





































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadpool.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrunnable.h"






































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadpool.h"




# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadpool.h"



class QThreadPoolPrivate;
class  QThreadPool : public QObject
{
Q_OBJECT
inline QThreadPoolPrivate* d_func() { return reinterpret_cast<QThreadPoolPrivate *>(qGetPtrHelper(d_ptr)); } inline const QThreadPoolPrivate* d_func() const { return reinterpret_cast<const QThreadPoolPrivate *>(qGetPtrHelper(d_ptr)); } friend class QThreadPoolPrivate;
Q_PROPERTY(int expiryTimeout READ expiryTimeout WRITE setExpiryTimeout)
Q_PROPERTY(int maxThreadCount READ maxThreadCount WRITE setMaxThreadCount)
Q_PROPERTY(int activeThreadCount READ activeThreadCount)
friend class QFutureInterfaceBase;

public:
QThreadPool(QObject *parent = 0);
~QThreadPool();

static QThreadPool *globalInstance();

void start(QRunnable *runnable, int priority = 0);
bool tryStart(QRunnable *runnable);

int expiryTimeout() const;
void setExpiryTimeout(int expiryTimeout);

int maxThreadCount() const;
void setMaxThreadCount(int maxThreadCount);

int activeThreadCount() const;

void reserveThread();
void releaseThread();

bool waitForDone(int msecs = -1);
};






# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadstorage.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadstorage.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadstorage.h"



class  QThreadStorageData
{
public:
explicit QThreadStorageData(void (*func)(void *));
~QThreadStorageData();

void** get() const;
void** set(void* p);

static void finish(void**);
int id;
};


# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadstorage.h"



template <typename T>
inline
T *&qThreadStorage_localData(QThreadStorageData &d, T **)
{
void **v = d.get();
if (!v) v = d.set(0);
return *(reinterpret_cast<T**>(v));
}

template <typename T>
inline
T *qThreadStorage_localData_const(const QThreadStorageData &d, T **)
{
void **v = d.get();
return v ? *(reinterpret_cast<T**>(v)) : 0;
}

template <typename T>
inline
void qThreadStorage_setLocalData(QThreadStorageData &d, T **t)
{ (void) d.set(*t); }

template <typename T>
inline
void qThreadStorage_deleteData(void *d, T **)
{ delete static_cast<T *>(d); }


template <typename T>
inline
T &qThreadStorage_localData(QThreadStorageData &d, T *)
{
void **v = d.get();
if (!v) v = d.set(new T());
return *(reinterpret_cast<T*>(*v));
}

template <typename T>
inline
T qThreadStorage_localData_const(const QThreadStorageData &d, T *)
{
void **v = d.get();
return v ? *(reinterpret_cast<T*>(*v)) : T();
}

template <typename T>
inline
void qThreadStorage_setLocalData(QThreadStorageData &d, T *t)
{ (void) d.set(new T(*t)); }

template <typename T>
inline
void qThreadStorage_deleteData(void *d, T *)
{ delete static_cast<T *>(d); }





# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qthreadstorage.h"
template <class T>
class QThreadStorage
{
private:
QThreadStorageData d;

QThreadStorage(const QThreadStorage &) ; QThreadStorage &operator=(const QThreadStorage &) ;

static inline void deleteData(void *x)
{ qThreadStorage_deleteData(x, reinterpret_cast<T*>(0)); }

public:
inline QThreadStorage() : d(deleteData) { }
inline ~QThreadStorage() { }

inline bool hasLocalData() const
{ return d.get() != 0; }

inline T& localData()
{ return qThreadStorage_localData(d, reinterpret_cast<T*>(0)); }
inline T localData() const
{ return qThreadStorage_localData_const(d, reinterpret_cast<T*>(0)); }

inline void setLocalData(T t)
{ qThreadStorage_setLocalData(d, &t); }
};






# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwaitcondition.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwaitcondition.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwaitcondition.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwaitcondition.h"
class QWaitConditionPrivate;
class QMutex;
class QReadWriteLock;

class  QWaitCondition
{
public:
QWaitCondition();
~QWaitCondition();

bool wait(QMutex *lockedMutex, unsigned long time = ULONG_MAX);
bool wait(QReadWriteLock *lockedReadWriteLock, unsigned long time = ULONG_MAX);

void wakeOne();
void wakeAll();

private:
QWaitCondition(const QWaitCondition &) ; QWaitCondition &operator=(const QWaitCondition &) ;

QWaitConditionPrivate * d;
};























# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qwaitcondition.h"



# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qalgorithms.h"



































































































































































































































































































































































































































































































































# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"









































































































































































































































































































































# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydataops.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydata.h"









































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydataops.h"





# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydataops.h"


namespace QtPrivate {

template <class T>
struct QPodArrayOps
: QTypedArrayData<T>
{
void appendInitialize(size_t newSize)
{
qt_noop();
qt_noop();
qt_noop();

::memset(this->end(), 0, (newSize - this->size) * sizeof(T));
this->size = int(newSize);
}

void copyAppend(const T *b, const T *e)
{
qt_noop();
qt_noop();
qt_noop();

::memcpy(this->end(), b, (e - b) * sizeof(T));
this->size += e - b;
}

void copyAppend(size_t n, const T &t)
{
qt_noop();
qt_noop();

T *iter = this->end();
const T *const end = iter + n;
for (; iter != end; ++iter)
::memcpy(iter, &t, sizeof(T));
this->size += int(n);
}

void truncate(size_t newSize)
{
qt_noop();
qt_noop();

this->size = int(newSize);
}

void destroyAll() 
{
qt_noop();



}

void insert(T *where, const T *b, const T *e)
{
qt_noop();
qt_noop(); 
qt_noop();
qt_noop(); 
qt_noop();

::memmove(where + (e - b), where, (static_cast<const T*>(this->end()) - where) * sizeof(T));
::memcpy(where, b, (e - b) * sizeof(T));
this->size += (e - b);
}

void erase(T *b, T *e)
{
qt_noop();
qt_noop();
qt_noop();

::memmove(b, e, (this->end() - e) * sizeof(T));
this->size -= (e - b);
}
};

template <class T>
struct QGenericArrayOps
: QTypedArrayData<T>
{
void appendInitialize(size_t newSize)
{
qt_noop();
qt_noop();
qt_noop();

T *const begin = this->begin();
do {
new (begin + this->size) T();
} while (uint(++this->size) != newSize);
}

void copyAppend(const T *b, const T *e)
{
qt_noop();
qt_noop();
qt_noop();

T *iter = this->end();
for (; b != e; ++iter, ++b) {
new (iter) T(*b);
++this->size;
}
}

void copyAppend(size_t n, const T &t)
{
qt_noop();
qt_noop();

T *iter = this->end();
const T *const end = iter + n;
for (; iter != end; ++iter) {
new (iter) T(t);
++this->size;
}
}

void truncate(size_t newSize)
{
qt_noop();
qt_noop();

const T *const b = this->begin();
do {
(b + --this->size)->~T();
} while (uint(this->size) != newSize);
}

void destroyAll() 
{



qt_noop();

const T *const b = this->begin();
const T *i = this->end();

while (i != b)
(--i)->~T();
}

void insert(T *where, const T *b, const T *e)
{
qt_noop();
qt_noop(); 
qt_noop();
qt_noop(); 
qt_noop();



T *const end = this->end();
const T *readIter = end;
T *writeIter = end + (e - b);

const T *const step1End = where + qMax(e - b, end - where);

struct Destructor
{
Destructor(T *&it)
: iter(&it)
, end(it)
{
}

void commit()
{
iter = &end;
}

~Destructor()
{
for (; *iter != end; --*iter)
(*iter)->~T();
}

T **iter;
T *end;
} destroyer(writeIter);


do {
--readIter, --writeIter;
new (writeIter) T(*readIter);
} while (writeIter != step1End);

while (writeIter != end) {
--e, --writeIter;
new (writeIter) T(*e);
}

destroyer.commit();
this->size += destroyer.end - end;


while (readIter != where) {
--readIter, --writeIter;
*writeIter = *readIter;
}

while (writeIter != where) {
--e, --writeIter;
*writeIter = *e;
}
}

void erase(T *b, T *e)
{
qt_noop();
qt_noop();
qt_noop();

const T *const end = this->end();

do {
*b = *e;
++b, ++e;
} while (e != end);

do {
(--e)->~T();
--this->size;
} while (e != b);
}
};

template <class T>
struct QMovableArrayOps
: QGenericArrayOps<T>
{





void insert(T *where, const T *b, const T *e)
{
qt_noop();
qt_noop(); 
qt_noop();
qt_noop(); 
qt_noop();




struct ReversibleDisplace
{
ReversibleDisplace(T *start, T *finish, size_t diff)
: begin(start)
, end(finish)
, displace(diff)
{
::memmove(begin + displace, begin, (end - begin) * sizeof(T));
}

void commit() { displace = 0; }

~ReversibleDisplace()
{
if (displace)
::memmove(begin, begin + displace, (end - begin) * sizeof(T));
}

T *const begin;
T *const end;
size_t displace;

} displace(where, this->end(), size_t(e - b));

struct CopyConstructor
{
CopyConstructor(T *w) : where(w) {}

void copy(const T *src, const T *const srcEnd)
{
n = 0;
for (; src != srcEnd; ++src) {
new (where + n) T(*src);
++n;
}
n = 0;
}

~CopyConstructor()
{
while (n)
where[--n].~T();
}

T *const where;
size_t n;
} copier(where);

copier.copy(b, e);
displace.commit();
this->size += (e - b);
}

void erase(T *b, T *e)
{
qt_noop();
qt_noop();
qt_noop();

struct Mover
{
Mover(T *&start, const T *finish, int &sz)
: destination(start)
, source(start)
, n(finish - start)
, size(sz)
{
}

~Mover()
{
::memmove(destination, source, n * sizeof(T));
size -= (source - destination);
}

T *&destination;
const T *const source;
size_t n;
int &size;
} mover(e, this->end(), this->size);

do {

(--e)->~T();
} while (e != b);
}
};

template <class T, class = void>
struct QArrayOpsSelector
{
typedef QGenericArrayOps<T> Type;
};

template <class T>
struct QArrayOpsSelector<T,
typename QEnableIf<
!QTypeInfo<T>::isComplex && !QTypeInfo<T>::isStatic
>::Type>
{
typedef QPodArrayOps<T> Type;
};

template <class T>
struct QArrayOpsSelector<T,
typename QEnableIf<
QTypeInfo<T>::isComplex && !QTypeInfo<T>::isStatic
>::Type>
{
typedef QMovableArrayOps<T> Type;
};

} 

template <class T>
struct QArrayDataOps
: QtPrivate::QArrayOpsSelector<T>::Type
{
};




# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydatapointer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydataops.h"








































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydatapointer.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydatapointer.h"


template <class T>
struct QArrayDataPointer
{
private:
typedef QTypedArrayData<T> Data;
typedef QArrayDataOps<T> DataOps;

public:
QArrayDataPointer()
: d(Data::sharedNull())
{
}

QArrayDataPointer(const QArrayDataPointer &other)
: d(other.d->ref.ref()
? other.d
: other.clone(other.d->cloneFlags()))
{
}

explicit QArrayDataPointer(QTypedArrayData<T> *ptr)
: d(ptr)
{
do { if (!(ptr)) qBadAlloc(); } while (0);
}

QArrayDataPointer(QArrayDataPointerRef<T> ref)
: d(ref.ptr)
{
}

QArrayDataPointer &operator=(const QArrayDataPointer &other)
{
QArrayDataPointer tmp(other);
this->swap(tmp);
return *this;
}















# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qarraydatapointer.h"
DataOps &operator*() const
{
qt_noop();
return *static_cast<DataOps *>(d);
}

DataOps *operator->() const
{
qt_noop();
return static_cast<DataOps *>(d);
}

~QArrayDataPointer()
{
if (!d->ref.deref()) {
if (d->isMutable())
(*this)->destroyAll();
Data::deallocate(d);
}
}

bool isNull() const
{
return d == Data::sharedNull();
}

Data *data() const
{
return d;
}

bool needsDetach() const
{
return (!d->isMutable() || d->ref.isShared());
}

void setSharable(bool sharable)
{
if (needsDetach()) {
Data *detached = clone(sharable
? d->detachFlags() & ~QArrayData::Unsharable
: d->detachFlags() | QArrayData::Unsharable);
QArrayDataPointer old(d);
d = detached;
} else {
d->ref.setSharable(sharable);
}
}

void swap(QArrayDataPointer &other)
{
qSwap(d, other.d);
}

void clear()
{
QArrayDataPointer tmp(d);
d = Data::sharedNull();
}

bool detach()
{
if (needsDetach()) {
Data *copy = clone(d->detachFlags());
QArrayDataPointer old(d);
d = copy;
return true;
}

return false;
}

private:
Data *clone(QArrayData::AllocationOptions options) const 
{
QArrayDataPointer copy(Data::allocate(d->detachCapacity(d->size),
options));
if (d->size)
copy->copyAppend(d->begin(), d->end());

Data *result = copy.d;
copy.d = Data::sharedNull();
return result;
}

Data *d;
};

template <class T>
inline bool operator==(const QArrayDataPointer<T> &lhs, const QArrayDataPointer<T> &rhs)
{
return lhs.data() == rhs.data();
}

template <class T>
inline bool operator!=(const QArrayDataPointer<T> &lhs, const QArrayDataPointer<T> &rhs)
{
return lhs.data() != rhs.data();
}

template <class T>
inline void qSwap(QArrayDataPointer<T> &p1, QArrayDataPointer<T> &p2)
{
p1.swap(p2);
}



namespace std
{
template <class T>
inline void swap(
::QArrayDataPointer<T> &p1,
::QArrayDataPointer<T> &p2)
{
p1.swap(p2);
}
}


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"



class QBitRef;
class  QBitArray
{
friend  QDataStream &operator<<(QDataStream &, const QBitArray &);
friend  QDataStream &operator>>(QDataStream &, QBitArray &);
friend  uint qHash(const QBitArray &key, uint seed) ;
QByteArray d;

public:
inline QBitArray() {}
explicit QBitArray(int size, bool val = false);
QBitArray(const QBitArray &other) : d(other.d) {}
inline QBitArray &operator=(const QBitArray &other) { d = other.d; return *this; }





# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"
inline void swap(QBitArray &other) { qSwap(d, other.d); }

inline int size() const { return (d.size() << 3) - *d.constData(); }
inline int count() const { return (d.size() << 3) - *d.constData(); }
int count(bool on) const;

inline bool isEmpty() const { return d.isEmpty(); }
inline bool isNull() const { return d.isNull(); }

void resize(int size);

inline void detach() { d.detach(); }
inline bool isDetached() const { return d.isDetached(); }
inline void clear() { d.clear(); }

bool testBit(int i) const;
void setBit(int i);
void setBit(int i, bool val);
void clearBit(int i);
bool toggleBit(int i);

bool at(int i) const;
QBitRef operator[](int i);
bool operator[](int i) const;
QBitRef operator[](uint i);
bool operator[](uint i) const;

QBitArray& operator&=(const QBitArray &);
QBitArray& operator|=(const QBitArray &);
QBitArray& operator^=(const QBitArray &);
QBitArray operator~() const;

inline bool operator==(const QBitArray& other) const { return d == other.d; }
inline bool operator!=(const QBitArray& other) const { return d != other.d; }

inline bool fill(bool val, int size = -1);
void fill(bool val, int first, int last);

inline void truncate(int pos) { if (pos < size()) resize(pos); }

public:
typedef QByteArray::DataPtr DataPtr;
inline DataPtr &data_ptr() { return d.data_ptr(); }
};

inline bool QBitArray::fill(bool aval, int asize)
{ *this = QBitArray((asize < 0 ? this->size() : asize), aval); return true; }

 QBitArray operator&(const QBitArray &, const QBitArray &);
 QBitArray operator|(const QBitArray &, const QBitArray &);
 QBitArray operator^(const QBitArray &, const QBitArray &);

inline bool QBitArray::testBit(int i) const
{ qt_noop();
return (*(reinterpret_cast<const uchar*>(d.constData())+1+(i>>3)) & (1 << (i & 7))) != 0; }

inline void QBitArray::setBit(int i)
{ qt_noop();
*(reinterpret_cast<uchar*>(d.data())+1+(i>>3)) |= uchar(1 << (i & 7)); }

inline void QBitArray::clearBit(int i)
{ qt_noop();
*(reinterpret_cast<uchar*>(d.data())+1+(i>>3)) &= ~uchar(1 << (i & 7)); }

inline void QBitArray::setBit(int i, bool val)
{ if (val) setBit(i); else clearBit(i); }

inline bool QBitArray::toggleBit(int i)
{ qt_noop();
uchar b = uchar(1<<(i&7)); uchar* p = reinterpret_cast<uchar*>(d.data())+1+(i>>3);
uchar c = uchar(*p&b); *p^=b; return c!=0; }

inline bool QBitArray::operator[](int i) const { return testBit(i); }
inline bool QBitArray::operator[](uint i) const { return testBit(i); }
inline bool QBitArray::at(int i) const { return testBit(i); }

class  QBitRef
{
private:
QBitArray& a;
int i;
inline QBitRef(QBitArray& array, int idx) : a(array), i(idx) {}
friend class QBitArray;
public:
inline operator bool() const { return a.testBit(i); }
inline bool operator!() const { return !a.testBit(i); }
QBitRef& operator=(const QBitRef& val) { a.setBit(i, val); return *this; }
QBitRef& operator=(bool val) { a.setBit(i, val); return *this; }
};

inline QBitRef QBitArray::operator[](int i)
{ qt_noop(); return QBitRef(*this, i); }
inline QBitRef QBitArray::operator[](uint i)
{ return QBitRef(*this, i); }



# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"
 QDataStream &operator<<(QDataStream &, const QBitArray &);
 QDataStream &operator>>(QDataStream &, QBitArray &);



# 170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"
 QDebug operator<<(QDebug, const QBitArray &);


# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"
template<> class QTypeInfo<QBitArray > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBitArray)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QBitArray) }; static inline const char *name() { return "QBitArray"; } }; template <> inline void qSwap<QBitArray>(QBitArray &value1, QBitArray &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QBitArray>(::QBitArray &value1, ::QBitArray &value2) { value1.swap(value2); } } 




# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearraymatcher.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearraymatcher.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearraymatcher.h"



class QByteArrayMatcherPrivate;

class  QByteArrayMatcher
{
public:
QByteArrayMatcher();
explicit QByteArrayMatcher(const QByteArray &pattern);
explicit QByteArrayMatcher(const char *pattern, int length);
QByteArrayMatcher(const QByteArrayMatcher &other);
~QByteArrayMatcher();

QByteArrayMatcher &operator=(const QByteArrayMatcher &other);

void setPattern(const QByteArray &pattern);

int indexIn(const QByteArray &ba, int from = 0) const;
int indexIn(const char *str, int len, int from = 0) const;
inline QByteArray pattern() const
{
if (q_pattern.isNull())
return QByteArray(reinterpret_cast<const char*>(p.p), p.l);
return q_pattern;
}

private:
QByteArrayMatcherPrivate *d;
QByteArray q_pattern;





# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearraymatcher.h"
struct Data {
uchar q_skiptable[256];
const uchar *p;
int l;
};
union {
uint dummy[256];
Data p;
};



# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearraymatcher.h"
};




# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcache.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcache.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcache.h"



template <class Key, class T>
class QCache
{
struct Node {
inline Node() : keyPtr(0) {}
inline Node(T *data, int cost)
: keyPtr(0), t(data), c(cost), p(0), n(0) {}
const Key *keyPtr; T *t; int c; Node *p,*n;
};
Node *f, *l;
QHash<Key, Node> hash;
int mx, total;

inline void unlink(Node &n) {
if (n.p) n.p->n = n.n;
if (n.n) n.n->p = n.p;
if (l == &n) l = n.p;
if (f == &n) f = n.n;
total -= n.c;
T *obj = n.t;
hash.remove(*n.keyPtr);
delete obj;
}
inline T *relink(const Key &key) {
typename QHash<Key, Node>::iterator i = hash.find(key);
if (typename QHash<Key, Node>::const_iterator(i) == hash.constEnd())
return 0;

Node &n = *i;
if (f != &n) {
if (n.p) n.p->n = n.n;
if (n.n) n.n->p = n.p;
if (l == &n) l = n.p;
n.p = 0;
n.n = f;
f->p = &n;
f = &n;
}
return n.t;
}

QCache(const QCache &) ; QCache &operator=(const QCache &) ;

public:
inline explicit QCache(int maxCost = 100);
inline ~QCache() { clear(); }

inline int maxCost() const { return mx; }
void setMaxCost(int m);
inline int totalCost() const { return total; }

inline int size() const { return hash.size(); }
inline int count() const { return hash.size(); }
inline bool isEmpty() const { return hash.isEmpty(); }
inline QList<Key> keys() const { return hash.keys(); }

void clear();

bool insert(const Key &key, T *object, int cost = 1);
T *object(const Key &key) const;
inline bool contains(const Key &key) const { return hash.contains(key); }
T *operator[](const Key &key) const;

bool remove(const Key &key);
T *take(const Key &key);

private:
void trim(int m);
};

template <class Key, class T>
inline QCache<Key, T>::QCache(int amaxCost)
: f(0), l(0), mx(amaxCost), total(0) {}

template <class Key, class T>
inline void QCache<Key,T>::clear()
{ while (f) { delete f->t; f = f->n; }
hash.clear(); l = 0; total = 0; }

template <class Key, class T>
inline void QCache<Key,T>::setMaxCost(int m)
{ mx = m; trim(mx); }

template <class Key, class T>
inline T *QCache<Key,T>::object(const Key &key) const
{ return const_cast<QCache<Key,T>*>(this)->relink(key); }

template <class Key, class T>
inline T *QCache<Key,T>::operator[](const Key &key) const
{ return object(key); }

template <class Key, class T>
inline bool QCache<Key,T>::remove(const Key &key)
{
typename QHash<Key, Node>::iterator i = hash.find(key);
if (typename QHash<Key, Node>::const_iterator(i) == hash.constEnd()) {
return false;
} else {
unlink(*i);
return true;
}
}

template <class Key, class T>
inline T *QCache<Key,T>::take(const Key &key)
{
typename QHash<Key, Node>::iterator i = hash.find(key);
if (i == hash.end())
return 0;

Node &n = *i;
T *t = n.t;
n.t = 0;
unlink(n);
return t;
}

template <class Key, class T>
bool QCache<Key,T>::insert(const Key &akey, T *aobject, int acost)
{
remove(akey);
if (acost > mx) {
delete aobject;
return false;
}
trim(mx - acost);
Node sn(aobject, acost);
typename QHash<Key, Node>::iterator i = hash.insert(akey, sn);
total += acost;
Node *n = &i.value();
n->keyPtr = &i.key();
if (f) f->p = n;
n->n = f;
f = n;
if (!l) l = f;
return true;
}

template <class Key, class T>
void QCache<Key,T>::trim(int m)
{
Node *n = l;
while (n && total > m) {
Node *u = n;
n = n->p;
unlink(*u);
}
}




# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"















































































































































































































































































































































































































































































































































# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontainerfwd.h"


































































# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcontiguouscache.h"

















































































































































































































































































































































































































































































# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcryptographichash.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcryptographichash.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcryptographichash.h"



class QCryptographicHashPrivate;
class QIODevice;

class  QCryptographicHash
{
public:
enum Algorithm {
Md4,
Md5,
Sha1,
Sha224,
Sha256,
Sha384,
Sha512,
Sha3_224,
Sha3_256,
Sha3_384,
Sha3_512
};

explicit QCryptographicHash(Algorithm method);
~QCryptographicHash();

void reset();

void addData(const char *data, int length);
void addData(const QByteArray &data);
bool addData(QIODevice* device);

QByteArray result() const;

static QByteArray hash(const QByteArray &data, Algorithm method);
private:
QCryptographicHash(const QCryptographicHash &) ; QCryptographicHash &operator=(const QCryptographicHash &) ;
QCryptographicHashPrivate *d;
};




# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"













































































































































































































































































































# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"















































































































































# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qelapsedtimer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qelapsedtimer.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qelapsedtimer.h"



class  QElapsedTimer
{
public:
enum ClockType {
SystemTime,
MonotonicClock,
TickCounter,
MachAbsoluteTime,
PerformanceCounter
};
static ClockType clockType() ;
static bool isMonotonic() ;

void start() ;
qint64 restart() ;
void invalidate() ;
bool isValid() const ;

qint64 nsecsElapsed() const ;
qint64 elapsed() const ;
bool hasExpired(qint64 timeout) const ;

qint64 msecsSinceReference() const ;
qint64 msecsTo(const QElapsedTimer &other) const ;
qint64 secsTo(const QElapsedTimer &other) const ;

bool operator==(const QElapsedTimer &other) const 
{ return t1 == other.t1 && t2 == other.t2; }
bool operator!=(const QElapsedTimer &other) const 
{ return !(*this == other); }

friend bool  operator<(const QElapsedTimer &v1, const QElapsedTimer &v2) ;

private:
qint64 t1;
qint64 t2;
};




# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"



class  QPoint
{
public:
 QPoint();
 QPoint(int xpos, int ypos);

 inline bool isNull() const;

 inline int x() const;
 inline int y() const;
inline void setX(int x);
inline void setY(int y);

 inline int manhattanLength() const;

inline int &rx();
inline int &ry();

inline QPoint &operator+=(const QPoint &p);
inline QPoint &operator-=(const QPoint &p);

inline QPoint &operator*=(float factor);
inline QPoint &operator*=(double factor);
inline QPoint &operator*=(int factor);

inline QPoint &operator/=(qreal divisor);

 static inline int dotProduct(const QPoint &p1, const QPoint &p2)
{ return p1.xp * p2.xp + p1.yp * p2.yp; }

friend  inline bool operator==(const QPoint &, const QPoint &);
friend  inline bool operator!=(const QPoint &, const QPoint &);
friend  inline const QPoint operator+(const QPoint &, const QPoint &);
friend  inline const QPoint operator-(const QPoint &, const QPoint &);
friend  inline const QPoint operator*(const QPoint &, float);
friend  inline const QPoint operator*(float, const QPoint &);
friend  inline const QPoint operator*(const QPoint &, double);
friend  inline const QPoint operator*(double, const QPoint &);
friend  inline const QPoint operator*(const QPoint &, int);
friend  inline const QPoint operator*(int, const QPoint &);
friend  inline const QPoint operator+(const QPoint &);
friend  inline const QPoint operator-(const QPoint &);
friend  inline const QPoint operator/(const QPoint &, qreal);

private:
friend class QTransform;
int xp;
int yp;
};

template<> class QTypeInfo<QPoint > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPoint)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPoint) }; static inline const char *name() { return "QPoint"; } };





# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"
 QDataStream &operator<<(QDataStream &, const QPoint &);
 QDataStream &operator>>(QDataStream &, QPoint &);


# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"




 inline QPoint::QPoint() : xp(0), yp(0) {}

 inline QPoint::QPoint(int xpos, int ypos) : xp(xpos), yp(ypos) {}

 inline bool QPoint::isNull() const
{ return xp == 0 && yp == 0; }

 inline int QPoint::x() const
{ return xp; }

 inline int QPoint::y() const
{ return yp; }

inline void QPoint::setX(int xpos)
{ xp = xpos; }

inline void QPoint::setY(int ypos)
{ yp = ypos; }

inline int  QPoint::manhattanLength() const
{ return qAbs(x())+qAbs(y()); }

inline int &QPoint::rx()
{ return xp; }

inline int &QPoint::ry()
{ return yp; }

inline QPoint &QPoint::operator+=(const QPoint &p)
{ xp+=p.xp; yp+=p.yp; return *this; }

inline QPoint &QPoint::operator-=(const QPoint &p)
{ xp-=p.xp; yp-=p.yp; return *this; }

inline QPoint &QPoint::operator*=(float factor)
{ xp = qRound(xp*factor); yp = qRound(yp*factor); return *this; }

inline QPoint &QPoint::operator*=(double factor)
{ xp = qRound(xp*factor); yp = qRound(yp*factor); return *this; }

inline QPoint &QPoint::operator*=(int factor)
{ xp = xp*factor; yp = yp*factor; return *this; }

 inline bool operator==(const QPoint &p1, const QPoint &p2)
{ return p1.xp == p2.xp && p1.yp == p2.yp; }

 inline bool operator!=(const QPoint &p1, const QPoint &p2)
{ return p1.xp != p2.xp || p1.yp != p2.yp; }

 inline const QPoint operator+(const QPoint &p1, const QPoint &p2)
{ return QPoint(p1.xp+p2.xp, p1.yp+p2.yp); }

 inline const QPoint operator-(const QPoint &p1, const QPoint &p2)
{ return QPoint(p1.xp-p2.xp, p1.yp-p2.yp); }

 inline const QPoint operator*(const QPoint &p, float factor)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

 inline const QPoint operator*(const QPoint &p, double factor)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

 inline const QPoint operator*(const QPoint &p, int factor)
{ return QPoint(p.xp*factor, p.yp*factor); }

 inline const QPoint operator*(float factor, const QPoint &p)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

 inline const QPoint operator*(double factor, const QPoint &p)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

 inline const QPoint operator*(int factor, const QPoint &p)
{ return QPoint(p.xp*factor, p.yp*factor); }

 inline const QPoint operator+(const QPoint &p)
{ return p; }

 inline const QPoint operator-(const QPoint &p)
{ return QPoint(-p.xp, -p.yp); }

inline QPoint &QPoint::operator/=(qreal c)
{
xp = qRound(xp/c);
yp = qRound(yp/c);
return *this;
}

 inline const QPoint operator/(const QPoint &p, qreal c)
{
return QPoint(qRound(p.xp/c), qRound(p.yp/c));
}


# 206 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"
 QDebug operator<<(QDebug, const QPoint &);






# 213 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"
class  QPointF
{
public:
 QPointF();
 QPointF(const QPoint &p);
 QPointF(qreal xpos, qreal ypos);

 inline qreal manhattanLength() const;

inline bool isNull() const;

 inline qreal x() const;
 inline qreal y() const;
inline void setX(qreal x);
inline void setY(qreal y);

inline qreal &rx();
inline qreal &ry();

inline QPointF &operator+=(const QPointF &p);
inline QPointF &operator-=(const QPointF &p);
inline QPointF &operator*=(qreal c);
inline QPointF &operator/=(qreal c);

 static inline qreal dotProduct(const QPointF &p1, const QPointF &p2)
{ return p1.xp * p2.xp + p1.yp * p2.yp; }

friend  inline bool operator==(const QPointF &, const QPointF &);
friend  inline bool operator!=(const QPointF &, const QPointF &);
friend  inline const QPointF operator+(const QPointF &, const QPointF &);
friend  inline const QPointF operator-(const QPointF &, const QPointF &);
friend  inline const QPointF operator*(qreal, const QPointF &);
friend  inline const QPointF operator*(const QPointF &, qreal);
friend  inline const QPointF operator+(const QPointF &);
friend  inline const QPointF operator-(const QPointF &);
friend  inline const QPointF operator/(const QPointF &, qreal);

 QPoint toPoint() const;

private:
friend class QMatrix;
friend class QTransform;

qreal xp;
qreal yp;
};

template<> class QTypeInfo<QPointF > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPointF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPointF) }; static inline const char *name() { return "QPointF"; } };





# 266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"
 QDataStream &operator<<(QDataStream &, const QPointF &);
 QDataStream &operator>>(QDataStream &, QPointF &);


# 270 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"




 inline QPointF::QPointF() : xp(0), yp(0) { }

 inline QPointF::QPointF(qreal xpos, qreal ypos) : xp(xpos), yp(ypos) { }

 inline QPointF::QPointF(const QPoint &p) : xp(p.x()), yp(p.y()) { }

 inline qreal QPointF::manhattanLength() const
{
return qAbs(x())+qAbs(y());
}

inline bool QPointF::isNull() const
{
return qIsNull(xp) && qIsNull(yp);
}

 inline qreal QPointF::x() const
{
return xp;
}

 inline qreal QPointF::y() const
{
return yp;
}

inline void QPointF::setX(qreal xpos)
{
xp = xpos;
}

inline void QPointF::setY(qreal ypos)
{
yp = ypos;
}

inline qreal &QPointF::rx()
{
return xp;
}

inline qreal &QPointF::ry()
{
return yp;
}

inline QPointF &QPointF::operator+=(const QPointF &p)
{
xp+=p.xp;
yp+=p.yp;
return *this;
}

inline QPointF &QPointF::operator-=(const QPointF &p)
{
xp-=p.xp; yp-=p.yp; return *this;
}

inline QPointF &QPointF::operator*=(qreal c)
{
xp*=c; yp*=c; return *this;
}

 inline bool operator==(const QPointF &p1, const QPointF &p2)
{
return qFuzzyIsNull(p1.xp - p2.xp) && qFuzzyIsNull(p1.yp - p2.yp);
}

 inline bool operator!=(const QPointF &p1, const QPointF &p2)
{
return !qFuzzyIsNull(p1.xp - p2.xp) || !qFuzzyIsNull(p1.yp - p2.yp);
}

 inline const QPointF operator+(const QPointF &p1, const QPointF &p2)
{
return QPointF(p1.xp+p2.xp, p1.yp+p2.yp);
}

 inline const QPointF operator-(const QPointF &p1, const QPointF &p2)
{
return QPointF(p1.xp-p2.xp, p1.yp-p2.yp);
}

 inline const QPointF operator*(const QPointF &p, qreal c)
{
return QPointF(p.xp*c, p.yp*c);
}

 inline const QPointF operator*(qreal c, const QPointF &p)
{
return QPointF(p.xp*c, p.yp*c);
}

 inline const QPointF operator+(const QPointF &p)
{
return p;
}

 inline const QPointF operator-(const QPointF &p)
{
return QPointF(-p.xp, -p.yp);
}

inline QPointF &QPointF::operator/=(qreal divisor)
{
xp/=divisor;
yp/=divisor;
return *this;
}

 inline const QPointF operator/(const QPointF &p, qreal divisor)
{
return QPointF(p.xp/divisor, p.yp/divisor);
}

 inline QPoint QPointF::toPoint() const
{
return QPoint(qRound(xp), qRound(yp));
}


# 395 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"
 QDebug operator<<(QDebug d, const QPointF &p);


# 398 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"







class  QLine
{
public:
 inline QLine();
 inline QLine(const QPoint &pt1, const QPoint &pt2);
 inline QLine(int x1, int y1, int x2, int y2);

 inline bool isNull() const;

 inline QPoint p1() const;
 inline QPoint p2() const;

 inline int x1() const;
 inline int y1() const;

 inline int x2() const;
 inline int y2() const;

 inline int dx() const;
 inline int dy() const;

inline void translate(const QPoint &p);
inline void translate(int dx, int dy);

 inline QLine translated(const QPoint &p) const;
 inline QLine translated(int dx, int dy) const;

inline void setP1(const QPoint &p1);
inline void setP2(const QPoint &p2);
inline void setPoints(const QPoint &p1, const QPoint &p2);
inline void setLine(int x1, int y1, int x2, int y2);

 inline bool operator==(const QLine &d) const;
 inline bool operator!=(const QLine &d) const { return !(*this == d); }

private:
QPoint pt1, pt2;
};
template<> class QTypeInfo<QLine > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLine)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QLine) }; static inline const char *name() { return "QLine"; } };





 inline QLine::QLine() { }

 inline QLine::QLine(const QPoint &pt1_, const QPoint &pt2_) : pt1(pt1_), pt2(pt2_) { }

 inline QLine::QLine(int x1pos, int y1pos, int x2pos, int y2pos) : pt1(QPoint(x1pos, y1pos)), pt2(QPoint(x2pos, y2pos)) { }

 inline bool QLine::isNull() const
{
return pt1 == pt2;
}

 inline int QLine::x1() const
{
return pt1.x();
}

 inline int QLine::y1() const
{
return pt1.y();
}

 inline int QLine::x2() const
{
return pt2.x();
}

 inline int QLine::y2() const
{
return pt2.y();
}

 inline QPoint QLine::p1() const
{
return pt1;
}

 inline QPoint QLine::p2() const
{
return pt2;
}

 inline int QLine::dx() const
{
return pt2.x() - pt1.x();
}

 inline int QLine::dy() const
{
return pt2.y() - pt1.y();
}

inline void QLine::translate(const QPoint &point)
{
pt1 += point;
pt2 += point;
}

inline void QLine::translate(int adx, int ady)
{
this->translate(QPoint(adx, ady));
}

 inline QLine QLine::translated(const QPoint &p) const
{
return QLine(pt1 + p, pt2 + p);
}

 inline QLine QLine::translated(int adx, int ady) const
{
return translated(QPoint(adx, ady));
}

inline void QLine::setP1(const QPoint &aP1)
{
pt1 = aP1;
}

inline void QLine::setP2(const QPoint &aP2)
{
pt2 = aP2;
}

inline void QLine::setPoints(const QPoint &aP1, const QPoint &aP2)
{
pt1 = aP1;
pt2 = aP2;
}

inline void QLine::setLine(int aX1, int aY1, int aX2, int aY2)
{
pt1 = QPoint(aX1, aY1);
pt2 = QPoint(aX2, aY2);
}

 inline bool QLine::operator==(const QLine &d) const
{
return pt1 == d.pt1 && pt2 == d.pt2;
}


# 198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"
 QDebug operator<<(QDebug d, const QLine &p);



# 202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"
 QDataStream &operator<<(QDataStream &, const QLine &);
 QDataStream &operator>>(QDataStream &, QLine &);


# 206 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"



class  QLineF {
public:

enum IntersectType { NoIntersection, BoundedIntersection, UnboundedIntersection };

 inline QLineF();
 inline QLineF(const QPointF &pt1, const QPointF &pt2);
 inline QLineF(qreal x1, qreal y1, qreal x2, qreal y2);
 inline QLineF(const QLine &line) : pt1(line.p1()), pt2(line.p2()) { }

static QLineF fromPolar(qreal length, qreal angle);

 bool isNull() const;

 inline QPointF p1() const;
 inline QPointF p2() const;

 inline qreal x1() const;
 inline qreal y1() const;

 inline qreal x2() const;
 inline qreal y2() const;

 inline qreal dx() const;
 inline qreal dy() const;

qreal length() const;
void setLength(qreal len);

qreal angle() const;
void setAngle(qreal angle);

qreal angleTo(const QLineF &l) const;

QLineF unitVector() const;
 inline QLineF normalVector() const;


IntersectType intersect(const QLineF &l, QPointF *intersectionPoint) const;

qreal angle(const QLineF &l) const;

 inline QPointF pointAt(qreal t) const;
inline void translate(const QPointF &p);
inline void translate(qreal dx, qreal dy);

 inline QLineF translated(const QPointF &p) const;
 inline QLineF translated(qreal dx, qreal dy) const;

inline void setP1(const QPointF &p1);
inline void setP2(const QPointF &p2);
inline void setPoints(const QPointF &p1, const QPointF &p2);
inline void setLine(qreal x1, qreal y1, qreal x2, qreal y2);

 inline bool operator==(const QLineF &d) const;
 inline bool operator!=(const QLineF &d) const { return !(*this == d); }

 QLine toLine() const;

private:
QPointF pt1, pt2;
};
template<> class QTypeInfo<QLineF > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QLineF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QLineF) }; static inline const char *name() { return "QLineF"; } };





 inline QLineF::QLineF()
{
}

 inline QLineF::QLineF(const QPointF &apt1, const QPointF &apt2)
: pt1(apt1), pt2(apt2)
{
}

 inline QLineF::QLineF(qreal x1pos, qreal y1pos, qreal x2pos, qreal y2pos)
: pt1(x1pos, y1pos), pt2(x2pos, y2pos)
{
}

 inline qreal QLineF::x1() const
{
return pt1.x();
}

 inline qreal QLineF::y1() const
{
return pt1.y();
}

 inline qreal QLineF::x2() const
{
return pt2.x();
}

 inline qreal QLineF::y2() const
{
return pt2.y();
}

 inline bool QLineF::isNull() const
{
return qFuzzyCompare(pt1.x(), pt2.x()) && qFuzzyCompare(pt1.y(), pt2.y());
}

 inline QPointF QLineF::p1() const
{
return pt1;
}

 inline QPointF QLineF::p2() const
{
return pt2;
}

 inline qreal QLineF::dx() const
{
return pt2.x() - pt1.x();
}

 inline qreal QLineF::dy() const
{
return pt2.y() - pt1.y();
}

 inline QLineF QLineF::normalVector() const
{
return QLineF(p1(), p1() + QPointF(dy(), -dx()));
}

inline void QLineF::translate(const QPointF &point)
{
pt1 += point;
pt2 += point;
}

inline void QLineF::translate(qreal adx, qreal ady)
{
this->translate(QPointF(adx, ady));
}

 inline QLineF QLineF::translated(const QPointF &p) const
{
return QLineF(pt1 + p, pt2 + p);
}

 inline QLineF QLineF::translated(qreal adx, qreal ady) const
{
return translated(QPointF(adx, ady));
}

inline void QLineF::setLength(qreal len)
{
if (isNull())
return;
QLineF v = unitVector();
pt2 = QPointF(pt1.x() + v.dx() * len, pt1.y() + v.dy() * len);
}

 inline QPointF QLineF::pointAt(qreal t) const
{
return QPointF(pt1.x() + (pt2.x() - pt1.x()) * t, pt1.y() + (pt2.y() - pt1.y()) * t);
}

 inline QLine QLineF::toLine() const
{
return QLine(pt1.toPoint(), pt2.toPoint());
}


inline void QLineF::setP1(const QPointF &aP1)
{
pt1 = aP1;
}

inline void QLineF::setP2(const QPointF &aP2)
{
pt2 = aP2;
}

inline void QLineF::setPoints(const QPointF &aP1, const QPointF &aP2)
{
pt1 = aP1;
pt2 = aP2;
}

inline void QLineF::setLine(qreal aX1, qreal aY1, qreal aX2, qreal aY2)
{
pt1 = QPointF(aX1, aY1);
pt2 = QPointF(aX2, aY2);
}


 inline bool QLineF::operator==(const QLineF &d) const
{
return pt1 == d.pt1 && pt2 == d.pt2;
}




# 412 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"
 QDebug operator<<(QDebug d, const QLineF &p);



# 416 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"
 QDataStream &operator<<(QDataStream &, const QLineF &);
 QDataStream &operator>>(QDataStream &, QLineF &);


# 420 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"



# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlinkedlist.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiterator.h"



























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlinkedlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlinkedlist.h"





# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlinkedlist.h"



struct  QLinkedListData
{
QLinkedListData *n, *p;
QtPrivate::RefCount ref;
int size;
uint sharable : 1;

static const QLinkedListData shared_null;
};

template <typename T>
struct QLinkedListNode
{
inline QLinkedListNode(const T &arg): t(arg) { }
QLinkedListNode *n, *p;
T t;
};

template <class T>
class QLinkedList
{
typedef QLinkedListNode<T> Node;
union { QLinkedListData *d; QLinkedListNode<T> *e; };

public:
inline QLinkedList() : d(const_cast<QLinkedListData *>(&QLinkedListData::shared_null)) { }
inline QLinkedList(const QLinkedList<T> &l) : d(l.d) { d->ref.ref(); if (!d->sharable) detach(); }
~QLinkedList();
QLinkedList<T> &operator=(const QLinkedList<T> &);





# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlinkedlist.h"
inline void swap(QLinkedList<T> &other) { qSwap(d, other.d); }
bool operator==(const QLinkedList<T> &l) const;
inline bool operator!=(const QLinkedList<T> &l) const { return !(*this == l); }

inline int size() const { return d->size; }
inline void detach()
{ if (d->ref.isShared()) detach_helper(); }
inline bool isDetached() const { return !d->ref.isShared(); }
inline void setSharable(bool sharable) { if (!sharable) detach(); if (d != &QLinkedListData::shared_null) d->sharable = sharable; }
inline bool isSharedWith(const QLinkedList<T> &other) const { return d == other.d; }

inline bool isEmpty() const { return d->size == 0; }

void clear();

void append(const T &);
void prepend(const T &);
T takeFirst();
T takeLast();
int removeAll(const T &t);
bool removeOne(const T &t);
bool contains(const T &t) const;
int count(const T &t) const;

class const_iterator;

class iterator
{
public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef T *pointer;
typedef T &reference;
Node *i;
inline iterator() : i(0) {}
inline iterator(Node *n) : i(n) {}
inline iterator(const iterator &o) : i(o.i) {}
inline iterator &operator=(const iterator &o) { i = o.i; return *this; }
inline T &operator*() const { return i->t; }
inline T *operator->() const { return &i->t; }
inline bool operator==(const iterator &o) const { return i == o.i; }
inline bool operator!=(const iterator &o) const { return i != o.i; }
inline bool operator==(const const_iterator &o) const
{ return i == o.i; }
inline bool operator!=(const const_iterator &o) const
{ return i != o.i; }
inline iterator &operator++() { i = i->n; return *this; }
inline iterator operator++(int) { Node *n = i; i = i->n; return n; }
inline iterator &operator--() { i = i->p; return *this; }
inline iterator operator--(int) { Node *n = i; i = i->p; return n; }
inline iterator operator+(int j) const
{ Node *n = i; if (j > 0) while (j--) n = n->n; else while (j++) n = n->p; return n; }
inline iterator operator-(int j) const { return operator+(-j); }
inline iterator &operator+=(int j) { return *this = *this + j; }
inline iterator &operator-=(int j) { return *this = *this - j; }
};
friend class iterator;

class const_iterator
{
public:
typedef std::bidirectional_iterator_tag iterator_category;
typedef qptrdiff difference_type;
typedef T value_type;
typedef const T *pointer;
typedef const T &reference;
Node *i;
inline const_iterator() : i(0) {}
inline const_iterator(Node *n) : i(n) {}
inline const_iterator(const const_iterator &o) : i(o.i){}
inline const_iterator(iterator ci) : i(ci.i){}
inline const_iterator &operator=(const const_iterator &o) { i = o.i; return *this; }
inline const T &operator*() const { return i->t; }
inline const T *operator->() const { return &i->t; }
inline bool operator==(const const_iterator &o) const { return i == o.i; }
inline bool operator!=(const const_iterator &o) const { return i != o.i; }
inline const_iterator &operator++() { i = i->n; return *this; }
inline const_iterator operator++(int) { Node *n = i; i = i->n; return n; }
inline const_iterator &operator--() { i = i->p; return *this; }
inline const_iterator operator--(int) { Node *n = i; i = i->p; return n; }
inline const_iterator operator+(int j) const
{ Node *n = i; if (j > 0) while (j--) n = n->n; else while (j++) n = n->p; return n; }
inline const_iterator operator-(int j) const { return operator+(-j); }
inline const_iterator &operator+=(int j) { return *this = *this + j; }
inline const_iterator &operator-=(int j) { return *this = *this - j; }
};
friend class const_iterator;


inline iterator begin() { detach(); return e->n; }
inline const_iterator begin() const { return e->n; }
inline const_iterator cbegin() const { return e->n; }
inline const_iterator constBegin() const { return e->n; }
inline iterator end() { detach(); return e; }
inline const_iterator end() const { return e; }
inline const_iterator cend() const { return e; }
inline const_iterator constEnd() const { return e; }
iterator insert(iterator before, const T &t);
iterator erase(iterator pos);
iterator erase(iterator first, iterator last);


typedef iterator Iterator;
typedef const_iterator ConstIterator;
inline int count() const { return d->size; }
inline T& first() { qt_noop(); return *begin(); }
inline const T& first() const { qt_noop(); return *begin(); }
T& last() { qt_noop(); return *(--end()); }
const T& last() const { qt_noop(); return *(--end()); }
inline void removeFirst() { qt_noop(); erase(begin()); }
inline void removeLast() { qt_noop(); erase(--end()); }
inline bool startsWith(const T &t) const { return !isEmpty() && first() == t; }
inline bool endsWith(const T &t) const { return !isEmpty() && last() == t; }


inline void push_back(const T &t) { append(t); }
inline void push_front(const T &t) { prepend(t); }
inline T& front() { return first(); }
inline const T& front() const { return first(); }
inline T& back() { return last(); }
inline const T& back() const { return last(); }
inline void pop_front() { removeFirst(); }
inline void pop_back() { removeLast(); }
inline bool empty() const { return isEmpty(); }
typedef int size_type;
typedef T value_type;
typedef value_type *pointer;
typedef const value_type *const_pointer;
typedef value_type &reference;
typedef const value_type &const_reference;
typedef qptrdiff difference_type;

static inline QLinkedList<T> fromStdList(const std::list<T> &list)
{ QLinkedList<T> tmp; qCopy(list.begin(), list.end(), std::back_inserter(tmp)); return tmp; }
inline std::list<T> toStdList() const
{ std::list<T> tmp; qCopy(constBegin(), constEnd(), std::back_inserter(tmp)); return tmp; }


QLinkedList<T> &operator+=(const QLinkedList<T> &l);
QLinkedList<T> operator+(const QLinkedList<T> &l) const;
inline QLinkedList<T> &operator+=(const T &t) { append(t); return *this; }
inline QLinkedList<T> &operator<< (const T &t) { append(t); return *this; }
inline QLinkedList<T> &operator<<(const QLinkedList<T> &l) { *this += l; return *this; }

private:
void detach_helper();
void freeData(QLinkedListData*);
};

template <typename T>
inline QLinkedList<T>::~QLinkedList()
{
if (!d->ref.deref())
freeData(d);
}

template <typename T>
void QLinkedList<T>::detach_helper()
{
union { QLinkedListData *d; Node *e; } x;
x.d = new QLinkedListData;
x.d->ref.initializeOwned();
x.d->size = d->size;
x.d->sharable = true;
Node *original = e->n;
Node *copy = x.e;
while (original != e) {
try {
copy->n = new Node(original->t);
copy->n->p = copy;
original = original->n;
copy = copy->n;
} catch (...) {
copy->n = x.e;
qt_noop(); 
freeData(x.d);
throw;
}
}
copy->n = x.e;
x.e->p = copy;
if (!d->ref.deref())
freeData(d);
d = x.d;
}

template <typename T>
void QLinkedList<T>::freeData(QLinkedListData *x)
{
Node *y = reinterpret_cast<Node*>(x);
Node *i = y->n;
qt_noop();
while (i != y) {
Node *n = i;
i = i->n;
delete n;
}
delete x;
}

template <typename T>
void QLinkedList<T>::clear()
{
*this = QLinkedList<T>();
}

template <typename T>
QLinkedList<T> &QLinkedList<T>::operator=(const QLinkedList<T> &l)
{
if (d != l.d) {
QLinkedListData *o = l.d;
o->ref.ref();
if (!d->ref.deref())
freeData(d);
d = o;
if (!d->sharable)
detach_helper();
}
return *this;
}

template <typename T>
bool QLinkedList<T>::operator== (const QLinkedList<T> &l) const
{
if (d->size != l.d->size)
return false;
if (e == l.e)
return true;
Node *i = e->n;
Node *il = l.e->n;
while (i != e) {
if (! (i->t == il->t))
return false;
i = i->n;
il = il->n;
}
return true;
}

template <typename T>
void QLinkedList<T>::append(const T &t)
{
detach();
Node *i = new Node(t);
i->n = e;
i->p = e->p;
i->p->n = i;
e->p = i;
d->size++;
}

template <typename T>
void QLinkedList<T>::prepend(const T &t)
{
detach();
Node *i = new Node(t);
i->n = e->n;
i->p = e;
i->n->p = i;
e->n = i;
d->size++;
}

template <typename T>
int QLinkedList<T>::removeAll(const T &_t)
{
detach();
const T t = _t;
Node *i = e->n;
int c = 0;
while (i != e) {
if (i->t == t) {
Node *n = i;
i->n->p = i->p;
i->p->n = i->n;
i = i->n;
delete n;
c++;
} else {
i = i->n;
}
}
d->size-=c;
return c;
}

template <typename T>
bool QLinkedList<T>::removeOne(const T &_t)
{
detach();
iterator it = qFind(begin(), end(), _t);
if (it != end()) {
erase(it);
return true;
}
return false;
}

template <typename T>
inline T QLinkedList<T>::takeFirst()
{
T t = first();
removeFirst();
return t;
}

template <typename T>
inline T QLinkedList<T>::takeLast()
{
T t = last();
removeLast();
return t;
}

template <typename T>
bool QLinkedList<T>::contains(const T &t) const
{
Node *i = e;
while ((i = i->n) != e)
if (i->t == t)
return true;
return false;
}

template <typename T>
int QLinkedList<T>::count(const T &t) const
{
Node *i = e;
int c = 0;
while ((i = i->n) != e)
if (i->t == t)
c++;
return c;
}


template <typename T>
typename QLinkedList<T>::iterator QLinkedList<T>::insert(iterator before, const T &t)
{
Node *i = before.i;
Node *m = new Node(t);
m->n = i;
m->p = i->p;
m->p->n = m;
i->p = m;
d->size++;
return m;
}

template <typename T>
typename QLinkedList<T>::iterator QLinkedList<T>::erase(typename QLinkedList<T>::iterator afirst,
typename QLinkedList<T>::iterator alast)
{
while (afirst != alast)
erase(afirst++);
return alast;
}


template <typename T>
typename QLinkedList<T>::iterator QLinkedList<T>::erase(iterator pos)
{
detach();
Node *i = pos.i;
if (i != e) {
Node *n = i;
i->n->p = i->p;
i->p->n = i->n;
i = i->n;
delete n;
d->size--;
}
return i;
}

template <typename T>
QLinkedList<T> &QLinkedList<T>::operator+=(const QLinkedList<T> &l)
{
detach();
int n = l.d->size;
d->size += n;
Node *original = l.e->n;
while (n--) {
try {
Node *copy = new Node(original->t);
original = original->n;
copy->n = e;
copy->p = e->p;
copy->p->n = copy;
e->p = copy;
} catch (...) {

while (n++<d->size)
removeLast();
throw;
}
}
return *this;
}

template <typename T>
QLinkedList<T> QLinkedList<T>::operator+(const QLinkedList<T> &l) const
{
QLinkedList<T> n = *this;
n += l;
return n;
}

template <class T> class QLinkedListIterator { typedef typename QLinkedList<T>::const_iterator const_iterator; QLinkedList<T> c; const_iterator i; public: inline QLinkedListIterator(const QLinkedList<T> &container) : c(container), i(c.constBegin()) {} inline QLinkedListIterator &operator=(const QLinkedList<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableLinkedListIterator { typedef typename QLinkedList<T>::iterator iterator; typedef typename QLinkedList<T>::const_iterator const_iterator; QLinkedList<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableLinkedListIterator(QLinkedList<T> &container) : c(&container) { c->setSharable(false); i = c->begin(); n = c->end(); } inline ~QMutableLinkedListIterator() { c->setSharable(true); } inline QMutableLinkedListIterator &operator=(QLinkedList<T> &container) { c->setSharable(true); c = &container; c->setSharable(false); i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { qt_noop(); return *n; } inline const T &value() const { qt_noop(); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };




# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 131 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 132 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"



class  QSize
{
public:
 QSize();
 QSize(int w, int h);

 inline bool isNull() const;
 inline bool isEmpty() const;
 inline bool isValid() const;

 inline int width() const;
 inline int height() const;
inline void setWidth(int w);
inline void setHeight(int h);
void transpose();
 inline QSize transposed() const;

inline void scale(int w, int h, Qt::AspectRatioMode mode);
inline void scale(const QSize &s, Qt::AspectRatioMode mode);
QSize scaled(int w, int h, Qt::AspectRatioMode mode) const;
QSize scaled(const QSize &s, Qt::AspectRatioMode mode) const;

 inline QSize expandedTo(const QSize &) const;
 inline QSize boundedTo(const QSize &) const;

inline int &rwidth();
inline int &rheight();

inline QSize &operator+=(const QSize &);
inline QSize &operator-=(const QSize &);
inline QSize &operator*=(qreal c);
inline QSize &operator/=(qreal c);

friend inline  bool operator==(const QSize &, const QSize &);
friend inline  bool operator!=(const QSize &, const QSize &);
friend inline  const QSize operator+(const QSize &, const QSize &);
friend inline  const QSize operator-(const QSize &, const QSize &);
friend inline  const QSize operator*(const QSize &, qreal);
friend inline  const QSize operator*(qreal, const QSize &);
friend inline const QSize operator/(const QSize &, qreal);

private:
int wd;
int ht;
};
template<> class QTypeInfo<QSize > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSize)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSize) }; static inline const char *name() { return "QSize"; } };






# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"
 QDataStream &operator<<(QDataStream &, const QSize &);
 QDataStream &operator>>(QDataStream &, QSize &);



# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




 inline QSize::QSize() : wd(-1), ht(-1) {}

 inline QSize::QSize(int w, int h) : wd(w), ht(h) {}

 inline bool QSize::isNull() const
{ return wd==0 && ht==0; }

 inline bool QSize::isEmpty() const
{ return wd<1 || ht<1; }

 inline bool QSize::isValid() const
{ return wd>=0 && ht>=0; }

 inline int QSize::width() const
{ return wd; }

 inline int QSize::height() const
{ return ht; }

inline void QSize::setWidth(int w)
{ wd = w; }

inline void QSize::setHeight(int h)
{ ht = h; }

 inline QSize QSize::transposed() const
{ return QSize(ht, wd); }

inline void QSize::scale(int w, int h, Qt::AspectRatioMode mode)
{ scale(QSize(w, h), mode); }

inline void QSize::scale(const QSize &s, Qt::AspectRatioMode mode)
{ *this = scaled(s, mode); }

inline QSize QSize::scaled(int w, int h, Qt::AspectRatioMode mode) const
{ return scaled(QSize(w, h), mode); }

inline int &QSize::rwidth()
{ return wd; }

inline int &QSize::rheight()
{ return ht; }

inline QSize &QSize::operator+=(const QSize &s)
{ wd+=s.wd; ht+=s.ht; return *this; }

inline QSize &QSize::operator-=(const QSize &s)
{ wd-=s.wd; ht-=s.ht; return *this; }

inline QSize &QSize::operator*=(qreal c)
{ wd = qRound(wd*c); ht = qRound(ht*c); return *this; }

 inline bool operator==(const QSize &s1, const QSize &s2)
{ return s1.wd == s2.wd && s1.ht == s2.ht; }

 inline bool operator!=(const QSize &s1, const QSize &s2)
{ return s1.wd != s2.wd || s1.ht != s2.ht; }

 inline const QSize operator+(const QSize & s1, const QSize & s2)
{ return QSize(s1.wd+s2.wd, s1.ht+s2.ht); }

 inline const QSize operator-(const QSize &s1, const QSize &s2)
{ return QSize(s1.wd-s2.wd, s1.ht-s2.ht); }

 inline const QSize operator*(const QSize &s, qreal c)
{ return QSize(qRound(s.wd*c), qRound(s.ht*c)); }

 inline const QSize operator*(qreal c, const QSize &s)
{ return QSize(qRound(s.wd*c), qRound(s.ht*c)); }

inline QSize &QSize::operator/=(qreal c)
{
qt_noop();
wd = qRound(wd/c); ht = qRound(ht/c);
return *this;
}

inline const QSize operator/(const QSize &s, qreal c)
{
qt_noop();
return QSize(qRound(s.wd/c), qRound(s.ht/c));
}

 inline QSize QSize::expandedTo(const QSize & otherSize) const
{
return QSize(qMax(wd,otherSize.wd), qMax(ht,otherSize.ht));
}

 inline QSize QSize::boundedTo(const QSize & otherSize) const
{
return QSize(qMin(wd,otherSize.wd), qMin(ht,otherSize.ht));
}


# 205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"
 QDebug operator<<(QDebug, const QSize &);



# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"
class  QSizeF
{
public:
 QSizeF();
 QSizeF(const QSize &sz);
 QSizeF(qreal w, qreal h);

inline bool isNull() const;
 inline bool isEmpty() const;
 inline bool isValid() const;

 inline qreal width() const;
 inline qreal height() const;
inline void setWidth(qreal w);
inline void setHeight(qreal h);
void transpose();
 inline QSizeF transposed() const;

inline void scale(qreal w, qreal h, Qt::AspectRatioMode mode);
inline void scale(const QSizeF &s, Qt::AspectRatioMode mode);
QSizeF scaled(qreal w, qreal h, Qt::AspectRatioMode mode) const;
QSizeF scaled(const QSizeF &s, Qt::AspectRatioMode mode) const;

 inline QSizeF expandedTo(const QSizeF &) const;
 inline QSizeF boundedTo(const QSizeF &) const;

inline qreal &rwidth();
inline qreal &rheight();

inline QSizeF &operator+=(const QSizeF &);
inline QSizeF &operator-=(const QSizeF &);
inline QSizeF &operator*=(qreal c);
inline QSizeF &operator/=(qreal c);

friend  inline bool operator==(const QSizeF &, const QSizeF &);
friend  inline bool operator!=(const QSizeF &, const QSizeF &);
friend  inline const QSizeF operator+(const QSizeF &, const QSizeF &);
friend  inline const QSizeF operator-(const QSizeF &, const QSizeF &);
friend  inline const QSizeF operator*(const QSizeF &, qreal);
friend  inline const QSizeF operator*(qreal, const QSizeF &);
friend inline const QSizeF operator/(const QSizeF &, qreal);

 inline QSize toSize() const;

private:
qreal wd;
qreal ht;
};
template<> class QTypeInfo<QSizeF > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSizeF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSizeF) }; static inline const char *name() { return "QSizeF"; } };







# 265 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"
 QDataStream &operator<<(QDataStream &, const QSizeF &);
 QDataStream &operator>>(QDataStream &, QSizeF &);



# 270 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




 inline QSizeF::QSizeF() : wd(-1.), ht(-1.) {}

 inline QSizeF::QSizeF(const QSize &sz) : wd(sz.width()), ht(sz.height()) {}

 inline QSizeF::QSizeF(qreal w, qreal h) : wd(w), ht(h) {}

inline bool QSizeF::isNull() const
{ return qIsNull(wd) && qIsNull(ht); }

 inline bool QSizeF::isEmpty() const
{ return wd <= 0. || ht <= 0.; }

 inline bool QSizeF::isValid() const
{ return wd >= 0. && ht >= 0.; }

 inline qreal QSizeF::width() const
{ return wd; }

 inline qreal QSizeF::height() const
{ return ht; }

inline void QSizeF::setWidth(qreal w)
{ wd = w; }

inline void QSizeF::setHeight(qreal h)
{ ht = h; }

 inline QSizeF QSizeF::transposed() const
{ return QSizeF(ht, wd); }

inline void QSizeF::scale(qreal w, qreal h, Qt::AspectRatioMode mode)
{ scale(QSizeF(w, h), mode); }

inline void QSizeF::scale(const QSizeF &s, Qt::AspectRatioMode mode)
{ *this = scaled(s, mode); }

inline QSizeF QSizeF::scaled(qreal w, qreal h, Qt::AspectRatioMode mode) const
{ return scaled(QSizeF(w, h), mode); }

inline qreal &QSizeF::rwidth()
{ return wd; }

inline qreal &QSizeF::rheight()
{ return ht; }

inline QSizeF &QSizeF::operator+=(const QSizeF &s)
{ wd += s.wd; ht += s.ht; return *this; }

inline QSizeF &QSizeF::operator-=(const QSizeF &s)
{ wd -= s.wd; ht -= s.ht; return *this; }

inline QSizeF &QSizeF::operator*=(qreal c)
{ wd *= c; ht *= c; return *this; }

 inline bool operator==(const QSizeF &s1, const QSizeF &s2)
{ return qFuzzyCompare(s1.wd, s2.wd) && qFuzzyCompare(s1.ht, s2.ht); }

 inline bool operator!=(const QSizeF &s1, const QSizeF &s2)
{ return !qFuzzyCompare(s1.wd, s2.wd) || !qFuzzyCompare(s1.ht, s2.ht); }

 inline const QSizeF operator+(const QSizeF & s1, const QSizeF & s2)
{ return QSizeF(s1.wd+s2.wd, s1.ht+s2.ht); }

 inline const QSizeF operator-(const QSizeF &s1, const QSizeF &s2)
{ return QSizeF(s1.wd-s2.wd, s1.ht-s2.ht); }

 inline const QSizeF operator*(const QSizeF &s, qreal c)
{ return QSizeF(s.wd*c, s.ht*c); }

 inline const QSizeF operator*(qreal c, const QSizeF &s)
{ return QSizeF(s.wd*c, s.ht*c); }

inline QSizeF &QSizeF::operator/=(qreal c)
{
qt_noop();
wd = wd/c; ht = ht/c;
return *this;
}

inline const QSizeF operator/(const QSizeF &s, qreal c)
{
qt_noop();
return QSizeF(s.wd/c, s.ht/c);
}

 inline QSizeF QSizeF::expandedTo(const QSizeF & otherSize) const
{
return QSizeF(qMax(wd,otherSize.wd), qMax(ht,otherSize.ht));
}

 inline QSizeF QSizeF::boundedTo(const QSizeF & otherSize) const
{
return QSizeF(qMin(wd,otherSize.wd), qMin(ht,otherSize.ht));
}

 inline QSize QSizeF::toSize() const
{
return QSize(qRound(wd), qRound(ht));
}


# 375 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"
 QDebug operator<<(QDebug, const QSizeF &);


# 378 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"






# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"


class QMargins;

class  QRect
{
public:
 QRect() : x1(0), y1(0), x2(-1), y2(-1) {}
 QRect(const QPoint &topleft, const QPoint &bottomright);
 QRect(const QPoint &topleft, const QSize &size);
 QRect(int left, int top, int width, int height);

 inline bool isNull() const;
 inline bool isEmpty() const;
 inline bool isValid() const;

 inline int left() const;
 inline int top() const;
 inline int right() const;
 inline int bottom() const;
QRect normalized() const;

 inline int x() const;
 inline int y() const;
inline void setLeft(int pos);
inline void setTop(int pos);
inline void setRight(int pos);
inline void setBottom(int pos);
inline void setX(int x);
inline void setY(int y);

inline void setTopLeft(const QPoint &p);
inline void setBottomRight(const QPoint &p);
inline void setTopRight(const QPoint &p);
inline void setBottomLeft(const QPoint &p);

 inline QPoint topLeft() const;
 inline QPoint bottomRight() const;
 inline QPoint topRight() const;
 inline QPoint bottomLeft() const;
 inline QPoint center() const;

inline void moveLeft(int pos);
inline void moveTop(int pos);
inline void moveRight(int pos);
inline void moveBottom(int pos);
inline void moveTopLeft(const QPoint &p);
inline void moveBottomRight(const QPoint &p);
inline void moveTopRight(const QPoint &p);
inline void moveBottomLeft(const QPoint &p);
inline void moveCenter(const QPoint &p);

inline void translate(int dx, int dy);
inline void translate(const QPoint &p);
 inline QRect translated(int dx, int dy) const;
 inline QRect translated(const QPoint &p) const;

inline void moveTo(int x, int t);
inline void moveTo(const QPoint &p);

inline void setRect(int x, int y, int w, int h);
inline void getRect(int *x, int *y, int *w, int *h) const;

inline void setCoords(int x1, int y1, int x2, int y2);
inline void getCoords(int *x1, int *y1, int *x2, int *y2) const;

inline void adjust(int x1, int y1, int x2, int y2);
 inline QRect adjusted(int x1, int y1, int x2, int y2) const;

 inline QSize size() const;
 inline int width() const;
 inline int height() const;
inline void setWidth(int w);
inline void setHeight(int h);
inline void setSize(const QSize &s);

QRect operator|(const QRect &r) const;
QRect operator&(const QRect &r) const;
inline QRect& operator|=(const QRect &r);
inline QRect& operator&=(const QRect &r);

bool contains(const QRect &r, bool proper = false) const;
bool contains(const QPoint &p, bool proper=false) const;
inline bool contains(int x, int y) const;
inline bool contains(int x, int y, bool proper) const;
inline QRect united(const QRect &other) const;
inline QRect intersected(const QRect &other) const;
bool intersects(const QRect &r) const;

inline QRect marginsAdded(const QMargins &margins) const;
inline QRect marginsRemoved(const QMargins &margins) const;
inline QRect &operator+=(const QMargins &margins);
inline QRect &operator-=(const QMargins &margins);






# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
friend  inline bool operator==(const QRect &, const QRect &);
friend  inline bool operator!=(const QRect &, const QRect &);

private:
int x1;
int y1;
int x2;
int y2;
};
template<> class QTypeInfo<QRect > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRect)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRect) }; static inline const char *name() { return "QRect"; } };

 inline bool operator==(const QRect &, const QRect &);
 inline bool operator!=(const QRect &, const QRect &);






# 170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
 QDataStream &operator<<(QDataStream &, const QRect &);
 QDataStream &operator>>(QDataStream &, QRect &);


# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"




 inline QRect::QRect(int aleft, int atop, int awidth, int aheight)
: x1(aleft), y1(atop), x2(aleft + awidth - 1), y2(atop + aheight - 1) {}

 inline QRect::QRect(const QPoint &atopLeft, const QPoint &abottomRight)
: x1(atopLeft.x()), y1(atopLeft.y()), x2(abottomRight.x()), y2(abottomRight.y()) {}

 inline QRect::QRect(const QPoint &atopLeft, const QSize &asize)
: x1(atopLeft.x()), y1(atopLeft.y()), x2(atopLeft.x()+asize.width() - 1), y2(atopLeft.y()+asize.height() - 1) {}

 inline bool QRect::isNull() const
{ return x2 == x1 - 1 && y2 == y1 - 1; }

 inline bool QRect::isEmpty() const
{ return x1 > x2 || y1 > y2; }

 inline bool QRect::isValid() const
{ return x1 <= x2 && y1 <= y2; }

 inline int QRect::left() const
{ return x1; }

 inline int QRect::top() const
{ return y1; }

 inline int QRect::right() const
{ return x2; }

 inline int QRect::bottom() const
{ return y2; }

 inline int QRect::x() const
{ return x1; }

 inline int QRect::y() const
{ return y1; }

inline void QRect::setLeft(int pos)
{ x1 = pos; }

inline void QRect::setTop(int pos)
{ y1 = pos; }

inline void QRect::setRight(int pos)
{ x2 = pos; }

inline void QRect::setBottom(int pos)
{ y2 = pos; }

inline void QRect::setTopLeft(const QPoint &p)
{ x1 = p.x(); y1 = p.y(); }

inline void QRect::setBottomRight(const QPoint &p)
{ x2 = p.x(); y2 = p.y(); }

inline void QRect::setTopRight(const QPoint &p)
{ x2 = p.x(); y1 = p.y(); }

inline void QRect::setBottomLeft(const QPoint &p)
{ x1 = p.x(); y2 = p.y(); }

inline void QRect::setX(int ax)
{ x1 = ax; }

inline void QRect::setY(int ay)
{ y1 = ay; }

 inline QPoint QRect::topLeft() const
{ return QPoint(x1, y1); }

 inline QPoint QRect::bottomRight() const
{ return QPoint(x2, y2); }

 inline QPoint QRect::topRight() const
{ return QPoint(x2, y1); }

 inline QPoint QRect::bottomLeft() const
{ return QPoint(x1, y2); }

 inline QPoint QRect::center() const
{ return QPoint((x1+x2)/2, (y1+y2)/2); }

 inline int QRect::width() const
{ return x2 - x1 + 1; }

 inline int QRect::height() const
{ return y2 - y1 + 1; }

 inline QSize QRect::size() const
{ return QSize(width(), height()); }

inline void QRect::translate(int dx, int dy)
{
x1 += dx;
y1 += dy;
x2 += dx;
y2 += dy;
}

inline void QRect::translate(const QPoint &p)
{
x1 += p.x();
y1 += p.y();
x2 += p.x();
y2 += p.y();
}

 inline QRect QRect::translated(int dx, int dy) const
{ return QRect(QPoint(x1 + dx, y1 + dy), QPoint(x2 + dx, y2 + dy)); }

 inline QRect QRect::translated(const QPoint &p) const
{ return QRect(QPoint(x1 + p.x(), y1 + p.y()), QPoint(x2 + p.x(), y2 + p.y())); }

inline void QRect::moveTo(int ax, int ay)
{
x2 += ax - x1;
y2 += ay - y1;
x1 = ax;
y1 = ay;
}

inline void QRect::moveTo(const QPoint &p)
{
x2 += p.x() - x1;
y2 += p.y() - y1;
x1 = p.x();
y1 = p.y();
}

inline void QRect::moveLeft(int pos)
{ x2 += (pos - x1); x1 = pos; }

inline void QRect::moveTop(int pos)
{ y2 += (pos - y1); y1 = pos; }

inline void QRect::moveRight(int pos)
{
x1 += (pos - x2);
x2 = pos;
}

inline void QRect::moveBottom(int pos)
{
y1 += (pos - y2);
y2 = pos;
}

inline void QRect::moveTopLeft(const QPoint &p)
{
moveLeft(p.x());
moveTop(p.y());
}

inline void QRect::moveBottomRight(const QPoint &p)
{
moveRight(p.x());
moveBottom(p.y());
}

inline void QRect::moveTopRight(const QPoint &p)
{
moveRight(p.x());
moveTop(p.y());
}

inline void QRect::moveBottomLeft(const QPoint &p)
{
moveLeft(p.x());
moveBottom(p.y());
}

inline void QRect::moveCenter(const QPoint &p)
{
int w = x2 - x1;
int h = y2 - y1;
x1 = p.x() - w/2;
y1 = p.y() - h/2;
x2 = x1 + w;
y2 = y1 + h;
}

inline void QRect::getRect(int *ax, int *ay, int *aw, int *ah) const
{
*ax = x1;
*ay = y1;
*aw = x2 - x1 + 1;
*ah = y2 - y1 + 1;
}

inline void QRect::setRect(int ax, int ay, int aw, int ah)
{
x1 = ax;
y1 = ay;
x2 = (ax + aw - 1);
y2 = (ay + ah - 1);
}

inline void QRect::getCoords(int *xp1, int *yp1, int *xp2, int *yp2) const
{
*xp1 = x1;
*yp1 = y1;
*xp2 = x2;
*yp2 = y2;
}

inline void QRect::setCoords(int xp1, int yp1, int xp2, int yp2)
{
x1 = xp1;
y1 = yp1;
x2 = xp2;
y2 = yp2;
}

 inline QRect QRect::adjusted(int xp1, int yp1, int xp2, int yp2) const
{ return QRect(QPoint(x1 + xp1, y1 + yp1), QPoint(x2 + xp2, y2 + yp2)); }

inline void QRect::adjust(int dx1, int dy1, int dx2, int dy2)
{
x1 += dx1;
y1 += dy1;
x2 += dx2;
y2 += dy2;
}

inline void QRect::setWidth(int w)
{ x2 = (x1 + w - 1); }

inline void QRect::setHeight(int h)
{ y2 = (y1 + h - 1); }

inline void QRect::setSize(const QSize &s)
{
x2 = (s.width() + x1 - 1);
y2 = (s.height() + y1 - 1);
}

inline bool QRect::contains(int ax, int ay, bool aproper) const
{
return contains(QPoint(ax, ay), aproper);
}

inline bool QRect::contains(int ax, int ay) const
{
return contains(QPoint(ax, ay), false);
}

inline QRect& QRect::operator|=(const QRect &r)
{
*this = *this | r;
return *this;
}

inline QRect& QRect::operator&=(const QRect &r)
{
*this = *this & r;
return *this;
}

inline QRect QRect::intersected(const QRect &other) const
{
return *this & other;
}

inline QRect QRect::united(const QRect &r) const
{
return *this | r;
}

 inline bool operator==(const QRect &r1, const QRect &r2)
{
return r1.x1==r2.x1 && r1.x2==r2.x2 && r1.y1==r2.y1 && r1.y2==r2.y2;
}

 inline bool operator!=(const QRect &r1, const QRect &r2)
{
return r1.x1!=r2.x1 || r1.x2!=r2.x2 || r1.y1!=r2.y1 || r1.y2!=r2.y2;
}


# 456 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
 QDebug operator<<(QDebug, const QRect &);



# 460 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
class  QRectF
{
public:
 QRectF() : xp(0.), yp(0.), w(0.), h(0.) {}
 QRectF(const QPointF &topleft, const QSizeF &size);
 QRectF(const QPointF &topleft, const QPointF &bottomRight);
 QRectF(qreal left, qreal top, qreal width, qreal height);
 QRectF(const QRect &rect);

 inline bool isNull() const;
 inline bool isEmpty() const;
 inline bool isValid() const;
QRectF normalized() const;

 inline qreal left() const { return xp; }
 inline qreal top() const { return yp; }
 inline qreal right() const { return xp + w; }
 inline qreal bottom() const { return yp + h; }

 inline qreal x() const;
 inline qreal y() const;
inline void setLeft(qreal pos);
inline void setTop(qreal pos);
inline void setRight(qreal pos);
inline void setBottom(qreal pos);
inline void setX(qreal pos) { setLeft(pos); }
inline void setY(qreal pos) { setTop(pos); }

 inline QPointF topLeft() const { return QPointF(xp, yp); }
 inline QPointF bottomRight() const { return QPointF(xp+w, yp+h); }
 inline QPointF topRight() const { return QPointF(xp+w, yp); }
 inline QPointF bottomLeft() const { return QPointF(xp, yp+h); }
 inline QPointF center() const;

inline void setTopLeft(const QPointF &p);
inline void setBottomRight(const QPointF &p);
inline void setTopRight(const QPointF &p);
inline void setBottomLeft(const QPointF &p);

inline void moveLeft(qreal pos);
inline void moveTop(qreal pos);
inline void moveRight(qreal pos);
inline void moveBottom(qreal pos);
inline void moveTopLeft(const QPointF &p);
inline void moveBottomRight(const QPointF &p);
inline void moveTopRight(const QPointF &p);
inline void moveBottomLeft(const QPointF &p);
inline void moveCenter(const QPointF &p);

inline void translate(qreal dx, qreal dy);
inline void translate(const QPointF &p);

 inline QRectF translated(qreal dx, qreal dy) const;
 inline QRectF translated(const QPointF &p) const;

inline void moveTo(qreal x, qreal t);
inline void moveTo(const QPointF &p);

inline void setRect(qreal x, qreal y, qreal w, qreal h);
inline void getRect(qreal *x, qreal *y, qreal *w, qreal *h) const;

inline void setCoords(qreal x1, qreal y1, qreal x2, qreal y2);
inline void getCoords(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const;

inline void adjust(qreal x1, qreal y1, qreal x2, qreal y2);
 inline QRectF adjusted(qreal x1, qreal y1, qreal x2, qreal y2) const;

 inline QSizeF size() const;
 inline qreal width() const;
 inline qreal height() const;
inline void setWidth(qreal w);
inline void setHeight(qreal h);
inline void setSize(const QSizeF &s);

QRectF operator|(const QRectF &r) const;
QRectF operator&(const QRectF &r) const;
inline QRectF& operator|=(const QRectF &r);
inline QRectF& operator&=(const QRectF &r);

bool contains(const QRectF &r) const;
bool contains(const QPointF &p) const;
inline bool contains(qreal x, qreal y) const;
inline QRectF united(const QRectF &other) const;
inline QRectF intersected(const QRectF &other) const;
bool intersects(const QRectF &r) const;






# 551 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
friend  inline bool operator==(const QRectF &, const QRectF &);
friend  inline bool operator!=(const QRectF &, const QRectF &);

 inline QRect toRect() const;
QRect toAlignedRect() const;

private:
qreal xp;
qreal yp;
qreal w;
qreal h;
};
template<> class QTypeInfo<QRectF > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRectF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRectF) }; static inline const char *name() { return "QRectF"; } };

 inline bool operator==(const QRectF &, const QRectF &);
 inline bool operator!=(const QRectF &, const QRectF &);






# 573 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
 QDataStream &operator<<(QDataStream &, const QRectF &);
 QDataStream &operator>>(QDataStream &, QRectF &);


# 577 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"




 inline QRectF::QRectF(qreal aleft, qreal atop, qreal awidth, qreal aheight)
: xp(aleft), yp(atop), w(awidth), h(aheight)
{
}

 inline QRectF::QRectF(const QPointF &atopLeft, const QSizeF &asize)
: xp(atopLeft.x()), yp(atopLeft.y()), w(asize.width()), h(asize.height())
{
}


 inline QRectF::QRectF(const QPointF &atopLeft, const QPointF &abottomRight)
: xp(atopLeft.x()), yp(atopLeft.y()), w(abottomRight.x() - atopLeft.x()), h(abottomRight.y() - atopLeft.y())
{
}

 inline QRectF::QRectF(const QRect &r)
: xp(r.x()), yp(r.y()), w(r.width()), h(r.height())
{
}

 inline bool QRectF::isNull() const
{ return w == 0. && h == 0.; }

 inline bool QRectF::isEmpty() const
{ return w <= 0. || h <= 0.; }

 inline bool QRectF::isValid() const
{ return w > 0. && h > 0.; }

 inline qreal QRectF::x() const
{ return xp; }

 inline qreal QRectF::y() const
{ return yp; }

inline void QRectF::setLeft(qreal pos) { qreal diff = pos - xp; xp += diff; w -= diff; }

inline void QRectF::setRight(qreal pos) { w = pos - xp; }

inline void QRectF::setTop(qreal pos) { qreal diff = pos - yp; yp += diff; h -= diff; }

inline void QRectF::setBottom(qreal pos) { h = pos - yp; }

inline void QRectF::setTopLeft(const QPointF &p) { setLeft(p.x()); setTop(p.y()); }

inline void QRectF::setTopRight(const QPointF &p) { setRight(p.x()); setTop(p.y()); }

inline void QRectF::setBottomLeft(const QPointF &p) { setLeft(p.x()); setBottom(p.y()); }

inline void QRectF::setBottomRight(const QPointF &p) { setRight(p.x()); setBottom(p.y()); }

 inline QPointF QRectF::center() const
{ return QPointF(xp + w/2, yp + h/2); }

inline void QRectF::moveLeft(qreal pos) { xp = pos; }

inline void QRectF::moveTop(qreal pos) { yp = pos; }

inline void QRectF::moveRight(qreal pos) { xp = pos - w; }

inline void QRectF::moveBottom(qreal pos) { yp = pos - h; }

inline void QRectF::moveTopLeft(const QPointF &p) { moveLeft(p.x()); moveTop(p.y()); }

inline void QRectF::moveTopRight(const QPointF &p) { moveRight(p.x()); moveTop(p.y()); }

inline void QRectF::moveBottomLeft(const QPointF &p) { moveLeft(p.x()); moveBottom(p.y()); }

inline void QRectF::moveBottomRight(const QPointF &p) { moveRight(p.x()); moveBottom(p.y()); }

inline void QRectF::moveCenter(const QPointF &p) { xp = p.x() - w/2; yp = p.y() - h/2; }

 inline qreal QRectF::width() const
{ return w; }

 inline qreal QRectF::height() const
{ return h; }

 inline QSizeF QRectF::size() const
{ return QSizeF(w, h); }

inline void QRectF::translate(qreal dx, qreal dy)
{
xp += dx;
yp += dy;
}

inline void QRectF::translate(const QPointF &p)
{
xp += p.x();
yp += p.y();
}

inline void QRectF::moveTo(qreal ax, qreal ay)
{
xp = ax;
yp = ay;
}

inline void QRectF::moveTo(const QPointF &p)
{
xp = p.x();
yp = p.y();
}

 inline QRectF QRectF::translated(qreal dx, qreal dy) const
{ return QRectF(xp + dx, yp + dy, w, h); }

 inline QRectF QRectF::translated(const QPointF &p) const
{ return QRectF(xp + p.x(), yp + p.y(), w, h); }

inline void QRectF::getRect(qreal *ax, qreal *ay, qreal *aaw, qreal *aah) const
{
*ax = this->xp;
*ay = this->yp;
*aaw = this->w;
*aah = this->h;
}

inline void QRectF::setRect(qreal ax, qreal ay, qreal aaw, qreal aah)
{
this->xp = ax;
this->yp = ay;
this->w = aaw;
this->h = aah;
}

inline void QRectF::getCoords(qreal *xp1, qreal *yp1, qreal *xp2, qreal *yp2) const
{
*xp1 = xp;
*yp1 = yp;
*xp2 = xp + w;
*yp2 = yp + h;
}

inline void QRectF::setCoords(qreal xp1, qreal yp1, qreal xp2, qreal yp2)
{
xp = xp1;
yp = yp1;
w = xp2 - xp1;
h = yp2 - yp1;
}

inline void QRectF::adjust(qreal xp1, qreal yp1, qreal xp2, qreal yp2)
{ xp += xp1; yp += yp1; w += xp2 - xp1; h += yp2 - yp1; }

 inline QRectF QRectF::adjusted(qreal xp1, qreal yp1, qreal xp2, qreal yp2) const
{ return QRectF(xp + xp1, yp + yp1, w + xp2 - xp1, h + yp2 - yp1); }

inline void QRectF::setWidth(qreal aw)
{ this->w = aw; }

inline void QRectF::setHeight(qreal ah)
{ this->h = ah; }

inline void QRectF::setSize(const QSizeF &s)
{
w = s.width();
h = s.height();
}

inline bool QRectF::contains(qreal ax, qreal ay) const
{
return contains(QPointF(ax, ay));
}

inline QRectF& QRectF::operator|=(const QRectF &r)
{
*this = *this | r;
return *this;
}

inline QRectF& QRectF::operator&=(const QRectF &r)
{
*this = *this & r;
return *this;
}

inline QRectF QRectF::intersected(const QRectF &r) const
{
return *this & r;
}

inline QRectF QRectF::united(const QRectF &r) const
{
return *this | r;
}

 inline bool operator==(const QRectF &r1, const QRectF &r2)
{
return qFuzzyCompare(r1.xp, r2.xp) && qFuzzyCompare(r1.yp, r2.yp)
&& qFuzzyCompare(r1.w, r2.w) && qFuzzyCompare(r1.h, r2.h);
}

 inline bool operator!=(const QRectF &r1, const QRectF &r2)
{
return !qFuzzyCompare(r1.xp, r2.xp) || !qFuzzyCompare(r1.yp, r2.yp)
|| !qFuzzyCompare(r1.w, r2.w) || !qFuzzyCompare(r1.h, r2.h);
}

 inline QRect QRectF::toRect() const
{
return QRect(qRound(xp), qRound(yp), qRound(w), qRound(h));
}


# 788 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"
 QDebug operator<<(QDebug, const QRectF &);


# 791 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"



class QMargins
{
public:
 QMargins();
 QMargins(int left, int top, int right, int bottom);

 bool isNull() const;

 int left() const;
 int top() const;
 int right() const;
 int bottom() const;

void setLeft(int left);
void setTop(int top);
void setRight(int right);
void setBottom(int bottom);

QMargins &operator+=(const QMargins &margins);
QMargins &operator-=(const QMargins &margins);
QMargins &operator+=(int);
QMargins &operator-=(int);
QMargins &operator*=(int);
QMargins &operator/=(int);
QMargins &operator*=(qreal);
QMargins &operator/=(qreal);

private:
int m_left;
int m_top;
int m_right;
int m_bottom;

friend  inline bool operator==(const QMargins &, const QMargins &);
friend  inline bool operator!=(const QMargins &, const QMargins &);
};

template<> class QTypeInfo<QMargins > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMargins)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMargins) }; static inline const char *name() { return "QMargins"; } };





# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
 QDataStream &operator<<(QDataStream &, const QMargins &);
 QDataStream &operator>>(QDataStream &, QMargins &);


# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"




 inline QMargins::QMargins() : m_left(0), m_top(0), m_right(0), m_bottom(0) {}

 inline QMargins::QMargins(int aleft, int atop, int aright, int abottom)
: m_left(aleft), m_top(atop), m_right(aright), m_bottom(abottom) {}

 inline bool QMargins::isNull() const
{ return m_left==0 && m_top==0 && m_right==0 && m_bottom==0; }

 inline int QMargins::left() const
{ return m_left; }

 inline int QMargins::top() const
{ return m_top; }

 inline int QMargins::right() const
{ return m_right; }

 inline int QMargins::bottom() const
{ return m_bottom; }


inline void QMargins::setLeft(int aleft)
{ m_left = aleft; }

inline void QMargins::setTop(int atop)
{ m_top = atop; }

inline void QMargins::setRight(int aright)
{ m_right = aright; }

inline void QMargins::setBottom(int abottom)
{ m_bottom = abottom; }

 inline bool operator==(const QMargins &m1, const QMargins &m2)
{
return
m1.m_left == m2.m_left &&
m1.m_top == m2.m_top &&
m1.m_right == m2.m_right &&
m1.m_bottom == m2.m_bottom;
}

 inline bool operator!=(const QMargins &m1, const QMargins &m2)
{
return
m1.m_left != m2.m_left ||
m1.m_top != m2.m_top ||
m1.m_right != m2.m_right ||
m1.m_bottom != m2.m_bottom;
}

 inline QRect operator+(const QRect &rectangle, const QMargins &margins)
{
return QRect(QPoint(rectangle.left() - margins.left(), rectangle.top() - margins.top()),
QPoint(rectangle.right() + margins.right(), rectangle.bottom() + margins.bottom()));
}

 inline QRect operator+(const QMargins &margins, const QRect &rectangle)
{
return QRect(QPoint(rectangle.left() - margins.left(), rectangle.top() - margins.top()),
QPoint(rectangle.right() + margins.right(), rectangle.bottom() + margins.bottom()));
}

inline QRect QRect::marginsAdded(const QMargins &margins) const
{
return *this + margins;
}

inline QRect QRect::marginsRemoved(const QMargins &margins) const
{
return QRect(QPoint(x1 + margins.left(), y1 + margins.top()),
QPoint(x2 - margins.right(), y2 - margins.bottom()));
}

inline QRect &QRect::operator+=(const QMargins &margins)
{
*this = marginsAdded(margins);
return *this;
}

inline QRect &QRect::operator-=(const QMargins &margins)
{
*this = marginsRemoved(margins);
return *this;
}

 inline QMargins operator+(const QMargins &m1, const QMargins &m2)
{
return QMargins(m1.left() + m2.left(), m1.top() + m2.top(),
m1.right() + m2.right(), m1.bottom() + m2.bottom());
}

 inline QMargins operator-(const QMargins &m1, const QMargins &m2)
{
return QMargins(m1.left() - m2.left(), m1.top() - m2.top(),
m1.right() - m2.right(), m1.bottom() - m2.bottom());
}

 inline QMargins operator*(const QMargins &margins, int factor)
{
return QMargins(margins.left() * factor, margins.top() * factor,
margins.right() * factor, margins.bottom() * factor);
}

 inline QMargins operator*(int factor, const QMargins &margins)
{
return QMargins(margins.left() * factor, margins.top() * factor,
margins.right() * factor, margins.bottom() * factor);
}

 inline QMargins operator*(const QMargins &margins, qreal factor)
{
return QMargins(qRound(margins.left() * factor), qRound(margins.top() * factor),
qRound(margins.right() * factor), qRound(margins.bottom() * factor));
}

 inline QMargins operator*(qreal factor, const QMargins &margins)
{
return QMargins(qRound(margins.left() * factor), qRound(margins.top() * factor),
qRound(margins.right() * factor), qRound(margins.bottom() * factor));
}

 inline QMargins operator/(const QMargins &margins, int divisor)
{
return QMargins(margins.left() / divisor, margins.top() / divisor,
margins.right() / divisor, margins.bottom() / divisor);
}

 inline QMargins operator/(const QMargins &margins, qreal divisor)
{
return QMargins(qRound(margins.left() / divisor), qRound(margins.top() / divisor),
qRound(margins.right() / divisor), qRound(margins.bottom() / divisor));
}

inline QMargins &QMargins::operator+=(const QMargins &margins)
{
return *this = *this + margins;
}

inline QMargins &QMargins::operator-=(const QMargins &margins)
{
return *this = *this - margins;
}

inline QMargins &QMargins::operator*=(int factor)
{
return *this = *this * factor;
}

inline QMargins &QMargins::operator/=(int divisor)
{
return *this = *this / divisor;
}

inline QMargins &QMargins::operator*=(qreal factor)
{
return *this = *this * factor;
}

inline QMargins &QMargins::operator/=(qreal divisor)
{
return *this = *this / divisor;
}

 inline QMargins operator-(const QMargins &margins)
{
return QMargins(-margins.left(), -margins.top(), -margins.right(), -margins.bottom());
}


# 271 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
 QDebug operator<<(QDebug, const QMargins &);


# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"



# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmessageauthenticationcode.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcryptographichash.h"


























































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmessageauthenticationcode.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmessageauthenticationcode.h"



class QMessageAuthenticationCodePrivate;
class QIODevice;

class  QMessageAuthenticationCode
{
public:
explicit QMessageAuthenticationCode(QCryptographicHash::Algorithm method,
const QByteArray &key = QByteArray());
~QMessageAuthenticationCode();

void reset();

void setKey(const QByteArray &key);

void addData(const char *data, int length);
void addData(const QByteArray &data);
bool addData(QIODevice *device);

QByteArray result() const;

static QByteArray hash(const QByteArray &message, const QByteArray &key,
QCryptographicHash::Algorithm method);

private:
QMessageAuthenticationCode(const QMessageAuthenticationCode &) ; QMessageAuthenticationCode &operator=(const QMessageAuthenticationCode &) ;
QMessageAuthenticationCodePrivate *d;
};




# 134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qqueue.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qqueue.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qqueue.h"



template <class T>
class QQueue : public QList<T>
{
public:
inline QQueue() {}
inline ~QQueue() {}
inline void swap(QQueue<T> &other) { QList<T>::swap(other); } 
inline void enqueue(const T &t) { QList<T>::append(t); }
inline T dequeue() { return QList<T>::takeFirst(); }
inline T &head() { return QList<T>::first(); }
inline const T &head() const { return QList<T>::first(); }
};




# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrefcount.h"

















































































































# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"






































































































































# 140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"


class QRegularExpressionMatch;
class QRegularExpressionMatchIterator;
struct QRegularExpressionPrivate;

class  QRegularExpression
{
public:
enum PatternOption {
NoPatternOption = 0x0000,
CaseInsensitiveOption = 0x0001,
DotMatchesEverythingOption = 0x0002,
MultilineOption = 0x0004,
ExtendedPatternSyntaxOption = 0x0008,
InvertedGreedinessOption = 0x0010,
DontCaptureOption = 0x0020,
UseUnicodePropertiesOption = 0x0040
};
typedef QFlags<PatternOption> PatternOptions;

PatternOptions patternOptions() const;
void setPatternOptions(PatternOptions options);

QRegularExpression();
explicit QRegularExpression(const QString &pattern, PatternOptions options = NoPatternOption);
QRegularExpression(const QRegularExpression &re);
~QRegularExpression();
QRegularExpression &operator=(const QRegularExpression &re);






# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
inline void swap(QRegularExpression &re) { d.swap(re.d); }

QString pattern() const;
void setPattern(const QString &pattern);

bool isValid() const;
int patternErrorOffset() const;
QString errorString() const;

int captureCount() const;
QStringList namedCaptureGroups() const;

enum MatchType {
NormalMatch = 0,
PartialPreferCompleteMatch,
PartialPreferFirstMatch,
NoMatch
};

enum MatchOption {
NoMatchOption = 0x0000,
AnchoredMatchOption = 0x0001
};
typedef QFlags<MatchOption> MatchOptions;

QRegularExpressionMatch match(const QString &subject,
int offset = 0,
MatchType matchType = NormalMatch,
MatchOptions matchOptions = NoMatchOption) const;

QRegularExpressionMatchIterator globalMatch(const QString &subject,
int offset = 0,
MatchType matchType = NormalMatch,
MatchOptions matchOptions = NoMatchOption) const;

static QString escape(const QString &str);

bool operator==(const QRegularExpression &re) const;
inline bool operator!=(const QRegularExpression &re) const { return !operator==(re); }

private:
friend struct QRegularExpressionPrivate;
friend class QRegularExpressionMatch;
friend struct QRegularExpressionMatchPrivate;
friend class QRegularExpressionMatchIterator;

QRegularExpression(QRegularExpressionPrivate &dd);
QExplicitlySharedDataPointer<QRegularExpressionPrivate> d;
};

template<> class QTypeInfo<QRegularExpression > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRegularExpression)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRegularExpression) }; static inline const char *name() { return "QRegularExpression"; } }; template <> inline void qSwap<QRegularExpression>(QRegularExpression &value1, QRegularExpression &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QRegularExpression>(::QRegularExpression &value1, ::QRegularExpression &value2) { value1.swap(value2); } } 
 inline QFlags<QRegularExpression::PatternOptions::enum_type> operator|(QRegularExpression::PatternOptions::enum_type f1, QRegularExpression::PatternOptions::enum_type f2) { return QFlags<QRegularExpression::PatternOptions::enum_type>(f1) | f2; }  inline QFlags<QRegularExpression::PatternOptions::enum_type> operator|(QRegularExpression::PatternOptions::enum_type f1, QFlags<QRegularExpression::PatternOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QRegularExpression::PatternOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QRegularExpression::MatchOptions::enum_type> operator|(QRegularExpression::MatchOptions::enum_type f1, QRegularExpression::MatchOptions::enum_type f2) { return QFlags<QRegularExpression::MatchOptions::enum_type>(f1) | f2; }  inline QFlags<QRegularExpression::MatchOptions::enum_type> operator|(QRegularExpression::MatchOptions::enum_type f1, QFlags<QRegularExpression::MatchOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QRegularExpression::MatchOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
 QDataStream &operator<<(QDataStream &out, const QRegularExpression &re);
 QDataStream &operator>>(QDataStream &in, QRegularExpression &re);



# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
 QDebug operator<<(QDebug debug, const QRegularExpression &re);
 QDebug operator<<(QDebug debug, QRegularExpression::PatternOptions patternOptions);


# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
struct QRegularExpressionMatchPrivate;

class  QRegularExpressionMatch
{
public:
QRegularExpressionMatch();
~QRegularExpressionMatch();
QRegularExpressionMatch(const QRegularExpressionMatch &match);
QRegularExpressionMatch &operator=(const QRegularExpressionMatch &match);





# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
inline void swap(QRegularExpressionMatch &match) { d.swap(match.d); }

QRegularExpression regularExpression() const;
QRegularExpression::MatchType matchType() const;
QRegularExpression::MatchOptions matchOptions() const;

bool hasMatch() const;
bool hasPartialMatch() const;

bool isValid() const;

int lastCapturedIndex() const;

QString captured(int nth = 0) const;
QStringRef capturedRef(int nth = 0) const;

QString captured(const QString &name) const;
QStringRef capturedRef(const QString &name) const;

QStringList capturedTexts() const;

int capturedStart(int nth = 0) const;
int capturedLength(int nth = 0) const;
int capturedEnd(int nth = 0) const;

int capturedStart(const QString &name) const;
int capturedLength(const QString &name) const;
int capturedEnd(const QString &name) const;

private:
friend class QRegularExpression;
friend struct QRegularExpressionMatchPrivate;
friend class QRegularExpressionMatchIterator;

QRegularExpressionMatch(QRegularExpressionMatchPrivate &dd);
QSharedDataPointer<QRegularExpressionMatchPrivate> d;
};

template<> class QTypeInfo<QRegularExpressionMatch > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRegularExpressionMatch)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRegularExpressionMatch) }; static inline const char *name() { return "QRegularExpressionMatch"; } }; template <> inline void qSwap<QRegularExpressionMatch>(QRegularExpressionMatch &value1, QRegularExpressionMatch &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QRegularExpressionMatch>(::QRegularExpressionMatch &value1, ::QRegularExpressionMatch &value2) { value1.swap(value2); } } 


# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
 QDebug operator<<(QDebug debug, const QRegularExpressionMatch &match);


# 212 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
struct QRegularExpressionMatchIteratorPrivate;

class  QRegularExpressionMatchIterator
{
public:
QRegularExpressionMatchIterator();
~QRegularExpressionMatchIterator();
QRegularExpressionMatchIterator(const QRegularExpressionMatchIterator &iterator);
QRegularExpressionMatchIterator &operator=(const QRegularExpressionMatchIterator &iterator);




# 225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"
void swap(QRegularExpressionMatchIterator &iterator) { d.swap(iterator.d); }

bool isValid() const;

bool hasNext() const;
QRegularExpressionMatch next();
QRegularExpressionMatch peekNext() const;

QRegularExpression regularExpression() const;
QRegularExpression::MatchType matchType() const;
QRegularExpression::MatchOptions matchOptions() const;

private:
friend class QRegularExpression;

QRegularExpressionMatchIterator(QRegularExpressionMatchIteratorPrivate &dd);
QSharedDataPointer<QRegularExpressionMatchIteratorPrivate> d;
};

template<> class QTypeInfo<QRegularExpressionMatchIterator > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRegularExpressionMatchIterator)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRegularExpressionMatchIterator) }; static inline const char *name() { return "QRegularExpressionMatchIterator"; } }; template <> inline void qSwap<QRegularExpressionMatchIterator>(QRegularExpressionMatchIterator &value1, QRegularExpressionMatchIterator &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QRegularExpressionMatchIterator>(::QRegularExpressionMatchIterator &value1, ::QRegularExpressionMatchIterator &value2) { value1.swap(value2); } } 






# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedvaluerollback.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedvaluerollback.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedvaluerollback.h"


template <typename T>
class QScopedValueRollback
{
public:
explicit QScopedValueRollback(T &var) :
varRef(var)
{
oldValue = varRef;
}

~QScopedValueRollback()
{
varRef = oldValue;
}

void commit()
{
oldValue = varRef;
}

private:
T& varRef;
T oldValue;

QScopedValueRollback(const QScopedValueRollback &) ; QScopedValueRollback &operator=(const QScopedValueRollback &) ;
};




# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"















































































































































































































































































































































































# 144 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstack.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstack.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstack.h"



template<class T>
class QStack : public QVector<T>
{
public:
inline QStack() {}
inline ~QStack() {}
inline void swap(QStack<T> &other) { QVector<T>::swap(other); } 
inline void push(const T &t) { QVector<T>::append(t); }
T pop();
T &top();
const T &top() const;
};

template<class T>
inline T QStack<T>::pop()
{ qt_noop(); T t = this->data()[this->size() -1];
this->resize(this->size()-1); return t; }

template<class T>
inline T &QStack<T>::top()
{ qt_noop(); this->detach(); return this->data()[this->size()-1]; }

template<class T>
inline const T &QStack<T>::top() const
{ qt_noop(); return this->data()[this->size()-1]; }




# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"



















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"




# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"



struct  QAbstractConcatenable
{
protected:
static void convertFromAscii(const char *a, int len, QChar *&out);
static inline void convertFromAscii(char a, QChar *&out)
{
*out++ = QLatin1Char(a);
}
};

template <typename T> struct QConcatenable {};

namespace QtStringBuilder {
template <typename A, typename B> struct ConvertToTypeHelper
{ typedef A ConvertTo; };
template <typename T> struct ConvertToTypeHelper<T, QString>
{ typedef QString ConvertTo; };
}

template<typename Builder, typename T>
struct QStringBuilderCommon
{
T toUpper() const { return resolved().toUpper(); }
T toLower() const { return resolved().toLower(); }

protected:
const T resolved() const { return *static_cast<const Builder*>(this); }
};

template<typename Builder, typename T>
struct QStringBuilderBase : public QStringBuilderCommon<Builder, T>
{
};

template<typename Builder>
struct QStringBuilderBase<Builder, QString> : public QStringBuilderCommon<Builder, QString>
{
QByteArray toLatin1() const { return this->resolved().toLatin1(); }
QByteArray toUtf8() const { return this->resolved().toUtf8(); }
QByteArray toLocal8Bit() const { return this->resolved().toLocal8Bit(); }
};

template <typename A, typename B>
class QStringBuilder : public QStringBuilderBase<QStringBuilder<A, B>, typename QtStringBuilder::ConvertToTypeHelper<typename QConcatenable<A>::ConvertTo, typename QConcatenable<B>::ConvertTo>::ConvertTo>
{
public:
QStringBuilder(const A &a_, const B &b_) : a(a_), b(b_) {}
private:
friend class QByteArray;
friend class QString;
template <typename T> T convertTo() const
{
const uint len = QConcatenable< QStringBuilder<A, B> >::size(*this);
T s(len, Qt::Uninitialized);

typename T::iterator d = s.data();
typename T::const_iterator const start = d;
QConcatenable< QStringBuilder<A, B> >::appendTo(*this, d);

if (!QConcatenable< QStringBuilder<A, B> >::ExactSize && int(len) != d - start) {


s.resize(d - start);
}
return s;
}

typedef QConcatenable<QStringBuilder<A, B> > Concatenable;
typedef typename Concatenable::ConvertTo ConvertTo;
public:
operator ConvertTo() const { return convertTo<ConvertTo>(); }

int size() const { return Concatenable::size(*this); }

const A &a;
const B &b;
};

template <>
class QStringBuilder <QString, QString> : public QStringBuilderBase<QStringBuilder<QString, QString>, QString>
{
public:
QStringBuilder(const QString &a_, const QString &b_) : a(a_), b(b_) {}

operator QString() const
{ QString r(a); r += b; return r; }

const QString &a;
const QString &b;
};

template <>
class QStringBuilder <QByteArray, QByteArray> : public QStringBuilderBase<QStringBuilder<QByteArray, QByteArray>, QByteArray>
{
public:
QStringBuilder(const QByteArray &a_, const QByteArray &b_) : a(a_), b(b_) {}

operator QByteArray() const
{ QByteArray r(a); r += b; return r; }

const QByteArray &a;
const QByteArray &b;
};


template <> struct QConcatenable<char> : private QAbstractConcatenable
{
typedef char type;
typedef QByteArray ConvertTo;
enum { ExactSize = true };
static int size(const char) { return 1; }

# 172 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline  void appendTo(const char c, QChar *&out)
{
QAbstractConcatenable::convertFromAscii(c, out);
}

# 177 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void appendTo(const char c, char *&out)
{ *out++ = c; }
};

template <> struct QConcatenable<QLatin1Char>
{
typedef QLatin1Char type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(const QLatin1Char) { return 1; }
static inline void appendTo(const QLatin1Char c, QChar *&out)
{ *out++ = c; }
static inline void appendTo(const QLatin1Char c, char *&out)
{ *out++ = c.toLatin1(); }
};

template <> struct QConcatenable<QChar> : private QAbstractConcatenable
{
typedef QChar type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(const QChar) { return 1; }
static inline void appendTo(const QChar c, QChar *&out)
{ *out++ = c; }
};

template <> struct QConcatenable<QChar::SpecialCharacter> : private QAbstractConcatenable
{
typedef QChar::SpecialCharacter type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(const QChar::SpecialCharacter) { return 1; }
static inline void appendTo(const QChar::SpecialCharacter c, QChar *&out)
{ *out++ = c; }
};

template <> struct QConcatenable<QCharRef> : private QAbstractConcatenable
{
typedef QCharRef type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(QCharRef) { return 1; }
static inline void appendTo(QCharRef c, QChar *&out)
{ *out++ = QChar(c); }
};

template <> struct QConcatenable<QLatin1String>
{
typedef QLatin1String type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(const QLatin1String a) { return a.size(); }
static inline void appendTo(const QLatin1String a, QChar *&out)
{
if (a.data()) {
for (const char *s = a.data(); *s; )
*out++ = QLatin1Char(*s++);
}
}
static inline void appendTo(const QLatin1String a, char *&out)
{
if (a.data()) {
for (const char *s = a.data(); *s; )
*out++ = *s++;
}
}
};

template <> struct QConcatenable<QString> : private QAbstractConcatenable
{
typedef QString type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(const QString &a) { return a.size(); }
static inline void appendTo(const QString &a, QChar *&out)
{
const int n = a.size();
memcpy(out, reinterpret_cast<const char*>(a.constData()), sizeof(QChar) * n);
out += n;
}
};

template <> struct QConcatenable<QStringRef> : private QAbstractConcatenable
{
typedef QStringRef type;
typedef QString ConvertTo;
enum { ExactSize = true };
static int size(const QStringRef &a) { return a.size(); }
static inline void appendTo(const QStringRef &a, QChar *&out)
{
const int n = a.size();
memcpy(out, reinterpret_cast<const char*>(a.constData()), sizeof(QChar) * n);
out += n;
}
};

template <int N> struct QConcatenable<char[N]> : private QAbstractConcatenable
{
typedef char type[N];
typedef QByteArray ConvertTo;
enum { ExactSize = false };
static int size(const char[N]) { return N - 1; }

# 280 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void  appendTo(const char a[N], QChar *&out)
{
QAbstractConcatenable::convertFromAscii(a, N - 1, out);
}

# 285 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void appendTo(const char a[N], char *&out)
{
while (*a)
*out++ = *a++;
}
};

template <int N> struct QConcatenable<const char[N]> : private QAbstractConcatenable
{
typedef const char type[N];
typedef QByteArray ConvertTo;
enum { ExactSize = false };
static int size(const char[N]) { return N - 1; }

# 299 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void  appendTo(const char a[N], QChar *&out)
{
QAbstractConcatenable::convertFromAscii(a, N - 1, out);
}

# 304 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void appendTo(const char a[N], char *&out)
{
while (*a)
*out++ = *a++;
}
};

template <> struct QConcatenable<const char *> : private QAbstractConcatenable
{
typedef char const *type;
typedef QByteArray ConvertTo;
enum { ExactSize = false };
static int size(const char *a) { return qstrlen(a); }

# 318 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void  appendTo(const char *a, QChar *&out)
{ QAbstractConcatenable::convertFromAscii(a, -1, out); }

# 321 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void appendTo(const char *a, char *&out)
{
if (!a)
return;
while (*a)
*out++ = *a++;
}
};

template <> struct QConcatenable<QByteArray> : private QAbstractConcatenable
{
typedef QByteArray type;
typedef QByteArray ConvertTo;
enum { ExactSize = false };
static int size(const QByteArray &ba) { return ba.size(); }

# 337 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline  void appendTo(const QByteArray &ba, QChar *&out)
{
QAbstractConcatenable::convertFromAscii(ba.constData(), ba.size(), out);
}

# 342 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
static inline void appendTo(const QByteArray &ba, char *&out)
{
const char *a = ba.constData();
const char * const end = ba.end();
while (a != end)
*out++ = *a++;
}
};


template <typename A, typename B>
struct QConcatenable< QStringBuilder<A, B> >
{
typedef QStringBuilder<A, B> type;
typedef typename QtStringBuilder::ConvertToTypeHelper<typename QConcatenable<A>::ConvertTo, typename QConcatenable<B>::ConvertTo>::ConvertTo ConvertTo;
enum { ExactSize = QConcatenable<A>::ExactSize && QConcatenable<B>::ExactSize };
static int size(const type &p)
{
return QConcatenable<A>::size(p.a) + QConcatenable<B>::size(p.b);
}
template<typename T> static inline void appendTo(const type &p, T *&out)
{
QConcatenable<A>::appendTo(p.a, out);
QConcatenable<B>::appendTo(p.b, out);
}
};

template <typename A, typename B>
QStringBuilder<typename QConcatenable<A>::type, typename QConcatenable<B>::type>
operator%(const A &a, const B &b)
{
return QStringBuilder<typename QConcatenable<A>::type, typename QConcatenable<B>::type>(a, b);
}












# 387 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
namespace QtStringBuilder {
template <typename A, typename B>
QByteArray &appendToByteArray(QByteArray &a, const QStringBuilder<A, B> &b, char)
{

int len = a.size() + QConcatenable< QStringBuilder<A, B> >::size(b);
a.reserve(len);
char *it = a.data() + a.size();
QConcatenable< QStringBuilder<A, B> >::appendTo(b, it);
a.resize(len); 
return a;
}


# 401 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
template <typename A, typename B>
QByteArray &appendToByteArray(QByteArray &a, const QStringBuilder<A, B> &b, QChar)
{
return a += QString(b).toUtf8();
}

# 407 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringbuilder.h"
}

template <typename A, typename B>
QByteArray &operator+=(QByteArray &a, const QStringBuilder<A, B> &b)
{
return QtStringBuilder::appendToByteArray(a, b,
typename QConcatenable< QStringBuilder<A, B> >::ConvertTo::value_type());
}

template <typename A, typename B>
QString &operator+=(QString &a, const QStringBuilder<A, B> &b)
{
int len = a.size() + QConcatenable< QStringBuilder<A, B> >::size(b);
a.reserve(len);
QChar *it = a.data() + a.size();
QConcatenable< QStringBuilder<A, B> >::appendTo(b, it);
a.resize(it - a.constData()); 
return a;
}





# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringmatcher.h"


































































































# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextboundaryfinder.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"















































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextboundaryfinder.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextboundaryfinder.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextboundaryfinder.h"



class QTextBoundaryFinderPrivate;

class  QTextBoundaryFinder
{
public:
QTextBoundaryFinder();
QTextBoundaryFinder(const QTextBoundaryFinder &other);
QTextBoundaryFinder &operator=(const QTextBoundaryFinder &other);
~QTextBoundaryFinder();

enum BoundaryType {
Grapheme,
Word,
Sentence,
Line
};

enum BoundaryReason {
NotAtBoundary = 0,
BreakOpportunity = 0x1f,
StartOfItem = 0x20,
EndOfItem = 0x40,
MandatoryBreak = 0x80,
SoftHyphen = 0x100
};
typedef QFlags<BoundaryReason > BoundaryReasons;

QTextBoundaryFinder(BoundaryType type, const QString &string);
QTextBoundaryFinder(BoundaryType type, const QChar *chars, int length, unsigned char *buffer = 0, int bufferSize = 0);

inline bool isValid() const { return d; }

inline BoundaryType type() const { return t; }
QString string() const;

void toStart();
void toEnd();
int position() const;
void setPosition(int position);

int toNextBoundary();
int toPreviousBoundary();

bool isAtBoundary() const;
BoundaryReasons boundaryReasons() const;

private:
BoundaryType t;
QString s;
const QChar *chars;
int length;
int pos;
uint freePrivate : 1;
uint unused : 31;
QTextBoundaryFinderPrivate *d;
};

 inline QFlags<QTextBoundaryFinder::BoundaryReasons::enum_type> operator|(QTextBoundaryFinder::BoundaryReasons::enum_type f1, QTextBoundaryFinder::BoundaryReasons::enum_type f2) { return QFlags<QTextBoundaryFinder::BoundaryReasons::enum_type>(f1) | f2; }  inline QFlags<QTextBoundaryFinder::BoundaryReasons::enum_type> operator|(QTextBoundaryFinder::BoundaryReasons::enum_type f1, QFlags<QTextBoundaryFinder::BoundaryReasons::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextBoundaryFinder::BoundaryReasons::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }





# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeasingcurve.h"















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"



class QTimeLinePrivate;
class  QTimeLine : public QObject
{
Q_OBJECT
Q_PROPERTY(int duration READ duration WRITE setDuration)
Q_PROPERTY(int updateInterval READ updateInterval WRITE setUpdateInterval)
Q_PROPERTY(int currentTime READ currentTime WRITE setCurrentTime)
Q_PROPERTY(Direction direction READ direction WRITE setDirection)
Q_PROPERTY(int loopCount READ loopCount WRITE setLoopCount)
Q_PROPERTY(CurveShape curveShape READ curveShape WRITE setCurveShape)
Q_PROPERTY(QEasingCurve easingCurve READ easingCurve WRITE setEasingCurve)
public:
enum State {
NotRunning,
Paused,
Running
};
enum Direction {
Forward,
Backward
};
enum CurveShape {
EaseInCurve,
EaseOutCurve,
EaseInOutCurve,
LinearCurve,
SineCurve,
CosineCurve
};

explicit QTimeLine(int duration = 1000, QObject *parent = 0);
virtual ~QTimeLine();

State state() const;

int loopCount() const;
void setLoopCount(int count);

Direction direction() const;
void setDirection(Direction direction);

int duration() const;
void setDuration(int duration);

int startFrame() const;
void setStartFrame(int frame);
int endFrame() const;
void setEndFrame(int frame);
void setFrameRange(int startFrame, int endFrame);

int updateInterval() const;
void setUpdateInterval(int interval);

CurveShape curveShape() const;
void setCurveShape(CurveShape shape);

QEasingCurve easingCurve() const;
void setEasingCurve(const QEasingCurve &curve);

int currentTime() const;
int currentFrame() const;
qreal currentValue() const;

int frameForTime(int msec) const;
virtual qreal valueForTime(int msec) const;

public slots:
void start();
void resume();
void stop();
void setPaused(bool paused);
void setCurrentTime(int msec);
void toggleDirection();

signals:
void valueChanged(qreal x

# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
, QPrivateSignal

# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
);
void frameChanged(int

# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
, QPrivateSignal

# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
);
void stateChanged(QTimeLine::State newState

# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
, QPrivateSignal

# 140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
);
void finished(

# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
QPrivateSignal

# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimeline.h"
);

protected:
void timerEvent(QTimerEvent *event);

private:
QTimeLine(const QTimeLine &) ; QTimeLine &operator=(const QTimeLine &) ;
inline QTimeLinePrivate* d_func() { return reinterpret_cast<QTimeLinePrivate *>(qGetPtrHelper(d_ptr)); } inline const QTimeLinePrivate* d_func() const { return reinterpret_cast<const QTimeLinePrivate *>(qGetPtrHelper(d_ptr)); } friend class QTimeLinePrivate;
};





# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvarlengtharray.h"







































































































































































































































































































































































































































# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"



class  QXmlStreamStringRef {
QString m_string;
int m_position, m_size;
public:
inline QXmlStreamStringRef():m_position(0), m_size(0){}
inline QXmlStreamStringRef(const QStringRef &aString)
:m_string(aString.string()?*aString.string():QString()), m_position(aString.position()), m_size(aString.size()){}
inline QXmlStreamStringRef(const QString &aString):m_string(aString), m_position(0), m_size(aString.size()){}
inline ~QXmlStreamStringRef(){}
inline void clear() { m_string.clear(); m_position = m_size = 0; }
inline operator QStringRef() const { return QStringRef(&m_string, m_position, m_size); }
inline const QString *string() const { return &m_string; }
inline int position() const { return m_position; }
inline int size() const { return m_size; }
};


class QXmlStreamReaderPrivate;
class QXmlStreamAttributes;
class  QXmlStreamAttribute {
QXmlStreamStringRef m_name, m_namespaceUri, m_qualifiedName, m_value;
void *reserved;
uint m_isDefault : 1;
friend class QXmlStreamReaderPrivate;
friend class QXmlStreamAttributes;
public:
QXmlStreamAttribute();
QXmlStreamAttribute(const QString &qualifiedName, const QString &value);
QXmlStreamAttribute(const QString &namespaceUri, const QString &name, const QString &value);
QXmlStreamAttribute(const QXmlStreamAttribute &);
QXmlStreamAttribute& operator=(const QXmlStreamAttribute &);
~QXmlStreamAttribute();
inline QStringRef namespaceUri() const { return m_namespaceUri; }
inline QStringRef name() const { return m_name; }
inline QStringRef qualifiedName() const { return m_qualifiedName; }
inline QStringRef prefix() const {
return QStringRef(m_qualifiedName.string(),
m_qualifiedName.position(),
qMax(0, m_qualifiedName.size() - m_name.size() - 1));
}
inline QStringRef value() const { return m_value; }
inline bool isDefault() const { return m_isDefault; }
inline bool operator==(const QXmlStreamAttribute &other) const {
return (value() == other.value()
&& (namespaceUri().isNull() ? (qualifiedName() == other.qualifiedName())
: (namespaceUri() == other.namespaceUri() && name() == other.name())));
}
inline bool operator!=(const QXmlStreamAttribute &other) const
{ return !operator==(other); }
};

template<> class QTypeInfo<QXmlStreamAttribute > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamAttribute)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlStreamAttribute) }; static inline const char *name() { return "QXmlStreamAttribute"; } };

class  QXmlStreamAttributes : public QVector<QXmlStreamAttribute>
{
public:
inline QXmlStreamAttributes() {}
QStringRef value(const QString &namespaceUri, const QString &name) const;
QStringRef value(const QString &namespaceUri, QLatin1String name) const;
QStringRef value(QLatin1String namespaceUri, QLatin1String name) const;
QStringRef value(const QString &qualifiedName) const;
QStringRef value(QLatin1String qualifiedName) const;
void append(const QString &namespaceUri, const QString &name, const QString &value);
void append(const QString &qualifiedName, const QString &value);

inline bool hasAttribute(const QString &qualifiedName) const
{
return !value(qualifiedName).isNull();
}

inline bool hasAttribute(QLatin1String qualifiedName) const
{
return !value(qualifiedName).isNull();
}

inline bool hasAttribute(const QString &namespaceUri, const QString &name) const
{
return !value(namespaceUri, name).isNull();
}




# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
inline void append(const QXmlStreamAttribute &attribute)
{ QVector<QXmlStreamAttribute>::append(attribute); }

# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
};

class  QXmlStreamNamespaceDeclaration {
QXmlStreamStringRef m_prefix, m_namespaceUri;
void *reserved;

friend class QXmlStreamReaderPrivate;
public:
QXmlStreamNamespaceDeclaration();
QXmlStreamNamespaceDeclaration(const QXmlStreamNamespaceDeclaration &);
QXmlStreamNamespaceDeclaration(const QString &prefix, const QString &namespaceUri);
~QXmlStreamNamespaceDeclaration();
QXmlStreamNamespaceDeclaration& operator=(const QXmlStreamNamespaceDeclaration &);
inline QStringRef prefix() const { return m_prefix; }
inline QStringRef namespaceUri() const { return m_namespaceUri; }
inline bool operator==(const QXmlStreamNamespaceDeclaration &other) const {
return (prefix() == other.prefix() && namespaceUri() == other.namespaceUri());
}
inline bool operator!=(const QXmlStreamNamespaceDeclaration &other) const
{ return !operator==(other); }
};

template<> class QTypeInfo<QXmlStreamNamespaceDeclaration > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamNamespaceDeclaration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlStreamNamespaceDeclaration) }; static inline const char *name() { return "QXmlStreamNamespaceDeclaration"; } };
typedef QVector<QXmlStreamNamespaceDeclaration> QXmlStreamNamespaceDeclarations;

class  QXmlStreamNotationDeclaration {
QXmlStreamStringRef m_name, m_systemId, m_publicId;
void *reserved;

friend class QXmlStreamReaderPrivate;
public:
QXmlStreamNotationDeclaration();
~QXmlStreamNotationDeclaration();
QXmlStreamNotationDeclaration(const QXmlStreamNotationDeclaration &);
QXmlStreamNotationDeclaration& operator=(const QXmlStreamNotationDeclaration &);
inline QStringRef name() const { return m_name; }
inline QStringRef systemId() const { return m_systemId; }
inline QStringRef publicId() const { return m_publicId; }
inline bool operator==(const QXmlStreamNotationDeclaration &other) const {
return (name() == other.name() && systemId() == other.systemId()
&& publicId() == other.publicId());
}
inline bool operator!=(const QXmlStreamNotationDeclaration &other) const
{ return !operator==(other); }
};

template<> class QTypeInfo<QXmlStreamNotationDeclaration > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamNotationDeclaration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlStreamNotationDeclaration) }; static inline const char *name() { return "QXmlStreamNotationDeclaration"; } };
typedef QVector<QXmlStreamNotationDeclaration> QXmlStreamNotationDeclarations;

class  QXmlStreamEntityDeclaration {
QXmlStreamStringRef m_name, m_notationName, m_systemId, m_publicId, m_value;
void *reserved;

friend class QXmlStreamReaderPrivate;
public:
QXmlStreamEntityDeclaration();
~QXmlStreamEntityDeclaration();
QXmlStreamEntityDeclaration(const QXmlStreamEntityDeclaration &);
QXmlStreamEntityDeclaration& operator=(const QXmlStreamEntityDeclaration &);
inline QStringRef name() const { return m_name; }
inline QStringRef notationName() const { return m_notationName; }
inline QStringRef systemId() const { return m_systemId; }
inline QStringRef publicId() const { return m_publicId; }
inline QStringRef value() const { return m_value; }
inline bool operator==(const QXmlStreamEntityDeclaration &other) const {
return (name() == other.name()
&& notationName() == other.notationName()
&& systemId() == other.systemId()
&& publicId() == other.publicId()
&& value() == other.value());
}
inline bool operator!=(const QXmlStreamEntityDeclaration &other) const
{ return !operator==(other); }
};

template<> class QTypeInfo<QXmlStreamEntityDeclaration > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlStreamEntityDeclaration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlStreamEntityDeclaration) }; static inline const char *name() { return "QXmlStreamEntityDeclaration"; } };
typedef QVector<QXmlStreamEntityDeclaration> QXmlStreamEntityDeclarations;


class  QXmlStreamEntityResolver
{
public:
virtual ~QXmlStreamEntityResolver();
virtual QString resolveEntity(const QString& publicId, const QString& systemId);
virtual QString resolveUndeclaredEntity(const QString &name);
};


# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
class  QXmlStreamReader {

public:
enum TokenType {
NoToken = 0,
Invalid,
StartDocument,
EndDocument,
StartElement,
EndElement,
Characters,
Comment,
DTD,
EntityReference,
ProcessingInstruction
};


QXmlStreamReader();
explicit QXmlStreamReader(QIODevice *device);
explicit QXmlStreamReader(const QByteArray &data);
explicit QXmlStreamReader(const QString &data);
explicit QXmlStreamReader(const char * data);
~QXmlStreamReader();

void setDevice(QIODevice *device);
QIODevice *device() const;
void addData(const QByteArray &data);
void addData(const QString &data);
void addData(const char *data);
void clear();


bool atEnd() const;
TokenType readNext();

bool readNextStartElement();
void skipCurrentElement();

TokenType tokenType() const;
QString tokenString() const;

void setNamespaceProcessing(bool);
bool namespaceProcessing() const;

inline bool isStartDocument() const { return tokenType() == StartDocument; }
inline bool isEndDocument() const { return tokenType() == EndDocument; }
inline bool isStartElement() const { return tokenType() == StartElement; }
inline bool isEndElement() const { return tokenType() == EndElement; }
inline bool isCharacters() const { return tokenType() == Characters; }
bool isWhitespace() const;
bool isCDATA() const;
inline bool isComment() const { return tokenType() == Comment; }
inline bool isDTD() const { return tokenType() == DTD; }
inline bool isEntityReference() const { return tokenType() == EntityReference; }
inline bool isProcessingInstruction() const { return tokenType() == ProcessingInstruction; }

bool isStandaloneDocument() const;
QStringRef documentVersion() const;
QStringRef documentEncoding() const;

qint64 lineNumber() const;
qint64 columnNumber() const;
qint64 characterOffset() const;

QXmlStreamAttributes attributes() const;

enum ReadElementTextBehaviour {
ErrorOnUnexpectedElement,
IncludeChildElements,
SkipChildElements
};
QString readElementText(ReadElementTextBehaviour behaviour = ErrorOnUnexpectedElement);

QStringRef name() const;
QStringRef namespaceUri() const;
QStringRef qualifiedName() const;
QStringRef prefix() const;

QStringRef processingInstructionTarget() const;
QStringRef processingInstructionData() const;

QStringRef text() const;

QXmlStreamNamespaceDeclarations namespaceDeclarations() const;
void addExtraNamespaceDeclaration(const QXmlStreamNamespaceDeclaration &extraNamespaceDeclaraction);
void addExtraNamespaceDeclarations(const QXmlStreamNamespaceDeclarations &extraNamespaceDeclaractions);
QXmlStreamNotationDeclarations notationDeclarations() const;
QXmlStreamEntityDeclarations entityDeclarations() const;
QStringRef dtdName() const;
QStringRef dtdPublicId() const;
QStringRef dtdSystemId() const;


enum Error {
NoError,
UnexpectedElementError,
CustomError,
NotWellFormedError,
PrematureEndOfDocumentError
};
void raiseError(const QString& message = QString());
QString errorString() const;
Error error() const;

inline bool hasError() const
{
return error() != NoError;
}

void setEntityResolver(QXmlStreamEntityResolver *resolver);
QXmlStreamEntityResolver *entityResolver() const;

private:
QXmlStreamReader(const QXmlStreamReader &) ; QXmlStreamReader &operator=(const QXmlStreamReader &) ;
inline QXmlStreamReaderPrivate* d_func() { return reinterpret_cast<QXmlStreamReaderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QXmlStreamReaderPrivate* d_func() const { return reinterpret_cast<const QXmlStreamReaderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QXmlStreamReaderPrivate;
QScopedPointer<QXmlStreamReaderPrivate> d_ptr;

};




# 353 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
class QXmlStreamWriterPrivate;

class  QXmlStreamWriter
{


public:
QXmlStreamWriter();
explicit QXmlStreamWriter(QIODevice *device);
explicit QXmlStreamWriter(QByteArray *array);
explicit QXmlStreamWriter(QString *string);
~QXmlStreamWriter();

void setDevice(QIODevice *device);
QIODevice *device() const;


# 370 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
void setCodec(QTextCodec *codec);
void setCodec(const char *codecName);
QTextCodec *codec() const;


# 375 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
void setAutoFormatting(bool);
bool autoFormatting() const;

void setAutoFormattingIndent(int spacesOrTabs);
int autoFormattingIndent() const;

void writeAttribute(const QString &qualifiedName, const QString &value);
void writeAttribute(const QString &namespaceUri, const QString &name, const QString &value);
void writeAttribute(const QXmlStreamAttribute& attribute);
void writeAttributes(const QXmlStreamAttributes& attributes);

void writeCDATA(const QString &text);
void writeCharacters(const QString &text);
void writeComment(const QString &text);

void writeDTD(const QString &dtd);

void writeEmptyElement(const QString &qualifiedName);
void writeEmptyElement(const QString &namespaceUri, const QString &name);

void writeTextElement(const QString &qualifiedName, const QString &text);
void writeTextElement(const QString &namespaceUri, const QString &name, const QString &text);

void writeEndDocument();
void writeEndElement();

void writeEntityReference(const QString &name);
void writeNamespace(const QString &namespaceUri, const QString &prefix = QString());
void writeDefaultNamespace(const QString &namespaceUri);
void writeProcessingInstruction(const QString &target, const QString &data = QString());

void writeStartDocument();
void writeStartDocument(const QString &version);
void writeStartDocument(const QString &version, bool standalone);
void writeStartElement(const QString &qualifiedName);
void writeStartElement(const QString &namespaceUri, const QString &name);


# 413 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
void writeCurrentToken(const QXmlStreamReader &reader);


# 416 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"
bool hasError() const;

private:
QXmlStreamWriter(const QXmlStreamWriter &) ; QXmlStreamWriter &operator=(const QXmlStreamWriter &) ;
inline QXmlStreamWriterPrivate* d_func() { return reinterpret_cast<QXmlStreamWriterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QXmlStreamWriterPrivate* d_func() const { return reinterpret_cast<const QXmlStreamWriterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QXmlStreamWriterPrivate;
QScopedPointer<QXmlStreamWriterPrivate> d_ptr;
};


# 425 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"




# 157 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtcoreversion.h"









# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtCore"


# 43 "qtscript_masterinclude.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGuiDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGuiDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"






# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"















































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrgb.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrgb.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrgb.h"



typedef unsigned int QRgb; 


const  QRgb RGB_MASK = 0x00ffffff; 

inline  int qRed(QRgb rgb) 
{ return ((rgb >> 16) & 0xff); }

inline  int qGreen(QRgb rgb) 
{ return ((rgb >> 8) & 0xff); }

inline  int qBlue(QRgb rgb) 
{ return (rgb & 0xff); }

inline  int qAlpha(QRgb rgb) 
{ return rgb >> 24; }

inline  QRgb qRgb(int r, int g, int b)
{ return (0xffu << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff); }

inline  QRgb qRgba(int r, int g, int b, int a)
{ return ((a & 0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff); }

inline  int qGray(int r, int g, int b)
{ return (r*11+g*16+b*5)/32; }

inline  int qGray(QRgb rgb) 
{ return qGray(qRed(rgb), qGreen(rgb), qBlue(rgb)); }

inline  bool qIsGray(QRgb rgb)
{ return qRed(rgb) == qGreen(rgb) && qRed(rgb) == qBlue(rgb); }




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"



class QColor;
class QColormap;
class QVariant;


# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"
 QDebug operator<<(QDebug, const QColor &);


# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"
 QDataStream &operator<<(QDataStream &, const QColor &);
 QDataStream &operator>>(QDataStream &, QColor &);


# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"
class  QColor
{
public:
enum Spec { Invalid, Rgb, Hsv, Cmyk, Hsl };

QColor();
QColor(Qt::GlobalColor color);
QColor(int r, int g, int b, int a = 255);
QColor(QRgb rgb);
QColor(const QString& name);
QColor(const char *name);
QColor(const QColor &color);
QColor(Spec spec);

bool isValid() const;

QString name() const;
void setNamedColor(const QString& name);

static QStringList colorNames();

inline Spec spec() const
{ return cspec; }

int alpha() const;
void setAlpha(int alpha);

qreal alphaF() const;
void setAlphaF(qreal alpha);

int red() const;
int green() const;
int blue() const;
void setRed(int red);
void setGreen(int green);
void setBlue(int blue);

qreal redF() const;
qreal greenF() const;
qreal blueF() const;
void setRedF(qreal red);
void setGreenF(qreal green);
void setBlueF(qreal blue);

void getRgb(int *r, int *g, int *b, int *a = 0) const;
void setRgb(int r, int g, int b, int a = 255);

void getRgbF(qreal *r, qreal *g, qreal *b, qreal *a = 0) const;
void setRgbF(qreal r, qreal g, qreal b, qreal a = 1.0);

QRgb rgba() const;
void setRgba(QRgb rgba);

QRgb rgb() const;
void setRgb(QRgb rgb);

int hue() const; 
int saturation() const;
int hsvHue() const; 
int hsvSaturation() const;
int value() const;

qreal hueF() const; 
qreal saturationF() const;
qreal hsvHueF() const; 
qreal hsvSaturationF() const;
qreal valueF() const;

void getHsv(int *h, int *s, int *v, int *a = 0) const;
void setHsv(int h, int s, int v, int a = 255);

void getHsvF(qreal *h, qreal *s, qreal *v, qreal *a = 0) const;
void setHsvF(qreal h, qreal s, qreal v, qreal a = 1.0);

int cyan() const;
int magenta() const;
int yellow() const;
int black() const;

qreal cyanF() const;
qreal magentaF() const;
qreal yellowF() const;
qreal blackF() const;

void getCmyk(int *c, int *m, int *y, int *k, int *a = 0);
void setCmyk(int c, int m, int y, int k, int a = 255);

void getCmykF(qreal *c, qreal *m, qreal *y, qreal *k, qreal *a = 0);
void setCmykF(qreal c, qreal m, qreal y, qreal k, qreal a = 1.0);

int hslHue() const; 
int hslSaturation() const;
int lightness() const;

qreal hslHueF() const; 
qreal hslSaturationF() const;
qreal lightnessF() const;

void getHsl(int *h, int *s, int *l, int *a = 0) const;
void setHsl(int h, int s, int l, int a = 255);

void getHslF(qreal *h, qreal *s, qreal *l, qreal *a = 0) const;
void setHslF(qreal h, qreal s, qreal l, qreal a = 1.0);

QColor toRgb() const;
QColor toHsv() const;
QColor toCmyk() const;
QColor toHsl() const;

QColor convertTo(Spec colorSpec) const;

static QColor fromRgb(QRgb rgb);
static QColor fromRgba(QRgb rgba);

static QColor fromRgb(int r, int g, int b, int a = 255);
static QColor fromRgbF(qreal r, qreal g, qreal b, qreal a = 1.0);

static QColor fromHsv(int h, int s, int v, int a = 255);
static QColor fromHsvF(qreal h, qreal s, qreal v, qreal a = 1.0);

static QColor fromCmyk(int c, int m, int y, int k, int a = 255);
static QColor fromCmykF(qreal c, qreal m, qreal y, qreal k, qreal a = 1.0);

static QColor fromHsl(int h, int s, int l, int a = 255);
static QColor fromHslF(qreal h, qreal s, qreal l, qreal a = 1.0);

QColor light(int f = 150) const;
QColor lighter(int f = 150) const;
QColor dark(int f = 200) const;
QColor darker(int f = 200) const;

QColor &operator=(const QColor &);
QColor &operator=(Qt::GlobalColor color);

bool operator==(const QColor &c) const;
bool operator!=(const QColor &c) const;

operator QVariant() const;

static bool isValidColor(const QString &name);

private:

void invalidate();
bool setColorFromString(const QString &name);

Spec cspec;
union {
struct {
ushort alpha;
ushort red;
ushort green;
ushort blue;
ushort pad;
} argb;
struct {
ushort alpha;
ushort hue;
ushort saturation;
ushort value;
ushort pad;
} ahsv;
struct {
ushort alpha;
ushort cyan;
ushort magenta;
ushort yellow;
ushort black;
} acmyk;
struct {
ushort alpha;
ushort hue;
ushort saturation;
ushort lightness;
ushort pad;
} ahsl;
ushort array[5];
} ct;

friend class QColormap;

# 245 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"
friend  QDataStream &operator<<(QDataStream &, const QColor &);
friend  QDataStream &operator>>(QDataStream &, QColor &);

# 248 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"
};

inline QColor::QColor()
{ invalidate(); }

inline QColor::QColor(int r, int g, int b, int a)
{ setRgb(r, g, b, a); }

inline QColor::QColor(const char *aname)
{ setNamedColor(QLatin1String(aname)); }

inline QColor::QColor(const QString& aname)
{ setNamedColor(aname); }

inline QColor::QColor(const QColor &acolor)
: cspec(acolor.cspec)
{ ct.argb = acolor.ct.argb; }

inline bool QColor::isValid() const
{ return cspec != Invalid; }

inline QColor QColor::lighter(int f) const
{ return light(f); }

inline QColor QColor::darker(int f) const
{ return dark(f); }




# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"





class QPaintDevice;
class QWidget;
class QWindow;
class QDialog;
class QColor;
class QPalette;
class QCursor;
class QPoint;
class QSize;
class QRect;
class QPolygon;
class QPainter;
class QRegion;
class QFont;
class QFontMetrics;
class QFontInfo;
class QPen;
class QBrush;
class QMatrix;
class QPixmap;
class QBitmap;
class QMovie;
class QImage;
class QPicture;
class QTimer;
class QTime;
class QClipboard;
class QString;
class QByteArray;
class QApplication;

template<typename T> class QList;
typedef QList<QWidget *> QWidgetList;
typedef QList<QWindow *> QWindowList;













# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"
typedef ::quintptr WId;





template<class K, class V> class QHash;
typedef QHash<WId, QWidget *> QWidgetMapper;

template<class V> class QSet;
typedef QSet<QWidget *> QWidgetSet;







# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"


















































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"



# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"



template <class T> class QVector;
class QVariant;

struct QRegionPrivate;

class QBitmap;

class  QRegion
{
public:
enum RegionType { Rectangle, Ellipse };

QRegion();
QRegion(int x, int y, int w, int h, RegionType t = Rectangle);
QRegion(const QRect &r, RegionType t = Rectangle);
QRegion(const QPolygon &pa, Qt::FillRule fillRule = Qt::OddEvenFill);
QRegion(const QRegion &region);
QRegion(const QBitmap &bitmap);
~QRegion();
QRegion &operator=(const QRegion &);




# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
inline void swap(QRegion &other) { qSwap(d, other.d); }
bool isEmpty() const;
bool isNull() const;

bool contains(const QPoint &p) const;
bool contains(const QRect &r) const;

void translate(int dx, int dy);
inline void translate(const QPoint &p) { translate(p.x(), p.y()); }
QRegion translated(int dx, int dy) const;
inline QRegion translated(const QPoint &p) const { return translated(p.x(), p.y()); }

QRegion united(const QRegion &r) const;
QRegion united(const QRect &r) const;
QRegion intersected(const QRegion &r) const;
QRegion intersected(const QRect &r) const;
QRegion subtracted(const QRegion &r) const;
QRegion xored(const QRegion &r) const;










# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
bool intersects(const QRegion &r) const;
bool intersects(const QRect &r) const;

QRect boundingRect() const;
QVector<QRect> rects() const;
void setRects(const QRect *rect, int num);
int rectCount() const;

const QRegion operator|(const QRegion &r) const;
const QRegion operator+(const QRegion &r) const;
const QRegion operator+(const QRect &r) const;
const QRegion operator&(const QRegion &r) const;
const QRegion operator&(const QRect &r) const;
const QRegion operator-(const QRegion &r) const;
const QRegion operator^(const QRegion &r) const;
QRegion& operator|=(const QRegion &r);
QRegion& operator+=(const QRegion &r);
QRegion& operator+=(const QRect &r);
QRegion& operator&=(const QRegion &r);
QRegion& operator&=(const QRect &r);
QRegion& operator-=(const QRegion &r);
QRegion& operator^=(const QRegion &r);

bool operator==(const QRegion &r) const;
inline bool operator!=(const QRegion &r) const { return !(operator==(r)); }
operator QVariant() const;


# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
friend  QDataStream &operator<<(QDataStream &, const QRegion &);
friend  QDataStream &operator>>(QDataStream &, QRegion &);

# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
private:
QRegion copy() const; 
void detach();

friend bool qt_region_strictContains(const QRegion &region,
const QRect &rect);
friend struct QRegionPrivate;


# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
void exec(const QByteArray &ba, int ver = 0, QDataStream::ByteOrder byteOrder = QDataStream::BigEndian);

# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
struct QRegionData {
QBasicAtomicInt ref;
QRegionPrivate *qt_rgn;
};
struct QRegionData *d;
static struct QRegionData shared_empty;
static void cleanUp(QRegionData *x);
};






# 164 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
 QDataStream &operator<<(QDataStream &, const QRegion &);
 QDataStream &operator>>(QDataStream &, QRegion &);



# 169 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"
 QDebug operator<<(QDebug, const QRegion &);


# 172 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"




# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"
class QKeySequence;
 QDataStream &operator<<(QDataStream &in, const QKeySequence &ks);
 QDataStream &operator>>(QDataStream &out, QKeySequence &ks);






# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"
class QVariant;
class QKeySequencePrivate;

class  QKeySequence
{
public:
enum StandardKey {
UnknownKey,
HelpContents,
WhatsThis,
Open,
Close,
Save,
New,
Delete,
Cut,
Copy,
Paste,
Undo,
Redo,
Back,
Forward,
Refresh,
ZoomIn,
ZoomOut,
Print,
AddTab,
NextChild,
PreviousChild,
Find,
FindNext,
FindPrevious,
Replace,
SelectAll,
Bold,
Italic,
Underline,
MoveToNextChar,
MoveToPreviousChar,
MoveToNextWord,
MoveToPreviousWord,
MoveToNextLine,
MoveToPreviousLine,
MoveToNextPage,
MoveToPreviousPage,
MoveToStartOfLine,
MoveToEndOfLine,
MoveToStartOfBlock,
MoveToEndOfBlock,
MoveToStartOfDocument,
MoveToEndOfDocument,
SelectNextChar,
SelectPreviousChar,
SelectNextWord,
SelectPreviousWord,
SelectNextLine,
SelectPreviousLine,
SelectNextPage,
SelectPreviousPage,
SelectStartOfLine,
SelectEndOfLine,
SelectStartOfBlock,
SelectEndOfBlock,
SelectStartOfDocument,
SelectEndOfDocument,
DeleteStartOfWord,
DeleteEndOfWord,
DeleteEndOfLine,
InsertParagraphSeparator,
InsertLineSeparator,
SaveAs,
Preferences,
Quit,
FullScreen,
Deselect
};

enum SequenceFormat {
NativeText,
PortableText
};

QKeySequence();
QKeySequence(const QString &key, SequenceFormat format = NativeText);
QKeySequence(int k1, int k2 = 0, int k3 = 0, int k4 = 0);
QKeySequence(const QKeySequence &ks);
QKeySequence(StandardKey key);
~QKeySequence();

int count() const;
bool isEmpty() const;

enum SequenceMatch {
NoMatch,
PartialMatch,
ExactMatch
};

QString toString(SequenceFormat format = PortableText) const;
static QKeySequence fromString(const QString &str, SequenceFormat format = PortableText);

static QList<QKeySequence> listFromString(const QString &str, SequenceFormat format = PortableText);
static QString listToString(const QList<QKeySequence> &list, SequenceFormat format = PortableText);

SequenceMatch matches(const QKeySequence &seq) const;
static QKeySequence mnemonic(const QString &text);
static QList<QKeySequence> keyBindings(StandardKey key);





# 178 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"
operator QVariant() const;
int operator[](uint i) const;
QKeySequence &operator=(const QKeySequence &other);




# 185 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"
inline void swap(QKeySequence &other) { qSwap(d, other.d); }
bool operator==(const QKeySequence &other) const;
inline bool operator!= (const QKeySequence &other) const
{ return !(*this == other); }
bool operator< (const QKeySequence &ks) const;
inline bool operator> (const QKeySequence &other) const
{ return other < *this; }
inline bool operator<= (const QKeySequence &other) const
{ return !(other < *this); }
inline bool operator>= (const QKeySequence &other) const
{ return !(*this < other); }

bool isDetached() const;
private:
static int decodeString(const QString &ks);
static QString encodeString(int key);
int assign(const QString &str);
int assign(const QString &str, SequenceFormat format);
void setKey(int key, int index);

QKeySequencePrivate *d;

friend  QDataStream &operator<<(QDataStream &in, const QKeySequence &ks);
friend  QDataStream &operator>>(QDataStream &in, QKeySequence &ks);
friend class QShortcutMap;
friend class QShortcut;

public:
typedef QKeySequencePrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template<> class QTypeInfo<QKeySequence > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QKeySequence)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QKeySequence) }; static inline const char *name() { return "QKeySequence"; } }; template <> inline void qSwap<QKeySequence>(QKeySequence &value1, QKeySequence &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QKeySequence>(::QKeySequence &value1, ::QKeySequence &value2) { value1.swap(value2); } } 


# 220 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"
 QDebug operator<<(QDebug, const QKeySequence &);













# 234 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"






















































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"















































































































































































































































































































































































# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"



























































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"



class QVector3D;
class QVector4D;
class QVariant;



# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
class  QVector2D
{
public:
QVector2D();
QVector2D(float xpos, float ypos);
explicit QVector2D(const QPoint& point);
explicit QVector2D(const QPointF& point);

# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
explicit QVector2D(const QVector3D& vector);


# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
explicit QVector2D(const QVector4D& vector);


# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
bool isNull() const;

float x() const;
float y() const;

void setX(float x);
void setY(float y);

float length() const;
float lengthSquared() const;

QVector2D normalized() const;
void normalize();

float distanceToPoint(const QVector2D &point) const;
float distanceToLine(const QVector2D& point, const QVector2D& direction) const;

QVector2D &operator+=(const QVector2D &vector);
QVector2D &operator-=(const QVector2D &vector);
QVector2D &operator*=(float factor);
QVector2D &operator*=(const QVector2D &vector);
QVector2D &operator/=(float divisor);

static float dotProduct(const QVector2D& v1, const QVector2D& v2);

friend inline bool operator==(const QVector2D &v1, const QVector2D &v2);
friend inline bool operator!=(const QVector2D &v1, const QVector2D &v2);
friend inline const QVector2D operator+(const QVector2D &v1, const QVector2D &v2);
friend inline const QVector2D operator-(const QVector2D &v1, const QVector2D &v2);
friend inline const QVector2D operator*(float factor, const QVector2D &vector);
friend inline const QVector2D operator*(const QVector2D &vector, float factor);
friend inline const QVector2D operator*(const QVector2D &v1, const QVector2D &v2);
friend inline const QVector2D operator-(const QVector2D &vector);
friend inline const QVector2D operator/(const QVector2D &vector, float divisor);

friend inline bool qFuzzyCompare(const QVector2D& v1, const QVector2D& v2);


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
QVector3D toVector3D() const;


# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
QVector4D toVector4D() const;


# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
QPoint toPoint() const;
QPointF toPointF() const;

operator QVariant() const;

private:
float xp, yp;

friend class QVector3D;
friend class QVector4D;
};

template<> class QTypeInfo<QVector2D > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QVector2D)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QVector2D) }; static inline const char *name() { return "QVector2D"; } };

inline QVector2D::QVector2D() : xp(0.0f), yp(0.0f) {}

inline QVector2D::QVector2D(float xpos, float ypos) : xp(xpos), yp(ypos) {}

inline QVector2D::QVector2D(const QPoint& point) : xp(point.x()), yp(point.y()) {}

inline QVector2D::QVector2D(const QPointF& point) : xp(point.x()), yp(point.y()) {}

inline bool QVector2D::isNull() const
{
return qIsNull(xp) && qIsNull(yp);
}

inline float QVector2D::x() const { return xp; }
inline float QVector2D::y() const { return yp; }

inline void QVector2D::setX(float aX) { xp = aX; }
inline void QVector2D::setY(float aY) { yp = aY; }

inline QVector2D &QVector2D::operator+=(const QVector2D &vector)
{
xp += vector.xp;
yp += vector.yp;
return *this;
}

inline QVector2D &QVector2D::operator-=(const QVector2D &vector)
{
xp -= vector.xp;
yp -= vector.yp;
return *this;
}

inline QVector2D &QVector2D::operator*=(float factor)
{
xp *= factor;
yp *= factor;
return *this;
}

inline QVector2D &QVector2D::operator*=(const QVector2D &vector)
{
xp *= vector.xp;
yp *= vector.yp;
return *this;
}

inline QVector2D &QVector2D::operator/=(float divisor)
{
xp /= divisor;
yp /= divisor;
return *this;
}

inline bool operator==(const QVector2D &v1, const QVector2D &v2)
{
return v1.xp == v2.xp && v1.yp == v2.yp;
}

inline bool operator!=(const QVector2D &v1, const QVector2D &v2)
{
return v1.xp != v2.xp || v1.yp != v2.yp;
}

inline const QVector2D operator+(const QVector2D &v1, const QVector2D &v2)
{
return QVector2D(v1.xp + v2.xp, v1.yp + v2.yp);
}

inline const QVector2D operator-(const QVector2D &v1, const QVector2D &v2)
{
return QVector2D(v1.xp - v2.xp, v1.yp - v2.yp);
}

inline const QVector2D operator*(float factor, const QVector2D &vector)
{
return QVector2D(vector.xp * factor, vector.yp * factor);
}

inline const QVector2D operator*(const QVector2D &vector, float factor)
{
return QVector2D(vector.xp * factor, vector.yp * factor);
}

inline const QVector2D operator*(const QVector2D &v1, const QVector2D &v2)
{
return QVector2D(v1.xp * v2.xp, v1.yp * v2.yp);
}

inline const QVector2D operator-(const QVector2D &vector)
{
return QVector2D(-vector.xp, -vector.yp);
}

inline const QVector2D operator/(const QVector2D &vector, float divisor)
{
return QVector2D(vector.xp / divisor, vector.yp / divisor);
}

inline bool qFuzzyCompare(const QVector2D& v1, const QVector2D& v2)
{
return qFuzzyCompare(v1.xp, v2.xp) && qFuzzyCompare(v1.yp, v2.yp);
}

inline QPoint QVector2D::toPoint() const
{
return QPoint(qRound(xp), qRound(yp));
}

inline QPointF QVector2D::toPointF() const
{
return QPointF(qreal(xp), qreal(yp));
}


# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
 QDebug operator<<(QDebug dbg, const QVector2D &vector);



# 248 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
 QDataStream &operator<<(QDataStream &, const QVector2D &);
 QDataStream &operator>>(QDataStream &, QVector2D &);




# 254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"



# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtouchdevice.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtouchdevice.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtouchdevice.h"



class QTouchDevicePrivate;

class  QTouchDevice
{
public:
enum DeviceType {
TouchScreen,
TouchPad
};

enum CapabilityFlag {
Position = 0x0001,
Area = 0x0002,
Pressure = 0x0004,
Velocity = 0x0008,
RawPositions = 0x0010,
NormalizedPosition = 0x0020
};
typedef QFlags<CapabilityFlag> Capabilities;

QTouchDevice();
~QTouchDevice();

static QList<const QTouchDevice *> devices();

QString name() const;
DeviceType type() const;
Capabilities capabilities() const;

void setName(const QString &name);
void setType(DeviceType devType);
void setCapabilities(Capabilities caps);

private:
QTouchDevicePrivate *d;
};

 inline QFlags<QTouchDevice::Capabilities::enum_type> operator|(QTouchDevice::Capabilities::enum_type f1, QTouchDevice::Capabilities::enum_type f2) { return QFlags<QTouchDevice::Capabilities::enum_type>(f1) | f2; }  inline QFlags<QTouchDevice::Capabilities::enum_type> operator|(QTouchDevice::Capabilities::enum_type f1, QFlags<QTouchDevice::Capabilities::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTouchDevice::Capabilities::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"


# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"



class QAction;

# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class QGesture;

# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class QScreen;

class  QInputEvent : public QEvent
{
public:
explicit QInputEvent(Type type, Qt::KeyboardModifiers modifiers = Qt::NoModifier);
~QInputEvent();
inline Qt::KeyboardModifiers modifiers() const { return modState; }
inline void setModifiers(Qt::KeyboardModifiers amodifiers) { modState = amodifiers; }
inline ulong timestamp() const { return ts; }
inline void setTimestamp(ulong atimestamp) { ts = atimestamp; }
protected:
Qt::KeyboardModifiers modState;
ulong ts;
};

class  QEnterEvent : public QEvent
{
public:
QEnterEvent(const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos);
~QEnterEvent();


# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline QPoint pos() const { return l.toPoint(); }
inline QPoint globalPos() const { return s.toPoint(); }
inline int x() const { return qRound(l.x()); }
inline int y() const { return qRound(l.y()); }
inline int globalX() const { return qRound(s.x()); }
inline int globalY() const { return qRound(s.y()); }

# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
const QPointF &localPos() const { return l; }
const QPointF &windowPos() const { return w; }
const QPointF &screenPos() const { return s; }

protected:
QPointF l, w, s;
};

class  QMouseEvent : public QInputEvent
{
public:
QMouseEvent(Type type, const QPointF &localPos, Qt::MouseButton button,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
QMouseEvent(Type type, const QPointF &localPos, const QPointF &screenPos,
Qt::MouseButton button, Qt::MouseButtons buttons,
Qt::KeyboardModifiers modifiers);
QMouseEvent(Type type, const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos,
Qt::MouseButton button, Qt::MouseButtons buttons,
Qt::KeyboardModifiers modifiers);
~QMouseEvent();


# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline QPoint pos() const { return l.toPoint(); }
inline QPoint globalPos() const { return s.toPoint(); }
inline int x() const { return qRound(l.x()); }
inline int y() const { return qRound(l.y()); }
inline int globalX() const { return qRound(s.x()); }
inline int globalY() const { return qRound(s.y()); }

# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
const QPointF &localPos() const { return l; }
const QPointF &windowPos() const { return w; }
const QPointF &screenPos() const { return s; }

inline Qt::MouseButton button() const { return b; }
inline Qt::MouseButtons buttons() const { return mouseState; }





# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
protected:
QPointF l, w, s;
Qt::MouseButton b;
Qt::MouseButtons mouseState;
int caps;
QVector2D velocity;

friend class QGuiApplicationPrivate;
};

class  QHoverEvent : public QInputEvent
{
public:
QHoverEvent(Type type, const QPointF &pos, const QPointF &oldPos, Qt::KeyboardModifiers modifiers = Qt::NoModifier);
~QHoverEvent();


# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline QPoint pos() const { return p.toPoint(); }
inline QPoint oldPos() const { return op.toPoint(); }


# 159 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline const QPointF &posF() const { return p; }
inline const QPointF &oldPosF() const { return op; }

protected:
QPointF p, op;
};


# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QWheelEvent : public QInputEvent
{
public:
QWheelEvent(const QPointF &pos, int delta,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers,
Qt::Orientation orient = Qt::Vertical);
QWheelEvent(const QPointF &pos, const QPointF& globalPos, int delta,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers,
Qt::Orientation orient = Qt::Vertical);
QWheelEvent(const QPointF &pos, const QPointF& globalPos,
QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);

~QWheelEvent();


inline QPoint pixelDelta() const { return pixelD; }
inline QPoint angleDelta() const { return angleD; }

inline int delta() const { return qt4D; }
inline Qt::Orientation orientation() const { return qt4O; }


# 190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline QPoint pos() const { return p.toPoint(); }
inline QPoint globalPos() const { return g.toPoint(); }
inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return g.x(); }
inline int globalY() const { return g.y(); }

# 197 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline const QPointF &posF() const { return p; }
inline const QPointF &globalPosF() const { return g; }

inline Qt::MouseButtons buttons() const { return mouseState; }
protected:
QPointF p;
QPointF g;
QPoint pixelD;
QPoint angleD;
int qt4D;
Qt::Orientation qt4O;
Qt::MouseButtons mouseState;
int reserved;
};



# 214 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QTabletEvent : public QInputEvent
{
public:
enum TabletDevice { NoDevice, Puck, Stylus, Airbrush, FourDMouse,
XFreeEraser , RotationStylus };
enum PointerType { UnknownPointer, Pen, Cursor, Eraser };
QTabletEvent(Type t, const QPointF &pos, const QPointF &globalPos,
int device, int pointerType, qreal pressure, int xTilt, int yTilt,
qreal tangentialPressure, qreal rotation, int z,
Qt::KeyboardModifiers keyState, qint64 uniqueID);
~QTabletEvent();

inline QPoint pos() const { return mPos.toPoint(); }
inline QPoint globalPos() const { return mGPos.toPoint(); }




# 232 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline const QPointF &posF() const { return mPos; }
inline const QPointF &globalPosF() const { return mGPos; }

inline int x() const { return qRound(mPos.x()); }
inline int y() const { return qRound(mPos.y()); }
inline int globalX() const { return qRound(mGPos.x()); }
inline int globalY() const { return qRound(mGPos.y()); }
inline qreal hiResGlobalX() const { return mGPos.x(); }
inline qreal hiResGlobalY() const { return mGPos.y(); }
inline TabletDevice device() const { return TabletDevice(mDev); }
inline PointerType pointerType() const { return PointerType(mPointerType); }
inline qint64 uniqueId() const { return mUnique; }
inline qreal pressure() const { return mPress; }
inline int z() const { return mZ; }
inline qreal tangentialPressure() const { return mTangential; }
inline qreal rotation() const { return mRot; }
inline int xTilt() const { return mXT; }
inline int yTilt() const { return mYT; }

protected:
QPointF mPos, mGPos;
int mDev, mPointerType, mXT, mYT, mZ;
qreal mPress, mTangential, mRot;
qint64 mUnique;




void *mExtra;
};


# 264 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QKeyEvent : public QInputEvent
{
public:
QKeyEvent(Type type, int key, Qt::KeyboardModifiers modifiers, const QString& text = QString(),
bool autorep = false, ushort count = 1);
QKeyEvent(Type type, int key, Qt::KeyboardModifiers modifiers,
quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers,
const QString &text = QString(), bool autorep = false, ushort count = 1);
~QKeyEvent();

int key() const { return k; }

# 276 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
bool matches(QKeySequence::StandardKey key) const;

# 278 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
Qt::KeyboardModifiers modifiers() const;
inline QString text() const { return txt; }
inline bool isAutoRepeat() const { return autor; }
inline int count() const { return int(c); }

inline quint32 nativeScanCode() const { return nScanCode; }
inline quint32 nativeVirtualKey() const { return nVirtualKey; }
inline quint32 nativeModifiers() const { return nModifiers; }

















# 303 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
protected:
QString txt;
int k;
quint32 nScanCode;
quint32 nVirtualKey;
quint32 nModifiers;
ushort c;
ushort autor:1;

};


class  QFocusEvent : public QEvent
{
public:
explicit QFocusEvent(Type type, Qt::FocusReason reason=Qt::OtherFocusReason);
~QFocusEvent();

inline bool gotFocus() const { return type() == FocusIn; }
inline bool lostFocus() const { return type() == FocusOut; }

Qt::FocusReason reason() const;

private:
Qt::FocusReason m_reason;
};


class  QPaintEvent : public QEvent
{
public:
explicit QPaintEvent(const QRegion& paintRegion);
explicit QPaintEvent(const QRect &paintRect);
~QPaintEvent();

inline const QRect &rect() const { return m_rect; }
inline const QRegion &region() const { return m_region; }

protected:
friend class QApplication;
friend class QCoreApplication;
QRect m_rect;
QRegion m_region;
bool m_erased;
};

class  QMoveEvent : public QEvent
{
public:
QMoveEvent(const QPoint &pos, const QPoint &oldPos);
~QMoveEvent();

inline const QPoint &pos() const { return p; }
inline const QPoint &oldPos() const { return oldp;}
protected:
QPoint p, oldp;
friend class QApplication;
friend class QCoreApplication;
};

class  QExposeEvent : public QEvent
{
public:
explicit QExposeEvent(const QRegion &rgn);
~QExposeEvent();

inline const QRegion &region() const { return rgn; }

protected:
QRegion rgn;
};

class  QResizeEvent : public QEvent
{
public:
QResizeEvent(const QSize &size, const QSize &oldSize);
~QResizeEvent();

inline const QSize &size() const { return s; }
inline const QSize &oldSize()const { return olds;}
protected:
QSize s, olds;
friend class QApplication;
friend class QCoreApplication;
};


class  QCloseEvent : public QEvent
{
public:
QCloseEvent();
~QCloseEvent();
};


class  QIconDragEvent : public QEvent
{
public:
QIconDragEvent();
~QIconDragEvent();
};


class  QShowEvent : public QEvent
{
public:
QShowEvent();
~QShowEvent();
};


class  QHideEvent : public QEvent
{
public:
QHideEvent();
~QHideEvent();
};


# 422 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QContextMenuEvent : public QInputEvent
{
public:
enum Reason { Mouse, Keyboard, Other };

QContextMenuEvent(Reason reason, const QPoint &pos, const QPoint &globalPos,
Qt::KeyboardModifiers modifiers);
QContextMenuEvent(Reason reason, const QPoint &pos, const QPoint &globalPos);
QContextMenuEvent(Reason reason, const QPoint &pos);
~QContextMenuEvent();

inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return gp.x(); }
inline int globalY() const { return gp.y(); }

inline const QPoint& pos() const { return p; }
inline const QPoint& globalPos() const { return gp; }

inline Reason reason() const { return Reason(reas); }

protected:
QPoint p;
QPoint gp;
uint reas : 8;
};



# 451 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QInputMethodEvent : public QEvent
{
public:
enum AttributeType {
TextFormat,
Cursor,
Language,
Ruby,
Selection
};
class Attribute {
public:
Attribute(AttributeType t, int s, int l, QVariant val) : type(t), start(s), length(l), value(val) {}
AttributeType type;

int start;
int length;
QVariant value;
};
QInputMethodEvent();
QInputMethodEvent(const QString &preeditText, const QList<Attribute> &attributes);
void setCommitString(const QString &commitString, int replaceFrom = 0, int replaceLength = 0);
inline const QList<Attribute> &attributes() const { return attrs; }
inline const QString &preeditString() const { return preedit; }

inline const QString &commitString() const { return commit; }
inline int replacementStart() const { return replace_from; }
inline int replacementLength() const { return replace_length; }

QInputMethodEvent(const QInputMethodEvent &other);

private:
QString preedit;
QList<Attribute> attrs;
QString commit;
int replace_from;
int replace_length;
};
template<> class QTypeInfo<QInputMethodEvent::Attribute > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QInputMethodEvent::Attribute)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QInputMethodEvent::Attribute) }; static inline const char *name() { return "QInputMethodEvent::Attribute"; } };

class  QInputMethodQueryEvent : public QEvent
{
public:
explicit QInputMethodQueryEvent(Qt::InputMethodQueries queries);
~QInputMethodQueryEvent();

Qt::InputMethodQueries queries() const { return m_queries; }

void setValue(Qt::InputMethodQuery query, const QVariant &value);
QVariant value(Qt::InputMethodQuery query) const;
private:
Qt::InputMethodQueries m_queries;
struct QueryPair {
Qt::InputMethodQuery query;
QVariant value;
};
QVector<QueryPair> m_values;
};





# 514 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class QMimeData;

class  QDropEvent : public QEvent
{
public:
QDropEvent(const QPointF& pos, Qt::DropActions actions, const QMimeData *data,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type = Drop);
~QDropEvent();

inline QPoint pos() const { return p.toPoint(); }
inline const QPointF &posF() const { return p; }
inline Qt::MouseButtons mouseButtons() const { return mouseState; }
inline Qt::KeyboardModifiers keyboardModifiers() const { return modState; }

inline Qt::DropActions possibleActions() const { return act; }
inline Qt::DropAction proposedAction() const { return default_action; }
inline void acceptProposedAction() { drop_action = default_action; accept(); }

inline Qt::DropAction dropAction() const { return drop_action; }
void setDropAction(Qt::DropAction action);

QObject* source() const;
inline const QMimeData *mimeData() const { return mdata; }

protected:
friend class QApplication;
QPointF p;
Qt::MouseButtons mouseState;
Qt::KeyboardModifiers modState;
Qt::DropActions act;
Qt::DropAction drop_action;
Qt::DropAction default_action;
const QMimeData *mdata;
};


class  QDragMoveEvent : public QDropEvent
{
public:
QDragMoveEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Type type = DragMove);
~QDragMoveEvent();

inline QRect answerRect() const { return rect; }

inline void accept() { QDropEvent::accept(); }
inline void ignore() { QDropEvent::ignore(); }

inline void accept(const QRect & r) { accept(); rect = r; }
inline void ignore(const QRect & r) { ignore(); rect = r; }

protected:
friend class QApplication;
QRect rect;
};


class  QDragEnterEvent : public QDragMoveEvent
{
public:
QDragEnterEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data,
Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
~QDragEnterEvent();
};


class  QDragLeaveEvent : public QEvent
{
public:
QDragLeaveEvent();
~QDragLeaveEvent();
};



# 589 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QHelpEvent : public QEvent
{
public:
QHelpEvent(Type type, const QPoint &pos, const QPoint &globalPos);
~QHelpEvent();

inline int x() const { return p.x(); }
inline int y() const { return p.y(); }
inline int globalX() const { return gp.x(); }
inline int globalY() const { return gp.y(); }

inline const QPoint& pos() const { return p; }
inline const QPoint& globalPos() const { return gp; }

private:
QPoint p;
QPoint gp;
};


# 609 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QStatusTipEvent : public QEvent
{
public:
explicit QStatusTipEvent(const QString &tip);
~QStatusTipEvent();

inline QString tip() const { return s; }
private:
QString s;
};



# 622 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QWhatsThisClickedEvent : public QEvent
{
public:
explicit QWhatsThisClickedEvent(const QString &href);
~QWhatsThisClickedEvent();

inline QString href() const { return s; }
private:
QString s;
};



# 635 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QActionEvent : public QEvent
{
QAction *act, *bef;
public:
QActionEvent(int type, QAction *action, QAction *before = 0);
~QActionEvent();

inline QAction *action() const { return act; }
inline QAction *before() const { return bef; }
};


# 647 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QFileOpenEvent : public QEvent
{
public:
explicit QFileOpenEvent(const QString &file);
explicit QFileOpenEvent(const QUrl &url);
~QFileOpenEvent();

inline QString file() const { return f; }
QUrl url() const { return m_url; }
bool openFile(QFile &file, QIODevice::OpenMode flags) const;
private:
QString f;
QUrl m_url;
};


# 663 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QToolBarChangeEvent : public QEvent
{
public:
explicit QToolBarChangeEvent(bool t);
~QToolBarChangeEvent();

inline bool toggle() const { return tog; }
private:
uint tog : 1;
};



# 676 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QShortcutEvent : public QEvent
{
public:
QShortcutEvent(const QKeySequence &key, int id, bool ambiguous = false);
~QShortcutEvent();

inline const QKeySequence &key() const { return sequence; }
inline int shortcutId() const { return sid; }
inline bool isAmbiguous() const { return ambig; }
protected:
QKeySequence sequence;
bool ambig;
int sid;
};


# 692 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class  QWindowStateChangeEvent: public QEvent
{
public:
explicit QWindowStateChangeEvent(Qt::WindowStates aOldState, bool isOverride = false);
~QWindowStateChangeEvent();

inline Qt::WindowStates oldState() const { return ostate; }
bool isOverride() const;

private:
Qt::WindowStates ostate;
bool m_override;
};


# 707 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
 QDebug operator<<(QDebug, const QEvent *);



# 711 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline bool operator==(QKeyEvent *e, QKeySequence::StandardKey key){return (e ? e->matches(key) : false);}
inline bool operator==(QKeySequence::StandardKey key, QKeyEvent *e){return (e ? e->matches(key) : false);}


# 715 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
class QTouchEventTouchPointPrivate;
class  QTouchEvent : public QInputEvent
{
public:
class  TouchPoint
{
public:
enum InfoFlag {
Pen = 0x0001
};
typedef QFlags<InfoFlag> InfoFlags;

explicit TouchPoint(int id = -1);
TouchPoint(const TouchPoint &other);





# 734 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
~TouchPoint();

TouchPoint &operator=(const TouchPoint &other)
{ if ( d != other.d ) { TouchPoint copy(other); swap(copy); } return *this; }

void swap(TouchPoint &other) { qSwap(d, other.d); }

int id() const;

Qt::TouchPointState state() const;

QPointF pos() const;
QPointF startPos() const;
QPointF lastPos() const;

QPointF scenePos() const;
QPointF startScenePos() const;
QPointF lastScenePos() const;

QPointF screenPos() const;
QPointF startScreenPos() const;
QPointF lastScreenPos() const;

QPointF normalizedPos() const;
QPointF startNormalizedPos() const;
QPointF lastNormalizedPos() const;

QRectF rect() const;
QRectF sceneRect() const;
QRectF screenRect() const;

qreal pressure() const;
QVector2D velocity() const;
InfoFlags flags() const;
QVector<QPointF> rawScreenPositions() const;


void setId(int id);
void setState(Qt::TouchPointStates state);
void setPos(const QPointF &pos);
void setScenePos(const QPointF &scenePos);
void setScreenPos(const QPointF &screenPos);
void setNormalizedPos(const QPointF &normalizedPos);
void setStartPos(const QPointF &startPos);
void setStartScenePos(const QPointF &startScenePos);
void setStartScreenPos(const QPointF &startScreenPos);
void setStartNormalizedPos(const QPointF &startNormalizedPos);
void setLastPos(const QPointF &lastPos);
void setLastScenePos(const QPointF &lastScenePos);
void setLastScreenPos(const QPointF &lastScreenPos);
void setLastNormalizedPos(const QPointF &lastNormalizedPos);
void setRect(const QRectF &rect);
void setSceneRect(const QRectF &sceneRect);
void setScreenRect(const QRectF &screenRect);
void setPressure(qreal pressure);
void setVelocity(const QVector2D &v);
void setFlags(InfoFlags flags);
void setRawScreenPositions(const QVector<QPointF> &positions);

private:
QTouchEventTouchPointPrivate *d;
friend class QGuiApplication;
friend class QGuiApplicationPrivate;
friend class QApplication;
friend class QApplicationPrivate;
};








# 808 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
explicit QTouchEvent(QEvent::Type eventType,
QTouchDevice *device = 0,
Qt::KeyboardModifiers modifiers = Qt::NoModifier,
Qt::TouchPointStates touchPointStates = 0,
const QList<QTouchEvent::TouchPoint> &touchPoints = QList<QTouchEvent::TouchPoint>());
~QTouchEvent();

inline QWindow *window() const { return _window; }
inline QObject *target() const { return _target; }



# 820 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
inline Qt::TouchPointStates touchPointStates() const { return _touchPointStates; }
inline const QList<QTouchEvent::TouchPoint> &touchPoints() const { return _touchPoints; }
inline QTouchDevice *device() const { return _device; }


inline void setWindow(QWindow *awindow) { _window = awindow; }
inline void setTarget(QObject *atarget) { _target = atarget; }
inline void setTouchPointStates(Qt::TouchPointStates aTouchPointStates) { _touchPointStates = aTouchPointStates; }
inline void setTouchPoints(const QList<QTouchEvent::TouchPoint> &atouchPoints) { _touchPoints = atouchPoints; }
inline void setDevice(QTouchDevice *adevice) { _device = adevice; }

protected:
QWindow *_window;
QObject *_target;
QTouchDevice *_device;
Qt::TouchPointStates _touchPointStates;
QList<QTouchEvent::TouchPoint> _touchPoints;

friend class QGuiApplication;
friend class QGuiApplicationPrivate;
friend class QApplication;
friend class QApplicationPrivate;
};
template<> class QTypeInfo<QTouchEvent::TouchPoint > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTouchEvent::TouchPoint)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTouchEvent::TouchPoint) }; static inline const char *name() { return "QTouchEvent::TouchPoint"; } };
 inline QFlags<QTouchEvent::TouchPoint::InfoFlags::enum_type> operator|(QTouchEvent::TouchPoint::InfoFlags::enum_type f1, QTouchEvent::TouchPoint::InfoFlags::enum_type f2) { return QFlags<QTouchEvent::TouchPoint::InfoFlags::enum_type>(f1) | f2; }  inline QFlags<QTouchEvent::TouchPoint::InfoFlags::enum_type> operator|(QTouchEvent::TouchPoint::InfoFlags::enum_type f1, QFlags<QTouchEvent::TouchPoint::InfoFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTouchEvent::TouchPoint::InfoFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class  QScrollPrepareEvent : public QEvent
{
public:
explicit QScrollPrepareEvent(const QPointF &startPos);
~QScrollPrepareEvent();

QPointF startPos() const;

QSizeF viewportSize() const;
QRectF contentPosRange() const;
QPointF contentPos() const;

void setViewportSize(const QSizeF &size);
void setContentPosRange(const QRectF &rect);
void setContentPos(const QPointF &pos);

private:
QObject* m_target; 
QPointF m_startPos;
QSizeF m_viewportSize;
QRectF m_contentPosRange;
QPointF m_contentPos;
};


class  QScrollEvent : public QEvent
{
public:
enum ScrollState
{
ScrollStarted,
ScrollUpdated,
ScrollFinished
};

QScrollEvent(const QPointF &contentPos, const QPointF &overshoot, ScrollState scrollState);
~QScrollEvent();

QPointF contentPos() const;
QPointF overshootDistance() const;
ScrollState scrollState() const;

private:
QPointF m_contentPos;
QPointF m_overshoot;
QScrollEvent::ScrollState m_state;
};

class  QScreenOrientationChangeEvent : public QEvent
{
public:
QScreenOrientationChangeEvent(QScreen *screen, Qt::ScreenOrientation orientation);
~QScreenOrientationChangeEvent();

QScreen *screen() const;
Qt::ScreenOrientation orientation() const;

private:
QScreen *m_screen;
Qt::ScreenOrientation m_orientation;
};

class  QApplicationStateChangeEvent : public QEvent
{
public:
explicit QApplicationStateChangeEvent(Qt::ApplicationState state);
Qt::ApplicationState applicationState() const;

private:
Qt::ApplicationState m_applicationState;
};




# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"




# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"


class QAccessibleInterface;
class QAccessibleEvent;
class QWindow;
class QTextCursor;


class  QAccessible
{

Q_ENUMS(Role Event)
public:

enum Event {
SoundPlayed = 0x0001,
Alert = 0x0002,
ForegroundChanged = 0x0003,
MenuStart = 0x0004,
MenuEnd = 0x0005,
PopupMenuStart = 0x0006,
PopupMenuEnd = 0x0007,
ContextHelpStart = 0x000C,
ContextHelpEnd = 0x000D,
DragDropStart = 0x000E,
DragDropEnd = 0x000F,
DialogStart = 0x0010,
DialogEnd = 0x0011,
ScrollingStart = 0x0012,
ScrollingEnd = 0x0013,

MenuCommand = 0x0018,


ActionChanged = 0x0101,
ActiveDescendantChanged = 0x0102,
AttributeChanged = 0x0103,
DocumentContentChanged = 0x0104,
DocumentLoadComplete = 0x0105,
DocumentLoadStopped = 0x0106,
DocumentReload = 0x0107,
HyperlinkEndIndexChanged = 0x0108,
HyperlinkNumberOfAnchorsChanged = 0x0109,
HyperlinkSelectedLinkChanged = 0x010A,
HypertextLinkActivated = 0x010B,
HypertextLinkSelected = 0x010C,
HyperlinkStartIndexChanged = 0x010D,
HypertextChanged = 0x010E,
HypertextNLinksChanged = 0x010F,
ObjectAttributeChanged = 0x0110,
PageChanged = 0x0111,
SectionChanged = 0x0112,
TableCaptionChanged = 0x0113,
TableColumnDescriptionChanged = 0x0114,
TableColumnHeaderChanged = 0x0115,
TableModelChanged = 0x0116,
TableRowDescriptionChanged = 0x0117,
TableRowHeaderChanged = 0x0118,
TableSummaryChanged = 0x0119,
TextAttributeChanged = 0x011A,
TextCaretMoved = 0x011B,

TextColumnChanged = 0x011D,
TextInserted = 0x011E,
TextRemoved = 0x011F,
TextUpdated = 0x0120,
TextSelectionChanged = 0x0121,
VisibleDataChanged = 0x0122,

ObjectCreated = 0x8000,
ObjectDestroyed = 0x8001,
ObjectShow = 0x8002,
ObjectHide = 0x8003,
ObjectReorder = 0x8004,
Focus = 0x8005,
Selection = 0x8006,
SelectionAdd = 0x8007,
SelectionRemove = 0x8008,
SelectionWithin = 0x8009,
StateChanged = 0x800A,
LocationChanged = 0x800B,
NameChanged = 0x800C,
DescriptionChanged = 0x800D,
ValueChanged = 0x800E,
ParentChanged = 0x800F,
HelpChanged = 0x80A0,
DefaultActionChanged = 0x80B0,
AcceleratorChanged = 0x80C0,

InvalidEvent
};



struct State {

quint64 disabled : 1; 
quint64 selected : 1;
quint64 focusable : 1;
quint64 focused : 1;
quint64 pressed : 1;
quint64 checkable : 1;
quint64 checked : 1;
quint64 checkStateMixed : 1; 
quint64 readOnly : 1;
quint64 hotTracked : 1;
quint64 defaultButton : 1;
quint64 expanded : 1;
quint64 collapsed : 1;
quint64 busy : 1;
quint64 expandable : 1;
quint64 marqueed : 1;
quint64 animated : 1;
quint64 invisible : 1;
quint64 offscreen : 1;
quint64 sizeable : 1;
quint64 movable : 1;
quint64 selfVoicing : 1;
quint64 selectable : 1;
quint64 linked : 1;
quint64 traversed : 1;
quint64 multiSelectable : 1;
quint64 extSelectable : 1;
quint64 passwordEdit : 1; 
quint64 hasPopup : 1;
quint64 modal : 1;



quint64 active : 1;
quint64 invalid : 1; 
quint64 editable : 1;
quint64 multiLine : 1;
quint64 selectableText : 1;
quint64 supportsAutoCompletion : 1;






















State() {
memset(this, 0, sizeof(State));
}
};





enum Role {
NoRole = 0x00000000,
TitleBar = 0x00000001,
MenuBar = 0x00000002,
ScrollBar = 0x00000003,
Grip = 0x00000004,
Sound = 0x00000005,
Cursor = 0x00000006,
Caret = 0x00000007,
AlertMessage = 0x00000008,
Window = 0x00000009,
Client = 0x0000000A,
PopupMenu = 0x0000000B,
MenuItem = 0x0000000C,
ToolTip = 0x0000000D,
Application = 0x0000000E,
Document = 0x0000000F,
Pane = 0x00000010,
Chart = 0x00000011,
Dialog = 0x00000012,
Border = 0x00000013,
Grouping = 0x00000014,
Separator = 0x00000015,
ToolBar = 0x00000016,
StatusBar = 0x00000017,
Table = 0x00000018,
ColumnHeader = 0x00000019,
RowHeader = 0x0000001A,
Column = 0x0000001B,
Row = 0x0000001C,
Cell = 0x0000001D,
Link = 0x0000001E,
HelpBalloon = 0x0000001F,
Assistant = 0x00000020,
List = 0x00000021,
ListItem = 0x00000022,
Tree = 0x00000023,
TreeItem = 0x00000024,
PageTab = 0x00000025,
PropertyPage = 0x00000026,
Indicator = 0x00000027,
Graphic = 0x00000028,
StaticText = 0x00000029,
EditableText = 0x0000002A, 
Button = 0x0000002B,

# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"
PushButton = Button, 

# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"
CheckBox = 0x0000002C,
RadioButton = 0x0000002D,
ComboBox = 0x0000002E,

ProgressBar = 0x00000030,
Dial = 0x00000031,
HotkeyField = 0x00000032,
Slider = 0x00000033,
SpinBox = 0x00000034,
Canvas = 0x00000035,
Animation = 0x00000036,
Equation = 0x00000037,
ButtonDropDown = 0x00000038, 
ButtonMenu = 0x00000039,
ButtonDropGrid = 0x0000003A,
Whitespace = 0x0000003B, 
PageTabList = 0x0000003C,
Clock = 0x0000003D,
Splitter = 0x0000003E,



LayeredPane = 0x00000080,
Terminal = 0x00000081,
Desktop = 0x00000082,
UserRole = 0x0000ffff
};

enum Text {
Name = 0,
Description,
Value,
Help,
Accelerator,
DebugDescription,
UserText = 0x0000ffff
};

enum RelationFlag {
Label = 0x00000001,
Labelled = 0x00000002,
Controller = 0x00000004,
Controlled = 0x00000008,
AllRelations = 0xffffffff
};
typedef QFlags<RelationFlag> Relation;

enum InterfaceType
{
TextInterface,
EditableTextInterface,
ValueInterface,
ActionInterface,
ImageInterface,
TableInterface,
TableCellInterface
};

enum TextBoundaryType {
CharBoundary,
WordBoundary,
SentenceBoundary,
ParagraphBoundary,
LineBoundary,
NoBoundary
};

typedef QAccessibleInterface*(*InterfaceFactory)(const QString &key, QObject*);
typedef void(*UpdateHandler)(QAccessibleEvent *event);
typedef void(*RootObjectHandler)(QObject*);

typedef unsigned Id;

static void installFactory(InterfaceFactory);
static void removeFactory(InterfaceFactory);
static UpdateHandler installUpdateHandler(UpdateHandler);
static RootObjectHandler installRootObjectHandler(RootObjectHandler);

static QAccessibleInterface *queryAccessibleInterface(QObject *);
static Id uniqueId(QAccessibleInterface *iface);
static QAccessibleInterface *accessibleInterface(Id uniqueId);
static Id registerAccessibleInterface(QAccessibleInterface *iface);
static void deleteAccessibleInterface(Id uniqueId);





# 362 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"
static void updateAccessibility(QAccessibleEvent *event);

static bool isActive();
static void setRootObject(QObject *object);

static void cleanup();

static QPair< int, int > qAccessibleTextBoundaryHelper(const QTextCursor &cursor, TextBoundaryType boundaryType);

private:
static UpdateHandler updateHandler;
static RootObjectHandler rootObjectHandler;





QAccessible() {}

friend class QAccessibleCache;
};

 bool operator==(const QAccessible::State &first, const QAccessible::State &second);

 inline QFlags<QAccessible::Relation::enum_type> operator|(QAccessible::Relation::enum_type f1, QAccessible::Relation::enum_type f2) { return QFlags<QAccessible::Relation::enum_type>(f1) | f2; }  inline QFlags<QAccessible::Relation::enum_type> operator|(QAccessible::Relation::enum_type f1, QFlags<QAccessible::Relation::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QAccessible::Relation::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class QAccessible2Interface;
class QAccessibleTextInterface;
class QAccessibleEditableTextInterface;
class QAccessibleValueInterface;
class QAccessibleActionInterface;
class QAccessibleImageInterface;
class QAccessibleTableInterface;
class QAccessibleTableCellInterface;

class  QAccessibleInterface
{
protected:
virtual ~QAccessibleInterface();

public:

virtual bool isValid() const = 0;
virtual QObject *object() const = 0;
virtual QWindow *window() const;


virtual QVector<QPair<QAccessibleInterface*, QAccessible::Relation> > relations(QAccessible::Relation match = QAccessible::AllRelations) const;
virtual QAccessibleInterface *focusChild() const;

virtual QAccessibleInterface *childAt(int x, int y) const = 0;


virtual QAccessibleInterface *parent() const = 0;
virtual QAccessibleInterface *child(int index) const = 0;
virtual int childCount() const = 0;
virtual int indexOfChild(const QAccessibleInterface *) const = 0;


virtual QString text(QAccessible::Text t) const = 0;
virtual void setText(QAccessible::Text t, const QString &text) = 0;
virtual QRect rect() const = 0;
virtual QAccessible::Role role() const = 0;
virtual QAccessible::State state() const = 0;

virtual QColor foregroundColor() const;
virtual QColor backgroundColor() const;

inline QAccessibleTextInterface *textInterface()
{ return reinterpret_cast<QAccessibleTextInterface *>(interface_cast(QAccessible::TextInterface)); }

inline QAccessibleEditableTextInterface *editableTextInterface()
{ return reinterpret_cast<QAccessibleEditableTextInterface *>(interface_cast(QAccessible::EditableTextInterface)); }

inline QAccessibleValueInterface *valueInterface()
{ return reinterpret_cast<QAccessibleValueInterface *>(interface_cast(QAccessible::ValueInterface)); }

inline QAccessibleActionInterface *actionInterface()
{ return reinterpret_cast<QAccessibleActionInterface *>(interface_cast(QAccessible::ActionInterface)); }

inline QAccessibleImageInterface *imageInterface()
{ return reinterpret_cast<QAccessibleImageInterface *>(interface_cast(QAccessible::ImageInterface)); }

inline QAccessibleTableInterface *tableInterface()
{ return reinterpret_cast<QAccessibleTableInterface *>(interface_cast(QAccessible::TableInterface)); }

inline QAccessibleTableCellInterface *tableCellInterface()
{ return reinterpret_cast<QAccessibleTableCellInterface *>(interface_cast(QAccessible::TableCellInterface)); }

virtual void virtual_hook(int id, void *data);

virtual void *interface_cast(QAccessible::InterfaceType)
{ return 0; }

protected:
friend class QAccessibleCache;
};

class  QAccessibleEvent
{
QAccessibleEvent(const QAccessibleEvent &) ; QAccessibleEvent &operator=(const QAccessibleEvent &) ;
public:
inline QAccessibleEvent(QObject *obj, QAccessible::Event typ)
: m_type(typ), m_object(obj), m_child(-1)
{
qt_noop();


qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
}

virtual ~QAccessibleEvent()
{}

QAccessible::Event type() const { return m_type; }
QObject *object() const { return m_object; }

void setChild(int chld) { m_child = chld; }
int child() const { return m_child; }

virtual QAccessibleInterface *accessibleInterface() const;

protected:
QAccessible::Event m_type;
QObject *m_object;
int m_child;
};

class  QAccessibleStateChangeEvent :public QAccessibleEvent
{
public:
inline QAccessibleStateChangeEvent(QObject *obj, QAccessible::State state)
: QAccessibleEvent(obj, QAccessible::InvalidEvent), m_changedStates(state)
{
m_type = QAccessible::StateChanged;
}

QAccessible::State changedStates() const {
return m_changedStates;
}

protected:
QAccessible::State m_changedStates;
};


class  QAccessibleTextCursorEvent : public QAccessibleEvent
{
public:
inline QAccessibleTextCursorEvent(QObject *obj, int cursorPos)
: QAccessibleEvent(obj, QAccessible::InvalidEvent)
, m_cursorPosition(cursorPos)
{
m_type = QAccessible::TextCaretMoved;
}

void setCursorPosition(int position) { m_cursorPosition = position; }
int cursorPosition() const { return m_cursorPosition; }

protected:
int m_cursorPosition;
};


class  QAccessibleTextSelectionEvent : public QAccessibleTextCursorEvent
{
public:
inline QAccessibleTextSelectionEvent(QObject *obj, int start, int end)
: QAccessibleTextCursorEvent(obj, (start == -1) ? 0 : end)
, m_selectionStart(start), m_selectionEnd(end)
{
m_type = QAccessible::TextSelectionChanged;
}

void setSelection(int start, int end) {
m_selectionStart = start;
m_selectionEnd = end;
}

int selectionStart() const { return m_selectionStart; }
int selectionEnd() const { return m_selectionEnd; }

protected:
int m_selectionStart;
int m_selectionEnd;
};

class  QAccessibleTextInsertEvent : public QAccessibleTextCursorEvent
{
public:
inline QAccessibleTextInsertEvent(QObject *obj, int position, const QString &text)
: QAccessibleTextCursorEvent(obj, position + text.length())
, m_position(position), m_text(text)
{
m_type = QAccessible::TextInserted;
}

QString textInserted() const {
return m_text;
}
int changePosition() const {
return m_position;
}

protected:
int m_position;
QString m_text;
};

class  QAccessibleTextRemoveEvent : public QAccessibleTextCursorEvent
{
public:
inline QAccessibleTextRemoveEvent(QObject *obj, int position, const QString &text)
: QAccessibleTextCursorEvent(obj, position)
, m_position(position), m_text(text)
{
m_type = QAccessible::TextRemoved;
}

QString textRemoved() const {
return m_text;
}
int changePosition() const {
return m_position;
}

protected:
int m_position;
QString m_text;
};

class  QAccessibleTextUpdateEvent : public QAccessibleTextCursorEvent
{
public:
inline QAccessibleTextUpdateEvent(QObject *obj, int position, const QString &oldText, const QString &text)
: QAccessibleTextCursorEvent(obj, position + text.length())
, m_position(position), m_oldText(oldText), m_text(text)
{
m_type = QAccessible::TextUpdated;
}
QString textRemoved() const {
return m_oldText;
}
QString textInserted() const {
return m_text;
}
int changePosition() const {
return m_position;
}

protected:
int m_position;
QString m_oldText;
QString m_text;
};

class  QAccessibleValueChangeEvent : public QAccessibleEvent
{
public:
inline QAccessibleValueChangeEvent(QObject *obj, const QVariant &val)
: QAccessibleEvent(obj, QAccessible::InvalidEvent)
, m_value(val)
{
m_type = QAccessible::ValueChanged;
}

void setValue(const QVariant & val) { m_value= val; }
QVariant value() const { return m_value; }

protected:
QVariant m_value;
};

class  QAccessibleTableModelChangeEvent : public QAccessibleEvent
{
public:
enum ModelChangeType {
ModelReset,
DataChanged,
RowsInserted,
ColumnsInserted,
RowsRemoved,
ColumnsRemoved
};

inline QAccessibleTableModelChangeEvent(QObject *obj, ModelChangeType changeType)
: QAccessibleEvent(obj, QAccessible::InvalidEvent)
, m_modelChangeType(changeType)
, m_firstRow(-1), m_firstColumn(-1), m_lastRow(-1), m_lastColumn(-1)
{
m_type = QAccessible::TableModelChanged;
}
void setModelChangeType(ModelChangeType changeType) { m_modelChangeType = changeType; }
ModelChangeType modelChangeType() const { return m_modelChangeType; }

void setFirstRow(int row) { m_firstRow = row; }
void setFirstColumn(int col) { m_firstColumn = col; }
void setLastRow(int row) { m_lastRow = row; }
void setLastColumn(int col) { m_lastColumn = col; }
int firstRow() const { return m_firstRow; }
int firstColumn() const { return m_firstColumn; }
int lastRow() const { return m_lastRow; }
int lastColumn() const { return m_lastColumn; }

protected:
ModelChangeType m_modelChangeType;
int m_firstRow;
int m_firstColumn;
int m_lastRow;
int m_lastColumn;
};


# 682 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"
template <> inline const char *qobject_interface_iid<QAccessibleInterface *>() { return "org.qt-project.Qt.QAccessibleInterface"; } template <> inline QAccessibleInterface *qobject_cast<QAccessibleInterface *>(QObject *object) { return reinterpret_cast<QAccessibleInterface *>((object ? object->qt_metacast("org.qt-project.Qt.QAccessibleInterface") : 0)); } template <> inline QAccessibleInterface *qobject_cast<QAccessibleInterface *>(const QObject *object) { return reinterpret_cast<QAccessibleInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QAccessibleInterface") : 0)); }

 const char *qAccessibleRoleString(QAccessible::Role role);
 const char *qAccessibleEventString(QAccessible::Event event);


# 688 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"
 QDebug operator<<(QDebug d, const QAccessibleInterface *iface);
 QDebug operator<<(QDebug d, const QAccessibleEvent &ev);













# 703 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"




# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"
class QAccessibleInterface;
class QAccessibleEvent;

class QAccessibleBridge
{
public:
virtual ~QAccessibleBridge() {}
virtual void setRootObject(QAccessibleInterface *) = 0;
virtual void notifyAccessibilityUpdate(QAccessibleEvent *event) = 0;
};



# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"
class  QAccessibleBridgePlugin : public QObject
{
Q_OBJECT
public:
explicit QAccessibleBridgePlugin(QObject *parent = 0);
~QAccessibleBridgePlugin();

virtual QAccessibleBridge *create(const QString &key) = 0;
};



# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessiblebridge.h"



# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"






















































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleobject.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleobject.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleobject.h"
class QAccessibleObjectPrivate;
class QObject;

class  QAccessibleObject : public QAccessibleInterface
{
public:
explicit QAccessibleObject(QObject *object);

bool isValid() const;
QObject *object() const;


QRect rect() const;
void setText(QAccessible::Text t, const QString &text);
QAccessibleInterface *childAt(int x, int y) const;

protected:
virtual ~QAccessibleObject();

private:
QAccessibleObjectPrivate *d;
QAccessibleObject(const QAccessibleObject &) ; QAccessibleObject &operator=(const QAccessibleObject &) ;
};

class  QAccessibleApplication : public QAccessibleObject
{
public:
QAccessibleApplication();

QWindow *window() const;

int childCount() const;
int indexOfChild(const QAccessibleInterface*) const;
QAccessibleInterface *focusChild() const;


QAccessibleInterface *parent() const;
QAccessibleInterface *child(int index) const;


QString text(QAccessible::Text t) const;
QAccessible::Role role() const;
QAccessible::State state() const;
};



# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleobject.h"



# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"






















































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"
class QStringList;
class QAccessibleInterface;



# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"
class QAccessiblePluginPrivate;

class  QAccessiblePlugin : public QObject
{
Q_OBJECT
public:
explicit QAccessiblePlugin(QObject *parent = 0);
~QAccessiblePlugin();

virtual QAccessibleInterface *create(const QString &key, QObject *object) = 0;
};



# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessibleplugin.h"



# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbitmap.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"




class QPaintEngine;
class QPaintDevicePrivate;

class  QPaintDevice 
{
public:
enum PaintDeviceMetric {
PdmWidth = 1,
PdmHeight,
PdmWidthMM,
PdmHeightMM,
PdmNumColors,
PdmDepth,
PdmDpiX,
PdmDpiY,
PdmPhysicalDpiX,
PdmPhysicalDpiY,
PdmDevicePixelRatio
};

virtual ~QPaintDevice();

virtual int devType() const;
bool paintingActive() const;
virtual QPaintEngine *paintEngine() const = 0;

int width() const { return metric(PdmWidth); }
int height() const { return metric(PdmHeight); }
int widthMM() const { return metric(PdmWidthMM); }
int heightMM() const { return metric(PdmHeightMM); }
int logicalDpiX() const { return metric(PdmDpiX); }
int logicalDpiY() const { return metric(PdmDpiY); }
int physicalDpiX() const { return metric(PdmPhysicalDpiX); }
int physicalDpiY() const { return metric(PdmPhysicalDpiY); }
int devicePixelRatio() const { return metric(PdmDevicePixelRatio); }
int colorCount() const { return metric(PdmNumColors); }
int depth() const { return metric(PdmDepth); }

protected:
QPaintDevice();
virtual int metric(PaintDeviceMetric metric) const;
virtual void initPainter(QPainter *painter) const;
virtual QPaintDevice *redirected(QPoint *offset) const;
virtual QPainter *sharedPainter() const;

ushort painters; 

private:
QPaintDevice(const QPaintDevice &) ; QPaintDevice &operator=(const QPaintDevice &) ;

QPaintDevicePrivate *reserved;

friend class QPainter;
friend class QPainterPrivate;
friend class QFontEngineMac;
friend class QX11PaintEngine;
friend  int qt_paint_device_metric(const QPaintDevice *device, PaintDeviceMetric metric);
};





inline int QPaintDevice::devType() const
{ return QInternal::UnknownDevice; }

inline bool QPaintDevice::paintingActive() const
{ return painters != 0; }




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"



class QMatrix;
class QTransform;
class QRect;
class QVariant;

class  QPolygon : public QVector<QPoint>
{
public:
inline QPolygon() {}
inline ~QPolygon() {}
inline explicit QPolygon(int size);
inline QPolygon(const QPolygon &a) : QVector<QPoint>(a) {}
inline  QPolygon(const QVector<QPoint> &v) : QVector<QPoint>(v) {}
QPolygon(const QRect &r, bool closed=false);
QPolygon(int nPoints, const int *points);
inline void swap(QPolygon &other) { QVector<QPoint>::swap(other); } 

operator QVariant() const;

void translate(int dx, int dy);
void translate(const QPoint &offset);

QPolygon translated(int dx, int dy) const;
inline QPolygon translated(const QPoint &offset) const;

QRect boundingRect() const;

void point(int i, int *x, int *y) const;
QPoint point(int i) const;
void setPoint(int index, int x, int y);
void setPoint(int index, const QPoint &p);
void setPoints(int nPoints, const int *points);
void setPoints(int nPoints, int firstx, int firsty, ...);
void putPoints(int index, int nPoints, const int *points);
void putPoints(int index, int nPoints, int firstx, int firsty, ...);
void putPoints(int index, int nPoints, const QPolygon & from, int fromIndex=0);

bool containsPoint(const QPoint &pt, Qt::FillRule fillRule) const;

QPolygon united(const QPolygon &r) const;
QPolygon intersected(const QPolygon &r) const;
QPolygon subtracted(const QPolygon &r) const;
};

inline QPolygon::QPolygon(int asize) : QVector<QPoint>(asize) {}


# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"
 QDebug operator<<(QDebug, const QPolygon &);


# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"
 QDataStream &operator<<(QDataStream &stream, const QPolygon &polygon);
 QDataStream &operator>>(QDataStream &stream, QPolygon &polygon);


# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




inline void QPolygon::setPoint(int index, const QPoint &pt)
{ (*this)[index] = pt; }

inline void QPolygon::setPoint(int index, int x, int y)
{ (*this)[index] = QPoint(x, y); }

inline QPoint QPolygon::point(int index) const
{ return at(index); }

inline void QPolygon::translate(const QPoint &offset)
{ translate(offset.x(), offset.y()); }

inline QPolygon QPolygon::translated(const QPoint &offset) const
{ return translated(offset.x(), offset.y()); }

class QRectF;

class  QPolygonF : public QVector<QPointF>
{
public:
inline QPolygonF() {}
inline ~QPolygonF() {}
inline explicit QPolygonF(int size);
inline QPolygonF(const QPolygonF &a) : QVector<QPointF>(a) {}
inline  QPolygonF(const QVector<QPointF> &v) : QVector<QPointF>(v) {}
QPolygonF(const QRectF &r);
 QPolygonF(const QPolygon &a);
inline void swap(QPolygonF &other) { QVector<QPointF>::swap(other); } 

operator QVariant() const;

inline void translate(qreal dx, qreal dy);
void translate(const QPointF &offset);

inline QPolygonF translated(qreal dx, qreal dy) const;
QPolygonF translated(const QPointF &offset) const;

QPolygon toPolygon() const;

bool isClosed() const { return !isEmpty() && first() == last(); }

QRectF boundingRect() const;

bool containsPoint(const QPointF &pt, Qt::FillRule fillRule) const;

QPolygonF united(const QPolygonF &r) const;
QPolygonF intersected(const QPolygonF &r) const;
QPolygonF subtracted(const QPolygonF &r) const;
};

inline QPolygonF::QPolygonF(int asize) : QVector<QPointF>(asize) {}


# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"
 QDebug operator<<(QDebug, const QPolygonF &);


# 170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"
 QDataStream &operator<<(QDataStream &stream, const QPolygonF &array);
 QDataStream &operator>>(QDataStream &stream, QPolygonF &array);


# 178 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"
inline void QPolygonF::translate(qreal dx, qreal dy)
{ translate(QPointF(dx, dy)); }

inline QPolygonF QPolygonF::translated(qreal dx, qreal dy) const
{ return translated(QPointF(dx, dy)); }




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"












































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"






























































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"



class QPainterPath;
class QVariant;

class  QMatrix 
{
public:
inline explicit QMatrix(Qt::Initialization) {}
QMatrix();
QMatrix(qreal m11, qreal m12, qreal m21, qreal m22,
qreal dx, qreal dy);
QMatrix(const QMatrix &matrix);

void setMatrix(qreal m11, qreal m12, qreal m21, qreal m22,
qreal dx, qreal dy);

qreal m11() const { return _m11; }
qreal m12() const { return _m12; }
qreal m21() const { return _m21; }
qreal m22() const { return _m22; }
qreal dx() const { return _dx; }
qreal dy() const { return _dy; }

void map(int x, int y, int *tx, int *ty) const;
void map(qreal x, qreal y, qreal *tx, qreal *ty) const;
QRect mapRect(const QRect &) const;
QRectF mapRect(const QRectF &) const;

QPoint map(const QPoint &p) const;
QPointF map(const QPointF&p) const;
QLine map(const QLine &l) const;
QLineF map(const QLineF &l) const;
QPolygonF map(const QPolygonF &a) const;
QPolygon map(const QPolygon &a) const;
QRegion map(const QRegion &r) const;
QPainterPath map(const QPainterPath &p) const;
QPolygon mapToPolygon(const QRect &r) const;

void reset();
inline bool isIdentity() const;

QMatrix &translate(qreal dx, qreal dy);
QMatrix &scale(qreal sx, qreal sy);
QMatrix &shear(qreal sh, qreal sv);
QMatrix &rotate(qreal a);

bool isInvertible() const { return !qFuzzyIsNull(_m11*_m22 - _m12*_m21); }
qreal determinant() const { return _m11*_m22 - _m12*_m21; }

QMatrix inverted(bool *invertible = 0) const;

bool operator==(const QMatrix &) const;
bool operator!=(const QMatrix &) const;

QMatrix &operator*=(const QMatrix &);
QMatrix operator*(const QMatrix &o) const;

QMatrix &operator=(const QMatrix &);

operator QVariant() const;

private:
inline QMatrix(bool)
: _m11(1.)
, _m12(0.)
, _m21(0.)
, _m22(1.)
, _dx(0.)
, _dy(0.) {}
inline QMatrix(qreal am11, qreal am12, qreal am21, qreal am22, qreal adx, qreal ady, bool)
: _m11(am11)
, _m12(am12)
, _m21(am21)
, _m22(am22)
, _dx(adx)
, _dy(ady) {}
friend class QTransform;
qreal _m11, _m12;
qreal _m21, _m22;
qreal _dx, _dy;
};
template<> class QTypeInfo<QMatrix > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMatrix)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMatrix) }; static inline const char *name() { return "QMatrix"; } };


inline QPoint operator*(const QPoint &p, const QMatrix &m)
{ return m.map(p); }
inline QPointF operator*(const QPointF &p, const QMatrix &m)
{ return m.map(p); }
inline QLineF operator*(const QLineF &l, const QMatrix &m)
{ return m.map(l); }
inline QLine operator*(const QLine &l, const QMatrix &m)
{ return m.map(l); }
inline QPolygon operator *(const QPolygon &a, const QMatrix &m)
{ return m.map(a); }
inline QPolygonF operator *(const QPolygonF &a, const QMatrix &m)
{ return m.map(a); }
inline QRegion operator *(const QRegion &r, const QMatrix &m)
{ return m.map(r); }
 QPainterPath operator *(const QPainterPath &p, const QMatrix &m);

inline bool QMatrix::isIdentity() const
{
return qFuzzyIsNull(_m11 - 1) && qFuzzyIsNull(_m22 - 1) && qFuzzyIsNull(_m12)
&& qFuzzyIsNull(_m21) && qFuzzyIsNull(_dx) && qFuzzyIsNull(_dy);
}

inline bool qFuzzyCompare(const QMatrix& m1, const QMatrix& m2)
{
return qFuzzyCompare(m1.m11(), m2.m11())
&& qFuzzyCompare(m1.m12(), m2.m12())
&& qFuzzyCompare(m1.m21(), m2.m21())
&& qFuzzyCompare(m1.m22(), m2.m22())
&& qFuzzyCompare(m1.dx(), m2.dx())
&& qFuzzyCompare(m1.dy(), m2.dy());
}







# 176 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
 QDataStream &operator<<(QDataStream &, const QMatrix &);
 QDataStream &operator>>(QDataStream &, QMatrix &);



# 181 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
 QDebug operator<<(QDebug, const QMatrix &);


# 184 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"



# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"






























































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"



class QFont;
class QPainterPathPrivate;
struct QPainterPathPrivateDeleter;
class QPainterPathData;
class QPainterPathStrokerPrivate;
class QPolygonF;
class QRegion;
class QVectorPath;

class  QPainterPath
{
public:
enum ElementType {
MoveToElement,
LineToElement,
CurveToElement,
CurveToDataElement
};

class Element {
public:
qreal x;
qreal y;
ElementType type;

bool isMoveTo() const { return type == MoveToElement; }
bool isLineTo() const { return type == LineToElement; }
bool isCurveTo() const { return type == CurveToElement; }

operator QPointF () const { return QPointF(x, y); }

bool operator==(const Element &e) const { return qFuzzyCompare(x, e.x)
&& qFuzzyCompare(y, e.y) && type == e.type; }
inline bool operator!=(const Element &e) const { return !operator==(e); }
};

QPainterPath();
explicit QPainterPath(const QPointF &startPoint);
QPainterPath(const QPainterPath &other);
QPainterPath &operator=(const QPainterPath &other);




# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
~QPainterPath();
inline void swap(QPainterPath &other) { d_ptr.swap(other.d_ptr); }

void closeSubpath();

void moveTo(const QPointF &p);
inline void moveTo(qreal x, qreal y);

void lineTo(const QPointF &p);
inline void lineTo(qreal x, qreal y);

void arcMoveTo(const QRectF &rect, qreal angle);
inline void arcMoveTo(qreal x, qreal y, qreal w, qreal h, qreal angle);

void arcTo(const QRectF &rect, qreal startAngle, qreal arcLength);
inline void arcTo(qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLength);

void cubicTo(const QPointF &ctrlPt1, const QPointF &ctrlPt2, const QPointF &endPt);
inline void cubicTo(qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y,
qreal endPtx, qreal endPty);
void quadTo(const QPointF &ctrlPt, const QPointF &endPt);
inline void quadTo(qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty);

QPointF currentPosition() const;

void addRect(const QRectF &rect);
inline void addRect(qreal x, qreal y, qreal w, qreal h);
void addEllipse(const QRectF &rect);
inline void addEllipse(qreal x, qreal y, qreal w, qreal h);
inline void addEllipse(const QPointF &center, qreal rx, qreal ry);
void addPolygon(const QPolygonF &polygon);
void addText(const QPointF &point, const QFont &f, const QString &text);
inline void addText(qreal x, qreal y, const QFont &f, const QString &text);
void addPath(const QPainterPath &path);
void addRegion(const QRegion &region);

void addRoundedRect(const QRectF &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);
inline void addRoundedRect(qreal x, qreal y, qreal w, qreal h,
qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);

void addRoundRect(const QRectF &rect, int xRnd, int yRnd);
inline void addRoundRect(qreal x, qreal y, qreal w, qreal h,
int xRnd, int yRnd);
inline void addRoundRect(const QRectF &rect, int roundness);
inline void addRoundRect(qreal x, qreal y, qreal w, qreal h,
int roundness);

void connectPath(const QPainterPath &path);

bool contains(const QPointF &pt) const;
bool contains(const QRectF &rect) const;
bool intersects(const QRectF &rect) const;

void translate(qreal dx, qreal dy);
inline void translate(const QPointF &offset);

QPainterPath translated(qreal dx, qreal dy) const;
inline QPainterPath translated(const QPointF &offset) const;

QRectF boundingRect() const;
QRectF controlPointRect() const;

Qt::FillRule fillRule() const;
void setFillRule(Qt::FillRule fillRule);

bool isEmpty() const;

QPainterPath toReversed() const;
QList<QPolygonF> toSubpathPolygons(const QMatrix &matrix = QMatrix()) const;
QList<QPolygonF> toFillPolygons(const QMatrix &matrix = QMatrix()) const;
QPolygonF toFillPolygon(const QMatrix &matrix = QMatrix()) const;
QList<QPolygonF> toSubpathPolygons(const QTransform &matrix) const;
QList<QPolygonF> toFillPolygons(const QTransform &matrix) const;
QPolygonF toFillPolygon(const QTransform &matrix) const;

int elementCount() const;
QPainterPath::Element elementAt(int i) const;
void setElementPositionAt(int i, qreal x, qreal y);

qreal length() const;
qreal percentAtLength(qreal t) const;
QPointF pointAtPercent(qreal t) const;
qreal angleAtPercent(qreal t) const;
qreal slopeAtPercent(qreal t) const;

bool intersects(const QPainterPath &p) const;
bool contains(const QPainterPath &p) const;
QPainterPath united(const QPainterPath &r) const;
QPainterPath intersected(const QPainterPath &r) const;
QPainterPath subtracted(const QPainterPath &r) const;
QPainterPath subtractedInverted(const QPainterPath &r) const;

QPainterPath simplified() const;

bool operator==(const QPainterPath &other) const;
bool operator!=(const QPainterPath &other) const;

QPainterPath operator&(const QPainterPath &other) const;
QPainterPath operator|(const QPainterPath &other) const;
QPainterPath operator+(const QPainterPath &other) const;
QPainterPath operator-(const QPainterPath &other) const;
QPainterPath &operator&=(const QPainterPath &other);
QPainterPath &operator|=(const QPainterPath &other);
QPainterPath &operator+=(const QPainterPath &other);
QPainterPath &operator-=(const QPainterPath &other);

private:
QScopedPointer<QPainterPathPrivate, QPainterPathPrivateDeleter> d_ptr;

inline void ensureData() { if (!d_ptr) ensureData_helper(); }
void ensureData_helper();
void detach();
void detach_helper();
void setDirty(bool);
void computeBoundingRect() const;
void computeControlPointRect() const;

QPainterPathData *d_func() const { return reinterpret_cast<QPainterPathData *>(d_ptr.data()); }

friend class QPainterPathData;
friend class QPainterPathStroker;
friend class QPainterPathStrokerPrivate;
friend class QMatrix;
friend class QTransform;
friend class QVectorPath;
friend  const QVectorPath &qtVectorPathForPath(const QPainterPath &);


# 229 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
friend  QDataStream &operator<<(QDataStream &, const QPainterPath &);
friend  QDataStream &operator>>(QDataStream &, QPainterPath &);

# 232 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
};

template<> class QTypeInfo<QPainterPath::Element > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPainterPath::Element)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPainterPath::Element) }; static inline const char *name() { return "QPainterPath::Element"; } };


# 237 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
 QDataStream &operator<<(QDataStream &, const QPainterPath &);
 QDataStream &operator>>(QDataStream &, QPainterPath &);


# 241 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
class  QPainterPathStroker
{
inline QPainterPathStrokerPrivate* d_func() { return reinterpret_cast<QPainterPathStrokerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPainterPathStrokerPrivate* d_func() const { return reinterpret_cast<const QPainterPathStrokerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPainterPathStrokerPrivate;
public:
QPainterPathStroker();
~QPainterPathStroker();

void setWidth(qreal width);
qreal width() const;

void setCapStyle(Qt::PenCapStyle style);
Qt::PenCapStyle capStyle() const;

void setJoinStyle(Qt::PenJoinStyle style);
Qt::PenJoinStyle joinStyle() const;

void setMiterLimit(qreal length);
qreal miterLimit() const;

void setCurveThreshold(qreal threshold);
qreal curveThreshold() const;

void setDashPattern(Qt::PenStyle);
void setDashPattern(const QVector<qreal> &dashPattern);
QVector<qreal> dashPattern() const;

void setDashOffset(qreal offset);
qreal dashOffset() const;

QPainterPath createStroke(const QPainterPath &path) const;

private:
QPainterPathStroker(const QPainterPathStroker &) ; QPainterPathStroker &operator=(const QPainterPathStroker &) ;

friend class QX11PaintEngine;

QScopedPointer<QPainterPathStrokerPrivate> d_ptr;
};

inline void QPainterPath::moveTo(qreal x, qreal y)
{
moveTo(QPointF(x, y));
}

inline void QPainterPath::lineTo(qreal x, qreal y)
{
lineTo(QPointF(x, y));
}

inline void QPainterPath::arcTo(qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLength)
{
arcTo(QRectF(x, y, w, h), startAngle, arcLength);
}

inline void QPainterPath::arcMoveTo(qreal x, qreal y, qreal w, qreal h, qreal angle)
{
arcMoveTo(QRectF(x, y, w, h), angle);
}

inline void QPainterPath::cubicTo(qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y,
qreal endPtx, qreal endPty)
{
cubicTo(QPointF(ctrlPt1x, ctrlPt1y), QPointF(ctrlPt2x, ctrlPt2y),
QPointF(endPtx, endPty));
}

inline void QPainterPath::quadTo(qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty)
{
quadTo(QPointF(ctrlPtx, ctrlPty), QPointF(endPtx, endPty));
}

inline void QPainterPath::addEllipse(qreal x, qreal y, qreal w, qreal h)
{
addEllipse(QRectF(x, y, w, h));
}

inline void QPainterPath::addEllipse(const QPointF &center, qreal rx, qreal ry)
{
addEllipse(QRectF(center.x() - rx, center.y() - ry, 2 * rx, 2 * ry));
}

inline void QPainterPath::addRect(qreal x, qreal y, qreal w, qreal h)
{
addRect(QRectF(x, y, w, h));
}

inline void QPainterPath::addRoundedRect(qreal x, qreal y, qreal w, qreal h,
qreal xRadius, qreal yRadius,
Qt::SizeMode mode)
{
addRoundedRect(QRectF(x, y, w, h), xRadius, yRadius, mode);
}

inline void QPainterPath::addRoundRect(qreal x, qreal y, qreal w, qreal h,
int xRnd, int yRnd)
{
addRoundRect(QRectF(x, y, w, h), xRnd, yRnd);
}

inline void QPainterPath::addRoundRect(const QRectF &rect,
int roundness)
{
int xRnd = roundness;
int yRnd = roundness;
if (rect.width() > rect.height())
xRnd = int(roundness * rect.height()/rect.width());
else
yRnd = int(roundness * rect.width()/rect.height());
addRoundRect(rect, xRnd, yRnd);
}

inline void QPainterPath::addRoundRect(qreal x, qreal y, qreal w, qreal h,
int roundness)
{
addRoundRect(QRectF(x, y, w, h), roundness);
}

inline void QPainterPath::addText(qreal x, qreal y, const QFont &f, const QString &text)
{
addText(QPointF(x, y), f, text);
}

inline void QPainterPath::translate(const QPointF &offset)
{ translate(offset.x(), offset.y()); }

inline QPainterPath QPainterPath::translated(const QPointF &offset) const
{ return translated(offset.x(), offset.y()); }



# 371 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
 QDebug operator<<(QDebug, const QPainterPath &);


# 374 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"












































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qline.h"






























































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"



class QVariant;

class  QTransform
{
public:
enum TransformationType {
TxNone = 0x00,
TxTranslate = 0x01,
TxScale = 0x02,
TxRotate = 0x04,
TxShear = 0x08,
TxProject = 0x10
};

inline explicit QTransform(Qt::Initialization) : affine(Qt::Uninitialized) {}
QTransform();
QTransform(qreal h11, qreal h12, qreal h13,
qreal h21, qreal h22, qreal h23,
qreal h31, qreal h32, qreal h33 = 1.0);
QTransform(qreal h11, qreal h12, qreal h21,
qreal h22, qreal dx, qreal dy);
explicit QTransform(const QMatrix &mtx);

bool isAffine() const;
bool isIdentity() const;
bool isInvertible() const;
bool isScaling() const;
bool isRotating() const;
bool isTranslating() const;

TransformationType type() const;

inline qreal determinant() const;
qreal det() const;

qreal m11() const;
qreal m12() const;
qreal m13() const;
qreal m21() const;
qreal m22() const;
qreal m23() const;
qreal m31() const;
qreal m32() const;
qreal m33() const;
qreal dx() const;
qreal dy() const;

void setMatrix(qreal m11, qreal m12, qreal m13,
qreal m21, qreal m22, qreal m23,
qreal m31, qreal m32, qreal m33);

QTransform inverted(bool *invertible = 0) const;
QTransform adjoint() const;
QTransform transposed() const;

QTransform &translate(qreal dx, qreal dy);
QTransform &scale(qreal sx, qreal sy);
QTransform &shear(qreal sh, qreal sv);
QTransform &rotate(qreal a, Qt::Axis axis = Qt::ZAxis);
QTransform &rotateRadians(qreal a, Qt::Axis axis = Qt::ZAxis);

static bool squareToQuad(const QPolygonF &square, QTransform &result);
static bool quadToSquare(const QPolygonF &quad, QTransform &result);
static bool quadToQuad(const QPolygonF &one,
const QPolygonF &two,
QTransform &result);

bool operator==(const QTransform &) const;
bool operator!=(const QTransform &) const;

QTransform &operator*=(const QTransform &);
QTransform operator*(const QTransform &o) const;

QTransform &operator=(const QTransform &);

operator QVariant() const;

void reset();
QPoint map(const QPoint &p) const;
QPointF map(const QPointF &p) const;
QLine map(const QLine &l) const;
QLineF map(const QLineF &l) const;
QPolygonF map(const QPolygonF &a) const;
QPolygon map(const QPolygon &a) const;
QRegion map(const QRegion &r) const;
QPainterPath map(const QPainterPath &p) const;
QPolygon mapToPolygon(const QRect &r) const;
QRect mapRect(const QRect &) const;
QRectF mapRect(const QRectF &) const;
void map(int x, int y, int *tx, int *ty) const;
void map(qreal x, qreal y, qreal *tx, qreal *ty) const;

const QMatrix &toAffine() const;

QTransform &operator*=(qreal div);
QTransform &operator/=(qreal div);
QTransform &operator+=(qreal div);
QTransform &operator-=(qreal div);

static QTransform fromTranslate(qreal dx, qreal dy);
static QTransform fromScale(qreal dx, qreal dy);

private:
inline QTransform(qreal h11, qreal h12, qreal h13,
qreal h21, qreal h22, qreal h23,
qreal h31, qreal h32, qreal h33, bool)
: affine(h11, h12, h21, h22, h31, h32, true)
, m_13(h13), m_23(h23), m_33(h33)
, m_type(TxNone)
, m_dirty(TxProject) {}
inline QTransform(bool)
: affine(true)
, m_13(0), m_23(0), m_33(1)
, m_type(TxNone)
, m_dirty(TxNone) {}
inline TransformationType inline_type() const;
QMatrix affine;
qreal m_13;
qreal m_23;
qreal m_33;

mutable uint m_type : 5;
mutable uint m_dirty : 5;

class Private;
Private *d;
};
template<> class QTypeInfo<QTransform > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTransform)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTransform) }; static inline const char *name() { return "QTransform"; } };


inline QTransform::TransformationType QTransform::inline_type() const
{
if (m_dirty == TxNone)
return static_cast<TransformationType>(m_type);
return type();
}

inline bool QTransform::isAffine() const
{
return inline_type() < TxProject;
}
inline bool QTransform::isIdentity() const
{
return inline_type() == TxNone;
}

inline bool QTransform::isInvertible() const
{
return !qFuzzyIsNull(determinant());
}

inline bool QTransform::isScaling() const
{
return type() >= TxScale;
}
inline bool QTransform::isRotating() const
{
return inline_type() >= TxRotate;
}

inline bool QTransform::isTranslating() const
{
return inline_type() >= TxTranslate;
}

inline qreal QTransform::determinant() const
{
return affine._m11*(m_33*affine._m22-affine._dy*m_23) -
affine._m21*(m_33*affine._m12-affine._dy*m_13)+affine._dx*(m_23*affine._m12-affine._m22*m_13);
}
inline qreal QTransform::det() const
{
return determinant();
}
inline qreal QTransform::m11() const
{
return affine._m11;
}
inline qreal QTransform::m12() const
{
return affine._m12;
}
inline qreal QTransform::m13() const
{
return m_13;
}
inline qreal QTransform::m21() const
{
return affine._m21;
}
inline qreal QTransform::m22() const
{
return affine._m22;
}
inline qreal QTransform::m23() const
{
return m_23;
}
inline qreal QTransform::m31() const
{
return affine._dx;
}
inline qreal QTransform::m32() const
{
return affine._dy;
}
inline qreal QTransform::m33() const
{
return m_33;
}
inline qreal QTransform::dx() const
{
return affine._dx;
}
inline qreal QTransform::dy() const
{
return affine._dy;
}

inline QTransform &QTransform::operator*=(qreal num)
{
if (num == 1.)
return *this;
affine._m11 *= num;
affine._m12 *= num;
m_13 *= num;
affine._m21 *= num;
affine._m22 *= num;
m_23 *= num;
affine._dx *= num;
affine._dy *= num;
m_33 *= num;
if (m_dirty < TxScale)
m_dirty = TxScale;
return *this;
}
inline QTransform &QTransform::operator/=(qreal div)
{
if (div == 0)
return *this;
div = 1/div;
return operator*=(div);
}
inline QTransform &QTransform::operator+=(qreal num)
{
if (num == 0)
return *this;
affine._m11 += num;
affine._m12 += num;
m_13 += num;
affine._m21 += num;
affine._m22 += num;
m_23 += num;
affine._dx += num;
affine._dy += num;
m_33 += num;
m_dirty = TxProject;
return *this;
}
inline QTransform &QTransform::operator-=(qreal num)
{
if (num == 0)
return *this;
affine._m11 -= num;
affine._m12 -= num;
m_13 -= num;
affine._m21 -= num;
affine._m22 -= num;
m_23 -= num;
affine._dx -= num;
affine._dy -= num;
m_33 -= num;
m_dirty = TxProject;
return *this;
}

inline bool qFuzzyCompare(const QTransform& t1, const QTransform& t2)
{
return qFuzzyCompare(t1.m11(), t2.m11())
&& qFuzzyCompare(t1.m12(), t2.m12())
&& qFuzzyCompare(t1.m13(), t2.m13())
&& qFuzzyCompare(t1.m21(), t2.m21())
&& qFuzzyCompare(t1.m22(), t2.m22())
&& qFuzzyCompare(t1.m23(), t2.m23())
&& qFuzzyCompare(t1.m31(), t2.m31())
&& qFuzzyCompare(t1.m32(), t2.m32())
&& qFuzzyCompare(t1.m33(), t2.m33());
}




# 348 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"
 QDataStream &operator<<(QDataStream &, const QTransform &);
 QDataStream &operator>>(QDataStream &, QTransform &);



# 353 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"
 QDebug operator<<(QDebug, const QTransform &);

# 355 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"



inline QPoint operator*(const QPoint &p, const QTransform &m)
{ return m.map(p); }
inline QPointF operator*(const QPointF &p, const QTransform &m)
{ return m.map(p); }
inline QLineF operator*(const QLineF &l, const QTransform &m)
{ return m.map(l); }
inline QLine operator*(const QLine &l, const QTransform &m)
{ return m.map(l); }
inline QPolygon operator *(const QPolygon &a, const QTransform &m)
{ return m.map(a); }
inline QPolygonF operator *(const QPolygonF &a, const QTransform &m)
{ return m.map(a); }
inline QRegion operator *(const QRegion &r, const QTransform &m)
{ return m.map(r); }
inline QPainterPath operator *(const QPainterPath &p, const QTransform &m)
{ return m.map(p); }

inline QTransform operator *(const QTransform &a, qreal n)
{ QTransform t(a); t *= n; return t; }
inline QTransform operator /(const QTransform &a, qreal n)
{ QTransform t(a); t /= n; return t; }
inline QTransform operator +(const QTransform &a, qreal n)
{ QTransform t(a); t += n; return t; }
inline QTransform operator -(const QTransform &a, qreal n)
{ QTransform t(a); t -= n; return t; }




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrgb.h"




















































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"






# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"



class QIODevice;
class QStringList;
class QMatrix;
class QTransform;
class QVariant;
template <class T> class QList;
template <class T> class QVector;

struct QImageData;
class QImageDataMisc; 





















# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
typedef void (*QImageCleanupFunction)(void*);

class  QImage : public QPaintDevice
{
public:
enum InvertMode { InvertRgb, InvertRgba };
enum Format {
Format_Invalid,
Format_Mono,
Format_MonoLSB,
Format_Indexed8,
Format_RGB32,
Format_ARGB32,
Format_ARGB32_Premultiplied,
Format_RGB16,
Format_ARGB8565_Premultiplied,
Format_RGB666,
Format_ARGB6666_Premultiplied,
Format_RGB555,
Format_ARGB8555_Premultiplied,
Format_RGB888,
Format_RGB444,
Format_ARGB4444_Premultiplied,











# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
NImageFormats

# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
};

QImage();
QImage(const QSize &size, Format format);
QImage(int width, int height, Format format);
QImage(uchar *data, int width, int height, Format format, QImageCleanupFunction cleanupFunction = 0, void *cleanupInfo = 0);
QImage(const uchar *data, int width, int height, Format format, QImageCleanupFunction cleanupFunction = 0, void *cleanupInfo = 0);
QImage(uchar *data, int width, int height, int bytesPerLine, Format format, QImageCleanupFunction cleanupFunction = 0, void *cleanupInfo = 0);
QImage(const uchar *data, int width, int height, int bytesPerLine, Format format, QImageCleanupFunction cleanupFunction = 0, void *cleanupInfo = 0);


# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
explicit QImage(const char * const xpm[]);

# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
explicit QImage(const QString &fileName, const char *format = 0);

QImage(const QImage &);
~QImage();

QImage &operator=(const QImage &);




# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
inline void swap(QImage &other) { qSwap(d, other.d); }

bool isNull() const;

int devType() const;

bool operator==(const QImage &) const;
bool operator!=(const QImage &) const;
operator QVariant() const;
void detach();
bool isDetached() const;

QImage copy(const QRect &rect = QRect()) const;
inline QImage copy(int x, int y, int w, int h) const
{ return copy(QRect(x, y, w, h)); }

Format format() const;

QImage convertToFormat(Format f, Qt::ImageConversionFlags flags = Qt::AutoColor) const ;
QImage convertToFormat(Format f, const QVector<QRgb> &colorTable, Qt::ImageConversionFlags flags = Qt::AutoColor) const ;

int width() const;
int height() const;
QSize size() const;
QRect rect() const;

int depth() const;
int colorCount() const;
int bitPlaneCount() const;

QRgb color(int i) const;
void setColor(int i, QRgb c);
void setColorCount(int);

bool allGray() const;
bool isGrayscale() const;

uchar *bits();
const uchar *bits() const;
const uchar *constBits() const;

int byteCount() const;

uchar *scanLine(int);
const uchar *scanLine(int) const;
const uchar *constScanLine(int) const;
int bytesPerLine() const;

bool valid(int x, int y) const;
bool valid(const QPoint &pt) const;

int pixelIndex(int x, int y) const;
int pixelIndex(const QPoint &pt) const;

QRgb pixel(int x, int y) const;
QRgb pixel(const QPoint &pt) const;

void setPixel(int x, int y, uint index_or_rgb);
void setPixel(const QPoint &pt, uint index_or_rgb);

QVector<QRgb> colorTable() const;
void setColorTable(const QVector<QRgb> colors);

qreal devicePixelRatio() const;
void setDevicePixelRatio(qreal scaleFactor);

void fill(uint pixel);
void fill(const QColor &color);
void fill(Qt::GlobalColor color);


bool hasAlphaChannel() const;
void setAlphaChannel(const QImage &alphaChannel);
QImage alphaChannel() const;
QImage createAlphaMask(Qt::ImageConversionFlags flags = Qt::AutoColor) const;

# 225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
QImage createHeuristicMask(bool clipTight = true) const;

# 227 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
QImage createMaskFromColor(QRgb color, Qt::MaskMode mode = Qt::MaskInColor) const;

inline QImage scaled(int w, int h, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const
{ return scaled(QSize(w, h), aspectMode, mode); }
QImage scaled(const QSize &s, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const;
QImage scaledToWidth(int w, Qt::TransformationMode mode = Qt::FastTransformation) const;
QImage scaledToHeight(int h, Qt::TransformationMode mode = Qt::FastTransformation) const;
QImage transformed(const QMatrix &matrix, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QMatrix trueMatrix(const QMatrix &, int w, int h);
QImage transformed(const QTransform &matrix, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QTransform trueMatrix(const QTransform &, int w, int h);
QImage mirrored(bool horizontally = false, bool vertically = true) const;
QImage rgbSwapped() const;
void invertPixels(InvertMode = InvertRgb);


bool load(QIODevice *device, const char* format);
bool load(const QString &fileName, const char* format=0);
bool loadFromData(const uchar *buf, int len, const char *format = 0);
inline bool loadFromData(const QByteArray &data, const char* aformat=0)
{ return loadFromData(reinterpret_cast<const uchar *>(data.constData()), data.size(), aformat); }

bool save(const QString &fileName, const char* format=0, int quality=-1) const;
bool save(QIODevice *device, const char* format=0, int quality=-1) const;

static QImage fromData(const uchar *data, int size, const char *format = 0);
inline static QImage fromData(const QByteArray &data, const char *format = 0)
{ return fromData(reinterpret_cast<const uchar *>(data.constData()), data.size(), format); }




# 261 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
qint64 cacheKey() const;

QPaintEngine *paintEngine() const;


int dotsPerMeterX() const;
int dotsPerMeterY() const;
void setDotsPerMeterX(int);
void setDotsPerMeterY(int);
QPoint offset() const;
void setOffset(const QPoint&);

QStringList textKeys() const;
QString text(const QString &key = QString()) const;
void setText(const QString &key, const QString &value);















# 291 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
protected:
virtual int metric(PaintDeviceMetric metric) const;

private:
friend class QWSOnScreenSurface;
QImageData *d;

friend class QRasterPlatformPixmap;
friend class QBlittablePlatformPixmap;
friend class QPixmapCacheEntry;

public:
typedef QImageData * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template<> class QTypeInfo<QImage > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QImage)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QImage) }; static inline const char *name() { return "QImage"; } }; template <> inline void qSwap<QImage>(QImage &value1, QImage &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QImage>(::QImage &value1, ::QImage &value2) { value1.swap(value2); } } 



inline bool QImage::valid(const QPoint &pt) const { return valid(pt.x(), pt.y()); }
inline int QImage::pixelIndex(const QPoint &pt) const { return pixelIndex(pt.x(), pt.y());}
inline QRgb QImage::pixel(const QPoint &pt) const { return pixel(pt.x(), pt.y()); }
inline void QImage::setPixel(const QPoint &pt, uint index_or_rgb) { setPixel(pt.x(), pt.y(), index_or_rgb); }






































































































# 417 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"



# 420 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
 QDataStream &operator<<(QDataStream &, const QImage &);
 QDataStream &operator>>(QDataStream &, QImage &);



# 425 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"
 QDebug operator<<(QDebug, const QImage &);



# 429 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"



class QImageWriter;
class QImageReader;
class QColor;
class QVariant;
class QPlatformPixmap;

class  QPixmap : public QPaintDevice
{
public:
QPixmap();
explicit QPixmap(QPlatformPixmap *data);
QPixmap(int w, int h);
explicit QPixmap(const QSize &);
QPixmap(const QString& fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);

# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
explicit QPixmap(const char * const xpm[]);

# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
QPixmap(const QPixmap &);
~QPixmap();

QPixmap &operator=(const QPixmap &);




# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
inline void swap(QPixmap &other) { qSwap(data, other.data); }

operator QVariant() const;

bool isNull() const;
int devType() const;

int width() const;
int height() const;
QSize size() const;
QRect rect() const;
int depth() const;

static int defaultDepth();

void fill(const QColor &fillColor = Qt::white);
void fill(const QPaintDevice *device, const QPoint &ofs);
inline void fill(const QPaintDevice *device, int xofs, int yofs) { fill(device, QPoint(xofs, yofs)); }

QBitmap mask() const;
void setMask(const QBitmap &);

qreal devicePixelRatio() const;
void setDevicePixelRatio(qreal scaleFactor);

bool hasAlpha() const;
bool hasAlphaChannel() const;


# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
QBitmap createHeuristicMask(bool clipTight = true) const;

# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
QBitmap createMaskFromColor(const QColor &maskColor, Qt::MaskMode mode = Qt::MaskInColor) const;

static QPixmap grabWindow(WId, int x=0, int y=0, int w=-1, int h=-1);
static QPixmap grabWidget(QObject *widget, const QRect &rect);
static inline QPixmap grabWidget(QObject *widget, int x=0, int y=0, int w=-1, int h=-1)
{ return grabWidget(widget, QRect(x, y, w, h)); }

inline QPixmap scaled(int w, int h, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const
{ return scaled(QSize(w, h), aspectMode, mode); }
QPixmap scaled(const QSize &s, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio,
Qt::TransformationMode mode = Qt::FastTransformation) const;
QPixmap scaledToWidth(int w, Qt::TransformationMode mode = Qt::FastTransformation) const;
QPixmap scaledToHeight(int h, Qt::TransformationMode mode = Qt::FastTransformation) const;
QPixmap transformed(const QMatrix &, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QMatrix trueMatrix(const QMatrix &m, int w, int h);
QPixmap transformed(const QTransform &, Qt::TransformationMode mode = Qt::FastTransformation) const;
static QTransform trueMatrix(const QTransform &m, int w, int h);

QImage toImage() const;
static QPixmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
static QPixmap fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags = Qt::AutoColor);

bool load(const QString& fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
bool loadFromData(const uchar *buf, uint len, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
inline bool loadFromData(const QByteArray &data, const char* format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
bool save(const QString& fileName, const char* format = 0, int quality = -1) const;
bool save(QIODevice* device, const char* format = 0, int quality = -1) const;

bool convertFromImage(const QImage &img, Qt::ImageConversionFlags flags = Qt::AutoColor);

inline QPixmap copy(int x, int y, int width, int height) const;
QPixmap copy(const QRect &rect = QRect()) const;

inline void scroll(int dx, int dy, int x, int y, int width, int height, QRegion *exposed = 0);
void scroll(int dx, int dy, const QRect &rect, QRegion *exposed = 0);




# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
qint64 cacheKey() const;

bool isDetached() const;
void detach();

bool isQBitmap() const;

QPaintEngine *paintEngine() const;

inline bool operator!() const { return isNull(); }






# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
protected:
int metric(PaintDeviceMetric) const;

private:
QExplicitlySharedDataPointer<QPlatformPixmap> data;

bool doImageIO(QImageWriter *io, int quality) const;

QPixmap(const QSize &s, int type);
void doInit(int, int, int);

friend class QPlatformPixmap;
friend class QBitmap;
friend class QPaintDevice;
friend class QPainter;
friend class QOpenGLWidget;
friend class QWidgetPrivate;
friend class QRasterBuffer;

# 187 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
friend  QDataStream &operator>>(QDataStream &, QPixmap &);


# 190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
public:
QPlatformPixmap* handle() const;

public:
typedef QExplicitlySharedDataPointer<QPlatformPixmap> DataPtr;
inline DataPtr &data_ptr() { return data; }
};

template<> class QTypeInfo<QPixmap > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPixmap)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPixmap) }; static inline const char *name() { return "QPixmap"; } }; template <> inline void qSwap<QPixmap>(QPixmap &value1, QPixmap &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QPixmap>(::QPixmap &value1, ::QPixmap &value2) { value1.swap(value2); } } 

inline QPixmap QPixmap::copy(int ax, int ay, int awidth, int aheight) const
{
return copy(QRect(ax, ay, awidth, aheight));
}

inline void QPixmap::scroll(int dx, int dy, int ax, int ay, int awidth, int aheight, QRegion *exposed)
{
scroll(dx, dy, QRect(ax, ay, awidth, aheight), exposed);
}

inline bool QPixmap::loadFromData(const QByteArray &buf, const char *format,
Qt::ImageConversionFlags flags)
{
return loadFromData(reinterpret_cast<const uchar *>(buf.constData()), buf.size(), format, flags);
}
















# 231 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"





# 236 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
 QDataStream &operator<<(QDataStream &, const QPixmap &);
 QDataStream &operator>>(QDataStream &, QPixmap &);



# 241 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"
 QDebug operator<<(QDebug, const QPixmap &);


# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbitmap.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbitmap.h"



class QVariant;

class  QBitmap : public QPixmap
{
public:
QBitmap();
QBitmap(const QPixmap &);
QBitmap(int w, int h);
explicit QBitmap(const QSize &);
explicit QBitmap(const QString &fileName, const char *format=0);
~QBitmap();

QBitmap &operator=(const QPixmap &);
inline void swap(QBitmap &other) { QPixmap::swap(other); } 
operator QVariant() const;

inline void clear() { fill(Qt::color0); }

static QBitmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
static QBitmap fromData(const QSize &size, const uchar *bits,
QImage::Format monoFormat = QImage::Format_MonoLSB);

QBitmap transformed(const QMatrix &) const;
QBitmap transformed(const QTransform &matrix) const;

typedef QExplicitlySharedDataPointer<QPlatformPixmap> DataPtr;
};
template<> class QTypeInfo<QBitmap > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBitmap)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QBitmap) }; static inline const char *name() { return "QBitmap"; } }; template <> inline void qSwap<QBitmap>(QBitmap &value1, QBitmap &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QBitmap>(::QBitmap &value1, ::QBitmap &value2) { value1.swap(value2); } } 




# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"



class QIconPrivate;
class QIconEngine;

class  QIcon
{
public:
enum Mode { Normal, Disabled, Active, Selected };
enum State { On, Off };

QIcon();
QIcon(const QPixmap &pixmap);
QIcon(const QIcon &other);
explicit QIcon(const QString &fileName); 
explicit QIcon(QIconEngine *engine);
~QIcon();
QIcon &operator=(const QIcon &other);




# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"
inline void swap(QIcon &other) { qSwap(d, other.d); }

operator QVariant() const;

QPixmap pixmap(const QSize &size, Mode mode = Normal, State state = Off) const;
inline QPixmap pixmap(int w, int h, Mode mode = Normal, State state = Off) const
{ return pixmap(QSize(w, h), mode, state); }
inline QPixmap pixmap(int extent, Mode mode = Normal, State state = Off) const
{ return pixmap(QSize(extent, extent), mode, state); }
QPixmap pixmap(QWindow *window, const QSize &size, Mode mode = Normal, State state = Off) const;

QSize actualSize(const QSize &size, Mode mode = Normal, State state = Off) const;
QSize actualSize(QWindow *window, const QSize &size, Mode mode = Normal, State state = Off) const;

QString name() const;

void paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const;
inline void paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const
{ paint(painter, QRect(x, y, w, h), alignment, mode, state); }

bool isNull() const;
bool isDetached() const;
void detach();




# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"
qint64 cacheKey() const;

void addPixmap(const QPixmap &pixmap, Mode mode = Normal, State state = Off);
void addFile(const QString &fileName, const QSize &size = QSize(), Mode mode = Normal, State state = Off);

QList<QSize> availableSizes(Mode mode = Normal, State state = Off) const;

static QIcon fromTheme(const QString &name, const QIcon &fallback = QIcon());
static bool hasThemeIcon(const QString &name);

static QStringList themeSearchPaths();
static void setThemeSearchPaths(const QStringList &searchpath);

static QString themeName();
static void setThemeName(const QString &path);



private:
QIconPrivate *d;

# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"
friend  QDataStream &operator<<(QDataStream &, const QIcon &);
friend  QDataStream &operator>>(QDataStream &, QIcon &);


# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"
public:
typedef QIconPrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template<> class QTypeInfo<QIcon > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QIcon)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QIcon) }; static inline const char *name() { return "QIcon"; } }; template <> inline void qSwap<QIcon>(QIcon &value1, QIcon &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QIcon>(::QIcon &value1, ::QIcon &value2) { value1.swap(value2); } } 


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"
 QDataStream &operator<<(QDataStream &, const QIcon &);
 QDataStream &operator>>(QDataStream &, QIcon &);



# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"
 QDebug operator<<(QDebug dbg, const QIcon &);


# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"



# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengine.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengine.h"



class  QIconEngine
{
public:
virtual ~QIconEngine();
virtual void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
virtual QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
virtual QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);

virtual void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
virtual void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);

virtual QString key() const;
virtual QIconEngine *clone() const = 0;
virtual bool read(QDataStream &in);
virtual bool write(QDataStream &out) const;

enum IconEngineHook { AvailableSizesHook = 1, IconNameHook };

struct AvailableSizesArgument
{
QIcon::Mode mode;
QIcon::State state;
QList<QSize> sizes;
};

virtual QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal,
QIcon::State state = QIcon::Off) const;

virtual QString iconName() const;

virtual void virtual_hook(int id, void *data);
};





# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengine.h"



# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengineplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengineplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengineplugin.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengineplugin.h"



class QIconEngine;



# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qiconengineplugin.h"
class  QIconEnginePlugin : public QObject
{
Q_OBJECT
public:
QIconEnginePlugin(QObject *parent = 0);
~QIconEnginePlugin();

virtual QIconEngine *create(const QString &filename = QString()) = 0;
};




# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"















































































































































































































































































































































































































































# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"



class QImage;
class QRect;
class QSize;
class QVariant;

class QImageIOHandlerPrivate;
class  QImageIOHandler
{
inline QImageIOHandlerPrivate* d_func() { return reinterpret_cast<QImageIOHandlerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QImageIOHandlerPrivate* d_func() const { return reinterpret_cast<const QImageIOHandlerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QImageIOHandlerPrivate;
public:
QImageIOHandler();
virtual ~QImageIOHandler();

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFormat(const QByteArray &format);
void setFormat(const QByteArray &format) const;
QByteArray format() const;

virtual QByteArray name() const;

virtual bool canRead() const = 0;
virtual bool read(QImage *image) = 0;
virtual bool write(const QImage &image);

enum ImageOption {
Size,
ClipRect,
Description,
ScaledClipRect,
ScaledSize,
CompressionRatio,
Gamma,
Quality,
Name,
SubType,
IncrementalReading,
Endianness,
Animation,
BackgroundColor,
ImageFormat
};
virtual QVariant option(ImageOption option) const;
virtual void setOption(ImageOption option, const QVariant &value);
virtual bool supportsOption(ImageOption option) const;


virtual bool jumpToNextImage();
virtual bool jumpToImage(int imageNumber);
virtual int loopCount() const;
virtual int imageCount() const;
virtual int nextImageDelay() const;
virtual int currentImageNumber() const;
virtual QRect currentImageRect() const;

protected:
QImageIOHandler(QImageIOHandlerPrivate &dd);
QScopedPointer<QImageIOHandlerPrivate> d_ptr;
private:
QImageIOHandler(const QImageIOHandler &) ; QImageIOHandler &operator=(const QImageIOHandler &) ;
};





# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"
class  QImageIOPlugin : public QObject
{
Q_OBJECT
public:
explicit QImageIOPlugin(QObject *parent = 0);
virtual ~QImageIOPlugin();

enum Capability {
CanRead = 0x1,
CanWrite = 0x2,
CanReadIncremental = 0x4
};
typedef QFlags<Capability> Capabilities;

virtual Capabilities capabilities(QIODevice *device, const QByteArray &format) const = 0;
virtual QImageIOHandler *create(QIODevice *device, const QByteArray &format = QByteArray()) const = 0;
};

 inline QFlags<QImageIOPlugin::Capabilities::enum_type> operator|(QImageIOPlugin::Capabilities::enum_type f1, QImageIOPlugin::Capabilities::enum_type f2) { return QFlags<QImageIOPlugin::Capabilities::enum_type>(f1) | f2; }  inline QFlags<QImageIOPlugin::Capabilities::enum_type> operator|(QImageIOPlugin::Capabilities::enum_type f1, QFlags<QImageIOPlugin::Capabilities::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QImageIOPlugin::Capabilities::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"



# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagereader.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagereader.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"















































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagereader.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagereader.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagereader.h"



class QColor;
class QIODevice;
class QRect;
class QSize;
class QStringList;

class QImageReaderPrivate;
class  QImageReader
{
public:
enum ImageReaderError {
UnknownError,
FileNotFoundError,
DeviceError,
UnsupportedFormatError,
InvalidDataError
};

QImageReader();
explicit QImageReader(QIODevice *device, const QByteArray &format = QByteArray());
explicit QImageReader(const QString &fileName, const QByteArray &format = QByteArray());
~QImageReader();

void setFormat(const QByteArray &format);
QByteArray format() const;

void setAutoDetectImageFormat(bool enabled);
bool autoDetectImageFormat() const;

void setDecideFormatFromContent(bool ignored);
bool decideFormatFromContent() const;

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFileName(const QString &fileName);
QString fileName() const;

QSize size() const;

QImage::Format imageFormat() const;

QStringList textKeys() const;
QString text(const QString &key) const;

void setClipRect(const QRect &rect);
QRect clipRect() const;

void setScaledSize(const QSize &size);
QSize scaledSize() const;

void setQuality(int quality);
int quality() const;

void setScaledClipRect(const QRect &rect);
QRect scaledClipRect() const;

void setBackgroundColor(const QColor &color);
QColor backgroundColor() const;

bool supportsAnimation() const;

bool canRead() const;
QImage read();
bool read(QImage *image);

bool jumpToNextImage();
bool jumpToImage(int imageNumber);
int loopCount() const;
int imageCount() const;
int nextImageDelay() const;
int currentImageNumber() const;
QRect currentImageRect() const;

ImageReaderError error() const;
QString errorString() const;

bool supportsOption(QImageIOHandler::ImageOption option) const;

static QByteArray imageFormat(const QString &fileName);
static QByteArray imageFormat(QIODevice *device);
static QList<QByteArray> supportedImageFormats();
static QList<QByteArray> supportedMimeTypes();

private:
QImageReader(const QImageReader &) ; QImageReader &operator=(const QImageReader &) ;
QImageReaderPrivate *d;
};




# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagewriter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagewriter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagewriter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimageiohandler.h"















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagewriter.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagewriter.h"



class QIODevice;
class QImage;

class QImageWriterPrivate;
class  QImageWriter
{
public:
enum ImageWriterError {
UnknownError,
DeviceError,
UnsupportedFormatError
};

QImageWriter();
explicit QImageWriter(QIODevice *device, const QByteArray &format);
explicit QImageWriter(const QString &fileName, const QByteArray &format = QByteArray());
~QImageWriter();

void setFormat(const QByteArray &format);
QByteArray format() const;

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFileName(const QString &fileName);
QString fileName() const;

void setQuality(int quality);
int quality() const;

void setCompression(int compression);
int compression() const;

void setGamma(float gamma);
float gamma() const;


void setDescription(const QString &description);
QString description() const;

void setText(const QString &key, const QString &text);

bool canWrite() const;
bool write(const QImage &image);

ImageWriterError error() const;
QString errorString() const;

bool supportsOption(QImageIOHandler::ImageOption option) const;

static QList<QByteArray> supportedImageFormats();
static QList<QByteArray> supportedMimeTypes();

private:
QImageWriter(const QImageWriter &) ; QImageWriter &operator=(const QImageWriter &) ;
QImageWriterPrivate *d;
};




# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmovie.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmovie.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmovie.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmovie.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimagereader.h"















































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmovie.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmovie.h"



class QByteArray;
class QColor;
class QIODevice;
class QImage;
class QPixmap;
class QRect;
class QSize;

class QMoviePrivate;
class  QMovie : public QObject
{
Q_OBJECT
inline QMoviePrivate* d_func() { return reinterpret_cast<QMoviePrivate *>(qGetPtrHelper(d_ptr)); } inline const QMoviePrivate* d_func() const { return reinterpret_cast<const QMoviePrivate *>(qGetPtrHelper(d_ptr)); } friend class QMoviePrivate;
Q_ENUMS(MovieState CacheMode)
Q_PROPERTY(int speed READ speed WRITE setSpeed)
Q_PROPERTY(CacheMode cacheMode READ cacheMode WRITE setCacheMode)
public:
enum MovieState {
NotRunning,
Paused,
Running
};
enum CacheMode {
CacheNone,
CacheAll
};

explicit QMovie(QObject *parent = 0);
explicit QMovie(QIODevice *device, const QByteArray &format = QByteArray(), QObject *parent = 0);
explicit QMovie(const QString &fileName, const QByteArray &format = QByteArray(), QObject *parent = 0);
~QMovie();

static QList<QByteArray> supportedFormats();

void setDevice(QIODevice *device);
QIODevice *device() const;

void setFileName(const QString &fileName);
QString fileName() const;

void setFormat(const QByteArray &format);
QByteArray format() const;

void setBackgroundColor(const QColor &color);
QColor backgroundColor() const;

MovieState state() const;

QRect frameRect() const;
QImage currentImage() const;
QPixmap currentPixmap() const;

bool isValid() const;

bool jumpToFrame(int frameNumber);
int loopCount() const;
int frameCount() const;
int nextFrameDelay() const;
int currentFrameNumber() const;

int speed() const;

QSize scaledSize();
void setScaledSize(const QSize &size);

CacheMode cacheMode() const;
void setCacheMode(CacheMode mode);

signals:
void started();
void resized(const QSize &size);
void updated(const QRect &rect);
void stateChanged(QMovie::MovieState state);
void error(QImageReader::ImageReaderError error);
void finished();
void frameChanged(int frameNumber);

public slots:
void start();
bool jumpToNextFrame();
void setPaused(bool paused);
void stop();
void setSpeed(int percentSpeed);

private:
QMovie(const QMovie &) ; QMovie &operator=(const QMovie &) ;

};






# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"
class QPicturePrivate;
class  QPicture : public QPaintDevice
{
inline QPicturePrivate* d_func() { return reinterpret_cast<QPicturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QPicturePrivate* d_func() const { return reinterpret_cast<const QPicturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QPicturePrivate;
public:
explicit QPicture(int formatVersion = -1);
QPicture(const QPicture &);
~QPicture();

bool isNull() const;

int devType() const;
uint size() const;
const char* data() const;
virtual void setData(const char* data, uint size);

bool play(QPainter *p);

bool load(QIODevice *dev, const char *format = 0);
bool load(const QString &fileName, const char *format = 0);
bool save(QIODevice *dev, const char *format = 0);
bool save(const QString &fileName, const char *format = 0);

QRect boundingRect() const;
void setBoundingRect(const QRect &r);

QPicture& operator=(const QPicture &p);




# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"
inline void swap(QPicture &other) { d_ptr.swap(other.d_ptr); }
void detach();
bool isDetached() const;

friend  QDataStream &operator<<(QDataStream &in, const QPicture &p);
friend  QDataStream &operator>>(QDataStream &in, QPicture &p);

static const char* pictureFormat(const QString &fileName);
static QList<QByteArray> inputFormats();
static QList<QByteArray> outputFormats();
static QStringList inputFormatList();
static QStringList outputFormatList();

QPaintEngine *paintEngine() const;

protected:
QPicture(QPicturePrivate &data);

int metric(PaintDeviceMetric m) const;

private:
bool exec(QPainter *p, QDataStream &ds, int i);

QExplicitlySharedDataPointer<QPicturePrivate> d_ptr;
friend class QPicturePaintEngine;
friend class QAlphaPaintEngine;
friend class QPreviewPaintEngine;

public:
typedef QExplicitlySharedDataPointer<QPicturePrivate> DataPtr;
inline DataPtr &data_ptr() { return d_ptr; }
};

template<> class QTypeInfo<QPicture > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPicture)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPicture) }; static inline const char *name() { return "QPicture"; } }; template <> inline void qSwap<QPicture>(QPicture &value1, QPicture &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QPicture>(::QPicture &value1, ::QPicture &value2) { value1.swap(value2); } } 



# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"
class QIODevice;
class QPictureIO;
typedef void (*picture_io_handler)(QPictureIO *); 

struct QPictureIOData;

class  QPictureIO
{
public:
QPictureIO();
QPictureIO(QIODevice *ioDevice, const char *format);
QPictureIO(const QString &fileName, const char *format);
~QPictureIO();

const QPicture &picture() const;
int status() const;
const char *format() const;
QIODevice *ioDevice() const;
QString fileName() const;
int quality() const;
QString description() const;
const char *parameters() const;
float gamma() const;

void setPicture(const QPicture &);
void setStatus(int);
void setFormat(const char *);
void setIODevice(QIODevice *);
void setFileName(const QString &);
void setQuality(int);
void setDescription(const QString &);
void setParameters(const char *);
void setGamma(float);

bool read();
bool write();

static QByteArray pictureFormat(const QString &fileName);
static QByteArray pictureFormat(QIODevice *);
static QList<QByteArray> inputFormats();
static QList<QByteArray> outputFormats();

static void defineIOHandler(const char *format,
const char *header,
const char *flags,
picture_io_handler read_picture,
picture_io_handler write_picture);

private:
QPictureIO(const QPictureIO &) ; QPictureIO &operator=(const QPictureIO &) ;

void init();

QPictureIOData *d;
};




# 181 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"





# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"
 QDataStream &operator<<(QDataStream &, const QPicture &);
 QDataStream &operator>>(QDataStream &, QPicture &);




# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpicture.h"



# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"
class QPicture;
class QImage;
class QString;
class QStringList;



# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"
class  QPictureFormatPlugin : public QObject
{
Q_OBJECT
public:
explicit QPictureFormatPlugin(QObject *parent = 0);
~QPictureFormatPlugin();

virtual bool loadPicture(const QString &format, const QString &filename, QPicture *pic);
virtual bool savePicture(const QString &format, const QString &filename, const QPicture &pic);
virtual bool installIOHandler(const QString &format) = 0;

};



# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpictureformatplugin.h"



# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmapcache.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmapcache.h"






# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmapcache.h"



class  QPixmapCache
{
public:
class KeyData;
class  Key
{
public:
Key();
Key(const Key &other);
~Key();
bool operator ==(const Key &key) const;
inline bool operator !=(const Key &key) const
{ return !operator==(key); }
Key &operator =(const Key &other);

private:
KeyData *d;
friend class QPMCache;
friend class QPixmapCache;
};

static int cacheLimit();
static void setCacheLimit(int);
static QPixmap *find(const QString &key);
static bool find(const QString &key, QPixmap &pixmap);
static bool find(const QString &key, QPixmap *pixmap);
static bool find(const Key &key, QPixmap *pixmap);
static bool insert(const QString &key, const QPixmap &pixmap);
static Key insert(const QPixmap &pixmap);
static bool replace(const Key &key, const QPixmap &pixmap);
static void remove(const QString &key);
static void remove(const Key &key);
static void clear();






# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmapcache.h"
};




# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"















































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"



struct QBrushData;
class QPixmap;
class QGradient;
class QVariant;
struct QBrushDataPointerDeleter;

class  QBrush
{
public:
QBrush();
QBrush(Qt::BrushStyle bs);
QBrush(const QColor &color, Qt::BrushStyle bs=Qt::SolidPattern);
QBrush(Qt::GlobalColor color, Qt::BrushStyle bs=Qt::SolidPattern);

QBrush(const QColor &color, const QPixmap &pixmap);
QBrush(Qt::GlobalColor color, const QPixmap &pixmap);
QBrush(const QPixmap &pixmap);
QBrush(const QImage &image);

QBrush(const QBrush &brush);

QBrush(const QGradient &gradient);

~QBrush();
QBrush &operator=(const QBrush &brush);




# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"
inline void swap(QBrush &other) { qSwap(d, other.d); }

operator QVariant() const;

inline Qt::BrushStyle style() const;
void setStyle(Qt::BrushStyle);

inline const QMatrix &matrix() const;
void setMatrix(const QMatrix &mat);

inline QTransform transform() const;
void setTransform(const QTransform &);

QPixmap texture() const;
void setTexture(const QPixmap &pixmap);

QImage textureImage() const;
void setTextureImage(const QImage &image);

inline const QColor &color() const;
void setColor(const QColor &color);
inline void setColor(Qt::GlobalColor color);

const QGradient *gradient() const;

bool isOpaque() const;

bool operator==(const QBrush &b) const;
inline bool operator!=(const QBrush &b) const { return !(operator==(b)); }

private:
friend class QRasterPaintEngine;
friend class QRasterPaintEnginePrivate;
friend struct QSpanData;
friend class QPainter;
friend bool  qHasPixmapTexture(const QBrush& brush);
void detach(Qt::BrushStyle newStyle);
void init(const QColor &color, Qt::BrushStyle bs);
QScopedPointer<QBrushData, QBrushDataPointerDeleter> d;
void cleanUp(QBrushData *x);

public:
inline bool isDetached() const;
typedef QScopedPointer<QBrushData, QBrushDataPointerDeleter> DataPtr;
inline DataPtr &data_ptr() { return d; }
};

inline void QBrush::setColor(Qt::GlobalColor acolor)
{ setColor(QColor(acolor)); }

template<> class QTypeInfo<QBrush > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QBrush)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QBrush) }; static inline const char *name() { return "QBrush"; } }; template <> inline void qSwap<QBrush>(QBrush &value1, QBrush &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QBrush>(::QBrush &value1, ::QBrush &value2) { value1.swap(value2); } } 






# 144 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"
 QDataStream &operator<<(QDataStream &, const QBrush &);
 QDataStream &operator>>(QDataStream &, QBrush &);



# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"
 QDebug operator<<(QDebug, const QBrush &);


# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"
struct QBrushData
{
QAtomicInt ref;
Qt::BrushStyle style;
QColor color;
QTransform transform;
};

inline Qt::BrushStyle QBrush::style() const { return d->style; }
inline const QColor &QBrush::color() const { return d->color; }
inline const QMatrix &QBrush::matrix() const { return d->transform.toAffine(); }
inline QTransform QBrush::transform() const { return d->transform; }
inline bool QBrush::isDetached() const { return d->ref.load() == 1; }





class QGradientPrivate;

typedef QPair<qreal, QColor> QGradientStop;
typedef QVector<QGradientStop> QGradientStops;

class  QGradient
{

Q_ENUMS(Type Spread CoordinateMode)
public:
enum Type {
LinearGradient,
RadialGradient,
ConicalGradient,
NoGradient
};

enum Spread {
PadSpread,
ReflectSpread,
RepeatSpread
};

enum CoordinateMode {
LogicalMode,
StretchToDeviceMode,
ObjectBoundingMode
};

enum InterpolationMode {
ColorInterpolation,
ComponentInterpolation
};

QGradient();

Type type() const { return m_type; }

inline void setSpread(Spread spread);
Spread spread() const { return m_spread; }

void setColorAt(qreal pos, const QColor &color);

void setStops(const QGradientStops &stops);
QGradientStops stops() const;

CoordinateMode coordinateMode() const;
void setCoordinateMode(CoordinateMode mode);

InterpolationMode interpolationMode() const;
void setInterpolationMode(InterpolationMode mode);

bool operator==(const QGradient &gradient) const;
inline bool operator!=(const QGradient &other) const
{ return !operator==(other); }

private:
friend class QLinearGradient;
friend class QRadialGradient;
friend class QConicalGradient;
friend class QBrush;

Type m_type;
Spread m_spread;
QGradientStops m_stops;
union {
struct {
qreal x1, y1, x2, y2;
} linear;
struct {
qreal cx, cy, fx, fy, cradius;
} radial;
struct {
qreal cx, cy, angle;
} conical;
} m_data;
void *dummy;
};

inline void QGradient::setSpread(Spread aspread)
{ m_spread = aspread; }

class  QLinearGradient : public QGradient
{
public:
QLinearGradient();
QLinearGradient(const QPointF &start, const QPointF &finalStop);
QLinearGradient(qreal xStart, qreal yStart, qreal xFinalStop, qreal yFinalStop);

QPointF start() const;
void setStart(const QPointF &start);
inline void setStart(qreal x, qreal y) { setStart(QPointF(x, y)); }

QPointF finalStop() const;
void setFinalStop(const QPointF &stop);
inline void setFinalStop(qreal x, qreal y) { setFinalStop(QPointF(x, y)); }
};


class  QRadialGradient : public QGradient
{
public:
QRadialGradient();
QRadialGradient(const QPointF &center, qreal radius, const QPointF &focalPoint);
QRadialGradient(qreal cx, qreal cy, qreal radius, qreal fx, qreal fy);

QRadialGradient(const QPointF &center, qreal radius);
QRadialGradient(qreal cx, qreal cy, qreal radius);

QRadialGradient(const QPointF &center, qreal centerRadius, const QPointF &focalPoint, qreal focalRadius);
QRadialGradient(qreal cx, qreal cy, qreal centerRadius, qreal fx, qreal fy, qreal focalRadius);

QPointF center() const;
void setCenter(const QPointF &center);
inline void setCenter(qreal x, qreal y) { setCenter(QPointF(x, y)); }

QPointF focalPoint() const;
void setFocalPoint(const QPointF &focalPoint);
inline void setFocalPoint(qreal x, qreal y) { setFocalPoint(QPointF(x, y)); }

qreal radius() const;
void setRadius(qreal radius);

qreal centerRadius() const;
void setCenterRadius(qreal radius);

qreal focalRadius() const;
void setFocalRadius(qreal radius);
};


class  QConicalGradient : public QGradient
{
public:
QConicalGradient();
QConicalGradient(const QPointF &center, qreal startAngle);
QConicalGradient(qreal cx, qreal cy, qreal startAngle);

QPointF center() const;
void setCenter(const QPointF &center);
inline void setCenter(qreal x, qreal y) { setCenter(QPointF(x, y)); }

qreal angle() const;
void setAngle(qreal angle);
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"



class QFontPrivate; 
class QStringList;
class QVariant;

class  QFont
{

Q_ENUMS(StyleStrategy)
public:
enum StyleHint {
Helvetica, SansSerif = Helvetica,
Times, Serif = Times,
Courier, TypeWriter = Courier,
OldEnglish, Decorative = OldEnglish,
System,
AnyStyle,
Cursive,
Monospace,
Fantasy
};

enum StyleStrategy {
PreferDefault = 0x0001,
PreferBitmap = 0x0002,
PreferDevice = 0x0004,
PreferOutline = 0x0008,
ForceOutline = 0x0010,
PreferMatch = 0x0020,
PreferQuality = 0x0040,
PreferAntialias = 0x0080,
NoAntialias = 0x0100,
OpenGLCompatible = 0x0200,
ForceIntegerMetrics = 0x0400,
NoFontMerging = 0x8000
};

enum HintingPreference {
PreferDefaultHinting = 0,
PreferNoHinting = 1,
PreferVerticalHinting = 2,
PreferFullHinting = 3
};

enum Weight {
Light = 25,
Normal = 50,
DemiBold = 63,
Bold = 75,
Black = 87
};

enum Style {
StyleNormal,
StyleItalic,
StyleOblique
};

enum Stretch {
UltraCondensed = 50,
ExtraCondensed = 62,
Condensed = 75,
SemiCondensed = 87,
Unstretched = 100,
SemiExpanded = 112,
Expanded = 125,
ExtraExpanded = 150,
UltraExpanded = 200
};

enum Capitalization {
MixedCase,
AllUppercase,
AllLowercase,
SmallCaps,
Capitalize
};

enum SpacingType {
PercentageSpacing,
AbsoluteSpacing
};

enum ResolveProperties {
FamilyResolved = 0x0001,
SizeResolved = 0x0002,
StyleHintResolved = 0x0004,
StyleStrategyResolved = 0x0008,
WeightResolved = 0x0010,
StyleResolved = 0x0020,
UnderlineResolved = 0x0040,
OverlineResolved = 0x0080,
StrikeOutResolved = 0x0100,
FixedPitchResolved = 0x0200,
StretchResolved = 0x0400,
KerningResolved = 0x0800,
CapitalizationResolved = 0x1000,
LetterSpacingResolved = 0x2000,
WordSpacingResolved = 0x4000,
HintingPreferenceResolved = 0x8000,
StyleNameResolved = 0x10000,
AllPropertiesResolved = 0x1ffff
};

QFont();
QFont(const QString &family, int pointSize = -1, int weight = -1, bool italic = false);
QFont(const QFont &, QPaintDevice *pd);
QFont(const QFont &);
~QFont();

void swap(QFont &other)
{ qSwap(d, other.d); qSwap(resolve_mask, other.resolve_mask); }

QString family() const;
void setFamily(const QString &);

QString styleName() const;
void setStyleName(const QString &);

int pointSize() const;
void setPointSize(int);
qreal pointSizeF() const;
void setPointSizeF(qreal);

int pixelSize() const;
void setPixelSize(int);

int weight() const;
void setWeight(int);

inline bool bold() const;
inline void setBold(bool);

void setStyle(Style style);
Style style() const;

inline bool italic() const;
inline void setItalic(bool b);

bool underline() const;
void setUnderline(bool);

bool overline() const;
void setOverline(bool);

bool strikeOut() const;
void setStrikeOut(bool);

bool fixedPitch() const;
void setFixedPitch(bool);

bool kerning() const;
void setKerning(bool);

StyleHint styleHint() const;
StyleStrategy styleStrategy() const;
void setStyleHint(StyleHint, StyleStrategy = PreferDefault);
void setStyleStrategy(StyleStrategy s);

int stretch() const;
void setStretch(int);

qreal letterSpacing() const;
SpacingType letterSpacingType() const;
void setLetterSpacing(SpacingType type, qreal spacing);

qreal wordSpacing() const;
void setWordSpacing(qreal spacing);

void setCapitalization(Capitalization);
Capitalization capitalization() const;

void setHintingPreference(HintingPreference hintingPreference);
HintingPreference hintingPreference() const;


bool rawMode() const;
void setRawMode(bool);


bool exactMatch() const;

QFont &operator=(const QFont &);
bool operator==(const QFont &) const;
bool operator!=(const QFont &) const;
bool operator<(const QFont &) const;
operator QVariant() const;
bool isCopyOf(const QFont &) const;





# 245 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"

void setRawName(const QString &);
QString rawName() const;

QString key() const;

QString toString() const;
bool fromString(const QString &);

static QString substitute(const QString &);
static QStringList substitutes(const QString &);
static QStringList substitutions();
static void insertSubstitution(const QString&, const QString &);
static void insertSubstitutions(const QString&, const QStringList &);
static void removeSubstitutions(const QString &);



# 263 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"
static void initialize();
static void cleanup();
static void cacheStatistics();

QString defaultFamily() const;
QString lastResortFamily() const;
QString lastResortFont() const;

QFont resolve(const QFont &) const;
inline uint resolve() const { return resolve_mask; }
inline void resolve(uint mask) { resolve_mask = mask; }

private:
explicit QFont(QFontPrivate *);

void detach();


friend class QFontPrivate;
friend class QFontDialogPrivate;
friend class QFontMetrics;
friend class QFontMetricsF;
friend class QFontInfo;
friend class QPainter;
friend class QPainterPrivate;
friend class QApplication;
friend class QWidget;
friend class QWidgetPrivate;
friend class QTextLayout;
friend class QTextEngine;
friend class QStackTextEngine;
friend class QTextLine;
friend struct QScriptLine;
friend class QOpenGLContext;
friend class QWin32PaintEngine;
friend class QAlphaPaintEngine;
friend class QPainterPath;
friend class QTextItemInt;
friend class QPicturePaintEngine;
friend class QPainterReplayer;
friend class QPaintBufferEngine;
friend class QCommandLinkButtonPrivate;
friend class QFontEngine;


# 308 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"
friend  QDataStream &operator<<(QDataStream &, const QFont &);
friend  QDataStream &operator>>(QDataStream &, QFont &);


# 312 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"
QExplicitlySharedDataPointer<QFontPrivate> d;
uint resolve_mask;
};

template<> class QTypeInfo<QFont > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFont)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFont) }; static inline const char *name() { return "QFont"; } }; template <> inline void qSwap<QFont>(QFont &value1, QFont &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QFont>(::QFont &value1, ::QFont &value2) { value1.swap(value2); } } 

inline bool QFont::bold() const
{ return weight() > Normal; }


inline void QFont::setBold(bool enable)
{ setWeight(enable ? Bold : Normal); }

inline bool QFont::italic() const
{
return (style() != StyleNormal);
}

inline void QFont::setItalic(bool b) {
setStyle(b ? StyleItalic : StyleNormal);
}







# 340 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"
 QDataStream &operator<<(QDataStream &, const QFont &);
 QDataStream &operator>>(QDataStream &, QFont &);



# 345 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"
 QDebug operator<<(QDebug, const QFont &);


# 348 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"


















































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"



# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
template <class T> class QList;

class QStandardItemModel;

class QStandardItemPrivate;
class  QStandardItem
{
public:
QStandardItem();
explicit QStandardItem(const QString &text);
QStandardItem(const QIcon &icon, const QString &text);
explicit QStandardItem(int rows, int columns = 1);
virtual ~QStandardItem();

virtual QVariant data(int role = Qt::UserRole + 1) const;
virtual void setData(const QVariant &value, int role = Qt::UserRole + 1);

inline QString text() const {
return qvariant_cast<QString>(data(Qt::DisplayRole));
}
inline void setText(const QString &text);

inline QIcon icon() const {
return qvariant_cast<QIcon>(data(Qt::DecorationRole));
}
inline void setIcon(const QIcon &icon);


# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline QString toolTip() const {
return qvariant_cast<QString>(data(Qt::ToolTipRole));
}
inline void setToolTip(const QString &toolTip);



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline QString statusTip() const {
return qvariant_cast<QString>(data(Qt::StatusTipRole));
}
inline void setStatusTip(const QString &statusTip);



# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline QString whatsThis() const {
return qvariant_cast<QString>(data(Qt::WhatsThisRole));
}
inline void setWhatsThis(const QString &whatsThis);


# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline QSize sizeHint() const {
return qvariant_cast<QSize>(data(Qt::SizeHintRole));
}
inline void setSizeHint(const QSize &sizeHint);

inline QFont font() const {
return qvariant_cast<QFont>(data(Qt::FontRole));
}
inline void setFont(const QFont &font);

inline Qt::Alignment textAlignment() const {
return Qt::Alignment(qvariant_cast<int>(data(Qt::TextAlignmentRole)));
}
inline void setTextAlignment(Qt::Alignment textAlignment);

inline QBrush background() const {
return qvariant_cast<QBrush>(data(Qt::BackgroundRole));
}
inline void setBackground(const QBrush &brush);

inline QBrush foreground() const {
return qvariant_cast<QBrush>(data(Qt::ForegroundRole));
}
inline void setForeground(const QBrush &brush);

inline Qt::CheckState checkState() const {
return Qt::CheckState(qvariant_cast<int>(data(Qt::CheckStateRole)));
}
inline void setCheckState(Qt::CheckState checkState);

inline QString accessibleText() const {
return qvariant_cast<QString>(data(Qt::AccessibleTextRole));
}
inline void setAccessibleText(const QString &accessibleText);

inline QString accessibleDescription() const {
return qvariant_cast<QString>(data(Qt::AccessibleDescriptionRole));
}
inline void setAccessibleDescription(const QString &accessibleDescription);

Qt::ItemFlags flags() const;
void setFlags(Qt::ItemFlags flags);

inline bool isEnabled() const {
return (flags() & Qt::ItemIsEnabled) != 0;
}
void setEnabled(bool enabled);

inline bool isEditable() const {
return (flags() & Qt::ItemIsEditable) != 0;
}
void setEditable(bool editable);

inline bool isSelectable() const {
return (flags() & Qt::ItemIsSelectable) != 0;
}
void setSelectable(bool selectable);

inline bool isCheckable() const {
return (flags() & Qt::ItemIsUserCheckable) != 0;
}
void setCheckable(bool checkable);

inline bool isTristate() const {
return (flags() & Qt::ItemIsTristate) != 0;
}
void setTristate(bool tristate);


# 175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline bool isDragEnabled() const {
return (flags() & Qt::ItemIsDragEnabled) != 0;
}
void setDragEnabled(bool dragEnabled);

inline bool isDropEnabled() const {
return (flags() & Qt::ItemIsDropEnabled) != 0;
}
void setDropEnabled(bool dropEnabled);


# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
QStandardItem *parent() const;
int row() const;
int column() const;
QModelIndex index() const;
QStandardItemModel *model() const;

int rowCount() const;
void setRowCount(int rows);
int columnCount() const;
void setColumnCount(int columns);

bool hasChildren() const;
QStandardItem *child(int row, int column = 0) const;
void setChild(int row, int column, QStandardItem *item);
inline void setChild(int row, QStandardItem *item);

void insertRow(int row, const QList<QStandardItem*> &items);
void insertColumn(int column, const QList<QStandardItem*> &items);
void insertRows(int row, const QList<QStandardItem*> &items);
void insertRows(int row, int count);
void insertColumns(int column, int count);

void removeRow(int row);
void removeColumn(int column);
void removeRows(int row, int count);
void removeColumns(int column, int count);

inline void appendRow(const QList<QStandardItem*> &items);
inline void appendRows(const QList<QStandardItem*> &items);
inline void appendColumn(const QList<QStandardItem*> &items);
inline void insertRow(int row, QStandardItem *item);
inline void appendRow(QStandardItem *item);

QStandardItem *takeChild(int row, int column = 0);
QList<QStandardItem*> takeRow(int row);
QList<QStandardItem*> takeColumn(int column);

void sortChildren(int column, Qt::SortOrder order = Qt::AscendingOrder);

virtual QStandardItem *clone() const;

enum ItemType { Type = 0, UserType = 1000 };
virtual int type() const;


# 231 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 234 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
virtual bool operator<(const QStandardItem &other) const;

protected:
QStandardItem(const QStandardItem &other);
QStandardItem(QStandardItemPrivate &dd);
QStandardItem &operator=(const QStandardItem &other);
QScopedPointer<QStandardItemPrivate> d_ptr;

void emitDataChanged();

private:
inline QStandardItemPrivate* d_func() { return reinterpret_cast<QStandardItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QStandardItemPrivate* d_func() const { return reinterpret_cast<const QStandardItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QStandardItemPrivate;
friend class QStandardItemModelPrivate;
friend class QStandardItemModel;
};

inline void QStandardItem::setText(const QString &atext)
{ setData(atext, Qt::DisplayRole); }

inline void QStandardItem::setIcon(const QIcon &aicon)
{ setData(aicon, Qt::DecorationRole); }


# 257 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setToolTip(const QString &atoolTip)
{ setData(atoolTip, Qt::ToolTipRole); }



# 262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setStatusTip(const QString &astatusTip)
{ setData(astatusTip, Qt::StatusTipRole); }



# 267 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setWhatsThis(const QString &awhatsThis)
{ setData(awhatsThis, Qt::WhatsThisRole); }


# 271 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline void QStandardItem::setSizeHint(const QSize &asizeHint)
{ setData(asizeHint, Qt::SizeHintRole); }

inline void QStandardItem::setFont(const QFont &afont)
{ setData(afont, Qt::FontRole); }

inline void QStandardItem::setTextAlignment(Qt::Alignment atextAlignment)
{ setData(int(atextAlignment), Qt::TextAlignmentRole); }

inline void QStandardItem::setBackground(const QBrush &abrush)
{ setData(abrush, Qt::BackgroundRole); }

inline void QStandardItem::setForeground(const QBrush &abrush)
{ setData(abrush, Qt::ForegroundRole); }

inline void QStandardItem::setCheckState(Qt::CheckState acheckState)
{ setData(acheckState, Qt::CheckStateRole); }

inline void QStandardItem::setAccessibleText(const QString &aaccessibleText)
{ setData(aaccessibleText, Qt::AccessibleTextRole); }

inline void QStandardItem::setAccessibleDescription(const QString &aaccessibleDescription)
{ setData(aaccessibleDescription, Qt::AccessibleDescriptionRole); }

inline void QStandardItem::setChild(int arow, QStandardItem *aitem)
{ setChild(arow, 0, aitem); }

inline void QStandardItem::appendRow(const QList<QStandardItem*> &aitems)
{ insertRow(rowCount(), aitems); }

inline void QStandardItem::appendRows(const QList<QStandardItem*> &aitems)
{ insertRows(rowCount(), aitems); }

inline void QStandardItem::appendColumn(const QList<QStandardItem*> &aitems)
{ insertColumn(columnCount(), aitems); }

inline void QStandardItem::insertRow(int arow, QStandardItem *aitem)
{ insertRow(arow, QList<QStandardItem*>() << aitem); }

inline void QStandardItem::appendRow(QStandardItem *aitem)
{ insertRow(rowCount(), aitem); }

class QStandardItemModelPrivate;

class  QStandardItemModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(int sortRole READ sortRole WRITE setSortRole)

public:
explicit QStandardItemModel(QObject *parent = 0);
QStandardItemModel(int rows, int columns, QObject *parent = 0);
~QStandardItemModel();

void setItemRoleNames(const QHash<int,QByteArray> &roleNames);

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex parent(const QModelIndex &child) const;

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;

QModelIndex sibling(int row, int column, const QModelIndex &idx) const;

QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation,
int role = Qt::DisplayRole) const;
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role = Qt::EditRole);

bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

Qt::ItemFlags flags(const QModelIndex &index) const;
Qt::DropActions supportedDropActions() const;

QMap<int, QVariant> itemData(const QModelIndex &index) const;
bool setItemData(const QModelIndex &index, const QMap<int, QVariant> &roles);

void clear();


# 358 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 363 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStandardItem *itemFromIndex(const QModelIndex &index) const;
QModelIndex indexFromItem(const QStandardItem *item) const;

QStandardItem *item(int row, int column = 0) const;
void setItem(int row, int column, QStandardItem *item);
inline void setItem(int row, QStandardItem *item);
QStandardItem *invisibleRootItem() const;

QStandardItem *horizontalHeaderItem(int column) const;
void setHorizontalHeaderItem(int column, QStandardItem *item);
QStandardItem *verticalHeaderItem(int row) const;
void setVerticalHeaderItem(int row, QStandardItem *item);

void setHorizontalHeaderLabels(const QStringList &labels);
void setVerticalHeaderLabels(const QStringList &labels);

void setRowCount(int rows);
void setColumnCount(int columns);

void appendRow(const QList<QStandardItem*> &items);
void appendColumn(const QList<QStandardItem*> &items);
inline void appendRow(QStandardItem *item);

void insertRow(int row, const QList<QStandardItem*> &items);
void insertColumn(int column, const QList<QStandardItem*> &items);
inline void insertRow(int row, QStandardItem *item);

inline bool insertRow(int row, const QModelIndex &parent = QModelIndex());
inline bool insertColumn(int column, const QModelIndex &parent = QModelIndex());

QStandardItem *takeItem(int row, int column = 0);
QList<QStandardItem*> takeRow(int row);
QList<QStandardItem*> takeColumn(int column);

QStandardItem *takeHorizontalHeaderItem(int column);
QStandardItem *takeVerticalHeaderItem(int row);

const QStandardItem *itemPrototype() const;
void setItemPrototype(const QStandardItem *item);

QList<QStandardItem*> findItems(const QString &text,
Qt::MatchFlags flags = Qt::MatchExactly,
int column = 0) const;

int sortRole() const;
void setSortRole(int role);

QStringList mimeTypes() const;
QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData (const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent);

signals:
void itemChanged(QStandardItem *item);

protected:
QStandardItemModel(QStandardItemModelPrivate &dd, QObject *parent = 0);

private:
friend class QStandardItemPrivate;
friend class QStandardItem;
QStandardItemModel(const QStandardItemModel &) ; QStandardItemModel &operator=(const QStandardItemModel &) ;
inline QStandardItemModelPrivate* d_func() { return reinterpret_cast<QStandardItemModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QStandardItemModelPrivate* d_func() const { return reinterpret_cast<const QStandardItemModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QStandardItemModelPrivate;


};

inline void QStandardItemModel::setItem(int arow, QStandardItem *aitem)
{ setItem(arow, 0, aitem); }

inline void QStandardItemModel::appendRow(QStandardItem *aitem)
{ appendRow(QList<QStandardItem*>() << aitem); }

inline void QStandardItemModel::insertRow(int arow, QStandardItem *aitem)
{ insertRow(arow, QList<QStandardItem*>() << aitem); }

inline bool QStandardItemModel::insertRow(int arow, const QModelIndex &aparent)
{ return QAbstractItemModel::insertRow(arow, aparent); }
inline bool QStandardItemModel::insertColumn(int acolumn, const QModelIndex &aparent)
{ return QAbstractItemModel::insertColumn(acolumn, aparent); }


# 446 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"
 QDataStream &operator>>(QDataStream &in, QStandardItem &item);
 QDataStream &operator<<(QDataStream &out, const QStandardItem &item);




# 452 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstandarditemmodel.h"



# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qclipboard.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qclipboard.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qclipboard.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qclipboard.h"
class QMimeData;
class QImage;
class QPixmap;

class  QClipboard : public QObject
{
Q_OBJECT
private:
explicit QClipboard(QObject *parent);
~QClipboard();

public:
enum Mode { Clipboard, Selection, FindBuffer, LastMode = FindBuffer };

void clear(Mode mode = Clipboard);

bool supportsSelection() const;
bool supportsFindBuffer() const;

bool ownsSelection() const;
bool ownsClipboard() const;
bool ownsFindBuffer() const;

QString text(Mode mode = Clipboard) const;
QString text(QString& subtype, Mode mode = Clipboard) const;
void setText(const QString &, Mode mode = Clipboard);

const QMimeData *mimeData(Mode mode = Clipboard ) const;
void setMimeData(QMimeData *data, Mode mode = Clipboard);

QImage image(Mode mode = Clipboard) const;
QPixmap pixmap(Mode mode = Clipboard) const;
void setImage(const QImage &, Mode mode = Clipboard);
void setPixmap(const QPixmap &, Mode mode = Clipboard);

signals:
void changed(QClipboard::Mode mode);
void selectionChanged();
void findBufferChanged();
void dataChanged();

protected:
friend class QApplication;
friend class QApplicationPrivate;
friend class QGuiApplication;
friend class QBaseApplication;
friend class QDragManager;
friend class QPlatformClipboard;

private:
QClipboard(const QClipboard &) ; QClipboard &operator=(const QClipboard &) ;

bool supportsMode(Mode mode) const;
bool ownsMode(Mode mode) const;
void emitChanged(Mode mode);
};



# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qclipboard.h"



# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"



class QVariant;
class QScreen;






















# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"
class QCursorData;
class QBitmap;
class QPixmap;


class  QCursor
{
public:
QCursor();
QCursor(Qt::CursorShape shape);
QCursor(const QBitmap &bitmap, const QBitmap &mask, int hotX=-1, int hotY=-1);
QCursor(const QPixmap &pixmap, int hotX=-1, int hotY=-1);
QCursor(const QCursor &cursor);
~QCursor();
QCursor &operator=(const QCursor &cursor);




# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"
operator QVariant() const;

Qt::CursorShape shape() const;
void setShape(Qt::CursorShape newShape);

const QBitmap *bitmap() const;
const QBitmap *mask() const;
QPixmap pixmap() const;
QPoint hotSpot() const;

static QPoint pos();
static QPoint pos(const QScreen *screen);
static void setPos(int x, int y);
static void setPos(QScreen *screen, int x, int y);
inline static void setPos(const QPoint &p) { setPos(p.x(), p.y()); }
inline static void setPos(QScreen *screen, const QPoint &p) { setPos(screen, p.x(), p.y()); }

private:
QCursorData *d;
};





# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"
 QDataStream &operator<<(QDataStream &outS, const QCursor &cursor);
 QDataStream &operator>>(QDataStream &inS, QCursor &cursor);



# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"
 QDebug operator<<(QDebug, const QCursor &);




# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"



# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdrag.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdrag.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdrag.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdrag.h"
class QMimeData;
class QDragPrivate;
class QPixmap;
class QPoint;
class QDragManager;


class  QDrag : public QObject
{
Q_OBJECT
inline QDragPrivate* d_func() { return reinterpret_cast<QDragPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDragPrivate* d_func() const { return reinterpret_cast<const QDragPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDragPrivate;
public:
explicit QDrag(QObject *dragSource);
~QDrag();

void setMimeData(QMimeData *data);
QMimeData *mimeData() const;

void setPixmap(const QPixmap &);
QPixmap pixmap() const;

void setHotSpot(const QPoint &hotspot);
QPoint hotSpot() const;

QObject *source() const;
QObject *target() const;

Qt::DropAction start(Qt::DropActions supportedActions = Qt::CopyAction);
Qt::DropAction exec(Qt::DropActions supportedActions = Qt::MoveAction);
Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultAction);

void setDragCursor(const QPixmap &cursor, Qt::DropAction action);
QPixmap dragCursor(Qt::DropAction action) const;

Qt::DropActions supportedActions() const;
Qt::DropAction defaultAction() const;

signals:
void actionChanged(Qt::DropAction action);
void targetChanged(QObject *newTarget);

private:
friend class QDragManager;
QDrag(const QDrag &) ; QDrag &operator=(const QDrag &) ;
};



# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdrag.h"



# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericplugin.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericplugin.h"







# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericplugin.h"
class  QGenericPlugin : public QObject
{
Q_OBJECT
public:
explicit QGenericPlugin(QObject *parent = 0);
~QGenericPlugin();

virtual QObject* create(const QString& name, const QString &spec) = 0;
};



# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericplugin.h"



# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericpluginfactory.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericpluginfactory.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericpluginfactory.h"



class QString;
class QObject;

class  QGenericPluginFactory
{
public:
static QStringList keys();
static QObject *create(const QString&, const QString &);
};




# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"









































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qinputmethod.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qinputmethod.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qinputmethod.h"


class QInputMethodPrivate;
class QWindow;
class QRectF;
class QTransform;

class  QInputMethod : public QObject
{
Q_OBJECT
inline QInputMethodPrivate* d_func() { return reinterpret_cast<QInputMethodPrivate *>(qGetPtrHelper(d_ptr)); } inline const QInputMethodPrivate* d_func() const { return reinterpret_cast<const QInputMethodPrivate *>(qGetPtrHelper(d_ptr)); } friend class QInputMethodPrivate;
Q_PROPERTY(QRectF cursorRectangle READ cursorRectangle NOTIFY cursorRectangleChanged)
Q_PROPERTY(QRectF keyboardRectangle READ keyboardRectangle NOTIFY keyboardRectangleChanged)
Q_PROPERTY(bool visible READ isVisible NOTIFY visibleChanged)
Q_PROPERTY(bool animating READ isAnimating NOTIFY animatingChanged)
Q_PROPERTY(QLocale locale READ locale NOTIFY localeChanged)
Q_PROPERTY(Qt::LayoutDirection inputDirection READ inputDirection NOTIFY inputDirectionChanged)

Q_ENUMS(Action)
public:
QTransform inputItemTransform() const;
void setInputItemTransform(const QTransform &transform);

QRectF inputItemRectangle() const;
void setInputItemRectangle(const QRectF &rect);


QRectF cursorRectangle() const; 


QRectF keyboardRectangle() const;

enum Action {
Click,
ContextMenu
};

bool isVisible() const;
void setVisible(bool visible);

bool isAnimating() const;

QLocale locale() const;
Qt::LayoutDirection inputDirection() const;

public slots:
void show();
void hide();

void update(Qt::InputMethodQueries queries);
void reset();
void commit();

void invokeAction(Action a, int cursorPosition);

signals:
void cursorRectangleChanged();
void keyboardRectangleChanged();
void visibleChanged();
void animatingChanged();
void localeChanged();
void inputDirectionChanged(Qt::LayoutDirection newDirection);

private:
friend class QGuiApplication;
friend class QGuiApplicationPrivate;
friend class QPlatformInputContext;
QInputMethod();
~QInputMethod();
};




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"



class QSessionManager;
class QGuiApplicationPrivate;
class QPlatformNativeInterface;
class QPlatformIntegration;
class QPalette;
class QScreen;
class QStyleHints;











# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
class  QGuiApplication : public QCoreApplication
{
Q_OBJECT
Q_PROPERTY(QString applicationDisplayName READ applicationDisplayName WRITE setApplicationDisplayName)
Q_PROPERTY(Qt::LayoutDirection layoutDirection READ layoutDirection WRITE setLayoutDirection)
Q_PROPERTY(QString platformName READ platformName STORED false)
Q_PROPERTY(bool quitOnLastWindowClosed READ quitOnLastWindowClosed WRITE setQuitOnLastWindowClosed)

public:



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
QGuiApplication(int &argc, char **argv, int = ApplicationFlags);

# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
virtual ~QGuiApplication();

static void setApplicationDisplayName(const QString &name);
static QString applicationDisplayName();

static QWindowList allWindows();
static QWindowList topLevelWindows();
static QWindow *topLevelAt(const QPoint &pos);

static QString platformName();

static QWindow *modalWindow();

static QWindow *focusWindow();
static QObject *focusObject();

static QScreen *primaryScreen();
static QList<QScreen *> screens();
qreal devicePixelRatio() const;


# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
static QCursor *overrideCursor();
static void setOverrideCursor(const QCursor &);
static void changeOverrideCursor(const QCursor &);
static void restoreOverrideCursor();


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
static QFont font();
static void setFont(const QFont &);


# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
static QClipboard *clipboard();


# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
static QPalette palette();
static void setPalette(const QPalette &pal);

static Qt::KeyboardModifiers keyboardModifiers();
static Qt::KeyboardModifiers queryKeyboardModifiers();
static Qt::MouseButtons mouseButtons();

static void setLayoutDirection(Qt::LayoutDirection direction);
static Qt::LayoutDirection layoutDirection();

static inline bool isRightToLeft() { return layoutDirection() == Qt::RightToLeft; }
static inline bool isLeftToRight() { return layoutDirection() == Qt::LeftToRight; }

static QStyleHints *styleHints();
static void setDesktopSettingsAware(bool on);
static bool desktopSettingsAware();

static QInputMethod *inputMethod();

static QPlatformNativeInterface *platformNativeInterface();

static void setQuitOnLastWindowClosed(bool quit);
static bool quitOnLastWindowClosed();

static int exec();
bool notify(QObject *, QEvent *);


# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"

bool isSessionRestored() const;
QString sessionId() const;
QString sessionKey() const;
bool isSavingSession() const;


# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
signals:
void fontDatabaseChanged();
void screenAdded(QScreen *screen);
void lastWindowClosed();
void focusObjectChanged(QObject *focusObject);
void focusWindowChanged(QWindow *focusWindow);

# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
void commitDataRequest(QSessionManager &sessionManager);
void saveStateRequest(QSessionManager &sessionManager);


# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
protected:
bool event(QEvent *);
bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);

QGuiApplication(QGuiApplicationPrivate &p);

private:
QGuiApplication(const QGuiApplication &) ; QGuiApplication &operator=(const QGuiApplication &) ;
inline QGuiApplicationPrivate* d_func() { return reinterpret_cast<QGuiApplicationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGuiApplicationPrivate* d_func() const { return reinterpret_cast<const QGuiApplicationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGuiApplicationPrivate;




# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
friend class QGestureManager;

# 182 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"
friend class QFontDatabasePrivate;
friend class QPlatformIntegration;
};




# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qinputmethod.h"
























































































































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"










































































































































































































































# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qoffscreensurface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qoffscreensurface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"



class QOpenGLContext;
class QSurfaceFormatPrivate;

class  QSurfaceFormat
{
public:
enum FormatOption {
StereoBuffers = 0x0001,
DebugContext = 0x0002,
DeprecatedFunctions = 0x0004
};
typedef QFlags<FormatOption> FormatOptions;

enum SwapBehavior {
DefaultSwapBehavior,
SingleBuffer,
DoubleBuffer,
TripleBuffer
};

enum RenderableType {
DefaultRenderableType = 0x0,
OpenGL = 0x1,
OpenGLES = 0x2,
OpenVG = 0x4
};

enum OpenGLContextProfile {
NoProfile,
CoreProfile,
CompatibilityProfile
};

QSurfaceFormat();
 QSurfaceFormat(FormatOptions options);
QSurfaceFormat(const QSurfaceFormat &other);
QSurfaceFormat &operator=(const QSurfaceFormat &other);
~QSurfaceFormat();

void setDepthBufferSize(int size);
int depthBufferSize() const;

void setStencilBufferSize(int size);
int stencilBufferSize() const;

void setRedBufferSize(int size);
int redBufferSize() const;
void setGreenBufferSize(int size);
int greenBufferSize() const;
void setBlueBufferSize(int size);
int blueBufferSize() const;
void setAlphaBufferSize(int size);
int alphaBufferSize() const;

void setSamples(int numSamples);
int samples() const;

void setSwapBehavior(SwapBehavior behavior);
SwapBehavior swapBehavior() const;

bool hasAlpha() const;

void setProfile(OpenGLContextProfile profile);
OpenGLContextProfile profile() const;

void setRenderableType(RenderableType type);
RenderableType renderableType() const;

void setMajorVersion(int majorVersion);
int majorVersion() const;

void setMinorVersion(int minorVersion);
int minorVersion() const;

QPair<int, int> version() const;
void setVersion(int major, int minor);

bool stereo() const;
void setStereo(bool enable);

void setOption(QSurfaceFormat::FormatOptions opt);
bool testOption(QSurfaceFormat::FormatOptions opt) const;

private:
QSurfaceFormatPrivate *d;

void detach();

friend  bool operator==(const QSurfaceFormat&, const QSurfaceFormat&);
friend  bool operator!=(const QSurfaceFormat&, const QSurfaceFormat&);

# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"
friend  QDebug operator<<(QDebug, const QSurfaceFormat &);

# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"
};

 bool operator==(const QSurfaceFormat&, const QSurfaceFormat&);
 bool operator!=(const QSurfaceFormat&, const QSurfaceFormat&);


# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"
 QDebug operator<<(QDebug, const QSurfaceFormat &);


# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"
 inline QFlags<QSurfaceFormat::FormatOptions::enum_type> operator|(QSurfaceFormat::FormatOptions::enum_type f1, QSurfaceFormat::FormatOptions::enum_type f2) { return QFlags<QSurfaceFormat::FormatOptions::enum_type>(f1) | f2; }  inline QFlags<QSurfaceFormat::FormatOptions::enum_type> operator|(QSurfaceFormat::FormatOptions::enum_type f1, QFlags<QSurfaceFormat::FormatOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSurfaceFormat::FormatOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

inline bool QSurfaceFormat::stereo() const
{
return testOption(QSurfaceFormat::StereoBuffers);
}




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"



class QPlatformSurface;

class QSurfacePrivate;

class  QSurface
{
public:
enum SurfaceClass {
Window,
Offscreen
};

enum SurfaceType {
RasterSurface,
OpenGLSurface
};

virtual ~QSurface();

SurfaceClass surfaceClass() const;

virtual QSurfaceFormat format() const = 0;
virtual QPlatformSurface *surfaceHandle() const = 0;

virtual SurfaceType surfaceType() const = 0;

virtual QSize size() const = 0;

protected:
explicit QSurface(SurfaceClass type);

SurfaceClass m_type;

QSurfacePrivate *m_reserved;
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qoffscreensurface.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qoffscreensurface.h"


class QOffscreenSurfacePrivate;

class QScreen;
class QPlatformOffscreenSurface;

class  QOffscreenSurface : public QObject, public QSurface
{
Q_OBJECT
inline QOffscreenSurfacePrivate* d_func() { return reinterpret_cast<QOffscreenSurfacePrivate *>(qGetPtrHelper(d_ptr)); } inline const QOffscreenSurfacePrivate* d_func() const { return reinterpret_cast<const QOffscreenSurfacePrivate *>(qGetPtrHelper(d_ptr)); } friend class QOffscreenSurfacePrivate;

public:

explicit QOffscreenSurface(QScreen *screen = 0);
virtual ~QOffscreenSurface();

SurfaceType surfaceType() const;

void create();
void destroy();

bool isValid() const;

void setFormat(const QSurfaceFormat &format);
QSurfaceFormat format() const;
QSurfaceFormat requestedFormat() const;

QSize size() const;

QScreen *screen() const;
void setScreen(QScreen *screen);

QPlatformOffscreenSurface *handle() const;

signals:
void screenChanged(QScreen *screen);

private slots:
void screenDestroyed(QObject *screen);

private:

QPlatformSurface *surfaceHandle() const;

QOffscreenSurface(const QOffscreenSurface &) ; QOffscreenSurface &operator=(const QOffscreenSurface &) ;
};




# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"

































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QSurfaceFormat"

# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"









# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"

























































# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
extern "C" {


# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



























# 41 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

















# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




















































































































































































































































































































































































































































































































































# 590 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"































































































































# 717 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




































# 753 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




























































# 813 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

























































# 870 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"






































# 908 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
















































































# 988 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"












































# 1032 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
























































































































# 1152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































# 2043 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"






































































































# 2145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"













































































# 2222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"













































# 2267 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"






































# 2305 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"















# 2320 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




# 2324 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

























# 2349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"














# 2363 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



# 2366 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



# 2369 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

























# 2394 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"





























































# 2455 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
















# 2471 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"










# 2481 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




































# 2517 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



















































































































































































































# 2728 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"










# 2738 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



























































































# 2829 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"


































































































































# 2959 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"










































# 3001 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



























# 3028 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"








































































































































































































































































































































































































































































































































































































































































































































# 3740 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




































































































































































































































































































































































# 4096 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"











# 4107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 5094 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"





# 5099 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"





























































































































































# 5256 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"










# 5266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"





























































# 5327 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"












































































































































































































# 5531 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
















































































# 5611 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"























# 5634 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"






















































# 5688 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"























































































# 5775 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

































































# 5840 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"























































# 5895 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"





# 5900 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"













# 5913 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

















































































































































































































# 6122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"















































































# 6201 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"




# 6205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

typedef char GLchar;



# 6210 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;



# 6216 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;



# 6222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

typedef char GLcharARB;
typedef unsigned int GLhandleARB;


# 6227 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"


# 6229 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef unsigned short GLhalfARB;



# 6233 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef unsigned short GLhalfNV;



# 6237 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"


# 6239 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"






























# 6269 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"






# 6275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;



# 6280 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef struct __GLsync *GLsync;



# 6286 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

struct _cl_context;
struct _cl_event;



# 6292 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);



# 6296 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);



# 6300 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);



# 6304 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLintptr GLvdpauSurfaceNV;



# 6308 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"

typedef GLint GLfixed;












































# 6354 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void ( * PFNGLBLENDEQUATIONPROC) (GLenum mode);
typedef void ( * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
typedef void ( * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
typedef void ( * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
typedef void ( * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
typedef void ( * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
typedef void ( * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
typedef void ( * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
typedef void ( * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
typedef void ( * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
typedef void ( * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
typedef void ( * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
typedef void ( * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void ( * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void ( * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void ( * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void ( * PFNGLRESETHISTOGRAMPROC) (GLenum target);
typedef void ( * PFNGLRESETMINMAXPROC) (GLenum target);




















































# 6444 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLACTIVETEXTUREPROC) (GLenum texture);
typedef void ( * PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);
typedef void ( * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
typedef void ( * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
typedef void ( * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
typedef void ( * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
typedef void ( * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
typedef void ( * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
typedef void ( * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void ( * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void ( * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
typedef void ( * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
typedef void ( * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void ( * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void ( * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void ( * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void ( * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void ( * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void ( * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void ( * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void ( * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
typedef void ( * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
typedef void ( * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
typedef void ( * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);



















































# 6541 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void ( * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void ( * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount);
typedef void ( * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
typedef void ( * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
typedef void ( * PFNGLFOGCOORDFPROC) (GLfloat coord);
typedef void ( * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
typedef void ( * PFNGLFOGCOORDDPROC) (GLdouble coord);
typedef void ( * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
typedef void ( * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void ( * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
typedef void ( * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void ( * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
typedef void ( * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void ( * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
typedef void ( * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
typedef void ( * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
typedef void ( * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
typedef void ( * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
typedef void ( * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void ( * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
typedef void ( * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
typedef void ( * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
typedef void ( * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
typedef void ( * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
typedef void ( * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
typedef void ( * PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
typedef void ( * PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
typedef void ( * PFNGLWINDOWPOS2IVPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
typedef void ( * PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
typedef void ( * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
typedef void ( * PFNGLWINDOWPOS3IVPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLWINDOWPOS3SVPROC) (const GLshort *v);

























# 6611 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
typedef void ( * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean ( * PFNGLISQUERYPROC) (GLuint id);
typedef void ( * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
typedef void ( * PFNGLENDQUERYPROC) (GLenum target);
typedef void ( * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void ( * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
typedef void ( * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
typedef void ( * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
typedef void ( * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
typedef GLboolean ( * PFNGLISBUFFERPROC) (GLuint buffer);
typedef void ( * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
typedef void ( * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
typedef void ( * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
typedef GLvoid* ( * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
typedef GLboolean ( * PFNGLUNMAPBUFFERPROC) (GLenum target);
typedef void ( * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);



































































































# 6729 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
typedef void ( * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
typedef void ( * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void ( * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void ( * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
typedef void ( * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
typedef void ( * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
typedef void ( * PFNGLCOMPILESHADERPROC) (GLuint shader);
typedef GLuint ( * PFNGLCREATEPROGRAMPROC) (void);
typedef GLuint ( * PFNGLCREATESHADERPROC) (GLenum type);
typedef void ( * PFNGLDELETEPROGRAMPROC) (GLuint program);
typedef void ( * PFNGLDELETESHADERPROC) (GLuint shader);
typedef void ( * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
typedef void ( * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void ( * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
typedef void ( * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void ( * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void ( * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
typedef GLint ( * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
typedef void ( * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
typedef void ( * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void ( * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
typedef void ( * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void ( * PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef GLint ( * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
typedef void ( * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
typedef void ( * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void ( * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
typedef GLboolean ( * PFNGLISPROGRAMPROC) (GLuint program);
typedef GLboolean ( * PFNGLISSHADERPROC) (GLuint shader);
typedef void ( * PFNGLLINKPROGRAMPROC) (GLuint program);
typedef void ( * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);
typedef void ( * PFNGLUSEPROGRAMPROC) (GLuint program);
typedef void ( * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
typedef void ( * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void ( * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
typedef void ( * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
typedef void ( * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLVALIDATEPROGRAMPROC) (GLuint program);
typedef void ( * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
typedef void ( * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
typedef void ( * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
typedef void ( * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void ( * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void ( * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
typedef void ( * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
typedef void ( * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void ( * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
typedef void ( * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
typedef void ( * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
typedef void ( * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);












# 6834 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);




# 6844 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
































































# 6908 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void ( * PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
typedef void ( * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
typedef void ( * PFNGLENABLEIPROC) (GLenum target, GLuint index);
typedef void ( * PFNGLDISABLEIPROC) (GLenum target, GLuint index);
typedef GLboolean ( * PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
typedef void ( * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
typedef void ( * PFNGLENDTRANSFORMFEEDBACKPROC) (void);
typedef void ( * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void ( * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);
typedef void ( * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void ( * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
typedef void ( * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
typedef void ( * PFNGLENDCONDITIONALRENDERPROC) (void);
typedef void ( * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
typedef void ( * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
typedef void ( * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
typedef void ( * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void ( * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
typedef void ( * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
typedef void ( * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void ( * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void ( * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
typedef void ( * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
typedef void ( * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
typedef void ( * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint ( * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
typedef void ( * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
typedef void ( * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
typedef void ( * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void ( * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void ( * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
typedef void ( * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void ( * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void ( * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void ( * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void ( * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte * ( * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);




# 6970 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"









# 6979 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void ( * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount);
typedef void ( * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
typedef void ( * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);




# 6987 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"










# 6997 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
typedef void ( * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
typedef void ( * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);




# 7004 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"













# 7017 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);




# 7022 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



















# 7041 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMINSAMPLESHADINGPROC) (GLfloat value);
typedef void ( * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
typedef void ( * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void ( * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void ( * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);




# 7050 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"











# 7061 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
















# 7077 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"































































# 7140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
typedef void ( * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
typedef void ( * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
typedef void ( * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
typedef void ( * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
typedef void ( * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
typedef void ( * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
typedef void ( * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
typedef void ( * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
typedef void ( * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
typedef void ( * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void ( * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void ( * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
typedef void ( * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
typedef void ( * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
typedef void ( * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void ( * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
typedef void ( * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void ( * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
typedef void ( * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void ( * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
typedef void ( * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void ( * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);










# 7184 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
typedef void ( * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
typedef void ( * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
typedef void ( * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);







# 7195 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSAMPLECOVERAGEARBPROC) (GLfloat value, GLboolean invert);





















# 7217 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
typedef void ( * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);












# 7236 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
















# 7254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
typedef void ( * PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
typedef void ( * PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
typedef void ( * PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
typedef void ( * PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
typedef void ( * PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
typedef void ( * PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
typedef void ( * PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
typedef void ( * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLVERTEXBLENDARBPROC) (GLint count);











# 7275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
typedef void ( * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
typedef void ( * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
typedef void ( * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
typedef void ( * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);


















































# 7330 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
typedef void ( * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
typedef void ( * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
typedef void ( * PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
typedef void ( * PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
typedef void ( * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
typedef void ( * PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);




































































# 7414 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
typedef void ( * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
typedef void ( * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
typedef void ( * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void ( * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void ( * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
typedef void ( * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
typedef void ( * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void ( * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
typedef void ( * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
typedef void ( * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
typedef void ( * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void ( * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
typedef void ( * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
typedef void ( * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
typedef void ( * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
typedef void ( * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
typedef void ( * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
typedef void ( * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
typedef void ( * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
typedef void ( * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
typedef void ( * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
typedef void ( * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
typedef void ( * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);
typedef void ( * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void ( * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
typedef GLboolean ( * PFNGLISPROGRAMARBPROC) (GLuint program);




# 7480 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"


















# 7498 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
typedef void ( * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
typedef void ( * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
typedef GLboolean ( * PFNGLISBUFFERARBPROC) (GLuint buffer);
typedef void ( * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
typedef void ( * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
typedef void ( * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
typedef GLvoid* ( * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
typedef GLboolean ( * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
typedef void ( * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);














# 7523 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
typedef void ( * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean ( * PFNGLISQUERYARBPROC) (GLuint id);
typedef void ( * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
typedef void ( * PFNGLENDQUERYARBPROC) (GLenum target);
typedef void ( * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
typedef void ( * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);













































# 7576 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
typedef GLhandleARB ( * PFNGLGETHANDLEARBPROC) (GLenum pname);
typedef void ( * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
typedef GLhandleARB ( * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
typedef void ( * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
typedef void ( * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
typedef GLhandleARB ( * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
typedef void ( * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
typedef void ( * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
typedef void ( * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
typedef void ( * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
typedef void ( * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
typedef void ( * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
typedef void ( * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
typedef void ( * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
typedef void ( * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
typedef void ( * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
typedef void ( * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
typedef GLint ( * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
typedef void ( * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef void ( * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
typedef void ( * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
typedef void ( * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);









# 7624 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
typedef void ( * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
typedef GLint ( * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);



























# 7654 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);











# 7666 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
























# 7691 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void ( * PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);


























# 7719 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLboolean ( * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
typedef void ( * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
typedef void ( * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
typedef void ( * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
typedef void ( * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef GLboolean ( * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
typedef void ( * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
typedef void ( * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
typedef void ( * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
typedef GLenum ( * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
typedef void ( * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void ( * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void ( * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void ( * PFNGLGENERATEMIPMAPPROC) (GLenum target);
typedef void ( * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void ( * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);














# 7753 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
typedef void ( * PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void ( * PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void ( * PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);











# 7768 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);








# 7777 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLvoid* ( * PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void ( * PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);







# 7786 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);


















# 7805 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDVERTEXARRAYPROC) (GLuint array);
typedef void ( * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
typedef void ( * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
typedef GLboolean ( * PFNGLISVERTEXARRAYPROC) (GLuint array);













# 7822 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
typedef void ( * PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void ( * PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef GLuint ( * PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
typedef void ( * PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void ( * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void ( * PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);











# 7840 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);


















# 7859 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
typedef void ( * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
typedef void ( * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex);
typedef void ( * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex);











# 7874 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROVOKINGVERTEXPROC) (GLenum mode);

















# 7892 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLsync ( * PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
typedef GLboolean ( * PFNGLISSYNCPROC) (GLsync sync);
typedef void ( * PFNGLDELETESYNCPROC) (GLsync sync);
typedef GLenum ( * PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void ( * PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void ( * PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);
typedef void ( * PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);










# 7909 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void ( * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void ( * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
typedef void ( * PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);














# 7927 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
typedef void ( * PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void ( * PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void ( * PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);







# 7938 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);
























# 7963 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
typedef void ( * PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
typedef void ( * PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
typedef GLboolean ( * PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
typedef void ( * PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void ( * PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);












# 7981 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef GLint ( * PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);




























# 8011 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);
typedef void ( * PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);
typedef GLboolean ( * PFNGLISSAMPLERPROC) (GLuint sampler);
typedef void ( * PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
typedef void ( * PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
typedef void ( * PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
typedef void ( * PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
typedef void ( * PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);
typedef void ( * PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
typedef void ( * PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);
typedef void ( * PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);
typedef void ( * PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);
typedef void ( * PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);





















# 8046 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
typedef void ( * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);
typedef void ( * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);












































# 8093 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
typedef void ( * PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);
typedef void ( * PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
typedef void ( * PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);
typedef void ( * PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
typedef void ( * PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);
typedef void ( * PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
typedef void ( * PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);
typedef void ( * PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
typedef void ( * PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);
typedef void ( * PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
typedef void ( * PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);
typedef void ( * PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
typedef void ( * PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);
typedef void ( * PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void ( * PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void ( * PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void ( * PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void ( * PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void ( * PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void ( * PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
typedef void ( * PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
typedef void ( * PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
typedef void ( * PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);
typedef void ( * PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void ( * PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);
typedef void ( * PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
typedef void ( * PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);
typedef void ( * PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
typedef void ( * PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);
typedef void ( * PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( * PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void ( * PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( * PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void ( * PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( * PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void ( * PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void ( * PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);








# 8139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const GLvoid *indirect);
typedef void ( * PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const GLvoid *indirect);




























# 8169 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
typedef void ( * PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
typedef void ( * PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);














# 8201 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLint ( * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
typedef GLuint ( * PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
typedef void ( * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void ( * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void ( * PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void ( * PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void ( * PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
typedef void ( * PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);








# 8217 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
typedef void ( * PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);

















# 8236 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
typedef void ( * PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
typedef void ( * PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
typedef GLboolean ( * PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
typedef void ( * PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
typedef void ( * PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);










# 8253 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
typedef void ( * PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
typedef void ( * PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
typedef void ( * PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);











# 8268 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLRELEASESHADERCOMPILERPROC) (void);
typedef void ( * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
typedef void ( * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void ( * PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);
typedef void ( * PFNGLCLEARDEPTHFPROC) (GLfloat d);









# 8282 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
typedef void ( * PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
typedef void ( * PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);


































































# 8351 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void ( * PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
typedef GLuint ( * PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar* const *strings);
typedef void ( * PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void ( * PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);
typedef void ( * PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
typedef GLboolean ( * PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void ( * PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);
typedef void ( * PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);
typedef void ( * PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);
typedef void ( * PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);
typedef void ( * PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);
typedef void ( * PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void ( * PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void ( * PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void ( * PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void ( * PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( * PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( * PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void ( * PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void ( * PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( * PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( * PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void ( * PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void ( * PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
typedef void ( * PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
















# 8427 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
typedef void ( * PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void ( * PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);
















# 8453 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);
typedef void ( * PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void ( * PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);
typedef void ( * PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void ( * PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);
typedef void ( * PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);
typedef void ( * PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
typedef void ( * PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);







# 8470 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLsync ( * PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);










# 8481 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void ( * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void ( * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const GLvoid *userParam);
typedef GLuint ( * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);


























# 8511 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLenum ( * PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
typedef void ( * PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
typedef void ( * PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
typedef void ( * PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
typedef void ( * PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);
typedef void ( * PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);
typedef void ( * PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);
typedef void ( * PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);
typedef void ( * PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
typedef void ( * PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
typedef void ( * PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
typedef void ( * PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
typedef void ( * PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
typedef void ( * PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
typedef void ( * PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
typedef void ( * PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
typedef void ( * PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void ( * PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void ( * PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void ( * PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);













# 8544 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void ( * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
typedef void ( * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);












# 8559 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);
typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);















# 8576 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);











# 8588 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);








# 8597 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void ( * PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);
















# 8615 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void ( * PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void ( * PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void ( * PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);




















# 8641 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void ( * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void ( * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
typedef GLuint ( * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef void ( * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
typedef void ( * PFNGLPOPDEBUGGROUPPROC) (void);
typedef void ( * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
typedef void ( * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void ( * PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
typedef void ( * PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);














# 8665 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void ( * PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void ( * PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void ( * PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *data);








# 8677 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void ( * PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);







# 8686 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);







# 8694 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);


















# 8713 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void ( * PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void ( * PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( * PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( * PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
typedef void ( * PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
typedef void ( * PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void ( * PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);


























# 8751 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);
typedef void ( * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);







# 8762 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);












# 8775 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void ( * PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
typedef void ( * PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void ( * PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);
typedef void ( * PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
typedef void ( * PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);








# 8789 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void ( * PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);












# 8803 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
typedef GLuint ( * PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void ( * PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void ( * PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
typedef GLint ( * PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);
typedef GLint ( * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);















# 8824 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);












# 8837 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( * PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);














# 8853 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void ( * PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void ( * PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void ( * PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);











# 8868 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDCOLOREXTPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);







# 8876 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);












# 8889 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);








# 8899 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
typedef void ( * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);








# 8909 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);











# 8922 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void ( * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void ( * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
















# 8943 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void ( * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
typedef void ( * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void ( * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
typedef void ( * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
typedef void ( * PFNGLRESETMINMAXEXTPROC) (GLenum target);



















# 8972 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
typedef void ( * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
typedef void ( * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
typedef void ( * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
typedef void ( * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
typedef void ( * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
typedef void ( * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);

















# 9002 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
typedef void ( * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
typedef void ( * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);







# 9016 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);












# 9029 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
typedef void ( * PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
typedef void ( * PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
typedef void ( * PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);








# 9043 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);




















# 9065 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLboolean ( * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
typedef void ( * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
typedef void ( * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
typedef void ( * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
typedef GLboolean ( * PFNGLISTEXTUREEXTPROC) (GLuint texture);
typedef void ( * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);








# 9079 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
typedef void ( * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);








# 9089 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
typedef void ( * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
















# 9107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
typedef void ( * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);



















# 9128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLARRAYELEMENTEXTPROC) (GLint i);
typedef void ( * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
typedef void ( * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
typedef void ( * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
typedef void ( * PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
typedef void ( * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
typedef void ( * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
typedef void ( * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
typedef void ( * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);































# 9168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);






























# 9199 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
typedef void ( * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);












# 9215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);








# 9225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);












# 9239 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLint ( * PFNGLGETINSTRUMENTSSGIXPROC) (void);
typedef void ( * PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
typedef GLint ( * PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
typedef void ( * PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
typedef void ( * PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
typedef void ( * PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);











# 9256 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);







# 9264 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);










# 9275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
typedef void ( * PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
typedef void ( * PFNGLDEFORMSGIXPROC) (GLbitfield mask);
typedef void ( * PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);







# 9286 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);







# 9294 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFLUSHRASTERSGIXPROC) (void);












# 9307 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
typedef void ( * PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
















# 9325 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void ( * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
















# 9347 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
typedef void ( * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);











# 9360 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLHINTPGIPROC) (GLenum target, GLint mode);










# 9371 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
typedef void ( * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);
typedef void ( * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
















# 9391 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
typedef void ( * PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
typedef void ( * PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
typedef void ( * PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);



























# 9424 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);







# 9432 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);












# 9445 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
typedef void ( * PFNGLUNLOCKARRAYSEXTPROC) (void);








# 9455 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
typedef void ( * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);




























# 9485 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
typedef void ( * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
typedef void ( * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
typedef void ( * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
typedef void ( * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
typedef void ( * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
typedef void ( * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
typedef void ( * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
typedef void ( * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
typedef void ( * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
typedef void ( * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
typedef void ( * PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);















# 9518 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);

















# 9536 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
typedef void ( * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
typedef void ( * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);




















# 9559 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
typedef GLint ( * PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
typedef GLint ( * PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
typedef GLuint ( * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
typedef void ( * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
typedef GLboolean ( * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);


















# 9583 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
typedef void ( * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);
typedef void ( * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
typedef void ( * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
















# 9603 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
typedef void ( * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);



































# 9644 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
typedef void ( * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
typedef void ( * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
typedef void ( * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
typedef void ( * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
typedef void ( * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
typedef void ( * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
typedef void ( * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
typedef void ( * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
typedef void ( * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
typedef void ( * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
typedef void ( * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
typedef void ( * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
typedef void ( * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
typedef void ( * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
typedef void ( * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
typedef void ( * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);







# 9668 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);








# 9677 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void ( * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);











# 9690 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
typedef void ( * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
typedef void ( * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
typedef void ( * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
typedef void ( * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
































# 9727 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
typedef void ( * PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
typedef void ( * PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
typedef void ( * PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
typedef void ( * PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
typedef void ( * PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
typedef void ( * PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
typedef void ( * PFNGLTANGENT3IVEXTPROC) (const GLint *v);
typedef void ( * PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
typedef void ( * PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
typedef void ( * PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
typedef void ( * PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
typedef void ( * PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
typedef void ( * PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
typedef void ( * PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
typedef void ( * PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
typedef void ( * PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
typedef void ( * PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
typedef void ( * PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
typedef void ( * PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
typedef void ( * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);























# 9772 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFINISHTEXTURESUNXPROC) (void);














# 9787 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
typedef void ( * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
typedef void ( * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
typedef void ( * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
typedef void ( * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
typedef void ( * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
typedef void ( * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
typedef void ( * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);













# 9808 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
typedef void ( * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
typedef void ( * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
typedef void ( * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
typedef void ( * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
typedef void ( * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
typedef void ( * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);














































# 9861 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef void ( * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
typedef void ( * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
typedef void ( * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
typedef void ( * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);







# 9908 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);







# 9916 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);













































# 9962 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
typedef void ( * PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
typedef void ( * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);












# 9977 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
typedef void ( * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const GLvoid *pointer);



















# 9998 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
typedef void ( * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
typedef void ( * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
typedef void ( * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void ( * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef void ( * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef void ( * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
typedef void ( * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
typedef void ( * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);























# 10034 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLRESIZEBUFFERSMESAPROC) (void);






























# 10065 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
typedef void ( * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
typedef void ( * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
typedef void ( * PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
typedef void ( * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
typedef void ( * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
typedef void ( * PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
typedef void ( * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
typedef void ( * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
typedef void ( * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
typedef void ( * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);












# 10101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
typedef void ( * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);














# 10117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
typedef void ( * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
typedef void ( * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
typedef void ( * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
typedef void ( * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
typedef void ( * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
typedef void ( * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
typedef void ( * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);































# 10156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);








# 10165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
typedef void ( * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);























# 10190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);







# 10198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);





















# 10220 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
typedef void ( * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
typedef GLboolean ( * PFNGLISFENCENVPROC) (GLuint fence);
typedef GLboolean ( * PFNGLTESTFENCENVPROC) (GLuint fence);
typedef void ( * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
typedef void ( * PFNGLFINISHFENCENVPROC) (GLuint fence);
typedef void ( * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);















# 10242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
typedef void ( * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
typedef void ( * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void ( * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);












# 10263 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);


























































































# 10355 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLboolean ( * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
typedef void ( * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
typedef void ( * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
typedef void ( * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
typedef void ( * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
typedef void ( * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
typedef void ( * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void ( * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
typedef void ( * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void ( * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
typedef GLboolean ( * PFNGLISPROGRAMNVPROC) (GLuint id);
typedef void ( * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
typedef void ( * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
typedef void ( * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
typedef void ( * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLdouble *v);
typedef void ( * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *v);
typedef void ( * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
typedef void ( * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void ( * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
typedef void ( * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
typedef void ( * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
typedef void ( * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void ( * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
typedef void ( * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
typedef void ( * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void ( * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
typedef void ( * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);


































# 10453 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
typedef void ( * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
typedef void ( * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
typedef void ( * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);




















# 10477 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLuint ( * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
typedef void ( * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
typedef void ( * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
typedef void ( * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
typedef void ( * PFNGLENDFRAGMENTSHADERATIPROC) (void);
typedef void ( * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
typedef void ( * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
typedef void ( * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void ( * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void ( * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void ( * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef void ( * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef void ( * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef void ( * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);








# 10499 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);


















# 10519 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLuint ( * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);
typedef GLboolean ( * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void ( * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
typedef void ( * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void ( * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void ( * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void ( * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
typedef void ( * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef void ( * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
















































# 10579 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
typedef void ( * PFNGLENDVERTEXSHADEREXTPROC) (void);
typedef void ( * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
typedef GLuint ( * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
typedef void ( * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
typedef void ( * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
typedef void ( * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef void ( * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef void ( * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void ( * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef void ( * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef void ( * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
typedef GLuint ( * PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef void ( * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
typedef void ( * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
typedef void ( * PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
typedef void ( * PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
typedef void ( * PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
typedef void ( * PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
typedef void ( * PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
typedef void ( * PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
typedef void ( * PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
typedef void ( * PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
typedef void ( * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
typedef void ( * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef void ( * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
typedef GLuint ( * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
typedef GLuint ( * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
typedef GLuint ( * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
typedef GLuint ( * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
typedef GLuint ( * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
typedef GLboolean ( * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
typedef void ( * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void ( * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void ( * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void ( * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);
typedef void ( * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void ( * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void ( * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
typedef void ( * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
typedef void ( * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
typedef void ( * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);



















































# 10672 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
typedef void ( * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void ( * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
typedef void ( * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
typedef void ( * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
typedef void ( * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void ( * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
typedef void ( * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void ( * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
typedef void ( * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void ( * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
typedef void ( * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
typedef void ( * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
typedef void ( * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void ( * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
typedef void ( * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void ( * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
typedef void ( * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void ( * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
typedef void ( * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void ( * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void ( * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void ( * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void ( * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void ( * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
typedef void ( * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void ( * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void ( * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
typedef void ( * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
typedef void ( * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
typedef void ( * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
typedef void ( * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
typedef void ( * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
typedef void ( * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
typedef void ( * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
typedef void ( * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
typedef void ( * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
typedef void ( * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
typedef void ( * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);









# 10726 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);
typedef void ( * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
typedef void ( * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);







# 10736 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);

























# 10762 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
typedef void ( * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
typedef GLboolean ( * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
typedef void ( * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
typedef void ( * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
typedef void ( * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
typedef void ( * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);








# 10777 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
typedef void ( * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);



















# 10798 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);



















# 10818 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);
typedef void ( * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
typedef void ( * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef void ( * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
typedef void ( * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);














# 10837 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
typedef void ( * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
typedef void ( * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean ( * PFNGLISFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean ( * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
typedef void ( * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
typedef GLboolean ( * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
typedef void ( * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);










# 10855 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
typedef void ( * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
typedef void ( * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);
typedef GLboolean ( * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);









# 10868 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
typedef void ( * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
typedef void ( * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);















# 10886 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);




# 10891 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"



















# 10910 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"









# 10919 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
typedef void ( * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
typedef void ( * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);




















































# 10977 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
typedef void ( * PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void ( * PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void ( * PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
typedef void ( * PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void ( * PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef void ( * PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
typedef void ( * PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
typedef void ( * PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void ( * PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void ( * PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
typedef void ( * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void ( * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
typedef void ( * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void ( * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef void ( * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void ( * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef void ( * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
typedef void ( * PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
typedef void ( * PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
typedef void ( * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef void ( * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
typedef void ( * PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
typedef void ( * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
typedef void ( * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
typedef void ( * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
typedef void ( * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef void ( * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef void ( * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
typedef void ( * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);








# 11031 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, const GLvoid *pointer);
typedef void ( * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);








# 11041 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPRIMITIVERESTARTNVPROC) (void);
typedef void ( * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
















# 11059 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLvoid* ( * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
typedef void ( * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);








# 11069 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void ( * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);









# 11080 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
typedef void ( * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);




























# 11111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMULTITEXCOORD1BOESPROC) (GLenum texture, GLbyte s);
typedef void ( * PFNGLMULTITEXCOORD1BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void ( * PFNGLMULTITEXCOORD2BOESPROC) (GLenum texture, GLbyte s, GLbyte t);
typedef void ( * PFNGLMULTITEXCOORD2BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void ( * PFNGLMULTITEXCOORD3BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r);
typedef void ( * PFNGLMULTITEXCOORD3BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void ( * PFNGLMULTITEXCOORD4BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void ( * PFNGLMULTITEXCOORD4BVOESPROC) (GLenum texture, const GLbyte *coords);
typedef void ( * PFNGLTEXCOORD1BOESPROC) (GLbyte s);
typedef void ( * PFNGLTEXCOORD1BVOESPROC) (const GLbyte *coords);
typedef void ( * PFNGLTEXCOORD2BOESPROC) (GLbyte s, GLbyte t);
typedef void ( * PFNGLTEXCOORD2BVOESPROC) (const GLbyte *coords);
typedef void ( * PFNGLTEXCOORD3BOESPROC) (GLbyte s, GLbyte t, GLbyte r);
typedef void ( * PFNGLTEXCOORD3BVOESPROC) (const GLbyte *coords);
typedef void ( * PFNGLTEXCOORD4BOESPROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef void ( * PFNGLTEXCOORD4BVOESPROC) (const GLbyte *coords);
typedef void ( * PFNGLVERTEX2BOESPROC) (GLbyte x);
typedef void ( * PFNGLVERTEX2BVOESPROC) (const GLbyte *coords);
typedef void ( * PFNGLVERTEX3BOESPROC) (GLbyte x, GLbyte y);
typedef void ( * PFNGLVERTEX3BVOESPROC) (const GLbyte *coords);
typedef void ( * PFNGLVERTEX4BOESPROC) (GLbyte x, GLbyte y, GLbyte z);
typedef void ( * PFNGLVERTEX4BVOESPROC) (const GLbyte *coords);














































































































# 11243 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLACCUMXOESPROC) (GLenum op, GLfixed value);
typedef void ( * PFNGLALPHAFUNCXOESPROC) (GLenum func, GLfixed ref);
typedef void ( * PFNGLBITMAPXOESPROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
typedef void ( * PFNGLBLENDCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void ( * PFNGLCLEARACCUMXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void ( * PFNGLCLEARCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void ( * PFNGLCLEARDEPTHXOESPROC) (GLfixed depth);
typedef void ( * PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation);
typedef void ( * PFNGLCOLOR3XOESPROC) (GLfixed red, GLfixed green, GLfixed blue);
typedef void ( * PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef void ( * PFNGLCOLOR3XVOESPROC) (const GLfixed *components);
typedef void ( * PFNGLCOLOR4XVOESPROC) (const GLfixed *components);
typedef void ( * PFNGLCONVOLUTIONPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void ( * PFNGLCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
typedef void ( * PFNGLDEPTHRANGEXOESPROC) (GLfixed n, GLfixed f);
typedef void ( * PFNGLEVALCOORD1XOESPROC) (GLfixed u);
typedef void ( * PFNGLEVALCOORD2XOESPROC) (GLfixed u, GLfixed v);
typedef void ( * PFNGLEVALCOORD1XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLEVALCOORD2XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLFEEDBACKBUFFERXOESPROC) (GLsizei n, GLenum type, const GLfixed *buffer);
typedef void ( * PFNGLFOGXOESPROC) (GLenum pname, GLfixed param);
typedef void ( * PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *param);
typedef void ( * PFNGLFRUSTUMXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void ( * PFNGLGETCLIPPLANEXOESPROC) (GLenum plane, GLfixed *equation);
typedef void ( * PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETMAPXVOESPROC) (GLenum target, GLenum query, GLfixed *v);
typedef void ( * PFNGLGETMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);
typedef void ( * PFNGLGETPIXELMAPXVPROC) (GLenum map, GLint size, GLfixed *values);
typedef void ( * PFNGLGETTEXENVXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETTEXLEVELPARAMETERXVOESPROC) (GLenum target, GLint level, GLenum pname, GLfixed *params);
typedef void ( * PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
typedef void ( * PFNGLINDEXXOESPROC) (GLfixed component);
typedef void ( * PFNGLINDEXXVOESPROC) (const GLfixed *component);
typedef void ( * PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param);
typedef void ( * PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *param);
typedef void ( * PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param);
typedef void ( * PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params);
typedef void ( * PFNGLLINEWIDTHXOESPROC) (GLfixed width);
typedef void ( * PFNGLLOADMATRIXXOESPROC) (const GLfixed *m);
typedef void ( * PFNGLLOADTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);
typedef void ( * PFNGLMAP1XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
typedef void ( * PFNGLMAP2XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
typedef void ( * PFNGLMAPGRID1XOESPROC) (GLint n, GLfixed u1, GLfixed u2);
typedef void ( * PFNGLMAPGRID2XOESPROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
typedef void ( * PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);
typedef void ( * PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *param);
typedef void ( * PFNGLMULTMATRIXXOESPROC) (const GLfixed *m);
typedef void ( * PFNGLMULTTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);
typedef void ( * PFNGLMULTITEXCOORD1XOESPROC) (GLenum texture, GLfixed s);
typedef void ( * PFNGLMULTITEXCOORD2XOESPROC) (GLenum texture, GLfixed s, GLfixed t);
typedef void ( * PFNGLMULTITEXCOORD3XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r);
typedef void ( * PFNGLMULTITEXCOORD4XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void ( * PFNGLMULTITEXCOORD1XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void ( * PFNGLMULTITEXCOORD2XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void ( * PFNGLMULTITEXCOORD3XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void ( * PFNGLMULTITEXCOORD4XVOESPROC) (GLenum texture, const GLfixed *coords);
typedef void ( * PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz);
typedef void ( * PFNGLNORMAL3XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLORTHOXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef void ( * PFNGLPASSTHROUGHXOESPROC) (GLfixed token);
typedef void ( * PFNGLPIXELMAPXPROC) (GLenum map, GLint size, const GLfixed *values);
typedef void ( * PFNGLPIXELSTOREXPROC) (GLenum pname, GLfixed param);
typedef void ( * PFNGLPIXELTRANSFERXOESPROC) (GLenum pname, GLfixed param);
typedef void ( * PFNGLPIXELZOOMXOESPROC) (GLfixed xfactor, GLfixed yfactor);
typedef void ( * PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params);
typedef void ( * PFNGLPOINTSIZEXOESPROC) (GLfixed size);
typedef void ( * PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units);
typedef void ( * PFNGLPRIORITIZETEXTURESXOESPROC) (GLsizei n, const GLuint *textures, const GLfixed *priorities);
typedef void ( * PFNGLRASTERPOS2XOESPROC) (GLfixed x, GLfixed y);
typedef void ( * PFNGLRASTERPOS3XOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void ( * PFNGLRASTERPOS4XOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w);
typedef void ( * PFNGLRASTERPOS2XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLRASTERPOS3XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLRASTERPOS4XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLRECTXOESPROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
typedef void ( * PFNGLRECTXVOESPROC) (const GLfixed *v1, const GLfixed *v2);
typedef void ( * PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
typedef void ( * PFNGLSAMPLECOVERAGEOESPROC) (GLfixed value, GLboolean invert);
typedef void ( * PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void ( * PFNGLTEXCOORD1XOESPROC) (GLfixed s);
typedef void ( * PFNGLTEXCOORD2XOESPROC) (GLfixed s, GLfixed t);
typedef void ( * PFNGLTEXCOORD3XOESPROC) (GLfixed s, GLfixed t, GLfixed r);
typedef void ( * PFNGLTEXCOORD4XOESPROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef void ( * PFNGLTEXCOORD1XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLTEXCOORD2XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLTEXCOORD3XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLTEXCOORD4XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void ( * PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
typedef void ( * PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param);
typedef void ( * PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params);
typedef void ( * PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);
typedef void ( * PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
typedef void ( * PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void ( * PFNGLVERTEX2XOESPROC) (GLfixed x);
typedef void ( * PFNGLVERTEX3XOESPROC) (GLfixed x, GLfixed y);
typedef void ( * PFNGLVERTEX4XOESPROC) (GLfixed x, GLfixed y, GLfixed z);
typedef void ( * PFNGLVERTEX2XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLVERTEX3XVOESPROC) (const GLfixed *coords);
typedef void ( * PFNGLVERTEX4XVOESPROC) (const GLfixed *coords);












# 11359 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
typedef void ( * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void ( * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void ( * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation);
typedef void ( * PFNGLCLEARDEPTHFOESPROC) (GLclampd depth);
typedef void ( * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat *equation);















# 11380 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLbitfield ( * PFNGLQUERYMATRIXXOESPROC) (const GLfixed *mantissa, const GLint *exponent);







# 11388 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);











# 11400 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);



















































# 11452 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLboolean ( * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
typedef void ( * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
typedef void ( * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);
typedef void ( * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);
typedef void ( * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef GLboolean ( * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
typedef void ( * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
typedef void ( * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);
typedef void ( * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);
typedef GLenum ( * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
typedef void ( * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void ( * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void ( * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void ( * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);







# 11476 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const GLvoid *string);











# 11488 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);











# 11500 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);







# 11508 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);












# 11521 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
typedef void ( * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);








# 11531 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void ( * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);








# 11541 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);






















# 11565 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void ( * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void ( * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void ( * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
typedef void ( * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void ( * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void ( * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
typedef void ( * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
typedef void ( * PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
typedef void ( * PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);










# 11591 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
typedef void ( * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void ( * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void ( * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);







# 11602 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);





























# 11632 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
typedef void ( * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
typedef void ( * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
typedef void ( * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
typedef void ( * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
typedef void ( * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void ( * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void ( * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
typedef void ( * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
typedef void ( * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
typedef void ( * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
typedef void ( * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
typedef void ( * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
typedef void ( * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);

















# 11672 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
typedef void ( * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
typedef GLint ( * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
typedef void ( * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
typedef void ( * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
typedef void ( * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void ( * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void ( * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);








# 11691 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void ( * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);















# 11708 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);





















# 11730 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
typedef void ( * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
typedef void ( * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);











# 11744 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);

















# 11762 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
typedef void ( * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
typedef void ( * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);












# 11777 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void ( * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
typedef void ( * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
typedef void ( * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef void ( * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
typedef GLboolean ( * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);


















# 11801 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
typedef void ( * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
typedef void ( * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
typedef void ( * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void ( * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void ( * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
typedef void ( * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
typedef GLint ( * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
typedef void ( * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void ( * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
typedef void ( * PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);









# 11822 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
typedef GLint ( * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
typedef GLintptr ( * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);












# 11837 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
typedef void ( * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
typedef void ( * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
typedef void ( * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);







# 11850 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLFRAMETERMINATORGREMEDYPROC) (void);








# 11859 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
typedef void ( * PFNGLENDCONDITIONALRENDERNVPROC) (void);












# 11873 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
typedef void ( * PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef void ( * PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);
typedef void ( * PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);
typedef void ( * PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);













# 11892 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
typedef void ( * PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
typedef void ( * PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void ( * PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void ( * PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
typedef void ( * PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
typedef void ( * PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);




















































































































































































































# 12111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void ( * PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
typedef void ( * PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void ( * PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void ( * PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void ( * PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void ( * PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
typedef void ( * PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void ( * PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void ( * PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void ( * PFNGLMATRIXPOPEXTPROC) (GLenum mode);
typedef void ( * PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
typedef void ( * PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void ( * PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void ( * PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
typedef void ( * PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
typedef void ( * PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void ( * PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void ( * PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void ( * PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
typedef void ( * PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void ( * PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void ( * PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void ( * PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void ( * PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void ( * PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
typedef void ( * PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void ( * PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
typedef void ( * PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( * PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
typedef void ( * PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void ( * PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
typedef void ( * PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void ( * PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void ( * PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void ( * PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
typedef void ( * PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void ( * PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void ( * PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
typedef void ( * PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
typedef void ( * PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
typedef void ( * PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
typedef void ( * PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
typedef void ( * PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLvoid* *data);
typedef void ( * PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, GLvoid *img);
typedef void ( * PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
typedef void ( * PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
typedef void ( * PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
typedef void ( * PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, GLvoid *string);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
typedef void ( * PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
typedef void ( * PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
typedef void ( * PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void ( * PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
typedef void ( * PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void ( * PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
typedef void ( * PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
typedef void ( * PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void ( * PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void ( * PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void ( * PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
typedef void ( * PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void ( * PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void ( * PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void ( * PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void ( * PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
typedef void ( * PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void ( * PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void ( * PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void ( * PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void ( * PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
typedef void ( * PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
typedef GLvoid* ( * PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
typedef GLboolean ( * PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
typedef GLvoid* ( * PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void ( * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void ( * PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void ( * PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
typedef void ( * PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, GLvoid* *params);
typedef void ( * PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
typedef void ( * PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void ( * PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void ( * PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef GLenum ( * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void ( * PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void ( * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void ( * PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
typedef void ( * PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
typedef void ( * PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void ( * PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void ( * PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
typedef void ( * PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void ( * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void ( * PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void ( * PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void ( * PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);
typedef void ( * PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void ( * PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);

















# 12334 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);
typedef void ( * PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
typedef void ( * PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);













# 12350 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
typedef void ( * PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);
typedef void ( * PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);
typedef GLboolean ( * PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
typedef void ( * PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
typedef void ( * PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);





















# 12378 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
typedef void ( * PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
typedef void ( * PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
typedef void ( * PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
typedef void ( * PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, GLvoid *data);
typedef void ( * PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
typedef void ( * PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
typedef void ( * PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
typedef void ( * PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
typedef void ( * PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
typedef void ( * PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);












# 12401 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
typedef void ( * PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);







# 12410 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);














# 12425 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
typedef void ( * PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void ( * PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
typedef void ( * PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);








# 12437 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const GLvoid *pointer);
typedef void ( * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid* *params);

















# 12456 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef void ( * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
typedef GLboolean ( * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
typedef void ( * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
typedef void ( * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
typedef void ( * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
typedef void ( * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);













# 12476 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLenum ( * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
typedef GLenum ( * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
typedef void ( * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);


























# 12505 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void ( * PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef void ( * PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef void ( * PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
typedef void ( * PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
typedef void ( * PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
typedef void ( * PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
typedef GLenum ( * PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
typedef void ( * PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
typedef void ( * PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
typedef void ( * PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);







# 12524 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);









# 12534 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
typedef void ( * PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
typedef GLuint ( * PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
























# 12561 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
typedef void ( * PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
typedef GLboolean ( * PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
typedef void ( * PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
typedef void ( * PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
typedef GLboolean ( * PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
typedef void ( * PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
typedef void ( * PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
typedef void ( * PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
typedef void ( * PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
typedef void ( * PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
typedef void ( * PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
typedef void ( * PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);


















# 12593 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void ( * PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void ( * PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void ( * PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void ( * PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void ( * PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void ( * PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
typedef void ( * PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
typedef void ( * PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
typedef void ( * PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void ( * PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void ( * PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);







# 12612 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXTUREBARRIERNVPROC) (void);




















# 12633 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void ( * PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);

















# 12652 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
typedef void ( * PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
typedef void ( * PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void ( * PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void ( * PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);
typedef void ( * PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
typedef void ( * PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);
typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);








# 12671 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);
typedef void ( * PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);







































# 12712 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
typedef void ( * PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void ( * PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void ( * PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void ( * PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
typedef void ( * PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void ( * PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void ( * PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void ( * PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);
typedef void ( * PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
typedef void ( * PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void ( * PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void ( * PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void ( * PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
typedef void ( * PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void ( * PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void ( * PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void ( * PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void ( * PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);

































# 12778 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
typedef void ( * PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void ( * PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void ( * PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void ( * PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
typedef void ( * PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void ( * PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void ( * PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void ( * PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void ( * PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
typedef void ( * PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);
typedef void ( * PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
typedef void ( * PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);













# 12810 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);
typedef void ( * PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);
typedef GLboolean ( * PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);










# 12823 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void ( * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
typedef void ( * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, GLvoid *userParam);
typedef GLuint ( * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
















# 12843 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLVDPAUINITNVPROC) (const GLvoid *vdpDevice, const GLvoid *getProcAddress);
typedef void ( * PFNGLVDPAUFININVPROC) (void);
typedef GLvdpauSurfaceNV ( * PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef GLvdpauSurfaceNV ( * PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
typedef void ( * PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
typedef void ( * PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
typedef void ( * PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void ( * PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
typedef void ( * PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
typedef void ( * PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
























# 12877 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void ( * PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void ( * PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void ( * PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef void ( * PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef void ( * PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);











# 12894 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat *val);







# 12902 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLsync ( * PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);








# 12911 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
typedef void ( * PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);



























































# 12972 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLuint ( * PFNGLGENPATHSNVPROC) (GLsizei range);
typedef void ( * PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);
typedef GLboolean ( * PFNGLISPATHNVPROC) (GLuint path);
typedef void ( * PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
typedef void ( * PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
typedef void ( * PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
typedef void ( * PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords);
typedef void ( * PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const GLvoid *pathString);
typedef void ( * PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void ( * PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void ( * PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
typedef void ( * PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
typedef void ( * PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void ( * PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
typedef void ( * PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
typedef void ( * PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
typedef void ( * PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
typedef void ( * PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
typedef void ( * PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
typedef void ( * PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
typedef void ( * PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
typedef void ( * PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
typedef void ( * PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
typedef void ( * PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void ( * PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void ( * PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
typedef void ( * PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
typedef void ( * PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void ( * PFNGLPATHFOGGENNVPROC) (GLenum genMode);
typedef void ( * PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void ( * PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
typedef void ( * PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void ( * PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void ( * PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
typedef void ( * PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
typedef void ( * PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
typedef void ( * PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
typedef void ( * PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
typedef void ( * PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void ( * PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
typedef void ( * PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef void ( * PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
typedef void ( * PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
typedef void ( * PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
typedef void ( * PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
typedef GLboolean ( * PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean ( * PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
typedef GLfloat ( * PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef GLboolean ( * PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);











# 13032 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value);



























# 13060 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef GLuint64 ( * PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);
typedef GLuint64 ( * PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);
typedef void ( * PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef void ( * PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef GLuint64 ( * PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void ( * PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);
typedef void ( * PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);
typedef void ( * PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);
typedef void ( * PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value);
typedef void ( * PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);
typedef void ( * PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean ( * PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
typedef GLboolean ( * PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);
































# 13105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id);
typedef void ( * PFNGLENDCONDITIONALRENDERNVXPROC) (void);








# 13115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef void ( * PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);













# 13130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLSYNCTEXTUREINTELPROC) (GLuint texture);
typedef void ( * PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level);
typedef GLvoid* ( * PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, const GLint *stride, const GLenum *layout);







# 13140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
typedef void ( * PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);




# 13145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglext.h"
}



# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"




# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"













# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"







# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"













# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"



























# 175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"
















































































# 255 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"




# 259 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"

typedef ptrdiff_t qopengl_GLintptr;
typedef ptrdiff_t qopengl_GLsizeiptr;















# 277 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"





# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"





















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"


# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"


class QOpenGLContext;







# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"
struct QOpenGLVersionStatus
{
enum OpenGLStatus {
CoreStatus,
DeprecatedStatus,
InvalidStatus
};

QOpenGLVersionStatus()
: version(qMakePair(0, 0)),
status(InvalidStatus)
{}

QOpenGLVersionStatus(int majorVersion, int minorVersion, QOpenGLVersionStatus::OpenGLStatus functionStatus)
: version(qMakePair(majorVersion, minorVersion)),
status(functionStatus)
{}

QPair<int, int> version;
OpenGLStatus status;
};

inline uint qHash(const QOpenGLVersionStatus &v, uint seed = 0)
{
return qHash(static_cast<int>(v.status * 1000)
+ v.version.first * 100 + v.version.second * 10, seed);
}

inline bool operator==(const QOpenGLVersionStatus &lhs, const QOpenGLVersionStatus &rhs)
{
if (lhs.status != rhs.status)
return false;
return lhs.version == rhs.version;
}

inline bool operator!=(const QOpenGLVersionStatus &lhs, const QOpenGLVersionStatus &rhs)
{
return !operator==(lhs, rhs);
}

class QOpenGLVersionFunctionsBackend
{
public:
QOpenGLVersionFunctionsBackend(QOpenGLContext *ctx)
: context(ctx)
{}

QOpenGLContext *context;
QAtomicInt refs;
};

class QAbstractOpenGLFunctionsPrivate
{
public:
QAbstractOpenGLFunctionsPrivate()
: owningContext(0),
initialized(false)
{}

static QOpenGLVersionFunctionsBackend *functionsBackend(QOpenGLContext *context,
const QOpenGLVersionStatus &v);
static void insertFunctionsBackend(QOpenGLContext *context,
const QOpenGLVersionStatus &v,
QOpenGLVersionFunctionsBackend *backend);
static void removeFunctionsBackend(QOpenGLContext *context, const QOpenGLVersionStatus &v);

QOpenGLContext *owningContext;
bool initialized;
};

class QAbstractOpenGLFunctions
{
public:
virtual ~QAbstractOpenGLFunctions();

virtual bool initializeOpenGLFunctions();

inline QAbstractOpenGLFunctionsPrivate* d_func() { return reinterpret_cast<QAbstractOpenGLFunctionsPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractOpenGLFunctionsPrivate* d_func() const { return reinterpret_cast<const QAbstractOpenGLFunctionsPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractOpenGLFunctionsPrivate;

protected:
QAbstractOpenGLFunctions();
QAbstractOpenGLFunctionsPrivate *d_ptr;

bool isInitialized() const;

void setOwningContext(const QOpenGLContext *context);
QOpenGLContext *owningContext() const;

friend class QOpenGLContext;
};



# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"
class QOpenGLFunctions_1_0_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_0_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * Viewport)(GLint x, GLint y, GLsizei width, GLsizei height);
void ( * DepthRange)(GLdouble nearVal, GLdouble farVal);
GLboolean ( * IsEnabled)(GLenum cap);
void ( * GetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint *params);
void ( * GetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat *params);
void ( * GetTexParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * GetTexParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void ( * GetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
const GLubyte * ( * GetString)(GLenum name);
void ( * GetIntegerv)(GLenum pname, GLint *params);
void ( * GetFloatv)(GLenum pname, GLfloat *params);
GLenum ( * GetError)();
void ( * GetDoublev)(GLenum pname, GLdouble *params);
void ( * GetBooleanv)(GLenum pname, GLboolean *params);
void ( * ReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void ( * ReadBuffer)(GLenum mode);
void ( * PixelStorei)(GLenum pname, GLint param);
void ( * PixelStoref)(GLenum pname, GLfloat param);
void ( * DepthFunc)(GLenum func);
void ( * StencilOp)(GLenum fail, GLenum zfail, GLenum zpass);
void ( * StencilFunc)(GLenum func, GLint ref, GLuint mask);
void ( * LogicOp)(GLenum opcode);
void ( * BlendFunc)(GLenum sfactor, GLenum dfactor);
void ( * Flush)();
void ( * Finish)();
void ( * Enable)(GLenum cap);
void ( * Disable)(GLenum cap);
void ( * DepthMask)(GLboolean flag);
void ( * ColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void ( * StencilMask)(GLuint mask);
void ( * ClearDepth)(GLdouble depth);
void ( * ClearStencil)(GLint s);
void ( * ClearColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void ( * Clear)(GLbitfield mask);
void ( * DrawBuffer)(GLenum mode);
void ( * TexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void ( * TexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void ( * TexParameteriv)(GLenum target, GLenum pname, const GLint *params);
void ( * TexParameteri)(GLenum target, GLenum pname, GLint param);
void ( * TexParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
void ( * TexParameterf)(GLenum target, GLenum pname, GLfloat param);
void ( * Scissor)(GLint x, GLint y, GLsizei width, GLsizei height);
void ( * PolygonMode)(GLenum face, GLenum mode);
void ( * PointSize)(GLfloat size);
void ( * LineWidth)(GLfloat width);
void ( * Hint)(GLenum target, GLenum mode);
void ( * FrontFace)(GLenum mode);
void ( * CullFace)(GLenum mode);

};

class QOpenGLFunctions_1_1_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_1_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * Indexubv)(const GLubyte *c);
void ( * Indexub)(GLubyte c);
GLboolean ( * IsTexture)(GLuint texture);
void ( * GenTextures)(GLsizei n, GLuint *textures);
void ( * DeleteTextures)(GLsizei n, const GLuint *textures);
void ( * BindTexture)(GLenum target, GLuint texture);
void ( * TexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void ( * TexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void ( * CopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void ( * CopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void ( * CopyTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void ( * CopyTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void ( * PolygonOffset)(GLfloat factor, GLfloat units);
void ( * GetPointerv)(GLenum pname, GLvoid* *params);
void ( * DrawElements)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void ( * DrawArrays)(GLenum mode, GLint first, GLsizei count);

};

class QOpenGLFunctions_1_2_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_2_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * CopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void ( * TexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void ( * TexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void ( * DrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void ( * BlendEquation)(GLenum mode);
void ( * BlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);

};

class QOpenGLFunctions_1_3_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_3_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * GetCompressedTexImage)(GLenum target, GLint level, GLvoid *img);
void ( * CompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void ( * CompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void ( * CompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void ( * CompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
void ( * CompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void ( * CompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void ( * SampleCoverage)(GLfloat value, GLboolean invert);
void ( * ActiveTexture)(GLenum texture);

};

class QOpenGLFunctions_1_4_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_4_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * PointParameteriv)(GLenum pname, const GLint *params);
void ( * PointParameteri)(GLenum pname, GLint param);
void ( * PointParameterfv)(GLenum pname, const GLfloat *params);
void ( * PointParameterf)(GLenum pname, GLfloat param);
void ( * MultiDrawElements)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount);
void ( * MultiDrawArrays)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
void ( * BlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);

};

class QOpenGLFunctions_1_5_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_5_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * GetBufferPointerv)(GLenum target, GLenum pname, GLvoid* *params);
void ( * GetBufferParameteriv)(GLenum target, GLenum pname, GLint *params);
GLboolean ( * UnmapBuffer)(GLenum target);
GLvoid* ( * MapBuffer)(GLenum target, GLenum access);
void ( * GetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
void ( * BufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void ( * BufferData)(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
GLboolean ( * IsBuffer)(GLuint buffer);
void ( * GenBuffers)(GLsizei n, GLuint *buffers);
void ( * DeleteBuffers)(GLsizei n, const GLuint *buffers);
void ( * BindBuffer)(GLenum target, GLuint buffer);
void ( * GetQueryObjectuiv)(GLuint id, GLenum pname, GLuint *params);
void ( * GetQueryObjectiv)(GLuint id, GLenum pname, GLint *params);
void ( * GetQueryiv)(GLenum target, GLenum pname, GLint *params);
void ( * EndQuery)(GLenum target);
void ( * BeginQuery)(GLenum target, GLuint id);
GLboolean ( * IsQuery)(GLuint id);
void ( * DeleteQueries)(GLsizei n, const GLuint *ids);
void ( * GenQueries)(GLsizei n, GLuint *ids);

};

class QOpenGLFunctions_2_0_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_2_0_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * VertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
void ( * ValidateProgram)(GLuint program);
void ( * UniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * Uniform4iv)(GLint location, GLsizei count, const GLint *value);
void ( * Uniform3iv)(GLint location, GLsizei count, const GLint *value);
void ( * Uniform2iv)(GLint location, GLsizei count, const GLint *value);
void ( * Uniform1iv)(GLint location, GLsizei count, const GLint *value);
void ( * Uniform4fv)(GLint location, GLsizei count, const GLfloat *value);
void ( * Uniform3fv)(GLint location, GLsizei count, const GLfloat *value);
void ( * Uniform2fv)(GLint location, GLsizei count, const GLfloat *value);
void ( * Uniform1fv)(GLint location, GLsizei count, const GLfloat *value);
void ( * Uniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void ( * Uniform3i)(GLint location, GLint v0, GLint v1, GLint v2);
void ( * Uniform2i)(GLint location, GLint v0, GLint v1);
void ( * Uniform1i)(GLint location, GLint v0);
void ( * Uniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void ( * Uniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void ( * Uniform2f)(GLint location, GLfloat v0, GLfloat v1);
void ( * Uniform1f)(GLint location, GLfloat v0);
void ( * UseProgram)(GLuint program);
void ( * ShaderSource)(GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);
void ( * LinkProgram)(GLuint program);
GLboolean ( * IsShader)(GLuint shader);
GLboolean ( * IsProgram)(GLuint program);
void ( * GetVertexAttribPointerv)(GLuint index, GLenum pname, GLvoid* *pointer);
void ( * GetVertexAttribiv)(GLuint index, GLenum pname, GLint *params);
void ( * GetVertexAttribfv)(GLuint index, GLenum pname, GLfloat *params);
void ( * GetVertexAttribdv)(GLuint index, GLenum pname, GLdouble *params);
void ( * GetUniformiv)(GLuint program, GLint location, GLint *params);
void ( * GetUniformfv)(GLuint program, GLint location, GLfloat *params);
GLint ( * GetUniformLocation)(GLuint program, const GLchar *name);
void ( * GetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void ( * GetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void ( * GetShaderiv)(GLuint shader, GLenum pname, GLint *params);
void ( * GetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void ( * GetProgramiv)(GLuint program, GLenum pname, GLint *params);
GLint ( * GetAttribLocation)(GLuint program, const GLchar *name);
void ( * GetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
void ( * GetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void ( * GetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void ( * EnableVertexAttribArray)(GLuint index);
void ( * DisableVertexAttribArray)(GLuint index);
void ( * DetachShader)(GLuint program, GLuint shader);
void ( * DeleteShader)(GLuint shader);
void ( * DeleteProgram)(GLuint program);
GLuint ( * CreateShader)(GLenum type);
GLuint ( * CreateProgram)();
void ( * CompileShader)(GLuint shader);
void ( * BindAttribLocation)(GLuint program, GLuint index, const GLchar *name);
void ( * AttachShader)(GLuint program, GLuint shader);
void ( * StencilMaskSeparate)(GLenum face, GLuint mask);
void ( * StencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
void ( * StencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void ( * DrawBuffers)(GLsizei n, const GLenum *bufs);
void ( * BlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);

};

class QOpenGLFunctions_2_1_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_2_1_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * UniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * UniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);

};

class QOpenGLFunctions_3_0_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_3_0_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


GLboolean ( * IsVertexArray)(GLuint array);
void ( * GenVertexArrays)(GLsizei n, GLuint *arrays);
void ( * DeleteVertexArrays)(GLsizei n, const GLuint *arrays);
void ( * BindVertexArray)(GLuint array);
void ( * FlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length);
GLvoid* ( * MapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void ( * FramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void ( * RenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void ( * BlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void ( * GenerateMipmap)(GLenum target);
void ( * GetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void ( * FramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void ( * FramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void ( * FramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void ( * FramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLenum ( * CheckFramebufferStatus)(GLenum target);
void ( * GenFramebuffers)(GLsizei n, GLuint *framebuffers);
void ( * DeleteFramebuffers)(GLsizei n, const GLuint *framebuffers);
void ( * BindFramebuffer)(GLenum target, GLuint framebuffer);
GLboolean ( * IsFramebuffer)(GLuint framebuffer);
void ( * GetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * RenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void ( * GenRenderbuffers)(GLsizei n, GLuint *renderbuffers);
void ( * DeleteRenderbuffers)(GLsizei n, const GLuint *renderbuffers);
void ( * BindRenderbuffer)(GLenum target, GLuint renderbuffer);
GLboolean ( * IsRenderbuffer)(GLuint renderbuffer);
const GLubyte * ( * GetStringi)(GLenum name, GLuint index);
void ( * ClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void ( * ClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void ( * ClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint *value);
void ( * ClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint *value);
void ( * GetTexParameterIuiv)(GLenum target, GLenum pname, GLuint *params);
void ( * GetTexParameterIiv)(GLenum target, GLenum pname, GLint *params);
void ( * TexParameterIuiv)(GLenum target, GLenum pname, const GLuint *params);
void ( * TexParameterIiv)(GLenum target, GLenum pname, const GLint *params);
void ( * Uniform4uiv)(GLint location, GLsizei count, const GLuint *value);
void ( * Uniform3uiv)(GLint location, GLsizei count, const GLuint *value);
void ( * Uniform2uiv)(GLint location, GLsizei count, const GLuint *value);
void ( * Uniform1uiv)(GLint location, GLsizei count, const GLuint *value);
void ( * Uniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void ( * Uniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2);
void ( * Uniform2ui)(GLint location, GLuint v0, GLuint v1);
void ( * Uniform1ui)(GLint location, GLuint v0);
GLint ( * GetFragDataLocation)(GLuint program, const GLchar *name);
void ( * BindFragDataLocation)(GLuint program, GLuint color, const GLchar *name);
void ( * GetUniformuiv)(GLuint program, GLint location, GLuint *params);
void ( * GetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint *params);
void ( * GetVertexAttribIiv)(GLuint index, GLenum pname, GLint *params);
void ( * VertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * EndConditionalRender)();
void ( * BeginConditionalRender)(GLuint id, GLenum mode);
void ( * ClampColor)(GLenum target, GLenum clamp);
void ( * GetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void ( * TransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);
void ( * BindBufferBase)(GLenum target, GLuint index, GLuint buffer);
void ( * BindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void ( * EndTransformFeedback)();
void ( * BeginTransformFeedback)(GLenum primitiveMode);
GLboolean ( * IsEnabledi)(GLenum target, GLuint index);
void ( * Disablei)(GLenum target, GLuint index);
void ( * Enablei)(GLenum target, GLuint index);
void ( * GetIntegeri_v)(GLenum target, GLuint index, GLint *data);
void ( * GetBooleani_v)(GLenum target, GLuint index, GLboolean *data);
void ( * ColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);

};

class QOpenGLFunctions_3_1_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_3_1_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * CopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void ( * UniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void ( * GetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void ( * GetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLuint ( * GetUniformBlockIndex)(GLuint program, const GLchar *uniformBlockName);
void ( * GetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void ( * GetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void ( * GetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
void ( * PrimitiveRestartIndex)(GLuint index);
void ( * TexBuffer)(GLenum target, GLenum internalformat, GLuint buffer);
void ( * DrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount);
void ( * DrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);

};

class QOpenGLFunctions_3_2_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_3_2_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * SampleMaski)(GLuint index, GLbitfield mask);
void ( * GetMultisamplefv)(GLenum pname, GLuint index, GLfloat *val);
void ( * TexImage3DMultisample)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void ( * TexImage2DMultisample)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void ( * GetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void ( * GetInteger64v)(GLenum pname, GLint64 *params);
void ( * WaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLenum ( * ClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout);
void ( * DeleteSync)(GLsync sync);
GLboolean ( * IsSync)(GLsync sync);
GLsync ( * FenceSync)(GLenum condition, GLbitfield flags);
void ( * ProvokingVertex)(GLenum mode);
void ( * MultiDrawElementsBaseVertex)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex);
void ( * DrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex);
void ( * DrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void ( * DrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void ( * FramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level);
void ( * GetBufferParameteri64v)(GLenum target, GLenum pname, GLint64 *params);
void ( * GetInteger64i_v)(GLenum target, GLuint index, GLint64 *data);

};

class QOpenGLFunctions_3_3_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_3_3_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * VertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void ( * VertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void ( * VertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void ( * VertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void ( * VertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void ( * VertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void ( * VertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void ( * VertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void ( * SecondaryColorP3uiv)(GLenum type, const GLuint *color);
void ( * SecondaryColorP3ui)(GLenum type, GLuint color);
void ( * ColorP4uiv)(GLenum type, const GLuint *color);
void ( * ColorP4ui)(GLenum type, GLuint color);
void ( * ColorP3uiv)(GLenum type, const GLuint *color);
void ( * ColorP3ui)(GLenum type, GLuint color);
void ( * NormalP3uiv)(GLenum type, const GLuint *coords);
void ( * NormalP3ui)(GLenum type, GLuint coords);
void ( * MultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint *coords);
void ( * MultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords);
void ( * MultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint *coords);
void ( * MultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords);
void ( * MultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint *coords);
void ( * MultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords);
void ( * MultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint *coords);
void ( * MultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords);
void ( * TexCoordP4uiv)(GLenum type, const GLuint *coords);
void ( * TexCoordP4ui)(GLenum type, GLuint coords);
void ( * TexCoordP3uiv)(GLenum type, const GLuint *coords);
void ( * TexCoordP3ui)(GLenum type, GLuint coords);
void ( * TexCoordP2uiv)(GLenum type, const GLuint *coords);
void ( * TexCoordP2ui)(GLenum type, GLuint coords);
void ( * TexCoordP1uiv)(GLenum type, const GLuint *coords);
void ( * TexCoordP1ui)(GLenum type, GLuint coords);
void ( * VertexP4uiv)(GLenum type, const GLuint *value);
void ( * VertexP4ui)(GLenum type, GLuint value);
void ( * VertexP3uiv)(GLenum type, const GLuint *value);
void ( * VertexP3ui)(GLenum type, GLuint value);
void ( * VertexP2uiv)(GLenum type, const GLuint *value);
void ( * VertexP2ui)(GLenum type, GLuint value);
void ( * GetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64 *params);
void ( * GetQueryObjecti64v)(GLuint id, GLenum pname, GLint64 *params);
void ( * QueryCounter)(GLuint id, GLenum target);
void ( * GetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint *params);
void ( * GetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat *params);
void ( * GetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint *params);
void ( * GetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint *params);
void ( * SamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint *param);
void ( * SamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint *param);
void ( * SamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat *param);
void ( * SamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param);
void ( * SamplerParameteriv)(GLuint sampler, GLenum pname, const GLint *param);
void ( * SamplerParameteri)(GLuint sampler, GLenum pname, GLint param);
void ( * BindSampler)(GLuint unit, GLuint sampler);
GLboolean ( * IsSampler)(GLuint sampler);
void ( * DeleteSamplers)(GLsizei count, const GLuint *samplers);
void ( * GenSamplers)(GLsizei count, GLuint *samplers);
GLint ( * GetFragDataIndex)(GLuint program, const GLchar *name);
void ( * BindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
void ( * VertexAttribDivisor)(GLuint index, GLuint divisor);

};

class QOpenGLFunctions_4_0_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_4_0_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * GetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint *params);
void ( * EndQueryIndexed)(GLenum target, GLuint index);
void ( * BeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
void ( * DrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
void ( * DrawTransformFeedback)(GLenum mode, GLuint id);
void ( * ResumeTransformFeedback)();
void ( * PauseTransformFeedback)();
GLboolean ( * IsTransformFeedback)(GLuint id);
void ( * GenTransformFeedbacks)(GLsizei n, GLuint *ids);
void ( * DeleteTransformFeedbacks)(GLsizei n, const GLuint *ids);
void ( * BindTransformFeedback)(GLenum target, GLuint id);
void ( * PatchParameterfv)(GLenum pname, const GLfloat *values);
void ( * PatchParameteri)(GLenum pname, GLint value);
void ( * GetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
void ( * GetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint *params);
void ( * UniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint *indices);
void ( * GetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void ( * GetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void ( * GetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
GLuint ( * GetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar *name);
GLint ( * GetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar *name);
void ( * GetUniformdv)(GLuint program, GLint location, GLdouble *params);
void ( * UniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * UniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * Uniform4dv)(GLint location, GLsizei count, const GLdouble *value);
void ( * Uniform3dv)(GLint location, GLsizei count, const GLdouble *value);
void ( * Uniform2dv)(GLint location, GLsizei count, const GLdouble *value);
void ( * Uniform1dv)(GLint location, GLsizei count, const GLdouble *value);
void ( * Uniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( * Uniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
void ( * Uniform2d)(GLint location, GLdouble x, GLdouble y);
void ( * Uniform1d)(GLint location, GLdouble x);
void ( * DrawElementsIndirect)(GLenum mode, GLenum type, const GLvoid *indirect);
void ( * DrawArraysIndirect)(GLenum mode, const GLvoid *indirect);
void ( * BlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void ( * BlendFunci)(GLuint buf, GLenum src, GLenum dst);
void ( * BlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void ( * BlendEquationi)(GLuint buf, GLenum mode);
void ( * MinSampleShading)(GLfloat value);

};

class QOpenGLFunctions_4_1_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_4_1_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * GetDoublei_v)(GLenum target, GLuint index, GLdouble *data);
void ( * GetFloati_v)(GLenum target, GLuint index, GLfloat *data);
void ( * DepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
void ( * DepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble *v);
void ( * ScissorIndexedv)(GLuint index, const GLint *v);
void ( * ScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void ( * ScissorArrayv)(GLuint first, GLsizei count, const GLint *v);
void ( * ViewportIndexedfv)(GLuint index, const GLfloat *v);
void ( * ViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void ( * ViewportArrayv)(GLuint first, GLsizei count, const GLfloat *v);
void ( * GetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble *params);
void ( * VertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * VertexAttribL4dv)(GLuint index, const GLdouble *v);
void ( * VertexAttribL3dv)(GLuint index, const GLdouble *v);
void ( * VertexAttribL2dv)(GLuint index, const GLdouble *v);
void ( * VertexAttribL1dv)(GLuint index, const GLdouble *v);
void ( * VertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( * VertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void ( * VertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
void ( * VertexAttribL1d)(GLuint index, GLdouble x);
void ( * GetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void ( * ValidateProgramPipeline)(GLuint pipeline);
void ( * ProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void ( * ProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void ( * ProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void ( * ProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void ( * ProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ( * ProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
void ( * ProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void ( * ProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void ( * ProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void ( * ProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void ( * ProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void ( * ProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void ( * ProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ( * ProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
void ( * ProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void ( * ProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void ( * ProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void ( * ProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void ( * ProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void ( * ProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
void ( * ProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ( * ProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
void ( * ProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void ( * ProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void ( * ProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void ( * ProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
void ( * ProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint *value);
void ( * ProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
void ( * ProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void ( * ProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
void ( * ProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void ( * ProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
void ( * ProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint *value);
void ( * ProgramUniform1i)(GLuint program, GLint location, GLint v0);
void ( * GetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint *params);
GLboolean ( * IsProgramPipeline)(GLuint pipeline);
void ( * GenProgramPipelines)(GLsizei n, GLuint *pipelines);
void ( * DeleteProgramPipelines)(GLsizei n, const GLuint *pipelines);
void ( * BindProgramPipeline)(GLuint pipeline);
GLuint ( * CreateShaderProgramv)(GLenum type, GLsizei count, const GLchar* const *strings);
void ( * ActiveShaderProgram)(GLuint pipeline, GLuint program);
void ( * UseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
void ( * ProgramParameteri)(GLuint program, GLenum pname, GLint value);
void ( * ProgramBinary)(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
void ( * GetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
void ( * ClearDepthf)(GLfloat dd);
void ( * DepthRangef)(GLfloat n, GLfloat f);
void ( * GetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void ( * ShaderBinary)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
void ( * ReleaseShaderCompiler)();

};

class QOpenGLFunctions_4_2_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_4_2_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * TexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void ( * TexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void ( * TexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void ( * MemoryBarrier)(GLbitfield barriers);
void ( * BindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void ( * GetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
void ( * GetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
void ( * DrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
void ( * DrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount);
void ( * DrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
void ( * DrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
void ( * DrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);

};

class QOpenGLFunctions_4_3_CoreBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_4_3_CoreBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * TexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void ( * TexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void ( * TexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void ( * ShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLint ( * GetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar *name);
GLint ( * GetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar *name);
void ( * GetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
void ( * GetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
GLuint ( * GetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar *name);
void ( * GetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
void ( * MultiDrawElementsIndirect)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
void ( * MultiDrawArraysIndirect)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
void ( * InvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void ( * InvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void ( * InvalidateBufferData)(GLuint buffer);
void ( * InvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length);
void ( * InvalidateTexImage)(GLuint texture, GLint level);
void ( * InvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void ( * GetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
void ( * GetFramebufferParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * FramebufferParameteri)(GLenum target, GLenum pname, GLint param);
void ( * VertexBindingDivisor)(GLuint bindingindex, GLuint divisor);
void ( * VertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
void ( * VertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void ( * VertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void ( * VertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void ( * BindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void ( * TextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void ( * CopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void ( * DispatchComputeIndirect)(GLintptr indirect);
void ( * DispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void ( * ClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
void ( * ClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);

};

class QOpenGLFunctions_1_0_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_0_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * Translatef)(GLfloat x, GLfloat y, GLfloat z);
void ( * Translated)(GLdouble x, GLdouble y, GLdouble z);
void ( * Scalef)(GLfloat x, GLfloat y, GLfloat z);
void ( * Scaled)(GLdouble x, GLdouble y, GLdouble z);
void ( * Rotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void ( * Rotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void ( * PushMatrix)();
void ( * PopMatrix)();
void ( * Ortho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void ( * MultMatrixd)(const GLdouble *m);
void ( * MultMatrixf)(const GLfloat *m);
void ( * MatrixMode)(GLenum mode);
void ( * LoadMatrixd)(const GLdouble *m);
void ( * LoadMatrixf)(const GLfloat *m);
void ( * LoadIdentity)();
void ( * Frustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLboolean ( * IsList)(GLuint list);
void ( * GetTexGeniv)(GLenum coord, GLenum pname, GLint *params);
void ( * GetTexGenfv)(GLenum coord, GLenum pname, GLfloat *params);
void ( * GetTexGendv)(GLenum coord, GLenum pname, GLdouble *params);
void ( * GetTexEnviv)(GLenum target, GLenum pname, GLint *params);
void ( * GetTexEnvfv)(GLenum target, GLenum pname, GLfloat *params);
void ( * GetPolygonStipple)(GLubyte *mask);
void ( * GetPixelMapusv)(GLenum map, GLushort *values);
void ( * GetPixelMapuiv)(GLenum map, GLuint *values);
void ( * GetPixelMapfv)(GLenum map, GLfloat *values);
void ( * GetMaterialiv)(GLenum face, GLenum pname, GLint *params);
void ( * GetMaterialfv)(GLenum face, GLenum pname, GLfloat *params);
void ( * GetMapiv)(GLenum target, GLenum query, GLint *v);
void ( * GetMapfv)(GLenum target, GLenum query, GLfloat *v);
void ( * GetMapdv)(GLenum target, GLenum query, GLdouble *v);
void ( * GetLightiv)(GLenum light, GLenum pname, GLint *params);
void ( * GetLightfv)(GLenum light, GLenum pname, GLfloat *params);
void ( * GetClipPlane)(GLenum plane, GLdouble *equation);
void ( * DrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void ( * CopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void ( * PixelMapusv)(GLenum map, GLint mapsize, const GLushort *values);
void ( * PixelMapuiv)(GLenum map, GLint mapsize, const GLuint *values);
void ( * PixelMapfv)(GLenum map, GLint mapsize, const GLfloat *values);
void ( * PixelTransferi)(GLenum pname, GLint param);
void ( * PixelTransferf)(GLenum pname, GLfloat param);
void ( * PixelZoom)(GLfloat xfactor, GLfloat yfactor);
void ( * AlphaFunc)(GLenum func, GLfloat ref);
void ( * EvalPoint2)(GLint i, GLint j);
void ( * EvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void ( * EvalPoint1)(GLint i);
void ( * EvalMesh1)(GLenum mode, GLint i1, GLint i2);
void ( * EvalCoord2fv)(const GLfloat *u);
void ( * EvalCoord2f)(GLfloat u, GLfloat v);
void ( * EvalCoord2dv)(const GLdouble *u);
void ( * EvalCoord2d)(GLdouble u, GLdouble v);
void ( * EvalCoord1fv)(const GLfloat *u);
void ( * EvalCoord1f)(GLfloat u);
void ( * EvalCoord1dv)(const GLdouble *u);
void ( * EvalCoord1d)(GLdouble u);
void ( * MapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void ( * MapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void ( * MapGrid1f)(GLint un, GLfloat u1, GLfloat u2);
void ( * MapGrid1d)(GLint un, GLdouble u1, GLdouble u2);
void ( * Map2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void ( * Map2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void ( * Map1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void ( * Map1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void ( * PushAttrib)(GLbitfield mask);
void ( * PopAttrib)();
void ( * Accum)(GLenum op, GLfloat value);
void ( * IndexMask)(GLuint mask);
void ( * ClearIndex)(GLfloat c);
void ( * ClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void ( * PushName)(GLuint name);
void ( * PopName)();
void ( * PassThrough)(GLfloat token);
void ( * LoadName)(GLuint name);
void ( * InitNames)();
GLint ( * RenderMode)(GLenum mode);
void ( * SelectBuffer)(GLsizei size, GLuint *buffer);
void ( * FeedbackBuffer)(GLsizei size, GLenum type, GLfloat *buffer);
void ( * TexGeniv)(GLenum coord, GLenum pname, const GLint *params);
void ( * TexGeni)(GLenum coord, GLenum pname, GLint param);
void ( * TexGenfv)(GLenum coord, GLenum pname, const GLfloat *params);
void ( * TexGenf)(GLenum coord, GLenum pname, GLfloat param);
void ( * TexGendv)(GLenum coord, GLenum pname, const GLdouble *params);
void ( * TexGend)(GLenum coord, GLenum pname, GLdouble param);
void ( * TexEnviv)(GLenum target, GLenum pname, const GLint *params);
void ( * TexEnvi)(GLenum target, GLenum pname, GLint param);
void ( * TexEnvfv)(GLenum target, GLenum pname, const GLfloat *params);
void ( * TexEnvf)(GLenum target, GLenum pname, GLfloat param);
void ( * ShadeModel)(GLenum mode);
void ( * PolygonStipple)(const GLubyte *mask);
void ( * Materialiv)(GLenum face, GLenum pname, const GLint *params);
void ( * Materiali)(GLenum face, GLenum pname, GLint param);
void ( * Materialfv)(GLenum face, GLenum pname, const GLfloat *params);
void ( * Materialf)(GLenum face, GLenum pname, GLfloat param);
void ( * LineStipple)(GLint factor, GLushort pattern);
void ( * LightModeliv)(GLenum pname, const GLint *params);
void ( * LightModeli)(GLenum pname, GLint param);
void ( * LightModelfv)(GLenum pname, const GLfloat *params);
void ( * LightModelf)(GLenum pname, GLfloat param);
void ( * Lightiv)(GLenum light, GLenum pname, const GLint *params);
void ( * Lighti)(GLenum light, GLenum pname, GLint param);
void ( * Lightfv)(GLenum light, GLenum pname, const GLfloat *params);
void ( * Lightf)(GLenum light, GLenum pname, GLfloat param);
void ( * Fogiv)(GLenum pname, const GLint *params);
void ( * Fogi)(GLenum pname, GLint param);
void ( * Fogfv)(GLenum pname, const GLfloat *params);
void ( * Fogf)(GLenum pname, GLfloat param);
void ( * ColorMaterial)(GLenum face, GLenum mode);
void ( * ClipPlane)(GLenum plane, const GLdouble *equation);
void ( * Vertex4sv)(const GLshort *v);
void ( * Vertex4s)(GLshort x, GLshort y, GLshort z, GLshort w);
void ( * Vertex4iv)(const GLint *v);
void ( * Vertex4i)(GLint x, GLint y, GLint z, GLint w);
void ( * Vertex4fv)(const GLfloat *v);
void ( * Vertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * Vertex4dv)(const GLdouble *v);
void ( * Vertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( * Vertex3sv)(const GLshort *v);
void ( * Vertex3s)(GLshort x, GLshort y, GLshort z);
void ( * Vertex3iv)(const GLint *v);
void ( * Vertex3i)(GLint x, GLint y, GLint z);
void ( * Vertex3fv)(const GLfloat *v);
void ( * Vertex3f)(GLfloat x, GLfloat y, GLfloat z);
void ( * Vertex3dv)(const GLdouble *v);
void ( * Vertex3d)(GLdouble x, GLdouble y, GLdouble z);
void ( * Vertex2sv)(const GLshort *v);
void ( * Vertex2s)(GLshort x, GLshort y);
void ( * Vertex2iv)(const GLint *v);
void ( * Vertex2i)(GLint x, GLint y);
void ( * Vertex2fv)(const GLfloat *v);
void ( * Vertex2f)(GLfloat x, GLfloat y);
void ( * Vertex2dv)(const GLdouble *v);
void ( * Vertex2d)(GLdouble x, GLdouble y);
void ( * TexCoord4sv)(const GLshort *v);
void ( * TexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q);
void ( * TexCoord4iv)(const GLint *v);
void ( * TexCoord4i)(GLint s, GLint t, GLint r, GLint q);
void ( * TexCoord4fv)(const GLfloat *v);
void ( * TexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void ( * TexCoord4dv)(const GLdouble *v);
void ( * TexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void ( * TexCoord3sv)(const GLshort *v);
void ( * TexCoord3s)(GLshort s, GLshort t, GLshort r);
void ( * TexCoord3iv)(const GLint *v);
void ( * TexCoord3i)(GLint s, GLint t, GLint r);
void ( * TexCoord3fv)(const GLfloat *v);
void ( * TexCoord3f)(GLfloat s, GLfloat t, GLfloat r);
void ( * TexCoord3dv)(const GLdouble *v);
void ( * TexCoord3d)(GLdouble s, GLdouble t, GLdouble r);
void ( * TexCoord2sv)(const GLshort *v);
void ( * TexCoord2s)(GLshort s, GLshort t);
void ( * TexCoord2iv)(const GLint *v);
void ( * TexCoord2i)(GLint s, GLint t);
void ( * TexCoord2fv)(const GLfloat *v);
void ( * TexCoord2f)(GLfloat s, GLfloat t);
void ( * TexCoord2dv)(const GLdouble *v);
void ( * TexCoord2d)(GLdouble s, GLdouble t);
void ( * TexCoord1sv)(const GLshort *v);
void ( * TexCoord1s)(GLshort s);
void ( * TexCoord1iv)(const GLint *v);
void ( * TexCoord1i)(GLint s);
void ( * TexCoord1fv)(const GLfloat *v);
void ( * TexCoord1f)(GLfloat s);
void ( * TexCoord1dv)(const GLdouble *v);
void ( * TexCoord1d)(GLdouble s);
void ( * Rectsv)(const GLshort *v1, const GLshort *v2);
void ( * Rects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void ( * Rectiv)(const GLint *v1, const GLint *v2);
void ( * Recti)(GLint x1, GLint y1, GLint x2, GLint y2);
void ( * Rectfv)(const GLfloat *v1, const GLfloat *v2);
void ( * Rectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void ( * Rectdv)(const GLdouble *v1, const GLdouble *v2);
void ( * Rectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void ( * RasterPos4sv)(const GLshort *v);
void ( * RasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w);
void ( * RasterPos4iv)(const GLint *v);
void ( * RasterPos4i)(GLint x, GLint y, GLint z, GLint w);
void ( * RasterPos4fv)(const GLfloat *v);
void ( * RasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * RasterPos4dv)(const GLdouble *v);
void ( * RasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( * RasterPos3sv)(const GLshort *v);
void ( * RasterPos3s)(GLshort x, GLshort y, GLshort z);
void ( * RasterPos3iv)(const GLint *v);
void ( * RasterPos3i)(GLint x, GLint y, GLint z);
void ( * RasterPos3fv)(const GLfloat *v);
void ( * RasterPos3f)(GLfloat x, GLfloat y, GLfloat z);
void ( * RasterPos3dv)(const GLdouble *v);
void ( * RasterPos3d)(GLdouble x, GLdouble y, GLdouble z);
void ( * RasterPos2sv)(const GLshort *v);
void ( * RasterPos2s)(GLshort x, GLshort y);
void ( * RasterPos2iv)(const GLint *v);
void ( * RasterPos2i)(GLint x, GLint y);
void ( * RasterPos2fv)(const GLfloat *v);
void ( * RasterPos2f)(GLfloat x, GLfloat y);
void ( * RasterPos2dv)(const GLdouble *v);
void ( * RasterPos2d)(GLdouble x, GLdouble y);
void ( * Normal3sv)(const GLshort *v);
void ( * Normal3s)(GLshort nx, GLshort ny, GLshort nz);
void ( * Normal3iv)(const GLint *v);
void ( * Normal3i)(GLint nx, GLint ny, GLint nz);
void ( * Normal3fv)(const GLfloat *v);
void ( * Normal3f)(GLfloat nx, GLfloat ny, GLfloat nz);
void ( * Normal3dv)(const GLdouble *v);
void ( * Normal3d)(GLdouble nx, GLdouble ny, GLdouble nz);
void ( * Normal3bv)(const GLbyte *v);
void ( * Normal3b)(GLbyte nx, GLbyte ny, GLbyte nz);
void ( * Indexsv)(const GLshort *c);
void ( * Indexs)(GLshort c);
void ( * Indexiv)(const GLint *c);
void ( * Indexi)(GLint c);
void ( * Indexfv)(const GLfloat *c);
void ( * Indexf)(GLfloat c);
void ( * Indexdv)(const GLdouble *c);
void ( * Indexd)(GLdouble c);
void ( * End)();
void ( * EdgeFlagv)(const GLboolean *flag);
void ( * EdgeFlag)(GLboolean flag);
void ( * Color4usv)(const GLushort *v);
void ( * Color4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void ( * Color4uiv)(const GLuint *v);
void ( * Color4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void ( * Color4ubv)(const GLubyte *v);
void ( * Color4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void ( * Color4sv)(const GLshort *v);
void ( * Color4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void ( * Color4iv)(const GLint *v);
void ( * Color4i)(GLint red, GLint green, GLint blue, GLint alpha);
void ( * Color4fv)(const GLfloat *v);
void ( * Color4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void ( * Color4dv)(const GLdouble *v);
void ( * Color4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void ( * Color4bv)(const GLbyte *v);
void ( * Color4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void ( * Color3usv)(const GLushort *v);
void ( * Color3us)(GLushort red, GLushort green, GLushort blue);
void ( * Color3uiv)(const GLuint *v);
void ( * Color3ui)(GLuint red, GLuint green, GLuint blue);
void ( * Color3ubv)(const GLubyte *v);
void ( * Color3ub)(GLubyte red, GLubyte green, GLubyte blue);
void ( * Color3sv)(const GLshort *v);
void ( * Color3s)(GLshort red, GLshort green, GLshort blue);
void ( * Color3iv)(const GLint *v);
void ( * Color3i)(GLint red, GLint green, GLint blue);
void ( * Color3fv)(const GLfloat *v);
void ( * Color3f)(GLfloat red, GLfloat green, GLfloat blue);
void ( * Color3dv)(const GLdouble *v);
void ( * Color3d)(GLdouble red, GLdouble green, GLdouble blue);
void ( * Color3bv)(const GLbyte *v);
void ( * Color3b)(GLbyte red, GLbyte green, GLbyte blue);
void ( * Bitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void ( * Begin)(GLenum mode);
void ( * ListBase)(GLuint base);
GLuint ( * GenLists)(GLsizei range);
void ( * DeleteLists)(GLuint list, GLsizei range);
void ( * CallLists)(GLsizei n, GLenum type, const GLvoid *lists);
void ( * CallList)(GLuint list);
void ( * EndList)();
void ( * NewList)(GLuint list, GLenum mode);

};

class QOpenGLFunctions_1_1_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_1_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * PushClientAttrib)(GLbitfield mask);
void ( * PopClientAttrib)();
void ( * PrioritizeTextures)(GLsizei n, const GLuint *textures, const GLfloat *priorities);
GLboolean ( * AreTexturesResident)(GLsizei n, const GLuint *textures, GLboolean *residences);
void ( * VertexPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * TexCoordPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * NormalPointer)(GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * InterleavedArrays)(GLenum format, GLsizei stride, const GLvoid *pointer);
void ( * IndexPointer)(GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * EnableClientState)(GLenum array);
void ( * EdgeFlagPointer)(GLsizei stride, const GLvoid *pointer);
void ( * DisableClientState)(GLenum array);
void ( * ColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * ArrayElement)(GLint i);

};

class QOpenGLFunctions_1_2_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_2_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * ResetMinmax)(GLenum target);
void ( * ResetHistogram)(GLenum target);
void ( * Minmax)(GLenum target, GLenum internalformat, GLboolean sink);
void ( * Histogram)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void ( * GetMinmaxParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * GetMinmaxParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void ( * GetMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void ( * GetHistogramParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * GetHistogramParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void ( * GetHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void ( * SeparableFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
void ( * GetSeparableFilter)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
void ( * GetConvolutionParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * GetConvolutionParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void ( * GetConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLvoid *image);
void ( * CopyConvolutionFilter2D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void ( * CopyConvolutionFilter1D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void ( * ConvolutionParameteriv)(GLenum target, GLenum pname, const GLint *params);
void ( * ConvolutionParameteri)(GLenum target, GLenum pname, GLint params);
void ( * ConvolutionParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
void ( * ConvolutionParameterf)(GLenum target, GLenum pname, GLfloat params);
void ( * ConvolutionFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
void ( * ConvolutionFilter1D)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
void ( * CopyColorSubTable)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void ( * ColorSubTable)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
void ( * GetColorTableParameteriv)(GLenum target, GLenum pname, GLint *params);
void ( * GetColorTableParameterfv)(GLenum target, GLenum pname, GLfloat *params);
void ( * GetColorTable)(GLenum target, GLenum format, GLenum type, GLvoid *table);
void ( * CopyColorTable)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void ( * ColorTableParameteriv)(GLenum target, GLenum pname, const GLint *params);
void ( * ColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
void ( * ColorTable)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);

};

class QOpenGLFunctions_1_3_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_3_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * MultTransposeMatrixd)(const GLdouble *m);
void ( * MultTransposeMatrixf)(const GLfloat *m);
void ( * LoadTransposeMatrixd)(const GLdouble *m);
void ( * LoadTransposeMatrixf)(const GLfloat *m);
void ( * MultiTexCoord4sv)(GLenum target, const GLshort *v);
void ( * MultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void ( * MultiTexCoord4iv)(GLenum target, const GLint *v);
void ( * MultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q);
void ( * MultiTexCoord4fv)(GLenum target, const GLfloat *v);
void ( * MultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void ( * MultiTexCoord4dv)(GLenum target, const GLdouble *v);
void ( * MultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void ( * MultiTexCoord3sv)(GLenum target, const GLshort *v);
void ( * MultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r);
void ( * MultiTexCoord3iv)(GLenum target, const GLint *v);
void ( * MultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r);
void ( * MultiTexCoord3fv)(GLenum target, const GLfloat *v);
void ( * MultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void ( * MultiTexCoord3dv)(GLenum target, const GLdouble *v);
void ( * MultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void ( * MultiTexCoord2sv)(GLenum target, const GLshort *v);
void ( * MultiTexCoord2s)(GLenum target, GLshort s, GLshort t);
void ( * MultiTexCoord2iv)(GLenum target, const GLint *v);
void ( * MultiTexCoord2i)(GLenum target, GLint s, GLint t);
void ( * MultiTexCoord2fv)(GLenum target, const GLfloat *v);
void ( * MultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t);
void ( * MultiTexCoord2dv)(GLenum target, const GLdouble *v);
void ( * MultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t);
void ( * MultiTexCoord1sv)(GLenum target, const GLshort *v);
void ( * MultiTexCoord1s)(GLenum target, GLshort s);
void ( * MultiTexCoord1iv)(GLenum target, const GLint *v);
void ( * MultiTexCoord1i)(GLenum target, GLint s);
void ( * MultiTexCoord1fv)(GLenum target, const GLfloat *v);
void ( * MultiTexCoord1f)(GLenum target, GLfloat s);
void ( * MultiTexCoord1dv)(GLenum target, const GLdouble *v);
void ( * MultiTexCoord1d)(GLenum target, GLdouble s);
void ( * ClientActiveTexture)(GLenum texture);

};

class QOpenGLFunctions_1_4_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_1_4_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * WindowPos3sv)(const GLshort *v);
void ( * WindowPos3s)(GLshort x, GLshort y, GLshort z);
void ( * WindowPos3iv)(const GLint *v);
void ( * WindowPos3i)(GLint x, GLint y, GLint z);
void ( * WindowPos3fv)(const GLfloat *v);
void ( * WindowPos3f)(GLfloat x, GLfloat y, GLfloat z);
void ( * WindowPos3dv)(const GLdouble *v);
void ( * WindowPos3d)(GLdouble x, GLdouble y, GLdouble z);
void ( * WindowPos2sv)(const GLshort *v);
void ( * WindowPos2s)(GLshort x, GLshort y);
void ( * WindowPos2iv)(const GLint *v);
void ( * WindowPos2i)(GLint x, GLint y);
void ( * WindowPos2fv)(const GLfloat *v);
void ( * WindowPos2f)(GLfloat x, GLfloat y);
void ( * WindowPos2dv)(const GLdouble *v);
void ( * WindowPos2d)(GLdouble x, GLdouble y);
void ( * SecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * SecondaryColor3usv)(const GLushort *v);
void ( * SecondaryColor3us)(GLushort red, GLushort green, GLushort blue);
void ( * SecondaryColor3uiv)(const GLuint *v);
void ( * SecondaryColor3ui)(GLuint red, GLuint green, GLuint blue);
void ( * SecondaryColor3ubv)(const GLubyte *v);
void ( * SecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue);
void ( * SecondaryColor3sv)(const GLshort *v);
void ( * SecondaryColor3s)(GLshort red, GLshort green, GLshort blue);
void ( * SecondaryColor3iv)(const GLint *v);
void ( * SecondaryColor3i)(GLint red, GLint green, GLint blue);
void ( * SecondaryColor3fv)(const GLfloat *v);
void ( * SecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue);
void ( * SecondaryColor3dv)(const GLdouble *v);
void ( * SecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue);
void ( * SecondaryColor3bv)(const GLbyte *v);
void ( * SecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue);
void ( * FogCoordPointer)(GLenum type, GLsizei stride, const GLvoid *pointer);
void ( * FogCoorddv)(const GLdouble *coord);
void ( * FogCoordd)(GLdouble coord);
void ( * FogCoordfv)(const GLfloat *coord);
void ( * FogCoordf)(GLfloat coord);

};

class QOpenGLFunctions_2_0_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_2_0_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * VertexAttrib4usv)(GLuint index, const GLushort *v);
void ( * VertexAttrib4uiv)(GLuint index, const GLuint *v);
void ( * VertexAttrib4ubv)(GLuint index, const GLubyte *v);
void ( * VertexAttrib4sv)(GLuint index, const GLshort *v);
void ( * VertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void ( * VertexAttrib4iv)(GLuint index, const GLint *v);
void ( * VertexAttrib4fv)(GLuint index, const GLfloat *v);
void ( * VertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * VertexAttrib4dv)(GLuint index, const GLdouble *v);
void ( * VertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void ( * VertexAttrib4bv)(GLuint index, const GLbyte *v);
void ( * VertexAttrib4Nusv)(GLuint index, const GLushort *v);
void ( * VertexAttrib4Nuiv)(GLuint index, const GLuint *v);
void ( * VertexAttrib4Nubv)(GLuint index, const GLubyte *v);
void ( * VertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void ( * VertexAttrib4Nsv)(GLuint index, const GLshort *v);
void ( * VertexAttrib4Niv)(GLuint index, const GLint *v);
void ( * VertexAttrib4Nbv)(GLuint index, const GLbyte *v);
void ( * VertexAttrib3sv)(GLuint index, const GLshort *v);
void ( * VertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z);
void ( * VertexAttrib3fv)(GLuint index, const GLfloat *v);
void ( * VertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void ( * VertexAttrib3dv)(GLuint index, const GLdouble *v);
void ( * VertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void ( * VertexAttrib2sv)(GLuint index, const GLshort *v);
void ( * VertexAttrib2s)(GLuint index, GLshort x, GLshort y);
void ( * VertexAttrib2fv)(GLuint index, const GLfloat *v);
void ( * VertexAttrib2f)(GLuint index, GLfloat x, GLfloat y);
void ( * VertexAttrib2dv)(GLuint index, const GLdouble *v);
void ( * VertexAttrib2d)(GLuint index, GLdouble x, GLdouble y);
void ( * VertexAttrib1sv)(GLuint index, const GLshort *v);
void ( * VertexAttrib1s)(GLuint index, GLshort x);
void ( * VertexAttrib1fv)(GLuint index, const GLfloat *v);
void ( * VertexAttrib1f)(GLuint index, GLfloat x);
void ( * VertexAttrib1dv)(GLuint index, const GLdouble *v);
void ( * VertexAttrib1d)(GLuint index, GLdouble x);

};

class QOpenGLFunctions_3_0_DeprecatedBackend : public QOpenGLVersionFunctionsBackend
{
public:
QOpenGLFunctions_3_0_DeprecatedBackend(QOpenGLContext *context);

static QOpenGLVersionStatus versionStatus();


void ( * VertexAttribI4usv)(GLuint index, const GLushort *v);
void ( * VertexAttribI4ubv)(GLuint index, const GLubyte *v);
void ( * VertexAttribI4sv)(GLuint index, const GLshort *v);
void ( * VertexAttribI4bv)(GLuint index, const GLbyte *v);
void ( * VertexAttribI4uiv)(GLuint index, const GLuint *v);
void ( * VertexAttribI3uiv)(GLuint index, const GLuint *v);
void ( * VertexAttribI2uiv)(GLuint index, const GLuint *v);
void ( * VertexAttribI1uiv)(GLuint index, const GLuint *v);
void ( * VertexAttribI4iv)(GLuint index, const GLint *v);
void ( * VertexAttribI3iv)(GLuint index, const GLint *v);
void ( * VertexAttribI2iv)(GLuint index, const GLint *v);
void ( * VertexAttribI1iv)(GLuint index, const GLint *v);
void ( * VertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void ( * VertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z);
void ( * VertexAttribI2ui)(GLuint index, GLuint x, GLuint y);
void ( * VertexAttribI1ui)(GLuint index, GLuint x);
void ( * VertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w);
void ( * VertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z);
void ( * VertexAttribI2i)(GLuint index, GLint x, GLint y);
void ( * VertexAttribI1i)(GLuint index, GLint x);

};









# 1361 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"





# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"


# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"


class QOpenGLContextPrivate;
class QOpenGLContextGroupPrivate;
class QOpenGLFunctions;
class QPlatformOpenGLContext;

class QScreen;
class QSurface;

class QOpenGLVersionProfilePrivate;

class  QOpenGLVersionProfile
{
public:
QOpenGLVersionProfile();
explicit QOpenGLVersionProfile(const QSurfaceFormat &format);
QOpenGLVersionProfile(const QOpenGLVersionProfile &other);
~QOpenGLVersionProfile();

QOpenGLVersionProfile &operator=(const QOpenGLVersionProfile &rhs);

QPair<int, int> version() const;
void setVersion(int majorVersion, int minorVersion);

QSurfaceFormat::OpenGLContextProfile profile() const;
void setProfile(QSurfaceFormat::OpenGLContextProfile profile);

bool hasProfiles() const;
bool isLegacyVersion() const;
bool isValid() const;

private:
QOpenGLVersionProfilePrivate* d;
};

inline uint qHash(const QOpenGLVersionProfile &v, uint seed = 0)
{
return qHash(static_cast<int>(v.profile() * 1000)
+ v.version().first * 100 + v.version().second * 10, seed);
}

inline bool operator==(const QOpenGLVersionProfile &lhs, const QOpenGLVersionProfile &rhs)
{
if (lhs.profile() != rhs.profile())
return false;
return lhs.version() == rhs.version();
}

inline bool operator!=(const QOpenGLVersionProfile &lhs, const QOpenGLVersionProfile &rhs)
{
return !operator==(lhs, rhs);
}

class  QOpenGLContextGroup : public QObject
{
Q_OBJECT
inline QOpenGLContextGroupPrivate* d_func() { return reinterpret_cast<QOpenGLContextGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLContextGroupPrivate* d_func() const { return reinterpret_cast<const QOpenGLContextGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLContextGroupPrivate;
public:
~QOpenGLContextGroup();

QList<QOpenGLContext *> shares() const;

static QOpenGLContextGroup *currentContextGroup();

private:
QOpenGLContextGroup();

friend class QOpenGLContext;
friend class QOpenGLContextGroupResourceBase;
friend class QOpenGLSharedResource;
friend class QOpenGLMultiGroupSharedResource;
};

class  QOpenGLContext : public QObject
{
Q_OBJECT
inline QOpenGLContextPrivate* d_func() { return reinterpret_cast<QOpenGLContextPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLContextPrivate* d_func() const { return reinterpret_cast<const QOpenGLContextPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLContextPrivate;
public:
explicit QOpenGLContext(QObject *parent = 0);
~QOpenGLContext();

void setFormat(const QSurfaceFormat &format);
void setShareContext(QOpenGLContext *shareContext);
void setScreen(QScreen *screen);

bool create();
bool isValid() const;

QSurfaceFormat format() const;
QOpenGLContext *shareContext() const;
QOpenGLContextGroup *shareGroup() const;
QScreen *screen() const;

GLuint defaultFramebufferObject() const;

bool makeCurrent(QSurface *surface);
void doneCurrent();

void swapBuffers(QSurface *surface);
QFunctionPointer getProcAddress(const QByteArray &procName) const;

QSurface *surface() const;

static QOpenGLContext *currentContext();
static bool areSharing(QOpenGLContext *first, QOpenGLContext *second);

QPlatformOpenGLContext *handle() const;
QPlatformOpenGLContext *shareHandle() const;

QOpenGLFunctions *functions() const;

QAbstractOpenGLFunctions *versionFunctions(const QOpenGLVersionProfile &versionProfile = QOpenGLVersionProfile()) const;

template<class TYPE>
TYPE *versionFunctions() const
{
QOpenGLVersionProfile v = TYPE::versionProfile();
return static_cast<TYPE*>(versionFunctions(v));
}

QSet<QByteArray> extensions() const;
bool hasExtension(const QByteArray &extension) const;

signals:
void aboutToBeDestroyed();

private:
friend class QGLContext;
friend class QGLPixelBuffer;
friend class QOpenGLContextResourceBase;
friend class QOpenGLPaintDevice;
friend class QOpenGLGlyphTexture;
friend class QOpenGLTextureGlyphCache;
friend class QOpenGLEngineShaderManager;
friend class QOpenGLFramebufferObject;
friend class QOpenGLFramebufferObjectPrivate;
friend class QOpenGL2PaintEngineEx;
friend class QOpenGL2PaintEngineExPrivate;
friend class QSGDistanceFieldGlyphCache;
friend class QWidgetPrivate;
friend class QAbstractOpenGLFunctionsPrivate;

void *qGLContextHandle() const;
void setQGLContextHandle(void *handle,void (*qGLContextDeleteFunction)(void *));
void deleteQGLContext();

QOpenGLVersionFunctionsBackend* functionsBackend(const QOpenGLVersionStatus &v) const;
void insertFunctionsBackend(const QOpenGLVersionStatus &v,
QOpenGLVersionFunctionsBackend *backend);
void removeFunctionsBackend(const QOpenGLVersionStatus &v);

void destroy();
};






# 32 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"



class QPalettePrivate;
class QVariant;

class  QPalette
{

Q_ENUMS(ColorGroup ColorRole)
public:
QPalette();
QPalette(const QColor &button);
QPalette(Qt::GlobalColor button);
QPalette(const QColor &button, const QColor &window);
QPalette(const QBrush &windowText, const QBrush &button, const QBrush &light,
const QBrush &dark, const QBrush &mid, const QBrush &text,
const QBrush &bright_text, const QBrush &base, const QBrush &window);
QPalette(const QColor &windowText, const QColor &window, const QColor &light,
const QColor &dark, const QColor &mid, const QColor &text, const QColor &base);
QPalette(const QPalette &palette);
~QPalette();
QPalette &operator=(const QPalette &palette);









# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"
void swap(QPalette &other) {
qSwap(d, other.d);
qSwap(for_faster_swapping_dont_use, other.for_faster_swapping_dont_use);
}

operator QVariant() const;


enum ColorGroup { Active, Disabled, Inactive, NColorGroups, Current, All, Normal = Active };
enum ColorRole { WindowText, Button, Light, Midlight, Dark, Mid,
Text, BrightText, ButtonText, Base, Window, Shadow,
Highlight, HighlightedText,
Link, LinkVisited,
AlternateBase,
NoRole,
ToolTipBase, ToolTipText,
NColorRoles = ToolTipText + 1,
Foreground = WindowText, Background = Window
};

inline ColorGroup currentColorGroup() const { return static_cast<ColorGroup>(data.current_group); }
inline void setCurrentColorGroup(ColorGroup cg) { data.current_group = cg; }

inline const QColor &color(ColorGroup cg, ColorRole cr) const
{ return brush(cg, cr).color(); }
const QBrush &brush(ColorGroup cg, ColorRole cr) const;
inline void setColor(ColorGroup cg, ColorRole cr, const QColor &color);
inline void setColor(ColorRole cr, const QColor &color);
inline void setBrush(ColorRole cr, const QBrush &brush);
bool isBrushSet(ColorGroup cg, ColorRole cr) const;
void setBrush(ColorGroup cg, ColorRole cr, const QBrush &brush);
void setColorGroup(ColorGroup cr, const QBrush &windowText, const QBrush &button,
const QBrush &light, const QBrush &dark, const QBrush &mid,
const QBrush &text, const QBrush &bright_text, const QBrush &base,
const QBrush &window);
bool isEqual(ColorGroup cr1, ColorGroup cr2) const;

inline const QColor &color(ColorRole cr) const { return color(Current, cr); }
inline const QBrush &brush(ColorRole cr) const { return brush(Current, cr); }
inline const QBrush &foreground() const { return brush(WindowText); }
inline const QBrush &windowText() const { return brush(WindowText); }
inline const QBrush &button() const { return brush(Button); }
inline const QBrush &light() const { return brush(Light); }
inline const QBrush &dark() const { return brush(Dark); }
inline const QBrush &mid() const { return brush(Mid); }
inline const QBrush &text() const { return brush(Text); }
inline const QBrush &base() const { return brush(Base); }
inline const QBrush &alternateBase() const { return brush(AlternateBase); }
inline const QBrush &toolTipBase() const { return brush(ToolTipBase); }
inline const QBrush &toolTipText() const { return brush(ToolTipText); }
inline const QBrush &background() const { return brush(Window); }
inline const QBrush &window() const { return brush(Window); }
inline const QBrush &midlight() const { return brush(Midlight); }
inline const QBrush &brightText() const { return brush(BrightText); }
inline const QBrush &buttonText() const { return brush(ButtonText); }
inline const QBrush &shadow() const { return brush(Shadow); }
inline const QBrush &highlight() const { return brush(Highlight); }
inline const QBrush &highlightedText() const { return brush(HighlightedText); }
inline const QBrush &link() const { return brush(Link); }
inline const QBrush &linkVisited() const { return brush(LinkVisited); }

bool operator==(const QPalette &p) const;
inline bool operator!=(const QPalette &p) const { return !(operator==(p)); }
bool isCopyOf(const QPalette &p) const;




# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"
qint64 cacheKey() const;

QPalette resolve(const QPalette &) const;
inline uint resolve() const { return data.resolve_mask; }
inline void resolve(uint mask) { data.resolve_mask = mask; }

private:
void setColorGroup(ColorGroup cr, const QBrush &windowText, const QBrush &button,
const QBrush &light, const QBrush &dark, const QBrush &mid,
const QBrush &text, const QBrush &bright_text,
const QBrush &base, const QBrush &alternate_base,
const QBrush &window, const QBrush &midlight,
const QBrush &button_text, const QBrush &shadow,
const QBrush &highlight, const QBrush &highlighted_text,
const QBrush &link, const QBrush &link_visited);
void setColorGroup(ColorGroup cr, const QBrush &windowText, const QBrush &button,
const QBrush &light, const QBrush &dark, const QBrush &mid,
const QBrush &text, const QBrush &bright_text,
const QBrush &base, const QBrush &alternate_base,
const QBrush &window, const QBrush &midlight,
const QBrush &button_text, const QBrush &shadow,
const QBrush &highlight, const QBrush &highlighted_text,
const QBrush &link, const QBrush &link_visited,
const QBrush &toolTipBase, const QBrush &toolTipText);
void init();
void detach();

QPalettePrivate *d;
union {
struct {
uint current_group : 4;
uint resolve_mask : 28;
} data;
quint32 for_faster_swapping_dont_use;
};
friend  QDataStream &operator<<(QDataStream &s, const QPalette &p);
};

template<> class QTypeInfo<QPalette > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPalette)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPalette) }; static inline const char *name() { return "QPalette"; } }; template <> inline void qSwap<QPalette>(QPalette &value1, QPalette &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QPalette>(::QPalette &value1, ::QPalette &value2) { value1.swap(value2); } } 

inline void QPalette::setColor(ColorGroup acg, ColorRole acr,
const QColor &acolor)
{ setBrush(acg, acr, QBrush(acolor)); }
inline void QPalette::setColor(ColorRole acr, const QColor &acolor)
{ setColor(All, acr, acolor); }
inline void QPalette::setBrush(ColorRole acr, const QBrush &abrush)
{ setBrush(All, acr, abrush); }





# 201 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"
 QDataStream &operator<<(QDataStream &ds, const QPalette &p);
 QDataStream &operator>>(QDataStream &ds, QPalette &p);



# 206 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"
 QDebug operator<<(QDebug, const QPalette &);


# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"



# 33 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QList"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QRect"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSize"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSizeF"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QTransform"

# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qscreen.h"



class QPlatformScreen;
class QScreenPrivate;
class QWindow;
class QRect;
class QPixmap;

class  QScreen : public QObject
{
Q_OBJECT
inline QScreenPrivate* d_func() { return reinterpret_cast<QScreenPrivate *>(qGetPtrHelper(d_ptr)); } inline const QScreenPrivate* d_func() const { return reinterpret_cast<const QScreenPrivate *>(qGetPtrHelper(d_ptr)); } friend class QScreenPrivate;

Q_PROPERTY(QString name READ name CONSTANT)
Q_PROPERTY(int depth READ depth CONSTANT)
Q_PROPERTY(QSize size READ size NOTIFY geometryChanged)
Q_PROPERTY(QSize availableSize READ availableSize NOTIFY virtualGeometryChanged)
Q_PROPERTY(QSize virtualSize READ virtualSize NOTIFY virtualGeometryChanged)
Q_PROPERTY(QSize availableVirtualSize READ availableVirtualSize NOTIFY virtualGeometryChanged)
Q_PROPERTY(QRect geometry READ geometry NOTIFY geometryChanged)
Q_PROPERTY(QRect availableGeometry READ availableGeometry NOTIFY virtualGeometryChanged)
Q_PROPERTY(QRect virtualGeometry READ virtualGeometry NOTIFY virtualGeometryChanged)
Q_PROPERTY(QRect availableVirtualGeometry READ availableVirtualGeometry NOTIFY virtualGeometryChanged)
Q_PROPERTY(QSizeF physicalSize READ physicalSize NOTIFY physicalSizeChanged)
Q_PROPERTY(qreal physicalDotsPerInchX READ physicalDotsPerInchX NOTIFY physicalDotsPerInchChanged)
Q_PROPERTY(qreal physicalDotsPerInchY READ physicalDotsPerInchY NOTIFY physicalDotsPerInchChanged)
Q_PROPERTY(qreal physicalDotsPerInch READ physicalDotsPerInch NOTIFY physicalDotsPerInchChanged)
Q_PROPERTY(qreal logicalDotsPerInchX READ logicalDotsPerInchX NOTIFY logicalDotsPerInchChanged)
Q_PROPERTY(qreal logicalDotsPerInchY READ logicalDotsPerInchY NOTIFY logicalDotsPerInchChanged)
Q_PROPERTY(qreal logicalDotsPerInch READ logicalDotsPerInch NOTIFY logicalDotsPerInchChanged)
Q_PROPERTY(Qt::ScreenOrientation primaryOrientation READ primaryOrientation NOTIFY primaryOrientationChanged)
Q_PROPERTY(Qt::ScreenOrientation orientation READ orientation NOTIFY orientationChanged)
Q_PROPERTY(qreal refreshRate READ refreshRate NOTIFY refreshRateChanged)

public:
QPlatformScreen *handle() const;

QString name() const;

int depth() const;

QSize size() const;
QRect geometry() const;

QSizeF physicalSize() const;

qreal physicalDotsPerInchX() const;
qreal physicalDotsPerInchY() const;
qreal physicalDotsPerInch() const;

qreal logicalDotsPerInchX() const;
qreal logicalDotsPerInchY() const;
qreal logicalDotsPerInch() const;

qreal devicePixelRatio() const;

QSize availableSize() const;
QRect availableGeometry() const;

QList<QScreen *> virtualSiblings() const;

QSize virtualSize() const;
QRect virtualGeometry() const;

QSize availableVirtualSize() const;
QRect availableVirtualGeometry() const;

Qt::ScreenOrientation primaryOrientation() const;
Qt::ScreenOrientation orientation() const;

Qt::ScreenOrientations orientationUpdateMask() const;
void setOrientationUpdateMask(Qt::ScreenOrientations mask);

int angleBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b) const;
QTransform transformBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &target) const;
QRect mapBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &rect) const;

bool isPortrait(Qt::ScreenOrientation orientation) const;
bool isLandscape(Qt::ScreenOrientation orientation) const;

QPixmap grabWindow(WId window, int x = 0, int y = 0, int w = -1, int h = -1);

qreal refreshRate() const;

signals:
void geometryChanged(const QRect &geometry);
void physicalSizeChanged(const QSizeF &size);
void physicalDotsPerInchChanged(qreal dpi);
void logicalDotsPerInchChanged(qreal dpi);
void virtualGeometryChanged(const QRect &rect);
void primaryOrientationChanged(Qt::ScreenOrientation orientation);
void orientationChanged(Qt::ScreenOrientation orientation);
void refreshRateChanged(qreal refreshRate);

private:
explicit QScreen(QPlatformScreen *screen);

QScreen(const QScreen &) ; QScreen &operator=(const QScreen &) ;
friend class QGuiApplicationPrivate;
friend class QPlatformIntegration;
friend class QPlatformScreen;
};





# 34 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsessionmanager.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsessionmanager.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsessionmanager.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsessionmanager.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsessionmanager.h"




# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsessionmanager.h"



class QGuiApplication;

class QSessionManagerPrivate;

class  QSessionManager : public QObject
{
Q_OBJECT
inline QSessionManagerPrivate* d_func() { return reinterpret_cast<QSessionManagerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSessionManagerPrivate* d_func() const { return reinterpret_cast<const QSessionManagerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSessionManagerPrivate;
QSessionManager(QGuiApplication *app, QString &id, QString &key);
~QSessionManager();
public:
QString sessionId() const;
QString sessionKey() const;

bool allowsInteraction();
bool allowsErrorInteraction();
void release();

void cancel();

enum RestartHint {
RestartIfRunning,
RestartAnyway,
RestartImmediately,
RestartNever
};
void setRestartHint(RestartHint);
RestartHint restartHint() const;

void setRestartCommand(const QStringList&);
QStringList restartCommand() const;
void setDiscardCommand(const QStringList&);
QStringList discardCommand() const;

void setManagerProperty(const QString& name, const QString& value);
void setManagerProperty(const QString& name, const QStringList& value);

bool isPhase2() const;
void requestPhase2();

private:
friend class QGuiApplication;
friend class QGuiApplicationPrivate;
};






# 35 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstylehints.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstylehints.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstylehints.h"



class QPlatformIntegration;

class  QStyleHints : public QObject
{
Q_OBJECT
public:
int mouseDoubleClickInterval() const;
int startDragDistance() const;
int startDragTime() const;
int startDragVelocity() const;
int keyboardInputInterval() const;
int keyboardAutoRepeatRate() const;
int cursorFlashTime() const;
bool showIsFullScreen() const;
int passwordMaskDelay() const;
QChar passwordMaskCharacter() const;
qreal fontSmoothingGamma() const;
bool useRtlExtensions() const;

private:
friend class QGuiApplication;
QStyleHints();
};




# 36 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"



























































































# 37 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"

































































































































































# 38 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtouchdevice.h"



























































































# 39 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"






















































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QEvent"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
















































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMargins"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QRect"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurface.h"



























































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"

































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"































































































































# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"



# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"



class QWindowPrivate;

class QExposeEvent;
class QFocusEvent;
class QMoveEvent;
class QResizeEvent;
class QShowEvent;
class QHideEvent;
class QKeyEvent;
class QMouseEvent;

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
class QWheelEvent;

# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
class QTouchEvent;

# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
class QTabletEvent;


# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
class QPlatformSurface;
class QPlatformWindow;
class QBackingStore;
class QScreen;
class QAccessibleInterface;

class  QWindow : public QObject, public QSurface
{
Q_OBJECT
inline QWindowPrivate* d_func() { return reinterpret_cast<QWindowPrivate *>(qGetPtrHelper(d_ptr)); } inline const QWindowPrivate* d_func() const { return reinterpret_cast<const QWindowPrivate *>(qGetPtrHelper(d_ptr)); } friend class QWindowPrivate;

Q_ENUMS(Visibility)











Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(Qt::WindowModality modality READ modality WRITE setModality NOTIFY modalityChanged)
Q_PROPERTY(Qt::WindowFlags flags READ flags WRITE setFlags)
Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged)
Q_PROPERTY(int y READ y WRITE setY NOTIFY yChanged)
Q_PROPERTY(int width READ width WRITE setWidth NOTIFY widthChanged)
Q_PROPERTY(int height READ height WRITE setHeight NOTIFY heightChanged)
Q_PROPERTY(int minimumWidth READ minimumWidth WRITE setMinimumWidth NOTIFY minimumWidthChanged)
Q_PROPERTY(int minimumHeight READ minimumHeight WRITE setMinimumHeight NOTIFY minimumHeightChanged)
Q_PROPERTY(int maximumWidth READ maximumWidth WRITE setMaximumWidth NOTIFY maximumWidthChanged)
Q_PROPERTY(int maximumHeight READ maximumHeight WRITE setMaximumHeight NOTIFY maximumHeightChanged)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY visibleChanged)
Q_PROPERTY(bool active READ isActive NOTIFY activeChanged REVISION 1)
Q_PROPERTY(Visibility visibility READ visibility WRITE setVisibility NOTIFY visibilityChanged REVISION 1)
Q_PROPERTY(Qt::ScreenOrientation contentOrientation READ contentOrientation WRITE reportContentOrientationChange NOTIFY contentOrientationChanged)
Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity NOTIFY opacityChanged REVISION 1)

public:
enum Visibility {
Hidden = 0,
AutomaticVisibility,
Windowed,
Minimized,
Maximized,
FullScreen
};

explicit QWindow(QScreen *screen = 0);
explicit QWindow(QWindow *parent);
virtual ~QWindow();

void setSurfaceType(SurfaceType surfaceType);
SurfaceType surfaceType() const;

bool isVisible() const;

Visibility visibility() const;
void setVisibility(Visibility v);

void create();

WId winId() const;

QWindow *parent() const;
void setParent(QWindow *parent);

bool isTopLevel() const;

bool isModal() const;
Qt::WindowModality modality() const;
void setModality(Qt::WindowModality modality);

void setFormat(const QSurfaceFormat &format);
QSurfaceFormat format() const;
QSurfaceFormat requestedFormat() const;

void setFlags(Qt::WindowFlags flags);
Qt::WindowFlags flags() const;
Qt::WindowType type() const;

QString title() const;

void setOpacity(qreal level);
qreal opacity() const;

void setMask(const QRegion &region);
QRegion mask() const;

bool isActive() const;

void reportContentOrientationChange(Qt::ScreenOrientation orientation);
Qt::ScreenOrientation contentOrientation() const;

qreal devicePixelRatio() const;

Qt::WindowState windowState() const;
void setWindowState(Qt::WindowState state);

void setTransientParent(QWindow *parent);
QWindow *transientParent() const;

enum AncestorMode {
ExcludeTransients,
IncludeTransients
};

bool isAncestorOf(const QWindow *child, AncestorMode mode = IncludeTransients) const;

bool isExposed() const;

inline int minimumWidth() const { return minimumSize().width(); }
inline int minimumHeight() const { return minimumSize().height(); }
inline int maximumWidth() const { return maximumSize().width(); }
inline int maximumHeight() const { return maximumSize().height(); }

QSize minimumSize() const;
QSize maximumSize() const;
QSize baseSize() const;
QSize sizeIncrement() const;

void setMinimumSize(const QSize &size);
void setMaximumSize(const QSize &size);
void setBaseSize(const QSize &size);
void setSizeIncrement(const QSize &size);

void setGeometry(int posx, int posy, int w, int h);
void setGeometry(const QRect &rect);
QRect geometry() const;

QMargins frameMargins() const;
QRect frameGeometry() const;

QPoint framePosition() const;
void setFramePosition(const QPoint &point);

inline int width() const { return geometry().width(); }
inline int height() const { return geometry().height(); }
inline int x() const { return geometry().x(); }
inline int y() const { return geometry().y(); }

inline QSize size() const { return geometry().size(); }
inline QPoint position() const { return geometry().topLeft(); }

void setPosition(const QPoint &pt);
void setPosition(int posx, int posy);

void resize(const QSize &newSize);
void resize(int w, int h);

void setFilePath(const QString &filePath);
QString filePath() const;

void setIcon(const QIcon &icon);
QIcon icon() const;

void destroy();

QPlatformWindow *handle() const;

bool setKeyboardGrabEnabled(bool grab);
bool setMouseGrabEnabled(bool grab);

QScreen *screen() const;
void setScreen(QScreen *screen);

virtual QAccessibleInterface *accessibleRoot() const;
virtual QObject *focusObject() const;

QPoint mapToGlobal(const QPoint &pos) const;
QPoint mapFromGlobal(const QPoint &pos) const;


# 258 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
QCursor cursor() const;
void setCursor(const QCursor &);
void unsetCursor();


# 263 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
static QWindow *fromWinId(WId id);

public slots:
Q_REVISION(1) void requestActivate();

void setVisible(bool visible);

void show();
void hide();

void showMinimized();
void showMaximized();
void showFullScreen();
void showNormal();

bool close();
void raise();
void lower();

void setTitle(const QString &);

void setX(int arg);
void setY(int arg);
void setWidth(int arg);
void setHeight(int arg);

void setMinimumWidth(int w);
void setMinimumHeight(int h);
void setMaximumWidth(int w);
void setMaximumHeight(int h);

Q_REVISION(1) void alert(int msec);

signals:
void screenChanged(QScreen *screen);
void modalityChanged(Qt::WindowModality modality);
void windowStateChanged(Qt::WindowState windowState);

void xChanged(int arg);
void yChanged(int arg);

void widthChanged(int arg);
void heightChanged(int arg);

void minimumWidthChanged(int arg);
void minimumHeightChanged(int arg);
void maximumWidthChanged(int arg);
void maximumHeightChanged(int arg);

void visibleChanged(bool arg);
Q_REVISION(1) void visibilityChanged(QWindow::Visibility visibility);
Q_REVISION(1) void activeChanged();
void contentOrientationChanged(Qt::ScreenOrientation orientation);

void focusObjectChanged(QObject *object);

Q_REVISION(1) void opacityChanged(qreal opacity);

private slots:
void screenDestroyed(QObject *screen);

protected:
virtual void exposeEvent(QExposeEvent *);
virtual void resizeEvent(QResizeEvent *);
virtual void moveEvent(QMoveEvent *);
virtual void focusInEvent(QFocusEvent *);
virtual void focusOutEvent(QFocusEvent *);

virtual void showEvent(QShowEvent *);
virtual void hideEvent(QHideEvent *);


virtual bool event(QEvent *);
virtual void keyPressEvent(QKeyEvent *);
virtual void keyReleaseEvent(QKeyEvent *);
virtual void mousePressEvent(QMouseEvent *);
virtual void mouseReleaseEvent(QMouseEvent *);
virtual void mouseDoubleClickEvent(QMouseEvent *);
virtual void mouseMoveEvent(QMouseEvent *);

# 343 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
virtual void wheelEvent(QWheelEvent *);

# 345 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
virtual void touchEvent(QTouchEvent *);

# 347 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
virtual void tabletEvent(QTabletEvent *);

# 349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"
virtual bool nativeEvent(const QByteArray &eventType, void *message, long *result);

QWindow(QWindowPrivate &dd, QWindow *parent);

private:

QPlatformSurface *surfaceHandle() const;

QWindow(const QWindow &) ; QWindow &operator=(const QWindow &) ;

friend class QGuiApplication;
friend class QGuiApplicationPrivate;
friend  QWindowPrivate *qt_window_private(QWindow *window);
};




# 40 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 41 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatastream.h"


















































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"



template <int N, int M, typename T>
class QGenericMatrix
{
public:
QGenericMatrix();
QGenericMatrix(const QGenericMatrix<N, M, T>& other);
explicit QGenericMatrix(const T *values);

const T& operator()(int row, int column) const;
T& operator()(int row, int column);

bool isIdentity() const;
void setToIdentity();

void fill(T value);

QGenericMatrix<M, N, T> transposed() const;

QGenericMatrix<N, M, T>& operator+=(const QGenericMatrix<N, M, T>& other);
QGenericMatrix<N, M, T>& operator-=(const QGenericMatrix<N, M, T>& other);
QGenericMatrix<N, M, T>& operator*=(T factor);
QGenericMatrix<N, M, T>& operator/=(T divisor);
bool operator==(const QGenericMatrix<N, M, T>& other) const;
bool operator!=(const QGenericMatrix<N, M, T>& other) const;

void copyDataTo(T *values) const;

T *data() { return *m; }
const T *data() const { return *m; }
const T *constData() const { return *m; }


# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"
template<int NN, int MM, typename TT>
friend QGenericMatrix<NN, MM, TT> operator+(const QGenericMatrix<NN, MM, TT>& m1, const QGenericMatrix<NN, MM, TT>& m2);
template<int NN, int MM, typename TT>
friend QGenericMatrix<NN, MM, TT> operator-(const QGenericMatrix<NN, MM, TT>& m1, const QGenericMatrix<NN, MM, TT>& m2);
template<int NN, int M1, int M2, typename TT>
friend QGenericMatrix<M1, M2, TT> operator*(const QGenericMatrix<NN, M2, TT>& m1, const QGenericMatrix<M1, NN, TT>& m2);
template<int NN, int MM, typename TT>
friend QGenericMatrix<NN, MM, TT> operator-(const QGenericMatrix<NN, MM, TT>& matrix);
template<int NN, int MM, typename TT>
friend QGenericMatrix<NN, MM, TT> operator*(TT factor, const QGenericMatrix<NN, MM, TT>& matrix);
template<int NN, int MM, typename TT>
friend QGenericMatrix<NN, MM, TT> operator*(const QGenericMatrix<NN, MM, TT>& matrix, TT factor);
template<int NN, int MM, typename TT>
friend QGenericMatrix<NN, MM, TT> operator/(const QGenericMatrix<NN, MM, TT>& matrix, TT divisor);

private:

# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"
T m[N][M]; 

explicit QGenericMatrix(int) {} 


# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"
template <int NN, int MM, typename TT>
friend class QGenericMatrix;

# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"
};

template <int N, int M, typename T>
inline QGenericMatrix<N, M, T>::QGenericMatrix()
{
setToIdentity();
}

template <int N, int M, typename T>
inline QGenericMatrix<N, M, T>::QGenericMatrix(const QGenericMatrix<N, M, T>& other)
{
for (int col = 0; col < N; ++col)
for (int row = 0; row < M; ++row)
m[col][row] = other.m[col][row];
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T>::QGenericMatrix(const T *values)
{
for (int col = 0; col < N; ++col)
for (int row = 0; row < M; ++row)
m[col][row] = values[row * N + col];
}

template <int N, int M, typename T>
inline const T& QGenericMatrix<N, M, T>::operator()(int row, int column) const
{
qt_noop();
return m[column][row];
}

template <int N, int M, typename T>
inline T& QGenericMatrix<N, M, T>::operator()(int row, int column)
{
qt_noop();
return m[column][row];
}

template <int N, int M, typename T>
 bool QGenericMatrix<N, M, T>::isIdentity() const
{
for (int col = 0; col < N; ++col) {
for (int row = 0; row < M; ++row) {
if (row == col) {
if (m[col][row] != 1.0f)
return false;
} else {
if (m[col][row] != 0.0f)
return false;
}
}
}
return true;
}

template <int N, int M, typename T>
 void QGenericMatrix<N, M, T>::setToIdentity()
{
for (int col = 0; col < N; ++col) {
for (int row = 0; row < M; ++row) {
if (row == col)
m[col][row] = 1.0f;
else
m[col][row] = 0.0f;
}
}
}

template <int N, int M, typename T>
 void QGenericMatrix<N, M, T>::fill(T value)
{
for (int col = 0; col < N; ++col)
for (int row = 0; row < M; ++row)
m[col][row] = value;
}

template <int N, int M, typename T>
 QGenericMatrix<M, N, T> QGenericMatrix<N, M, T>::transposed() const
{
QGenericMatrix<M, N, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[row][col] = m[col][row];
return result;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T>& QGenericMatrix<N, M, T>::operator+=(const QGenericMatrix<N, M, T>& other)
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
m[col][row] += other.m[col][row];
return *this;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T>& QGenericMatrix<N, M, T>::operator-=(const QGenericMatrix<N, M, T>& other)
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
m[col][row] -= other.m[col][row];
return *this;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T>& QGenericMatrix<N, M, T>::operator*=(T factor)
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
m[col][row] *= factor;
return *this;
}

template <int N, int M, typename T>
 bool QGenericMatrix<N, M, T>::operator==(const QGenericMatrix<N, M, T>& other) const
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col) {
if (m[col][row] != other.m[col][row])
return false;
}
return true;
}

template <int N, int M, typename T>
 bool QGenericMatrix<N, M, T>::operator!=(const QGenericMatrix<N, M, T>& other) const
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col) {
if (m[col][row] != other.m[col][row])
return true;
}
return false;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T>& QGenericMatrix<N, M, T>::operator/=(T divisor)
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
m[col][row] /= divisor;
return *this;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T> operator+(const QGenericMatrix<N, M, T>& m1, const QGenericMatrix<N, M, T>& m2)
{
QGenericMatrix<N, M, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[col][row] = m1.m[col][row] + m2.m[col][row];
return result;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T> operator-(const QGenericMatrix<N, M, T>& m1, const QGenericMatrix<N, M, T>& m2)
{
QGenericMatrix<N, M, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[col][row] = m1.m[col][row] - m2.m[col][row];
return result;
}

template <int N, int M1, int M2, typename T>
 QGenericMatrix<M1, M2, T> operator*(const QGenericMatrix<N, M2, T>& m1, const QGenericMatrix<M1, N, T>& m2)
{
QGenericMatrix<M1, M2, T> result(1);
for (int row = 0; row < M2; ++row) {
for (int col = 0; col < M1; ++col) {
T sum(0.0f);
for (int j = 0; j < N; ++j)
sum += m1.m[j][row] * m2.m[col][j];
result.m[col][row] = sum;
}
}
return result;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T> operator-(const QGenericMatrix<N, M, T>& matrix)
{
QGenericMatrix<N, M, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[col][row] = -matrix.m[col][row];
return result;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T> operator*(T factor, const QGenericMatrix<N, M, T>& matrix)
{
QGenericMatrix<N, M, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[col][row] = matrix.m[col][row] * factor;
return result;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T> operator*(const QGenericMatrix<N, M, T>& matrix, T factor)
{
QGenericMatrix<N, M, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[col][row] = matrix.m[col][row] * factor;
return result;
}

template <int N, int M, typename T>
 QGenericMatrix<N, M, T> operator/(const QGenericMatrix<N, M, T>& matrix, T divisor)
{
QGenericMatrix<N, M, T> result(1);
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
result.m[col][row] = matrix.m[col][row] / divisor;
return result;
}

template <int N, int M, typename T>
 void QGenericMatrix<N, M, T>::copyDataTo(T *values) const
{
for (int col = 0; col < N; ++col)
for (int row = 0; row < M; ++row)
values[row * N + col] = T(m[col][row]);
}


typedef QGenericMatrix<2, 2, float> QMatrix2x2;
typedef QGenericMatrix<2, 3, float> QMatrix2x3;
typedef QGenericMatrix<2, 4, float> QMatrix2x4;
typedef QGenericMatrix<3, 2, float> QMatrix3x2;
typedef QGenericMatrix<3, 3, float> QMatrix3x3;
typedef QGenericMatrix<3, 4, float> QMatrix3x4;
typedef QGenericMatrix<4, 2, float> QMatrix4x2;
typedef QGenericMatrix<4, 3, float> QMatrix4x3;



# 348 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"
template <int N, int M, typename T>
QDebug operator<<(QDebug dbg, const QGenericMatrix<N, M, T> &m)
{
dbg.nospace() << "QGenericMatrix<" << N << ", " << M
<< ", " << QTypeInfo<T>::name()
<< ">(" << endl << qSetFieldWidth(10);
for (int row = 0; row < M; ++row) {
for (int col = 0; col < N; ++col)
dbg << m(row, col);
dbg << endl;
}
dbg << qSetFieldWidth(0) << ')';
return dbg.space();
}





# 367 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"
template <int N, int M, typename T>
QDataStream &operator<<(QDataStream &stream, const QGenericMatrix<N, M, T> &matrix)
{
for (int row = 0; row < M; ++row)
for (int col = 0; col < N; ++col)
stream << double(matrix(row, col));
return stream;
}

template <int N, int M, typename T>
QDataStream &operator>>(QDataStream &stream, QGenericMatrix<N, M, T> &matrix)
{
double x;
for (int row = 0; row < M; ++row) {
for (int col = 0; col < N; ++col) {
stream >> x;
matrix(row, col) = T(x);
}
}
return stream;
}



# 391 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"


 template <> struct QMetaTypeId< QMatrix2x2 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix2x2 >("QMatrix2x2", reinterpret_cast< QMatrix2x2 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix2x3 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix2x3 >("QMatrix2x3", reinterpret_cast< QMatrix2x3 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix2x4 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix2x4 >("QMatrix2x4", reinterpret_cast< QMatrix2x4 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix3x2 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix3x2 >("QMatrix3x2", reinterpret_cast< QMatrix3x2 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix3x3 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix3x3 >("QMatrix3x3", reinterpret_cast< QMatrix3x3 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix3x4 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix3x4 >("QMatrix3x4", reinterpret_cast< QMatrix3x4 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix4x2 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix4x2 >("QMatrix4x2", reinterpret_cast< QMatrix4x2 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QMatrix4x3 > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QMatrix4x3 >("QMatrix4x3", reinterpret_cast< QMatrix4x3 *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"



class QMatrix4x4;
class QVector2D;
class QVector4D;



# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
class  QVector3D
{
public:
QVector3D();
QVector3D(float xpos, float ypos, float zpos);
explicit QVector3D(const QPoint& point);
explicit QVector3D(const QPointF& point);

# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
QVector3D(const QVector2D& vector);
QVector3D(const QVector2D& vector, float zpos);


# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
explicit QVector3D(const QVector4D& vector);


# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
bool isNull() const;

float x() const;
float y() const;
float z() const;

void setX(float x);
void setY(float y);
void setZ(float z);

float length() const;
float lengthSquared() const;

QVector3D normalized() const;
void normalize();

QVector3D &operator+=(const QVector3D &vector);
QVector3D &operator-=(const QVector3D &vector);
QVector3D &operator*=(float factor);
QVector3D &operator*=(const QVector3D& vector);
QVector3D &operator/=(float divisor);

static float dotProduct(const QVector3D& v1, const QVector3D& v2);
static QVector3D crossProduct(const QVector3D& v1, const QVector3D& v2);
static QVector3D normal(const QVector3D& v1, const QVector3D& v2);
static QVector3D normal
(const QVector3D& v1, const QVector3D& v2, const QVector3D& v3);

float distanceToPoint(const QVector3D& point) const;
float distanceToPlane(const QVector3D& plane, const QVector3D& normal) const;
float distanceToPlane(const QVector3D& plane1, const QVector3D& plane2, const QVector3D& plane3) const;
float distanceToLine(const QVector3D& point, const QVector3D& direction) const;

friend inline bool operator==(const QVector3D &v1, const QVector3D &v2);
friend inline bool operator!=(const QVector3D &v1, const QVector3D &v2);
friend inline const QVector3D operator+(const QVector3D &v1, const QVector3D &v2);
friend inline const QVector3D operator-(const QVector3D &v1, const QVector3D &v2);
friend inline const QVector3D operator*(float factor, const QVector3D &vector);
friend inline const QVector3D operator*(const QVector3D &vector, float factor);
friend const QVector3D operator*(const QVector3D &v1, const QVector3D& v2);
friend inline const QVector3D operator-(const QVector3D &vector);
friend inline const QVector3D operator/(const QVector3D &vector, float divisor);

friend inline bool qFuzzyCompare(const QVector3D& v1, const QVector3D& v2);


# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
QVector2D toVector2D() const;


# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
QVector4D toVector4D() const;


# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
QPoint toPoint() const;
QPointF toPointF() const;

operator QVariant() const;

private:
float xp, yp, zp;

friend class QVector2D;
friend class QVector4D;

# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
friend QVector3D operator*(const QVector3D& vector, const QMatrix4x4& matrix);
friend QVector3D operator*(const QMatrix4x4& matrix, const QVector3D& vector);

# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
};

template<> class QTypeInfo<QVector3D > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QVector3D)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QVector3D) }; static inline const char *name() { return "QVector3D"; } };

inline QVector3D::QVector3D() : xp(0.0f), yp(0.0f), zp(0.0f) {}

inline QVector3D::QVector3D(float xpos, float ypos, float zpos) : xp(xpos), yp(ypos), zp(zpos) {}

inline QVector3D::QVector3D(const QPoint& point) : xp(point.x()), yp(point.y()), zp(0.0f) {}

inline QVector3D::QVector3D(const QPointF& point) : xp(point.x()), yp(point.y()), zp(0.0f) {}

inline bool QVector3D::isNull() const
{
return qIsNull(xp) && qIsNull(yp) && qIsNull(zp);
}

inline float QVector3D::x() const { return xp; }
inline float QVector3D::y() const { return yp; }
inline float QVector3D::z() const { return zp; }

inline void QVector3D::setX(float aX) { xp = aX; }
inline void QVector3D::setY(float aY) { yp = aY; }
inline void QVector3D::setZ(float aZ) { zp = aZ; }

inline QVector3D &QVector3D::operator+=(const QVector3D &vector)
{
xp += vector.xp;
yp += vector.yp;
zp += vector.zp;
return *this;
}

inline QVector3D &QVector3D::operator-=(const QVector3D &vector)
{
xp -= vector.xp;
yp -= vector.yp;
zp -= vector.zp;
return *this;
}

inline QVector3D &QVector3D::operator*=(float factor)
{
xp *= factor;
yp *= factor;
zp *= factor;
return *this;
}

inline QVector3D &QVector3D::operator*=(const QVector3D& vector)
{
xp *= vector.xp;
yp *= vector.yp;
zp *= vector.zp;
return *this;
}

inline QVector3D &QVector3D::operator/=(float divisor)
{
xp /= divisor;
yp /= divisor;
zp /= divisor;
return *this;
}

inline bool operator==(const QVector3D &v1, const QVector3D &v2)
{
return v1.xp == v2.xp && v1.yp == v2.yp && v1.zp == v2.zp;
}

inline bool operator!=(const QVector3D &v1, const QVector3D &v2)
{
return v1.xp != v2.xp || v1.yp != v2.yp || v1.zp != v2.zp;
}

inline const QVector3D operator+(const QVector3D &v1, const QVector3D &v2)
{
return QVector3D(v1.xp + v2.xp, v1.yp + v2.yp, v1.zp + v2.zp);
}

inline const QVector3D operator-(const QVector3D &v1, const QVector3D &v2)
{
return QVector3D(v1.xp - v2.xp, v1.yp - v2.yp, v1.zp - v2.zp);
}

inline const QVector3D operator*(float factor, const QVector3D &vector)
{
return QVector3D(vector.xp * factor, vector.yp * factor, vector.zp * factor);
}

inline const QVector3D operator*(const QVector3D &vector, float factor)
{
return QVector3D(vector.xp * factor, vector.yp * factor, vector.zp * factor);
}

inline const QVector3D operator*(const QVector3D &v1, const QVector3D& v2)
{
return QVector3D(v1.xp * v2.xp, v1.yp * v2.yp, v1.zp * v2.zp);
}

inline const QVector3D operator-(const QVector3D &vector)
{
return QVector3D(-vector.xp, -vector.yp, -vector.zp);
}

inline const QVector3D operator/(const QVector3D &vector, float divisor)
{
return QVector3D(vector.xp / divisor, vector.yp / divisor, vector.zp / divisor);
}

inline bool qFuzzyCompare(const QVector3D& v1, const QVector3D& v2)
{
return qFuzzyCompare(v1.xp, v2.xp) &&
qFuzzyCompare(v1.yp, v2.yp) &&
qFuzzyCompare(v1.zp, v2.zp);
}

inline QPoint QVector3D::toPoint() const
{
return QPoint(qRound(xp), qRound(yp));
}

inline QPointF QVector3D::toPointF() const
{
return QPointF(qreal(xp), qreal(yp));
}


# 266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
 QDebug operator<<(QDebug dbg, const QVector3D &vector);



# 270 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"
 QDataStream &operator<<(QDataStream &, const QVector3D &);
 QDataStream &operator>>(QDataStream &, QVector3D &);




# 276 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"



class QMatrix4x4;
class QVector2D;
class QVector3D;



# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
class  QVector4D
{
public:
QVector4D();
QVector4D(float xpos, float ypos, float zpos, float wpos);
explicit QVector4D(const QPoint& point);
explicit QVector4D(const QPointF& point);

# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
QVector4D(const QVector2D& vector);
QVector4D(const QVector2D& vector, float zpos, float wpos);


# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
QVector4D(const QVector3D& vector);
QVector4D(const QVector3D& vector, float wpos);


# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
bool isNull() const;

float x() const;
float y() const;
float z() const;
float w() const;

void setX(float x);
void setY(float y);
void setZ(float z);
void setW(float w);

float length() const;
float lengthSquared() const;

QVector4D normalized() const;
void normalize();

QVector4D &operator+=(const QVector4D &vector);
QVector4D &operator-=(const QVector4D &vector);
QVector4D &operator*=(float factor);
QVector4D &operator*=(const QVector4D &vector);
QVector4D &operator/=(float divisor);

static float dotProduct(const QVector4D& v1, const QVector4D& v2);

friend inline bool operator==(const QVector4D &v1, const QVector4D &v2);
friend inline bool operator!=(const QVector4D &v1, const QVector4D &v2);
friend inline const QVector4D operator+(const QVector4D &v1, const QVector4D &v2);
friend inline const QVector4D operator-(const QVector4D &v1, const QVector4D &v2);
friend inline const QVector4D operator*(float factor, const QVector4D &vector);
friend inline const QVector4D operator*(const QVector4D &vector, float factor);
friend inline const QVector4D operator*(const QVector4D &v1, const QVector4D& v2);
friend inline const QVector4D operator-(const QVector4D &vector);
friend inline const QVector4D operator/(const QVector4D &vector, float divisor);

friend inline bool qFuzzyCompare(const QVector4D& v1, const QVector4D& v2);


# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
QVector2D toVector2D() const;
QVector2D toVector2DAffine() const;


# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
QVector3D toVector3D() const;
QVector3D toVector3DAffine() const;


# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
QPoint toPoint() const;
QPointF toPointF() const;

operator QVariant() const;

private:
float xp, yp, zp, wp;

friend class QVector2D;
friend class QVector3D;

# 131 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
friend QVector4D operator*(const QVector4D& vector, const QMatrix4x4& matrix);
friend QVector4D operator*(const QMatrix4x4& matrix, const QVector4D& vector);

# 134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
};

template<> class QTypeInfo<QVector4D > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QVector4D)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QVector4D) }; static inline const char *name() { return "QVector4D"; } };

inline QVector4D::QVector4D() : xp(0.0f), yp(0.0f), zp(0.0f), wp(0.0f) {}

inline QVector4D::QVector4D(float xpos, float ypos, float zpos, float wpos) : xp(xpos), yp(ypos), zp(zpos), wp(wpos) {}

inline QVector4D::QVector4D(const QPoint& point) : xp(point.x()), yp(point.y()), zp(0.0f), wp(0.0f) {}

inline QVector4D::QVector4D(const QPointF& point) : xp(point.x()), yp(point.y()), zp(0.0f), wp(0.0f) {}

inline bool QVector4D::isNull() const
{
return qIsNull(xp) && qIsNull(yp) && qIsNull(zp) && qIsNull(wp);
}

inline float QVector4D::x() const { return xp; }
inline float QVector4D::y() const { return yp; }
inline float QVector4D::z() const { return zp; }
inline float QVector4D::w() const { return wp; }

inline void QVector4D::setX(float aX) { xp = aX; }
inline void QVector4D::setY(float aY) { yp = aY; }
inline void QVector4D::setZ(float aZ) { zp = aZ; }
inline void QVector4D::setW(float aW) { wp = aW; }

inline QVector4D &QVector4D::operator+=(const QVector4D &vector)
{
xp += vector.xp;
yp += vector.yp;
zp += vector.zp;
wp += vector.wp;
return *this;
}

inline QVector4D &QVector4D::operator-=(const QVector4D &vector)
{
xp -= vector.xp;
yp -= vector.yp;
zp -= vector.zp;
wp -= vector.wp;
return *this;
}

inline QVector4D &QVector4D::operator*=(float factor)
{
xp *= factor;
yp *= factor;
zp *= factor;
wp *= factor;
return *this;
}

inline QVector4D &QVector4D::operator*=(const QVector4D &vector)
{
xp *= vector.xp;
yp *= vector.yp;
zp *= vector.zp;
wp *= vector.wp;
return *this;
}

inline QVector4D &QVector4D::operator/=(float divisor)
{
xp /= divisor;
yp /= divisor;
zp /= divisor;
wp /= divisor;
return *this;
}

inline bool operator==(const QVector4D &v1, const QVector4D &v2)
{
return v1.xp == v2.xp && v1.yp == v2.yp && v1.zp == v2.zp && v1.wp == v2.wp;
}

inline bool operator!=(const QVector4D &v1, const QVector4D &v2)
{
return v1.xp != v2.xp || v1.yp != v2.yp || v1.zp != v2.zp || v1.wp != v2.wp;
}

inline const QVector4D operator+(const QVector4D &v1, const QVector4D &v2)
{
return QVector4D(v1.xp + v2.xp, v1.yp + v2.yp, v1.zp + v2.zp, v1.wp + v2.wp);
}

inline const QVector4D operator-(const QVector4D &v1, const QVector4D &v2)
{
return QVector4D(v1.xp - v2.xp, v1.yp - v2.yp, v1.zp - v2.zp, v1.wp - v2.wp);
}

inline const QVector4D operator*(float factor, const QVector4D &vector)
{
return QVector4D(vector.xp * factor, vector.yp * factor, vector.zp * factor, vector.wp * factor);
}

inline const QVector4D operator*(const QVector4D &vector, float factor)
{
return QVector4D(vector.xp * factor, vector.yp * factor, vector.zp * factor, vector.wp * factor);
}

inline const QVector4D operator*(const QVector4D &v1, const QVector4D& v2)
{
return QVector4D(v1.xp * v2.xp, v1.yp * v2.yp, v1.zp * v2.zp, v1.wp * v2.wp);
}

inline const QVector4D operator-(const QVector4D &vector)
{
return QVector4D(-vector.xp, -vector.yp, -vector.zp, -vector.wp);
}

inline const QVector4D operator/(const QVector4D &vector, float divisor)
{
return QVector4D(vector.xp / divisor, vector.yp / divisor, vector.zp / divisor, vector.wp / divisor);
}

inline bool qFuzzyCompare(const QVector4D& v1, const QVector4D& v2)
{
return qFuzzyCompare(v1.xp, v2.xp) &&
qFuzzyCompare(v1.yp, v2.yp) &&
qFuzzyCompare(v1.zp, v2.zp) &&
qFuzzyCompare(v1.wp, v2.wp);
}

inline QPoint QVector4D::toPoint() const
{
return QPoint(qRound(xp), qRound(yp));
}

inline QPointF QVector4D::toPointF() const
{
return QPointF(qreal(xp), qreal(yp));
}


# 270 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
 QDebug operator<<(QDebug dbg, const QVector4D &vector);



# 274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"
 QDataStream &operator<<(QDataStream &, const QVector4D &);
 QDataStream &operator>>(QDataStream &, QVector4D &);




# 280 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"






















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"


























































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
class QMatrix4x4;
class QVariant;

class  QQuaternion
{
public:
QQuaternion();
QQuaternion(float scalar, float xpos, float ypos, float zpos);

# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
QQuaternion(float scalar, const QVector3D& vector);


# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
explicit QQuaternion(const QVector4D& vector);


# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
bool isNull() const;
bool isIdentity() const;


# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
QVector3D vector() const;
void setVector(const QVector3D& vector);

# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
void setVector(float x, float y, float z);

float x() const;
float y() const;
float z() const;
float scalar() const;

void setX(float x);
void setY(float y);
void setZ(float z);
void setScalar(float scalar);

float length() const;
float lengthSquared() const;

QQuaternion normalized() const;
void normalize();

QQuaternion conjugate() const;

QVector3D rotatedVector(const QVector3D& vector) const;

QQuaternion &operator+=(const QQuaternion &quaternion);
QQuaternion &operator-=(const QQuaternion &quaternion);
QQuaternion &operator*=(float factor);
QQuaternion &operator*=(const QQuaternion &quaternion);
QQuaternion &operator/=(float divisor);

friend inline bool operator==(const QQuaternion &q1, const QQuaternion &q2);
friend inline bool operator!=(const QQuaternion &q1, const QQuaternion &q2);
friend inline const QQuaternion operator+(const QQuaternion &q1, const QQuaternion &q2);
friend inline const QQuaternion operator-(const QQuaternion &q1, const QQuaternion &q2);
friend inline const QQuaternion operator*(float factor, const QQuaternion &quaternion);
friend inline const QQuaternion operator*(const QQuaternion &quaternion, float factor);
friend inline const QQuaternion operator*(const QQuaternion &q1, const QQuaternion& q2);
friend inline const QQuaternion operator-(const QQuaternion &quaternion);
friend inline const QQuaternion operator/(const QQuaternion &quaternion, float divisor);

friend inline bool qFuzzyCompare(const QQuaternion& q1, const QQuaternion& q2);


# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
QVector4D toVector4D() const;


# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
operator QVariant() const;


# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
static QQuaternion fromAxisAndAngle(const QVector3D& axis, float angle);

# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
static QQuaternion fromAxisAndAngle
(float x, float y, float z, float angle);

static QQuaternion slerp
(const QQuaternion& q1, const QQuaternion& q2, float t);
static QQuaternion nlerp
(const QQuaternion& q1, const QQuaternion& q2, float t);

private:
float wp, xp, yp, zp;
};

template<> class QTypeInfo<QQuaternion > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QQuaternion)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QQuaternion) }; static inline const char *name() { return "QQuaternion"; } };

inline QQuaternion::QQuaternion() : wp(1.0f), xp(0.0f), yp(0.0f), zp(0.0f) {}

inline QQuaternion::QQuaternion(float aScalar, float xpos, float ypos, float zpos) : wp(aScalar), xp(xpos), yp(ypos), zp(zpos) {}


inline bool QQuaternion::isNull() const
{
return qIsNull(xp) && qIsNull(yp) && qIsNull(zp) && qIsNull(wp);
}

inline bool QQuaternion::isIdentity() const
{
return qIsNull(xp) && qIsNull(yp) && qIsNull(zp) && wp == 1.0f;
}

inline float QQuaternion::x() const { return xp; }
inline float QQuaternion::y() const { return yp; }
inline float QQuaternion::z() const { return zp; }
inline float QQuaternion::scalar() const { return wp; }

inline void QQuaternion::setX(float aX) { xp = aX; }
inline void QQuaternion::setY(float aY) { yp = aY; }
inline void QQuaternion::setZ(float aZ) { zp = aZ; }
inline void QQuaternion::setScalar(float aScalar) { wp = aScalar; }

inline QQuaternion QQuaternion::conjugate() const
{
return QQuaternion(wp, -xp, -yp, -zp);
}

inline QQuaternion &QQuaternion::operator+=(const QQuaternion &quaternion)
{
xp += quaternion.xp;
yp += quaternion.yp;
zp += quaternion.zp;
wp += quaternion.wp;
return *this;
}

inline QQuaternion &QQuaternion::operator-=(const QQuaternion &quaternion)
{
xp -= quaternion.xp;
yp -= quaternion.yp;
zp -= quaternion.zp;
wp -= quaternion.wp;
return *this;
}

inline QQuaternion &QQuaternion::operator*=(float factor)
{
xp *= factor;
yp *= factor;
zp *= factor;
wp *= factor;
return *this;
}

inline const QQuaternion operator*(const QQuaternion &q1, const QQuaternion& q2)
{
float ww = (q1.zp + q1.xp) * (q2.xp + q2.yp);
float yy = (q1.wp - q1.yp) * (q2.wp + q2.zp);
float zz = (q1.wp + q1.yp) * (q2.wp - q2.zp);
float xx = ww + yy + zz;
float qq = 0.5 * (xx + (q1.zp - q1.xp) * (q2.xp - q2.yp));

float w = qq - ww + (q1.zp - q1.yp) * (q2.yp - q2.zp);
float x = qq - xx + (q1.xp + q1.wp) * (q2.xp + q2.wp);
float y = qq - yy + (q1.wp - q1.xp) * (q2.yp + q2.zp);
float z = qq - zz + (q1.zp + q1.yp) * (q2.wp - q2.xp);

return QQuaternion(w, x, y, z);
}

inline QQuaternion &QQuaternion::operator*=(const QQuaternion &quaternion)
{
*this = *this * quaternion;
return *this;
}

inline QQuaternion &QQuaternion::operator/=(float divisor)
{
xp /= divisor;
yp /= divisor;
zp /= divisor;
wp /= divisor;
return *this;
}

inline bool operator==(const QQuaternion &q1, const QQuaternion &q2)
{
return q1.xp == q2.xp && q1.yp == q2.yp && q1.zp == q2.zp && q1.wp == q2.wp;
}

inline bool operator!=(const QQuaternion &q1, const QQuaternion &q2)
{
return q1.xp != q2.xp || q1.yp != q2.yp || q1.zp != q2.zp || q1.wp != q2.wp;
}

inline const QQuaternion operator+(const QQuaternion &q1, const QQuaternion &q2)
{
return QQuaternion(q1.wp + q2.wp, q1.xp + q2.xp, q1.yp + q2.yp, q1.zp + q2.zp);
}

inline const QQuaternion operator-(const QQuaternion &q1, const QQuaternion &q2)
{
return QQuaternion(q1.wp - q2.wp, q1.xp - q2.xp, q1.yp - q2.yp, q1.zp - q2.zp);
}

inline const QQuaternion operator*(float factor, const QQuaternion &quaternion)
{
return QQuaternion(quaternion.wp * factor, quaternion.xp * factor, quaternion.yp * factor, quaternion.zp * factor);
}

inline const QQuaternion operator*(const QQuaternion &quaternion, float factor)
{
return QQuaternion(quaternion.wp * factor, quaternion.xp * factor, quaternion.yp * factor, quaternion.zp * factor);
}

inline const QQuaternion operator-(const QQuaternion &quaternion)
{
return QQuaternion(-quaternion.wp, -quaternion.xp, -quaternion.yp, -quaternion.zp);
}

inline const QQuaternion operator/(const QQuaternion &quaternion, float divisor)
{
return QQuaternion(quaternion.wp / divisor, quaternion.xp / divisor, quaternion.yp / divisor, quaternion.zp / divisor);
}

inline bool qFuzzyCompare(const QQuaternion& q1, const QQuaternion& q2)
{
return qFuzzyCompare(q1.xp, q2.xp) &&
qFuzzyCompare(q1.yp, q2.yp) &&
qFuzzyCompare(q1.zp, q2.zp) &&
qFuzzyCompare(q1.wp, q2.wp);
}



# 276 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
inline QQuaternion::QQuaternion(float aScalar, const QVector3D& aVector)
: wp(aScalar), xp(aVector.x()), yp(aVector.y()), zp(aVector.z()) {}

inline void QQuaternion::setVector(const QVector3D& aVector)
{
xp = aVector.x();
yp = aVector.y();
zp = aVector.z();
}

inline QVector3D QQuaternion::vector() const
{
return QVector3D(xp, yp, zp);
}



# 293 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
inline void QQuaternion::setVector(float aX, float aY, float aZ)
{
xp = aX;
yp = aY;
zp = aZ;
}



# 302 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
inline QQuaternion::QQuaternion(const QVector4D& aVector)
: wp(aVector.w()), xp(aVector.x()), yp(aVector.y()), zp(aVector.z()) {}

inline QVector4D QQuaternion::toVector4D() const
{
return QVector4D(xp, yp, zp, wp);
}




# 313 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
 QDebug operator<<(QDebug dbg, const QQuaternion &q);



# 317 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"
 QDataStream &operator<<(QDataStream &, const QQuaternion &);
 QDataStream &operator>>(QDataStream &, QQuaternion &);




# 323 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qgenericmatrix.h"


















































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"





# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
class QMatrix;
class QTransform;
class QVariant;

class  QMatrix4x4
{
public:
inline QMatrix4x4() { setToIdentity(); }
explicit QMatrix4x4(const float *values);
inline QMatrix4x4(float m11, float m12, float m13, float m14,
float m21, float m22, float m23, float m24,
float m31, float m32, float m33, float m34,
float m41, float m42, float m43, float m44);

template <int N, int M>
explicit QMatrix4x4(const QGenericMatrix<N, M, float>& matrix);

QMatrix4x4(const float *values, int cols, int rows);
QMatrix4x4(const QTransform& transform);
QMatrix4x4(const QMatrix& matrix);

inline const float& operator()(int row, int column) const;
inline float& operator()(int row, int column);


# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QVector4D column(int index) const;
inline void setColumn(int index, const QVector4D& value);

inline QVector4D row(int index) const;
inline void setRow(int index, const QVector4D& value);


# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline bool isIdentity() const;
inline void setToIdentity();

inline void fill(float value);

double determinant() const;
QMatrix4x4 inverted(bool *invertible = 0) const;
QMatrix4x4 transposed() const;
QMatrix3x3 normalMatrix() const;

inline QMatrix4x4& operator+=(const QMatrix4x4& other);
inline QMatrix4x4& operator-=(const QMatrix4x4& other);
inline QMatrix4x4& operator*=(const QMatrix4x4& other);
inline QMatrix4x4& operator*=(float factor);
QMatrix4x4& operator/=(float divisor);
inline bool operator==(const QMatrix4x4& other) const;
inline bool operator!=(const QMatrix4x4& other) const;

friend QMatrix4x4 operator+(const QMatrix4x4& m1, const QMatrix4x4& m2);
friend QMatrix4x4 operator-(const QMatrix4x4& m1, const QMatrix4x4& m2);
friend QMatrix4x4 operator*(const QMatrix4x4& m1, const QMatrix4x4& m2);

# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
friend QVector3D operator*(const QMatrix4x4& matrix, const QVector3D& vector);
friend QVector3D operator*(const QVector3D& vector, const QMatrix4x4& matrix);


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
friend QVector4D operator*(const QVector4D& vector, const QMatrix4x4& matrix);
friend QVector4D operator*(const QMatrix4x4& matrix, const QVector4D& vector);

# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
friend QPoint operator*(const QPoint& point, const QMatrix4x4& matrix);
friend QPointF operator*(const QPointF& point, const QMatrix4x4& matrix);
friend QMatrix4x4 operator-(const QMatrix4x4& matrix);
friend QPoint operator*(const QMatrix4x4& matrix, const QPoint& point);
friend QPointF operator*(const QMatrix4x4& matrix, const QPointF& point);
friend QMatrix4x4 operator*(float factor, const QMatrix4x4& matrix);
friend QMatrix4x4 operator*(const QMatrix4x4& matrix, float factor);
friend  QMatrix4x4 operator/(const QMatrix4x4& matrix, float divisor);

friend inline bool qFuzzyCompare(const QMatrix4x4& m1, const QMatrix4x4& m2);


# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
void scale(const QVector3D& vector);
void translate(const QVector3D& vector);
void rotate(float angle, const QVector3D& vector);

# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
void scale(float x, float y);
void scale(float x, float y, float z);
void scale(float factor);
void translate(float x, float y);
void translate(float x, float y, float z);
void rotate(float angle, float x, float y, float z = 0.0f);

# 140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
void rotate(const QQuaternion& quaternion);


# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
void ortho(const QRect& rect);
void ortho(const QRectF& rect);
void ortho(float left, float right, float bottom, float top, float nearPlane, float farPlane);
void frustum(float left, float right, float bottom, float top, float nearPlane, float farPlane);
void perspective(float verticalAngle, float aspectRatio, float nearPlane, float farPlane);

# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
void lookAt(const QVector3D& eye, const QVector3D& center, const QVector3D& up);

# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
void flipCoordinates();

void copyDataTo(float *values) const;

QMatrix toAffine() const;
QTransform toTransform() const;
QTransform toTransform(float distanceToPlane) const;

QPoint map(const QPoint& point) const;
QPointF map(const QPointF& point) const;

# 162 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
QVector3D map(const QVector3D& point) const;
QVector3D mapVector(const QVector3D& vector) const;


# 166 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
QVector4D map(const QVector4D& point) const;

# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
QRect mapRect(const QRect& rect) const;
QRectF mapRect(const QRectF& rect) const;

template <int N, int M>
QGenericMatrix<N, M, float> toGenericMatrix() const;

inline float *data();
inline const float *data() const { return *m; }
inline const float *constData() const { return *m; }

void optimize();

operator QVariant() const;


# 183 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
friend  QDebug operator<<(QDebug dbg, const QMatrix4x4 &m);


# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
private:
float m[4][4]; 
int flagBits; 


enum {
Identity = 0x0000, 
Translation = 0x0001, 
Scale = 0x0002, 
Rotation2D = 0x0004, 
Rotation = 0x0008, 
Perspective = 0x0010, 
General = 0x001f 
};


explicit QMatrix4x4(int) { }

QMatrix4x4 orthonormalInverse() const;

void projectedRotate(float angle, float x, float y, float z);

friend class QGraphicsRotation;
};

template<> class QTypeInfo<QMatrix4x4 > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QMatrix4x4)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QMatrix4x4) }; static inline const char *name() { return "QMatrix4x4"; } };

inline QMatrix4x4::QMatrix4x4
(float m11, float m12, float m13, float m14,
float m21, float m22, float m23, float m24,
float m31, float m32, float m33, float m34,
float m41, float m42, float m43, float m44)
{
m[0][0] = m11; m[0][1] = m21; m[0][2] = m31; m[0][3] = m41;
m[1][0] = m12; m[1][1] = m22; m[1][2] = m32; m[1][3] = m42;
m[2][0] = m13; m[2][1] = m23; m[2][2] = m33; m[2][3] = m43;
m[3][0] = m14; m[3][1] = m24; m[3][2] = m34; m[3][3] = m44;
flagBits = General;
}

template <int N, int M>
inline QMatrix4x4::QMatrix4x4
(const QGenericMatrix<N, M, float>& matrix)
{
const float *values = matrix.constData();
for (int matrixCol = 0; matrixCol < 4; ++matrixCol) {
for (int matrixRow = 0; matrixRow < 4; ++matrixRow) {
if (matrixCol < N && matrixRow < M)
m[matrixCol][matrixRow] = values[matrixCol * M + matrixRow];
else if (matrixCol == matrixRow)
m[matrixCol][matrixRow] = 1.0f;
else
m[matrixCol][matrixRow] = 0.0f;
}
}
flagBits = General;
}

template <int N, int M>
QGenericMatrix<N, M, float> QMatrix4x4::toGenericMatrix() const
{
QGenericMatrix<N, M, float> result;
float *values = result.data();
for (int matrixCol = 0; matrixCol < N; ++matrixCol) {
for (int matrixRow = 0; matrixRow < M; ++matrixRow) {
if (matrixCol < 4 && matrixRow < 4)
values[matrixCol * M + matrixRow] = m[matrixCol][matrixRow];
else if (matrixCol == matrixRow)
values[matrixCol * M + matrixRow] = 1.0f;
else
values[matrixCol * M + matrixRow] = 0.0f;
}
}
return result;
}

inline const float& QMatrix4x4::operator()(int aRow, int aColumn) const
{
qt_noop();
return m[aColumn][aRow];
}

inline float& QMatrix4x4::operator()(int aRow, int aColumn)
{
qt_noop();
flagBits = General;
return m[aColumn][aRow];
}


# 276 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QVector4D QMatrix4x4::column(int index) const
{
qt_noop();
return QVector4D(m[index][0], m[index][1], m[index][2], m[index][3]);
}

inline void QMatrix4x4::setColumn(int index, const QVector4D& value)
{
qt_noop();
m[index][0] = value.x();
m[index][1] = value.y();
m[index][2] = value.z();
m[index][3] = value.w();
flagBits = General;
}

inline QVector4D QMatrix4x4::row(int index) const
{
qt_noop();
return QVector4D(m[0][index], m[1][index], m[2][index], m[3][index]);
}

inline void QMatrix4x4::setRow(int index, const QVector4D& value)
{
qt_noop();
m[0][index] = value.x();
m[1][index] = value.y();
m[2][index] = value.z();
m[3][index] = value.w();
flagBits = General;
}


# 309 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
 QMatrix4x4 operator/(const QMatrix4x4& matrix, float divisor);

inline bool QMatrix4x4::isIdentity() const
{
if (flagBits == Identity)
return true;
if (m[0][0] != 1.0f || m[0][1] != 0.0f || m[0][2] != 0.0f)
return false;
if (m[0][3] != 0.0f || m[1][0] != 0.0f || m[1][1] != 1.0f)
return false;
if (m[1][2] != 0.0f || m[1][3] != 0.0f || m[2][0] != 0.0f)
return false;
if (m[2][1] != 0.0f || m[2][2] != 1.0f || m[2][3] != 0.0f)
return false;
if (m[3][0] != 0.0f || m[3][1] != 0.0f || m[3][2] != 0.0f)
return false;
return (m[3][3] == 1.0f);
}

inline void QMatrix4x4::setToIdentity()
{
m[0][0] = 1.0f;
m[0][1] = 0.0f;
m[0][2] = 0.0f;
m[0][3] = 0.0f;
m[1][0] = 0.0f;
m[1][1] = 1.0f;
m[1][2] = 0.0f;
m[1][3] = 0.0f;
m[2][0] = 0.0f;
m[2][1] = 0.0f;
m[2][2] = 1.0f;
m[2][3] = 0.0f;
m[3][0] = 0.0f;
m[3][1] = 0.0f;
m[3][2] = 0.0f;
m[3][3] = 1.0f;
flagBits = Identity;
}

inline void QMatrix4x4::fill(float value)
{
m[0][0] = value;
m[0][1] = value;
m[0][2] = value;
m[0][3] = value;
m[1][0] = value;
m[1][1] = value;
m[1][2] = value;
m[1][3] = value;
m[2][0] = value;
m[2][1] = value;
m[2][2] = value;
m[2][3] = value;
m[3][0] = value;
m[3][1] = value;
m[3][2] = value;
m[3][3] = value;
flagBits = General;
}

inline QMatrix4x4& QMatrix4x4::operator+=(const QMatrix4x4& other)
{
m[0][0] += other.m[0][0];
m[0][1] += other.m[0][1];
m[0][2] += other.m[0][2];
m[0][3] += other.m[0][3];
m[1][0] += other.m[1][0];
m[1][1] += other.m[1][1];
m[1][2] += other.m[1][2];
m[1][3] += other.m[1][3];
m[2][0] += other.m[2][0];
m[2][1] += other.m[2][1];
m[2][2] += other.m[2][2];
m[2][3] += other.m[2][3];
m[3][0] += other.m[3][0];
m[3][1] += other.m[3][1];
m[3][2] += other.m[3][2];
m[3][3] += other.m[3][3];
flagBits = General;
return *this;
}

inline QMatrix4x4& QMatrix4x4::operator-=(const QMatrix4x4& other)
{
m[0][0] -= other.m[0][0];
m[0][1] -= other.m[0][1];
m[0][2] -= other.m[0][2];
m[0][3] -= other.m[0][3];
m[1][0] -= other.m[1][0];
m[1][1] -= other.m[1][1];
m[1][2] -= other.m[1][2];
m[1][3] -= other.m[1][3];
m[2][0] -= other.m[2][0];
m[2][1] -= other.m[2][1];
m[2][2] -= other.m[2][2];
m[2][3] -= other.m[2][3];
m[3][0] -= other.m[3][0];
m[3][1] -= other.m[3][1];
m[3][2] -= other.m[3][2];
m[3][3] -= other.m[3][3];
flagBits = General;
return *this;
}

inline QMatrix4x4& QMatrix4x4::operator*=(const QMatrix4x4& other)
{
flagBits |= other.flagBits;

if (flagBits < Rotation2D) {
m[3][0] += m[0][0] * other.m[3][0];
m[3][1] += m[1][1] * other.m[3][1];
m[3][2] += m[2][2] * other.m[3][2];

m[0][0] *= other.m[0][0];
m[1][1] *= other.m[1][1];
m[2][2] *= other.m[2][2];
return *this;
}

float m0, m1, m2;
m0 = m[0][0] * other.m[0][0]
+ m[1][0] * other.m[0][1]
+ m[2][0] * other.m[0][2]
+ m[3][0] * other.m[0][3];
m1 = m[0][0] * other.m[1][0]
+ m[1][0] * other.m[1][1]
+ m[2][0] * other.m[1][2]
+ m[3][0] * other.m[1][3];
m2 = m[0][0] * other.m[2][0]
+ m[1][0] * other.m[2][1]
+ m[2][0] * other.m[2][2]
+ m[3][0] * other.m[2][3];
m[3][0] = m[0][0] * other.m[3][0]
+ m[1][0] * other.m[3][1]
+ m[2][0] * other.m[3][2]
+ m[3][0] * other.m[3][3];
m[0][0] = m0;
m[1][0] = m1;
m[2][0] = m2;

m0 = m[0][1] * other.m[0][0]
+ m[1][1] * other.m[0][1]
+ m[2][1] * other.m[0][2]
+ m[3][1] * other.m[0][3];
m1 = m[0][1] * other.m[1][0]
+ m[1][1] * other.m[1][1]
+ m[2][1] * other.m[1][2]
+ m[3][1] * other.m[1][3];
m2 = m[0][1] * other.m[2][0]
+ m[1][1] * other.m[2][1]
+ m[2][1] * other.m[2][2]
+ m[3][1] * other.m[2][3];
m[3][1] = m[0][1] * other.m[3][0]
+ m[1][1] * other.m[3][1]
+ m[2][1] * other.m[3][2]
+ m[3][1] * other.m[3][3];
m[0][1] = m0;
m[1][1] = m1;
m[2][1] = m2;

m0 = m[0][2] * other.m[0][0]
+ m[1][2] * other.m[0][1]
+ m[2][2] * other.m[0][2]
+ m[3][2] * other.m[0][3];
m1 = m[0][2] * other.m[1][0]
+ m[1][2] * other.m[1][1]
+ m[2][2] * other.m[1][2]
+ m[3][2] * other.m[1][3];
m2 = m[0][2] * other.m[2][0]
+ m[1][2] * other.m[2][1]
+ m[2][2] * other.m[2][2]
+ m[3][2] * other.m[2][3];
m[3][2] = m[0][2] * other.m[3][0]
+ m[1][2] * other.m[3][1]
+ m[2][2] * other.m[3][2]
+ m[3][2] * other.m[3][3];
m[0][2] = m0;
m[1][2] = m1;
m[2][2] = m2;

m0 = m[0][3] * other.m[0][0]
+ m[1][3] * other.m[0][1]
+ m[2][3] * other.m[0][2]
+ m[3][3] * other.m[0][3];
m1 = m[0][3] * other.m[1][0]
+ m[1][3] * other.m[1][1]
+ m[2][3] * other.m[1][2]
+ m[3][3] * other.m[1][3];
m2 = m[0][3] * other.m[2][0]
+ m[1][3] * other.m[2][1]
+ m[2][3] * other.m[2][2]
+ m[3][3] * other.m[2][3];
m[3][3] = m[0][3] * other.m[3][0]
+ m[1][3] * other.m[3][1]
+ m[2][3] * other.m[3][2]
+ m[3][3] * other.m[3][3];
m[0][3] = m0;
m[1][3] = m1;
m[2][3] = m2;
return *this;
}

inline QMatrix4x4& QMatrix4x4::operator*=(float factor)
{
m[0][0] *= factor;
m[0][1] *= factor;
m[0][2] *= factor;
m[0][3] *= factor;
m[1][0] *= factor;
m[1][1] *= factor;
m[1][2] *= factor;
m[1][3] *= factor;
m[2][0] *= factor;
m[2][1] *= factor;
m[2][2] *= factor;
m[2][3] *= factor;
m[3][0] *= factor;
m[3][1] *= factor;
m[3][2] *= factor;
m[3][3] *= factor;
flagBits = General;
return *this;
}

inline bool QMatrix4x4::operator==(const QMatrix4x4& other) const
{
return m[0][0] == other.m[0][0] &&
m[0][1] == other.m[0][1] &&
m[0][2] == other.m[0][2] &&
m[0][3] == other.m[0][3] &&
m[1][0] == other.m[1][0] &&
m[1][1] == other.m[1][1] &&
m[1][2] == other.m[1][2] &&
m[1][3] == other.m[1][3] &&
m[2][0] == other.m[2][0] &&
m[2][1] == other.m[2][1] &&
m[2][2] == other.m[2][2] &&
m[2][3] == other.m[2][3] &&
m[3][0] == other.m[3][0] &&
m[3][1] == other.m[3][1] &&
m[3][2] == other.m[3][2] &&
m[3][3] == other.m[3][3];
}

inline bool QMatrix4x4::operator!=(const QMatrix4x4& other) const
{
return m[0][0] != other.m[0][0] ||
m[0][1] != other.m[0][1] ||
m[0][2] != other.m[0][2] ||
m[0][3] != other.m[0][3] ||
m[1][0] != other.m[1][0] ||
m[1][1] != other.m[1][1] ||
m[1][2] != other.m[1][2] ||
m[1][3] != other.m[1][3] ||
m[2][0] != other.m[2][0] ||
m[2][1] != other.m[2][1] ||
m[2][2] != other.m[2][2] ||
m[2][3] != other.m[2][3] ||
m[3][0] != other.m[3][0] ||
m[3][1] != other.m[3][1] ||
m[3][2] != other.m[3][2] ||
m[3][3] != other.m[3][3];
}

inline QMatrix4x4 operator+(const QMatrix4x4& m1, const QMatrix4x4& m2)
{
QMatrix4x4 m(1);
m.m[0][0] = m1.m[0][0] + m2.m[0][0];
m.m[0][1] = m1.m[0][1] + m2.m[0][1];
m.m[0][2] = m1.m[0][2] + m2.m[0][2];
m.m[0][3] = m1.m[0][3] + m2.m[0][3];
m.m[1][0] = m1.m[1][0] + m2.m[1][0];
m.m[1][1] = m1.m[1][1] + m2.m[1][1];
m.m[1][2] = m1.m[1][2] + m2.m[1][2];
m.m[1][3] = m1.m[1][3] + m2.m[1][3];
m.m[2][0] = m1.m[2][0] + m2.m[2][0];
m.m[2][1] = m1.m[2][1] + m2.m[2][1];
m.m[2][2] = m1.m[2][2] + m2.m[2][2];
m.m[2][3] = m1.m[2][3] + m2.m[2][3];
m.m[3][0] = m1.m[3][0] + m2.m[3][0];
m.m[3][1] = m1.m[3][1] + m2.m[3][1];
m.m[3][2] = m1.m[3][2] + m2.m[3][2];
m.m[3][3] = m1.m[3][3] + m2.m[3][3];
m.flagBits = QMatrix4x4::General;
return m;
}

inline QMatrix4x4 operator-(const QMatrix4x4& m1, const QMatrix4x4& m2)
{
QMatrix4x4 m(1);
m.m[0][0] = m1.m[0][0] - m2.m[0][0];
m.m[0][1] = m1.m[0][1] - m2.m[0][1];
m.m[0][2] = m1.m[0][2] - m2.m[0][2];
m.m[0][3] = m1.m[0][3] - m2.m[0][3];
m.m[1][0] = m1.m[1][0] - m2.m[1][0];
m.m[1][1] = m1.m[1][1] - m2.m[1][1];
m.m[1][2] = m1.m[1][2] - m2.m[1][2];
m.m[1][3] = m1.m[1][3] - m2.m[1][3];
m.m[2][0] = m1.m[2][0] - m2.m[2][0];
m.m[2][1] = m1.m[2][1] - m2.m[2][1];
m.m[2][2] = m1.m[2][2] - m2.m[2][2];
m.m[2][3] = m1.m[2][3] - m2.m[2][3];
m.m[3][0] = m1.m[3][0] - m2.m[3][0];
m.m[3][1] = m1.m[3][1] - m2.m[3][1];
m.m[3][2] = m1.m[3][2] - m2.m[3][2];
m.m[3][3] = m1.m[3][3] - m2.m[3][3];
m.flagBits = QMatrix4x4::General;
return m;
}

inline QMatrix4x4 operator*(const QMatrix4x4& m1, const QMatrix4x4& m2)
{
int flagBits = m1.flagBits | m2.flagBits;
if (flagBits < QMatrix4x4::Rotation2D) {
QMatrix4x4 m = m1;
m.m[3][0] += m.m[0][0] * m2.m[3][0];
m.m[3][1] += m.m[1][1] * m2.m[3][1];
m.m[3][2] += m.m[2][2] * m2.m[3][2];

m.m[0][0] *= m2.m[0][0];
m.m[1][1] *= m2.m[1][1];
m.m[2][2] *= m2.m[2][2];
m.flagBits = flagBits;
return m;
}

QMatrix4x4 m(1);
m.m[0][0] = m1.m[0][0] * m2.m[0][0]
+ m1.m[1][0] * m2.m[0][1]
+ m1.m[2][0] * m2.m[0][2]
+ m1.m[3][0] * m2.m[0][3];
m.m[0][1] = m1.m[0][1] * m2.m[0][0]
+ m1.m[1][1] * m2.m[0][1]
+ m1.m[2][1] * m2.m[0][2]
+ m1.m[3][1] * m2.m[0][3];
m.m[0][2] = m1.m[0][2] * m2.m[0][0]
+ m1.m[1][2] * m2.m[0][1]
+ m1.m[2][2] * m2.m[0][2]
+ m1.m[3][2] * m2.m[0][3];
m.m[0][3] = m1.m[0][3] * m2.m[0][0]
+ m1.m[1][3] * m2.m[0][1]
+ m1.m[2][3] * m2.m[0][2]
+ m1.m[3][3] * m2.m[0][3];

m.m[1][0] = m1.m[0][0] * m2.m[1][0]
+ m1.m[1][0] * m2.m[1][1]
+ m1.m[2][0] * m2.m[1][2]
+ m1.m[3][0] * m2.m[1][3];
m.m[1][1] = m1.m[0][1] * m2.m[1][0]
+ m1.m[1][1] * m2.m[1][1]
+ m1.m[2][1] * m2.m[1][2]
+ m1.m[3][1] * m2.m[1][3];
m.m[1][2] = m1.m[0][2] * m2.m[1][0]
+ m1.m[1][2] * m2.m[1][1]
+ m1.m[2][2] * m2.m[1][2]
+ m1.m[3][2] * m2.m[1][3];
m.m[1][3] = m1.m[0][3] * m2.m[1][0]
+ m1.m[1][3] * m2.m[1][1]
+ m1.m[2][3] * m2.m[1][2]
+ m1.m[3][3] * m2.m[1][3];

m.m[2][0] = m1.m[0][0] * m2.m[2][0]
+ m1.m[1][0] * m2.m[2][1]
+ m1.m[2][0] * m2.m[2][2]
+ m1.m[3][0] * m2.m[2][3];
m.m[2][1] = m1.m[0][1] * m2.m[2][0]
+ m1.m[1][1] * m2.m[2][1]
+ m1.m[2][1] * m2.m[2][2]
+ m1.m[3][1] * m2.m[2][3];
m.m[2][2] = m1.m[0][2] * m2.m[2][0]
+ m1.m[1][2] * m2.m[2][1]
+ m1.m[2][2] * m2.m[2][2]
+ m1.m[3][2] * m2.m[2][3];
m.m[2][3] = m1.m[0][3] * m2.m[2][0]
+ m1.m[1][3] * m2.m[2][1]
+ m1.m[2][3] * m2.m[2][2]
+ m1.m[3][3] * m2.m[2][3];

m.m[3][0] = m1.m[0][0] * m2.m[3][0]
+ m1.m[1][0] * m2.m[3][1]
+ m1.m[2][0] * m2.m[3][2]
+ m1.m[3][0] * m2.m[3][3];
m.m[3][1] = m1.m[0][1] * m2.m[3][0]
+ m1.m[1][1] * m2.m[3][1]
+ m1.m[2][1] * m2.m[3][2]
+ m1.m[3][1] * m2.m[3][3];
m.m[3][2] = m1.m[0][2] * m2.m[3][0]
+ m1.m[1][2] * m2.m[3][1]
+ m1.m[2][2] * m2.m[3][2]
+ m1.m[3][2] * m2.m[3][3];
m.m[3][3] = m1.m[0][3] * m2.m[3][0]
+ m1.m[1][3] * m2.m[3][1]
+ m1.m[2][3] * m2.m[3][2]
+ m1.m[3][3] * m2.m[3][3];
m.flagBits = flagBits;
return m;
}



# 710 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QVector3D operator*(const QVector3D& vector, const QMatrix4x4& matrix)
{
float x, y, z, w;
x = vector.x() * matrix.m[0][0] +
vector.y() * matrix.m[0][1] +
vector.z() * matrix.m[0][2] +
matrix.m[0][3];
y = vector.x() * matrix.m[1][0] +
vector.y() * matrix.m[1][1] +
vector.z() * matrix.m[1][2] +
matrix.m[1][3];
z = vector.x() * matrix.m[2][0] +
vector.y() * matrix.m[2][1] +
vector.z() * matrix.m[2][2] +
matrix.m[2][3];
w = vector.x() * matrix.m[3][0] +
vector.y() * matrix.m[3][1] +
vector.z() * matrix.m[3][2] +
matrix.m[3][3];
if (w == 1.0f)
return QVector3D(x, y, z);
else
return QVector3D(x / w, y / w, z / w);
}

inline QVector3D operator*(const QMatrix4x4& matrix, const QVector3D& vector)
{
float x, y, z, w;
if (matrix.flagBits == QMatrix4x4::Identity) {
return vector;
} else if (matrix.flagBits < QMatrix4x4::Rotation2D) {

return QVector3D(vector.x() * matrix.m[0][0] + matrix.m[3][0],
vector.y() * matrix.m[1][1] + matrix.m[3][1],
vector.z() * matrix.m[2][2] + matrix.m[3][2]);
} else if (matrix.flagBits < QMatrix4x4::Rotation) {

return QVector3D(vector.x() * matrix.m[0][0] + vector.y() * matrix.m[1][0] + matrix.m[3][0],
vector.x() * matrix.m[0][1] + vector.y() * matrix.m[1][1] + matrix.m[3][1],
vector.z() * matrix.m[2][2] + matrix.m[3][2]);
} else {
x = vector.x() * matrix.m[0][0] +
vector.y() * matrix.m[1][0] +
vector.z() * matrix.m[2][0] +
matrix.m[3][0];
y = vector.x() * matrix.m[0][1] +
vector.y() * matrix.m[1][1] +
vector.z() * matrix.m[2][1] +
matrix.m[3][1];
z = vector.x() * matrix.m[0][2] +
vector.y() * matrix.m[1][2] +
vector.z() * matrix.m[2][2] +
matrix.m[3][2];
w = vector.x() * matrix.m[0][3] +
vector.y() * matrix.m[1][3] +
vector.z() * matrix.m[2][3] +
matrix.m[3][3];
if (w == 1.0f)
return QVector3D(x, y, z);
else
return QVector3D(x / w, y / w, z / w);
}
}





# 778 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QVector4D operator*(const QVector4D& vector, const QMatrix4x4& matrix)
{
float x, y, z, w;
x = vector.x() * matrix.m[0][0] +
vector.y() * matrix.m[0][1] +
vector.z() * matrix.m[0][2] +
vector.w() * matrix.m[0][3];
y = vector.x() * matrix.m[1][0] +
vector.y() * matrix.m[1][1] +
vector.z() * matrix.m[1][2] +
vector.w() * matrix.m[1][3];
z = vector.x() * matrix.m[2][0] +
vector.y() * matrix.m[2][1] +
vector.z() * matrix.m[2][2] +
vector.w() * matrix.m[2][3];
w = vector.x() * matrix.m[3][0] +
vector.y() * matrix.m[3][1] +
vector.z() * matrix.m[3][2] +
vector.w() * matrix.m[3][3];
return QVector4D(x, y, z, w);
}

inline QVector4D operator*(const QMatrix4x4& matrix, const QVector4D& vector)
{
float x, y, z, w;
x = vector.x() * matrix.m[0][0] +
vector.y() * matrix.m[1][0] +
vector.z() * matrix.m[2][0] +
vector.w() * matrix.m[3][0];
y = vector.x() * matrix.m[0][1] +
vector.y() * matrix.m[1][1] +
vector.z() * matrix.m[2][1] +
vector.w() * matrix.m[3][1];
z = vector.x() * matrix.m[0][2] +
vector.y() * matrix.m[1][2] +
vector.z() * matrix.m[2][2] +
vector.w() * matrix.m[3][2];
w = vector.x() * matrix.m[0][3] +
vector.y() * matrix.m[1][3] +
vector.z() * matrix.m[2][3] +
vector.w() * matrix.m[3][3];
return QVector4D(x, y, z, w);
}



# 824 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QPoint operator*(const QPoint& point, const QMatrix4x4& matrix)
{
float xin, yin;
float x, y, w;
xin = point.x();
yin = point.y();
x = xin * matrix.m[0][0] +
yin * matrix.m[0][1] +
matrix.m[0][3];
y = xin * matrix.m[1][0] +
yin * matrix.m[1][1] +
matrix.m[1][3];
w = xin * matrix.m[3][0] +
yin * matrix.m[3][1] +
matrix.m[3][3];
if (w == 1.0f)
return QPoint(qRound(x), qRound(y));
else
return QPoint(qRound(x / w), qRound(y / w));
}

inline QPointF operator*(const QPointF& point, const QMatrix4x4& matrix)
{
float xin, yin;
float x, y, w;
xin = point.x();
yin = point.y();
x = xin * matrix.m[0][0] +
yin * matrix.m[0][1] +
matrix.m[0][3];
y = xin * matrix.m[1][0] +
yin * matrix.m[1][1] +
matrix.m[1][3];
w = xin * matrix.m[3][0] +
yin * matrix.m[3][1] +
matrix.m[3][3];
if (w == 1.0f) {
return QPointF(float(x), float(y));
} else {
return QPointF(float(x / w), float(y / w));
}
}

inline QPoint operator*(const QMatrix4x4& matrix, const QPoint& point)
{
float xin, yin;
float x, y, w;
xin = point.x();
yin = point.y();
if (matrix.flagBits == QMatrix4x4::Identity) {
return point;
} else if (matrix.flagBits < QMatrix4x4::Rotation2D) {

return QPoint(qRound(xin * matrix.m[0][0] + matrix.m[3][0]),
qRound(yin * matrix.m[1][1] + matrix.m[3][1]));
} else if (matrix.flagBits < QMatrix4x4::Perspective) {
return QPoint(qRound(xin * matrix.m[0][0] + yin * matrix.m[1][0] + matrix.m[3][0]),
qRound(xin * matrix.m[0][1] + yin * matrix.m[1][1] + matrix.m[3][1]));
} else {
x = xin * matrix.m[0][0] +
yin * matrix.m[1][0] +
matrix.m[3][0];
y = xin * matrix.m[0][1] +
yin * matrix.m[1][1] +
matrix.m[3][1];
w = xin * matrix.m[0][3] +
yin * matrix.m[1][3] +
matrix.m[3][3];
if (w == 1.0f)
return QPoint(qRound(x), qRound(y));
else
return QPoint(qRound(x / w), qRound(y / w));
}
}

inline QPointF operator*(const QMatrix4x4& matrix, const QPointF& point)
{
float xin, yin;
float x, y, w;
xin = point.x();
yin = point.y();
if (matrix.flagBits == QMatrix4x4::Identity) {
return point;
} else if (matrix.flagBits < QMatrix4x4::Rotation2D) {

return QPointF(xin * matrix.m[0][0] + matrix.m[3][0],
yin * matrix.m[1][1] + matrix.m[3][1]);
} else if (matrix.flagBits < QMatrix4x4::Perspective) {
return QPointF(xin * matrix.m[0][0] + yin * matrix.m[1][0] + matrix.m[3][0],
xin * matrix.m[0][1] + yin * matrix.m[1][1] + matrix.m[3][1]);
} else {
x = xin * matrix.m[0][0] +
yin * matrix.m[1][0] +
matrix.m[3][0];
y = xin * matrix.m[0][1] +
yin * matrix.m[1][1] +
matrix.m[3][1];
w = xin * matrix.m[0][3] +
yin * matrix.m[1][3] +
matrix.m[3][3];
if (w == 1.0f) {
return QPointF(float(x), float(y));
} else {
return QPointF(float(x / w), float(y / w));
}
}
}

inline QMatrix4x4 operator-(const QMatrix4x4& matrix)
{
QMatrix4x4 m(1);
m.m[0][0] = -matrix.m[0][0];
m.m[0][1] = -matrix.m[0][1];
m.m[0][2] = -matrix.m[0][2];
m.m[0][3] = -matrix.m[0][3];
m.m[1][0] = -matrix.m[1][0];
m.m[1][1] = -matrix.m[1][1];
m.m[1][2] = -matrix.m[1][2];
m.m[1][3] = -matrix.m[1][3];
m.m[2][0] = -matrix.m[2][0];
m.m[2][1] = -matrix.m[2][1];
m.m[2][2] = -matrix.m[2][2];
m.m[2][3] = -matrix.m[2][3];
m.m[3][0] = -matrix.m[3][0];
m.m[3][1] = -matrix.m[3][1];
m.m[3][2] = -matrix.m[3][2];
m.m[3][3] = -matrix.m[3][3];
m.flagBits = QMatrix4x4::General;
return m;
}

inline QMatrix4x4 operator*(float factor, const QMatrix4x4& matrix)
{
QMatrix4x4 m(1);
m.m[0][0] = matrix.m[0][0] * factor;
m.m[0][1] = matrix.m[0][1] * factor;
m.m[0][2] = matrix.m[0][2] * factor;
m.m[0][3] = matrix.m[0][3] * factor;
m.m[1][0] = matrix.m[1][0] * factor;
m.m[1][1] = matrix.m[1][1] * factor;
m.m[1][2] = matrix.m[1][2] * factor;
m.m[1][3] = matrix.m[1][3] * factor;
m.m[2][0] = matrix.m[2][0] * factor;
m.m[2][1] = matrix.m[2][1] * factor;
m.m[2][2] = matrix.m[2][2] * factor;
m.m[2][3] = matrix.m[2][3] * factor;
m.m[3][0] = matrix.m[3][0] * factor;
m.m[3][1] = matrix.m[3][1] * factor;
m.m[3][2] = matrix.m[3][2] * factor;
m.m[3][3] = matrix.m[3][3] * factor;
m.flagBits = QMatrix4x4::General;
return m;
}

inline QMatrix4x4 operator*(const QMatrix4x4& matrix, float factor)
{
QMatrix4x4 m(1);
m.m[0][0] = matrix.m[0][0] * factor;
m.m[0][1] = matrix.m[0][1] * factor;
m.m[0][2] = matrix.m[0][2] * factor;
m.m[0][3] = matrix.m[0][3] * factor;
m.m[1][0] = matrix.m[1][0] * factor;
m.m[1][1] = matrix.m[1][1] * factor;
m.m[1][2] = matrix.m[1][2] * factor;
m.m[1][3] = matrix.m[1][3] * factor;
m.m[2][0] = matrix.m[2][0] * factor;
m.m[2][1] = matrix.m[2][1] * factor;
m.m[2][2] = matrix.m[2][2] * factor;
m.m[2][3] = matrix.m[2][3] * factor;
m.m[3][0] = matrix.m[3][0] * factor;
m.m[3][1] = matrix.m[3][1] * factor;
m.m[3][2] = matrix.m[3][2] * factor;
m.m[3][3] = matrix.m[3][3] * factor;
m.flagBits = QMatrix4x4::General;
return m;
}

inline bool qFuzzyCompare(const QMatrix4x4& m1, const QMatrix4x4& m2)
{
return qFuzzyCompare(m1.m[0][0], m2.m[0][0]) &&
qFuzzyCompare(m1.m[0][1], m2.m[0][1]) &&
qFuzzyCompare(m1.m[0][2], m2.m[0][2]) &&
qFuzzyCompare(m1.m[0][3], m2.m[0][3]) &&
qFuzzyCompare(m1.m[1][0], m2.m[1][0]) &&
qFuzzyCompare(m1.m[1][1], m2.m[1][1]) &&
qFuzzyCompare(m1.m[1][2], m2.m[1][2]) &&
qFuzzyCompare(m1.m[1][3], m2.m[1][3]) &&
qFuzzyCompare(m1.m[2][0], m2.m[2][0]) &&
qFuzzyCompare(m1.m[2][1], m2.m[2][1]) &&
qFuzzyCompare(m1.m[2][2], m2.m[2][2]) &&
qFuzzyCompare(m1.m[2][3], m2.m[2][3]) &&
qFuzzyCompare(m1.m[3][0], m2.m[3][0]) &&
qFuzzyCompare(m1.m[3][1], m2.m[3][1]) &&
qFuzzyCompare(m1.m[3][2], m2.m[3][2]) &&
qFuzzyCompare(m1.m[3][3], m2.m[3][3]);
}

inline QPoint QMatrix4x4::map(const QPoint& point) const
{
return *this * point;
}

inline QPointF QMatrix4x4::map(const QPointF& point) const
{
return *this * point;
}



# 1033 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QVector3D QMatrix4x4::map(const QVector3D& point) const
{
return *this * point;
}

inline QVector3D QMatrix4x4::mapVector(const QVector3D& vector) const
{
if (flagBits < Scale) {

return vector;
} else if (flagBits < Rotation2D) {

return QVector3D(vector.x() * m[0][0],
vector.y() * m[1][1],
vector.z() * m[2][2]);
} else {
return QVector3D(vector.x() * m[0][0] +
vector.y() * m[1][0] +
vector.z() * m[2][0],
vector.x() * m[0][1] +
vector.y() * m[1][1] +
vector.z() * m[2][1],
vector.x() * m[0][2] +
vector.y() * m[1][2] +
vector.z() * m[2][2]);
}
}





# 1065 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline QVector4D QMatrix4x4::map(const QVector4D& point) const
{
return *this * point;
}



# 1072 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
inline float *QMatrix4x4::data()
{


flagBits = General;
return *m;
}


# 1081 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
 QDebug operator<<(QDebug dbg, const QMatrix4x4 &m);



# 1085 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
 QDataStream &operator<<(QDataStream &, const QMatrix4x4 &);
 QDataStream &operator>>(QDataStream &, QMatrix4x4 &);































# 1118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"



# 43 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qquaternion.h"





































































































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"






















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglbuffer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglbuffer.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglbuffer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglbuffer.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglbuffer.h"



class QOpenGLBufferPrivate;

class  QOpenGLBuffer
{
public:
enum Type
{
VertexBuffer = 0x8892, 
IndexBuffer = 0x8893, 
PixelPackBuffer = 0x88EB, 
PixelUnpackBuffer = 0x88EC 
};

QOpenGLBuffer();
explicit QOpenGLBuffer(QOpenGLBuffer::Type type);
QOpenGLBuffer(const QOpenGLBuffer &other);
~QOpenGLBuffer();

QOpenGLBuffer &operator=(const QOpenGLBuffer &other);

enum UsagePattern
{
StreamDraw = 0x88E0, 
StreamRead = 0x88E1, 
StreamCopy = 0x88E2, 
StaticDraw = 0x88E4, 
StaticRead = 0x88E5, 
StaticCopy = 0x88E6, 
DynamicDraw = 0x88E8, 
DynamicRead = 0x88E9, 
DynamicCopy = 0x88EA 
};

enum Access
{
ReadOnly = 0x88B8, 
WriteOnly = 0x88B9, 
ReadWrite = 0x88BA 
};

QOpenGLBuffer::Type type() const;

QOpenGLBuffer::UsagePattern usagePattern() const;
void setUsagePattern(QOpenGLBuffer::UsagePattern value);

bool create();
bool isCreated() const;

void destroy();

bool bind();
void release();

static void release(QOpenGLBuffer::Type type);

GLuint bufferId() const;

int size() const;

bool read(int offset, void *data, int count);
void write(int offset, const void *data, int count);

void allocate(const void *data, int count);
inline void allocate(int count) { allocate(0, count); }

void *map(QOpenGLBuffer::Access access);
bool unmap();

private:
QOpenGLBufferPrivate *d_ptr;

inline QOpenGLBufferPrivate* d_func() { return reinterpret_cast<QOpenGLBufferPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLBufferPrivate* d_func() const { return reinterpret_cast<const QOpenGLBufferPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLBufferPrivate;
};






# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"



































































































































































































































# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"


# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"


class QOpenGLDebugLogger;
class QOpenGLDebugLoggerPrivate;
class QOpenGLDebugMessagePrivate;

class  QOpenGLDebugMessage
{
public:
enum Source {
InvalidSource = 0x00000000,
APISource = 0x00000001,
WindowSystemSource = 0x00000002,
ShaderCompilerSource = 0x00000004,
ThirdPartySource = 0x00000008,
ApplicationSource = 0x00000010,
OtherSource = 0x00000020,
LastSource = OtherSource, 
AnySource = 0xffffffff
};
typedef QFlags<Source> Sources;

enum Type {
InvalidType = 0x00000000,
ErrorType = 0x00000001,
DeprecatedBehaviorType = 0x00000002,
UndefinedBehaviorType = 0x00000004,
PortabilityType = 0x00000008,
PerformanceType = 0x00000010,
OtherType = 0x00000020,
MarkerType = 0x00000040,
GroupPushType = 0x00000080,
GroupPopType = 0x00000100,
LastType = GroupPopType, 
AnyType = 0xffffffff
};
typedef QFlags<Type> Types;

enum Severity {
InvalidSeverity = 0x00000000,
HighSeverity = 0x00000001,
MediumSeverity = 0x00000002,
LowSeverity = 0x00000004,
NotificationSeverity = 0x00000008,
LastSeverity = NotificationSeverity, 
AnySeverity = 0xffffffff
};
typedef QFlags<Severity> Severities;

QOpenGLDebugMessage();
QOpenGLDebugMessage(const QOpenGLDebugMessage &debugMessage);
~QOpenGLDebugMessage();

QOpenGLDebugMessage &operator=(const QOpenGLDebugMessage &debugMessage);




# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"
inline void swap(QOpenGLDebugMessage &debugMessage) { d.swap(debugMessage.d); }

Source source() const;
Type type() const;
Severity severity() const;
GLuint id() const;
QString message() const;

static QOpenGLDebugMessage createApplicationMessage(const QString &text,
GLuint id = 0,
Severity severity = NotificationSeverity,
Type type = OtherType);
static QOpenGLDebugMessage createThirdPartyMessage(const QString &text,
GLuint id = 0,
Severity severity = NotificationSeverity,
Type type = OtherType);

bool operator==(const QOpenGLDebugMessage &debugMessage) const;
inline bool operator!=(const QOpenGLDebugMessage &debugMessage) const { return !operator==(debugMessage); }

private:
friend class QOpenGLDebugLogger;
friend class QOpenGLDebugLoggerPrivate;
QSharedDataPointer<QOpenGLDebugMessagePrivate> d;
};

template<> class QTypeInfo<QOpenGLDebugMessage > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QOpenGLDebugMessage)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QOpenGLDebugMessage) }; static inline const char *name() { return "QOpenGLDebugMessage"; } }; template <> inline void qSwap<QOpenGLDebugMessage>(QOpenGLDebugMessage &value1, QOpenGLDebugMessage &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QOpenGLDebugMessage>(::QOpenGLDebugMessage &value1, ::QOpenGLDebugMessage &value2) { value1.swap(value2); } } 
 inline QFlags<QOpenGLDebugMessage::Sources::enum_type> operator|(QOpenGLDebugMessage::Sources::enum_type f1, QOpenGLDebugMessage::Sources::enum_type f2) { return QFlags<QOpenGLDebugMessage::Sources::enum_type>(f1) | f2; }  inline QFlags<QOpenGLDebugMessage::Sources::enum_type> operator|(QOpenGLDebugMessage::Sources::enum_type f1, QFlags<QOpenGLDebugMessage::Sources::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QOpenGLDebugMessage::Sources::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QOpenGLDebugMessage::Types::enum_type> operator|(QOpenGLDebugMessage::Types::enum_type f1, QOpenGLDebugMessage::Types::enum_type f2) { return QFlags<QOpenGLDebugMessage::Types::enum_type>(f1) | f2; }  inline QFlags<QOpenGLDebugMessage::Types::enum_type> operator|(QOpenGLDebugMessage::Types::enum_type f1, QFlags<QOpenGLDebugMessage::Types::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QOpenGLDebugMessage::Types::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QOpenGLDebugMessage::Severities::enum_type> operator|(QOpenGLDebugMessage::Severities::enum_type f1, QOpenGLDebugMessage::Severities::enum_type f2) { return QFlags<QOpenGLDebugMessage::Severities::enum_type>(f1) | f2; }  inline QFlags<QOpenGLDebugMessage::Severities::enum_type> operator|(QOpenGLDebugMessage::Severities::enum_type f1, QFlags<QOpenGLDebugMessage::Severities::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QOpenGLDebugMessage::Severities::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"
 QDebug operator<<(QDebug debug, const QOpenGLDebugMessage &message);
 QDebug operator<<(QDebug debug, QOpenGLDebugMessage::Source source);
 QDebug operator<<(QDebug debug, QOpenGLDebugMessage::Type type);
 QDebug operator<<(QDebug debug, QOpenGLDebugMessage::Severity severity);


# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengldebug.h"
class QOpenGLDebugLoggerPrivate;

class  QOpenGLDebugLogger : public QObject
{
Q_OBJECT
Q_ENUMS(LoggingMode)
Q_PROPERTY(LoggingMode loggingMode READ loggingMode)

public:
enum LoggingMode {
AsynchronousLogging,
SynchronousLogging
};

explicit QOpenGLDebugLogger(QObject *parent = 0);
~QOpenGLDebugLogger();

bool initialize();

bool isLogging() const;
LoggingMode loggingMode() const;

qint64 maximumMessageLength() const;

void pushGroup(const QString &name,
GLuint id = 0,
QOpenGLDebugMessage::Source source = QOpenGLDebugMessage::ApplicationSource);
void popGroup();

void enableMessages(QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource,
QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType,
QOpenGLDebugMessage::Severities severities = QOpenGLDebugMessage::AnySeverity);

void enableMessages(const QVector<GLuint> &ids,
QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource,
QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType);

void disableMessages(QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource,
QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType,
QOpenGLDebugMessage::Severities severities = QOpenGLDebugMessage::AnySeverity);

void disableMessages(const QVector<GLuint> &ids,
QOpenGLDebugMessage::Sources sources = QOpenGLDebugMessage::AnySource,
QOpenGLDebugMessage::Types types = QOpenGLDebugMessage::AnyType);

QList<QOpenGLDebugMessage> loggedMessages() const;

public slots:
void logMessage(const QOpenGLDebugMessage &debugMessage);
void startLogging(LoggingMode loggingMode = AsynchronousLogging);
void stopLogging();

signals:
void messageLogged(const QOpenGLDebugMessage &debugMessage);

private:
QOpenGLDebugLogger(const QOpenGLDebugLogger &) ; QOpenGLDebugLogger &operator=(const QOpenGLDebugLogger &) ;
inline QOpenGLDebugLoggerPrivate* d_func() { return reinterpret_cast<QOpenGLDebugLoggerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLDebugLoggerPrivate* d_func() const { return reinterpret_cast<const QOpenGLDebugLoggerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLDebugLoggerPrivate;

};



 template <> struct QMetaTypeId< QOpenGLDebugMessage > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QOpenGLDebugMessage >("QOpenGLDebugMessage", reinterpret_cast< QOpenGLDebugMessage *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"


# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"



class QOpenGLFramebufferObjectPrivate;
class QOpenGLFramebufferObjectFormat;

class  QOpenGLFramebufferObject
{
inline QOpenGLFramebufferObjectPrivate* d_func() { return reinterpret_cast<QOpenGLFramebufferObjectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLFramebufferObjectPrivate* d_func() const { return reinterpret_cast<const QOpenGLFramebufferObjectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLFramebufferObjectPrivate;
public:
enum Attachment {
NoAttachment,
CombinedDepthStencil,
Depth
};

explicit QOpenGLFramebufferObject(const QSize &size, GLenum target = GL_TEXTURE_2D);
QOpenGLFramebufferObject(int width, int height, GLenum target = GL_TEXTURE_2D);

# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"
QOpenGLFramebufferObject(const QSize &size, Attachment attachment,
GLenum target = GL_TEXTURE_2D, GLenum internal_format = GL_RGBA8);
QOpenGLFramebufferObject(int width, int height, Attachment attachment,
GLenum target = GL_TEXTURE_2D, GLenum internal_format = GL_RGBA8);







# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglframebufferobject.h"
QOpenGLFramebufferObject(const QSize &size, const QOpenGLFramebufferObjectFormat &format);
QOpenGLFramebufferObject(int width, int height, const QOpenGLFramebufferObjectFormat &format);

virtual ~QOpenGLFramebufferObject();

QOpenGLFramebufferObjectFormat format() const;

bool isValid() const;
bool isBound() const;
bool bind();
bool release();

int width() const { return size().width(); }
int height() const { return size().height(); }

GLuint texture() const;
QSize size() const;
QImage toImage() const;
Attachment attachment() const;

void setAttachment(Attachment attachment);

GLuint handle() const;

static bool bindDefault();

static bool hasOpenGLFramebufferObjects();

static bool hasOpenGLFramebufferBlit();
static void blitFramebuffer(QOpenGLFramebufferObject *target, const QRect &targetRect,
QOpenGLFramebufferObject *source, const QRect &sourceRect,
GLbitfield buffers = GL_COLOR_BUFFER_BIT,
GLenum filter = GL_NEAREST);
static void blitFramebuffer(QOpenGLFramebufferObject *target,
QOpenGLFramebufferObject *source,
GLbitfield buffers = GL_COLOR_BUFFER_BIT,
GLenum filter = GL_NEAREST);

private:
QOpenGLFramebufferObject(const QOpenGLFramebufferObject &) ; QOpenGLFramebufferObject &operator=(const QOpenGLFramebufferObject &) ;
QScopedPointer<QOpenGLFramebufferObjectPrivate> d_ptr;
friend class QOpenGLPaintDevice;
friend class QOpenGLFBOGLPaintDevice;
};

class QOpenGLFramebufferObjectFormatPrivate;
class  QOpenGLFramebufferObjectFormat
{
public:
QOpenGLFramebufferObjectFormat();
QOpenGLFramebufferObjectFormat(const QOpenGLFramebufferObjectFormat &other);
QOpenGLFramebufferObjectFormat &operator=(const QOpenGLFramebufferObjectFormat &other);
~QOpenGLFramebufferObjectFormat();

void setSamples(int samples);
int samples() const;

void setMipmap(bool enabled);
bool mipmap() const;

void setAttachment(QOpenGLFramebufferObject::Attachment attachment);
QOpenGLFramebufferObject::Attachment attachment() const;

void setTextureTarget(GLenum target);
GLenum textureTarget() const;

void setInternalTextureFormat(GLenum internalTextureFormat);
GLenum internalTextureFormat() const;

bool operator==(const QOpenGLFramebufferObjectFormat& other) const;
bool operator!=(const QOpenGLFramebufferObjectFormat& other) const;

private:
QOpenGLFramebufferObjectFormatPrivate *d;

void detach();
};






# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"











# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"



































































































































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"


# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"









# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"


struct QOpenGLFunctionsPrivate;





































































































# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
class  QOpenGLFunctions
{
public:
QOpenGLFunctions();
explicit QOpenGLFunctions(QOpenGLContext *context);
~QOpenGLFunctions() {}

enum OpenGLFeature
{
Multitexture = 0x0001,
Shaders = 0x0002,
Buffers = 0x0004,
Framebuffers = 0x0008,
BlendColor = 0x0010,
BlendEquation = 0x0020,
BlendEquationSeparate = 0x0040,
BlendFuncSeparate = 0x0080,
BlendSubtract = 0x0100,
CompressedTextures = 0x0200,
Multisample = 0x0400,
StencilSeparate = 0x0800,
NPOTTextures = 0x1000,
NPOTTextureRepeat = 0x2000
};
typedef QFlags<OpenGLFeature> OpenGLFeatures;

QOpenGLFunctions::OpenGLFeatures openGLFeatures() const;
bool hasOpenGLFeature(QOpenGLFunctions::OpenGLFeature feature) const;

void initializeOpenGLFunctions();





# 215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
void glActiveTexture(GLenum texture);
void glAttachShader(GLuint program, GLuint shader);
void glBindAttribLocation(GLuint program, GLuint index, const char* name);
void glBindBuffer(GLenum target, GLuint buffer);
void glBindFramebuffer(GLenum target, GLuint framebuffer);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void glBlendEquation(GLenum mode);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBufferData(GLenum target, qopengl_GLsizeiptr size, const void* data, GLenum usage);
void glBufferSubData(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void* data);
GLenum glCheckFramebufferStatus(GLenum target);
void glClearDepthf(GLclampf depth);
void glCompileShader(GLuint shader);
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLuint glCreateProgram();
GLuint glCreateShader(GLenum type);
void glDeleteBuffers(GLsizei n, const GLuint* buffers);
void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
void glDeleteProgram(GLuint program);
void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
void glDeleteShader(GLuint shader);
void glDepthRangef(GLclampf zNear, GLclampf zFar);
void glDetachShader(GLuint program, GLuint shader);
void glDisableVertexAttribArray(GLuint index);
void glEnableVertexAttribArray(GLuint index);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glGenBuffers(GLsizei n, GLuint* buffers);
void glGenerateMipmap(GLenum target);
void glGenFramebuffers(GLsizei n, GLuint* framebuffers);
void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);
GLint glGetAttribLocation(GLuint program, const char* name);
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params);
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void glGetProgramiv(GLuint program, GLenum pname, GLint* params);
void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
void glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog);
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source);
void glGetUniformfv(GLuint program, GLint location, GLfloat* params);
void glGetUniformiv(GLuint program, GLint location, GLint* params);
GLint glGetUniformLocation(GLuint program, const char* name);
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer);
GLboolean glIsBuffer(GLuint buffer);
GLboolean glIsFramebuffer(GLuint framebuffer);
GLboolean glIsProgram(GLuint program);
GLboolean glIsRenderbuffer(GLuint renderbuffer);
GLboolean glIsShader(GLuint shader);
void glLinkProgram(GLuint program);
void glReleaseShaderCompiler();
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glSampleCoverage(GLclampf value, GLboolean invert);
void glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length);
void glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length);
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void glStencilMaskSeparate(GLenum face, GLuint mask);
void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
void glUniform1f(GLint location, GLfloat x);
void glUniform1fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform1i(GLint location, GLint x);
void glUniform1iv(GLint location, GLsizei count, const GLint* v);
void glUniform2f(GLint location, GLfloat x, GLfloat y);
void glUniform2fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform2i(GLint location, GLint x, GLint y);
void glUniform2iv(GLint location, GLsizei count, const GLint* v);
void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z);
void glUniform3fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform3i(GLint location, GLint x, GLint y, GLint z);
void glUniform3iv(GLint location, GLsizei count, const GLint* v);
void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glUniform4fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w);
void glUniform4iv(GLint location, GLsizei count, const GLint* v);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUseProgram(GLuint program);
void glValidateProgram(GLuint program);
void glVertexAttrib1f(GLuint indx, GLfloat x);
void glVertexAttrib1fv(GLuint indx, const GLfloat* values);
void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y);
void glVertexAttrib2fv(GLuint indx, const GLfloat* values);
void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3fv(GLuint indx, const GLfloat* values);
void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4fv(GLuint indx, const GLfloat* values);
void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr);

protected:
QOpenGLFunctionsPrivate *d_ptr;
static bool isInitialized(const QOpenGLFunctionsPrivate *d) { return d != 0; }
};

 inline QFlags<QOpenGLFunctions::OpenGLFeatures::enum_type> operator|(QOpenGLFunctions::OpenGLFeatures::enum_type f1, QOpenGLFunctions::OpenGLFeatures::enum_type f2) { return QFlags<QOpenGLFunctions::OpenGLFeatures::enum_type>(f1) | f2; }  inline QFlags<QOpenGLFunctions::OpenGLFeatures::enum_type> operator|(QOpenGLFunctions::OpenGLFeatures::enum_type f1, QFlags<QOpenGLFunctions::OpenGLFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QOpenGLFunctions::OpenGLFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

struct QOpenGLFunctionsPrivate
{
QOpenGLFunctionsPrivate(QOpenGLContext *ctx);


# 325 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
void ( * ActiveTexture)(GLenum texture);
void ( * AttachShader)(GLuint program, GLuint shader);
void ( * BindAttribLocation)(GLuint program, GLuint index, const char* name);
void ( * BindBuffer)(GLenum target, GLuint buffer);
void ( * BindFramebuffer)(GLenum target, GLuint framebuffer);
void ( * BindRenderbuffer)(GLenum target, GLuint renderbuffer);
void ( * BlendColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void ( * BlendEquation)(GLenum mode);
void ( * BlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
void ( * BlendFuncSeparate)(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void ( * BufferData)(GLenum target, qopengl_GLsizeiptr size, const void* data, GLenum usage);
void ( * BufferSubData)(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void* data);
GLenum ( * CheckFramebufferStatus)(GLenum target);
void ( * CompileShader)(GLuint shader);
void ( * CompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void ( * CompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLuint ( * CreateProgram)();
GLuint ( * CreateShader)(GLenum type);
void ( * DeleteBuffers)(GLsizei n, const GLuint* buffers);
void ( * DeleteFramebuffers)(GLsizei n, const GLuint* framebuffers);
void ( * DeleteProgram)(GLuint program);
void ( * DeleteRenderbuffers)(GLsizei n, const GLuint* renderbuffers);
void ( * DeleteShader)(GLuint shader);
void ( * DetachShader)(GLuint program, GLuint shader);
void ( * DisableVertexAttribArray)(GLuint index);
void ( * EnableVertexAttribArray)(GLuint index);
void ( * FramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void ( * FramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void ( * GenBuffers)(GLsizei n, GLuint* buffers);
void ( * GenerateMipmap)(GLenum target);
void ( * GenFramebuffers)(GLsizei n, GLuint* framebuffers);
void ( * GenRenderbuffers)(GLsizei n, GLuint* renderbuffers);
void ( * GetActiveAttrib)(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void ( * GetActiveUniform)(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void ( * GetAttachedShaders)(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);
GLint ( * GetAttribLocation)(GLuint program, const char* name);
void ( * GetBufferParameteriv)(GLenum target, GLenum pname, GLint* params);
void ( * GetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void ( * GetProgramiv)(GLuint program, GLenum pname, GLint* params);
void ( * GetProgramInfoLog)(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog);
void ( * GetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint* params);
void ( * GetShaderiv)(GLuint shader, GLenum pname, GLint* params);
void ( * GetShaderInfoLog)(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog);
void ( * GetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
void ( * GetShaderSource)(GLuint shader, GLsizei bufsize, GLsizei* length, char* source);
void ( * GetUniformfv)(GLuint program, GLint location, GLfloat* params);
void ( * GetUniformiv)(GLuint program, GLint location, GLint* params);
GLint ( * GetUniformLocation)(GLuint program, const char* name);
void ( * GetVertexAttribfv)(GLuint index, GLenum pname, GLfloat* params);
void ( * GetVertexAttribiv)(GLuint index, GLenum pname, GLint* params);
void ( * GetVertexAttribPointerv)(GLuint index, GLenum pname, void** pointer);
GLboolean ( * IsBuffer)(GLuint buffer);
GLboolean ( * IsFramebuffer)(GLuint framebuffer);
GLboolean ( * IsProgram)(GLuint program);
GLboolean ( * IsRenderbuffer)(GLuint renderbuffer);
GLboolean ( * IsShader)(GLuint shader);
void ( * LinkProgram)(GLuint program);
void ( * ReleaseShaderCompiler)();
void ( * RenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void ( * SampleCoverage)(GLclampf value, GLboolean invert);
void ( * ShaderBinary)(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length);
void ( * ShaderSource)(GLuint shader, GLsizei count, const char** string, const GLint* length);
void ( * StencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
void ( * StencilMaskSeparate)(GLenum face, GLuint mask);
void ( * StencilOpSeparate)(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
void ( * Uniform1f)(GLint location, GLfloat x);
void ( * Uniform1fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * Uniform1i)(GLint location, GLint x);
void ( * Uniform1iv)(GLint location, GLsizei count, const GLint* v);
void ( * Uniform2f)(GLint location, GLfloat x, GLfloat y);
void ( * Uniform2fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * Uniform2i)(GLint location, GLint x, GLint y);
void ( * Uniform2iv)(GLint location, GLsizei count, const GLint* v);
void ( * Uniform3f)(GLint location, GLfloat x, GLfloat y, GLfloat z);
void ( * Uniform3fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * Uniform3i)(GLint location, GLint x, GLint y, GLint z);
void ( * Uniform3iv)(GLint location, GLsizei count, const GLint* v);
void ( * Uniform4f)(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * Uniform4fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * Uniform4i)(GLint location, GLint x, GLint y, GLint z, GLint w);
void ( * Uniform4iv)(GLint location, GLsizei count, const GLint* v);
void ( * UniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void ( * UniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void ( * UniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void ( * UseProgram)(GLuint program);
void ( * ValidateProgram)(GLuint program);
void ( * VertexAttrib1f)(GLuint indx, GLfloat x);
void ( * VertexAttrib1fv)(GLuint indx, const GLfloat* values);
void ( * VertexAttrib2f)(GLuint indx, GLfloat x, GLfloat y);
void ( * VertexAttrib2fv)(GLuint indx, const GLfloat* values);
void ( * VertexAttrib3f)(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
void ( * VertexAttrib3fv)(GLuint indx, const GLfloat* values);
void ( * VertexAttrib4f)(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * VertexAttrib4fv)(GLuint indx, const GLfloat* values);
void ( * VertexAttribPointer)(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr);

# 421 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
};

inline void QOpenGLFunctions::glActiveTexture(GLenum texture)
{



# 428 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->ActiveTexture(texture);

# 431 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glAttachShader(GLuint program, GLuint shader)
{



# 439 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->AttachShader(program, shader);

# 442 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBindAttribLocation(GLuint program, GLuint index, const char* name)
{



# 450 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BindAttribLocation(program, index, name);

# 453 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBindBuffer(GLenum target, GLuint buffer)
{



# 461 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BindBuffer(target, buffer);

# 464 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBindFramebuffer(GLenum target, GLuint framebuffer)
{
if (framebuffer == 0)
framebuffer = QOpenGLContext::currentContext()->defaultFramebufferObject();



# 474 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BindFramebuffer(target, framebuffer);

# 477 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{



# 485 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BindRenderbuffer(target, renderbuffer);

# 488 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{



# 496 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BlendColor(red, green, blue, alpha);

# 499 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBlendEquation(GLenum mode)
{



# 507 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BlendEquation(mode);

# 510 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{



# 518 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BlendEquationSeparate(modeRGB, modeAlpha);

# 521 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{



# 529 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);

# 532 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBufferData(GLenum target, qopengl_GLsizeiptr size, const void* data, GLenum usage)
{



# 540 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BufferData(target, size, data, usage);

# 543 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glBufferSubData(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, const void* data)
{



# 551 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->BufferSubData(target, offset, size, data);

# 554 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline GLenum QOpenGLFunctions::glCheckFramebufferStatus(GLenum target)
{



# 562 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLenum result = d_ptr->CheckFramebufferStatus(target);

# 565 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline void QOpenGLFunctions::glClearDepthf(GLclampf depth)
{

# 572 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
::glClearDepth(depth);



# 576 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glCompileShader(GLuint shader)
{



# 584 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->CompileShader(shader);

# 587 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
{



# 595 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

# 598 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
{



# 606 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

# 609 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline GLuint QOpenGLFunctions::glCreateProgram()
{



# 617 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLuint result = d_ptr->CreateProgram();

# 620 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline GLuint QOpenGLFunctions::glCreateShader(GLenum type)
{



# 629 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLuint result = d_ptr->CreateShader(type);

# 632 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline void QOpenGLFunctions::glDeleteBuffers(GLsizei n, const GLuint* buffers)
{



# 641 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DeleteBuffers(n, buffers);

# 644 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
{



# 652 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DeleteFramebuffers(n, framebuffers);

# 655 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDeleteProgram(GLuint program)
{



# 663 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DeleteProgram(program);

# 666 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
{



# 674 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DeleteRenderbuffers(n, renderbuffers);

# 677 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDeleteShader(GLuint shader)
{



# 685 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DeleteShader(shader);

# 688 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDepthRangef(GLclampf zNear, GLclampf zFar)
{

# 694 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
::glDepthRange(zNear, zFar);



# 698 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDetachShader(GLuint program, GLuint shader)
{



# 706 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DetachShader(program, shader);

# 709 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glDisableVertexAttribArray(GLuint index)
{



# 717 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->DisableVertexAttribArray(index);

# 720 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glEnableVertexAttribArray(GLuint index)
{



# 728 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->EnableVertexAttribArray(index);

# 731 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{



# 739 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

# 742 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{



# 750 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->FramebufferTexture2D(target, attachment, textarget, texture, level);

# 753 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGenBuffers(GLsizei n, GLuint* buffers)
{



# 761 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GenBuffers(n, buffers);

# 764 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGenerateMipmap(GLenum target)
{



# 772 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GenerateMipmap(target);

# 775 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGenFramebuffers(GLsizei n, GLuint* framebuffers)
{



# 783 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GenFramebuffers(n, framebuffers);

# 786 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)
{



# 794 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GenRenderbuffers(n, renderbuffers);

# 797 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)
{



# 805 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetActiveAttrib(program, index, bufsize, length, size, type, name);

# 808 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)
{



# 816 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetActiveUniform(program, index, bufsize, length, size, type, name);

# 819 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)
{



# 827 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetAttachedShaders(program, maxcount, count, shaders);

# 830 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline GLint QOpenGLFunctions::glGetAttribLocation(GLuint program, const char* name)
{



# 838 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLint result = d_ptr->GetAttribLocation(program, name);

# 841 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline void QOpenGLFunctions::glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)
{



# 850 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetBufferParameteriv(target, pname, params);

# 853 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)
{



# 861 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetFramebufferAttachmentParameteriv(target, attachment, pname, params);

# 864 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetProgramiv(GLuint program, GLenum pname, GLint* params)
{



# 872 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetProgramiv(program, pname, params);

# 875 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog)
{



# 883 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetProgramInfoLog(program, bufsize, length, infolog);

# 886 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)
{



# 894 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetRenderbufferParameteriv(target, pname, params);

# 897 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetShaderiv(GLuint shader, GLenum pname, GLint* params)
{



# 905 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetShaderiv(shader, pname, params);

# 908 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog)
{



# 916 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetShaderInfoLog(shader, bufsize, length, infolog);

# 919 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
{



# 927 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);

# 930 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source)
{



# 938 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetShaderSource(shader, bufsize, length, source);

# 941 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetUniformfv(GLuint program, GLint location, GLfloat* params)
{



# 949 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetUniformfv(program, location, params);

# 952 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetUniformiv(GLuint program, GLint location, GLint* params)
{



# 960 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetUniformiv(program, location, params);

# 963 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline GLint QOpenGLFunctions::glGetUniformLocation(GLuint program, const char* name)
{



# 971 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLint result = d_ptr->GetUniformLocation(program, name);

# 974 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline void QOpenGLFunctions::glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
{



# 983 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetVertexAttribfv(index, pname, params);

# 986 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
{



# 994 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetVertexAttribiv(index, pname, params);

# 997 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)
{



# 1005 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->GetVertexAttribPointerv(index, pname, pointer);

# 1008 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline GLboolean QOpenGLFunctions::glIsBuffer(GLuint buffer)
{



# 1016 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLboolean result = d_ptr->IsBuffer(buffer);

# 1019 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline GLboolean QOpenGLFunctions::glIsFramebuffer(GLuint framebuffer)
{



# 1028 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLboolean result = d_ptr->IsFramebuffer(framebuffer);

# 1031 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline GLboolean QOpenGLFunctions::glIsProgram(GLuint program)
{



# 1040 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLboolean result = d_ptr->IsProgram(program);

# 1043 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline GLboolean QOpenGLFunctions::glIsRenderbuffer(GLuint renderbuffer)
{



# 1052 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLboolean result = d_ptr->IsRenderbuffer(renderbuffer);

# 1055 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline GLboolean QOpenGLFunctions::glIsShader(GLuint shader)
{



# 1064 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
GLboolean result = d_ptr->IsShader(shader);

# 1067 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

return result;
}

inline void QOpenGLFunctions::glLinkProgram(GLuint program)
{



# 1076 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->LinkProgram(program);

# 1079 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glReleaseShaderCompiler()
{



# 1087 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->ReleaseShaderCompiler();

# 1090 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{



# 1098 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->RenderbufferStorage(target, internalformat, width, height);

# 1101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glSampleCoverage(GLclampf value, GLboolean invert)
{



# 1109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->SampleCoverage(value, invert);

# 1112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length)
{



# 1120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->ShaderBinary(n, shaders, binaryformat, binary, length);

# 1123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length)
{



# 1131 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->ShaderSource(shader, count, string, length);

# 1134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{



# 1142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->StencilFuncSeparate(face, func, ref, mask);

# 1145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glStencilMaskSeparate(GLenum face, GLuint mask)
{



# 1153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->StencilMaskSeparate(face, mask);

# 1156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{



# 1164 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->StencilOpSeparate(face, fail, zfail, zpass);

# 1167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform1f(GLint location, GLfloat x)
{



# 1175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform1f(location, x);

# 1178 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform1fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform1fv(location, count, v);

# 1189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform1i(GLint location, GLint x)
{



# 1197 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform1i(location, x);

# 1200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform1iv(GLint location, GLsizei count, const GLint* v)
{



# 1208 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform1iv(location, count, v);

# 1211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform2f(GLint location, GLfloat x, GLfloat y)
{



# 1219 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform2f(location, x, y);

# 1222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform2fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform2fv(location, count, v);

# 1233 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform2i(GLint location, GLint x, GLint y)
{



# 1241 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform2i(location, x, y);

# 1244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform2iv(GLint location, GLsizei count, const GLint* v)
{



# 1252 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform2iv(location, count, v);

# 1255 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)
{



# 1263 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform3f(location, x, y, z);

# 1266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform3fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1274 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform3fv(location, count, v);

# 1277 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform3i(GLint location, GLint x, GLint y, GLint z)
{



# 1285 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform3i(location, x, y, z);

# 1288 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform3iv(GLint location, GLsizei count, const GLint* v)
{



# 1296 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform3iv(location, count, v);

# 1299 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{



# 1307 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform4f(location, x, y, z, w);

# 1310 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform4fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1318 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform4fv(location, count, v);

# 1321 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)
{



# 1329 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform4i(location, x, y, z, w);

# 1332 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniform4iv(GLint location, GLsizei count, const GLint* v)
{



# 1340 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->Uniform4iv(location, count, v);

# 1343 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{



# 1351 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->UniformMatrix2fv(location, count, transpose, value);

# 1354 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{



# 1362 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->UniformMatrix3fv(location, count, transpose, value);

# 1365 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{



# 1373 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->UniformMatrix4fv(location, count, transpose, value);

# 1376 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glUseProgram(GLuint program)
{



# 1384 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->UseProgram(program);

# 1387 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glValidateProgram(GLuint program)
{



# 1395 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->ValidateProgram(program);

# 1398 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib1f(GLuint indx, GLfloat x)
{



# 1406 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib1f(indx, x);

# 1409 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib1fv(GLuint indx, const GLfloat* values)
{



# 1417 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib1fv(indx, values);

# 1420 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)
{



# 1428 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib2f(indx, x, y);

# 1431 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib2fv(GLuint indx, const GLfloat* values)
{



# 1439 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib2fv(indx, values);

# 1442 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)
{



# 1450 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib3f(indx, x, y, z);

# 1453 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib3fv(GLuint indx, const GLfloat* values)
{



# 1461 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib3fv(indx, values);

# 1464 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{



# 1472 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib4f(indx, x, y, z, w);

# 1475 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttrib4fv(GLuint indx, const GLfloat* values)
{



# 1483 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttrib4fv(indx, values);

# 1486 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}

inline void QOpenGLFunctions::glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr)
{



# 1494 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"
qt_noop();
d_ptr->VertexAttribPointer(indx, size, type, normalized, stride, ptr);

# 1497 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglfunctions.h"

}






# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglpaintdevice.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglpaintdevice.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglpaintdevice.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglpaintdevice.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"



































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglpaintdevice.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglpaintdevice.h"



class QOpenGLPaintDevicePrivate;

class  QOpenGLPaintDevice : public QPaintDevice
{
inline QOpenGLPaintDevicePrivate* d_func() { return reinterpret_cast<QOpenGLPaintDevicePrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLPaintDevicePrivate* d_func() const { return reinterpret_cast<const QOpenGLPaintDevicePrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLPaintDevicePrivate;
public:
QOpenGLPaintDevice();
explicit QOpenGLPaintDevice(const QSize &size);
QOpenGLPaintDevice(int width, int height);
virtual ~QOpenGLPaintDevice();

int devType() const { return QInternal::OpenGL; }
QPaintEngine *paintEngine() const;

QOpenGLContext *context() const;
QSize size() const;
void setSize(const QSize &size);
void setDevicePixelRatio(qreal devicePixelRatio);

qreal dotsPerMeterX() const;
qreal dotsPerMeterY() const;

void setDotsPerMeterX(qreal);
void setDotsPerMeterY(qreal);

void setPaintFlipped(bool flipped);
bool paintFlipped() const;

virtual void ensureActiveTarget();

protected:
int metric(QPaintDevice::PaintDeviceMetric metric) const;

QOpenGLPaintDevice(const QOpenGLPaintDevice &) ; QOpenGLPaintDevice &operator=(const QOpenGLPaintDevice &) ;
QScopedPointer<QOpenGLPaintDevicePrivate> d_ptr;
};






# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"






















































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"


























































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"



class QOpenGLContext;
class QOpenGLShaderProgram;
class QOpenGLShaderPrivate;

class  QOpenGLShader : public QObject
{
Q_OBJECT
public:
enum ShaderTypeBit
{
Vertex = 0x0001,
Fragment = 0x0002,
Geometry = 0x0004,
TessellationControl = 0x0008,
TessellationEvaluation = 0x0010,
Compute = 0x0020
};
typedef QFlags<ShaderTypeBit> ShaderType;

explicit QOpenGLShader(QOpenGLShader::ShaderType type, QObject *parent = 0);
virtual ~QOpenGLShader();

QOpenGLShader::ShaderType shaderType() const;

bool compileSourceCode(const char *source);
bool compileSourceCode(const QByteArray& source);
bool compileSourceCode(const QString& source);
bool compileSourceFile(const QString& fileName);

QByteArray sourceCode() const;

bool isCompiled() const;
QString log() const;

GLuint shaderId() const;

static bool hasOpenGLShaders(ShaderType type, QOpenGLContext *context = 0);

private:
friend class QOpenGLShaderProgram;

QOpenGLShader(const QOpenGLShader &) ; QOpenGLShader &operator=(const QOpenGLShader &) ;
inline QOpenGLShaderPrivate* d_func() { return reinterpret_cast<QOpenGLShaderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLShaderPrivate* d_func() const { return reinterpret_cast<const QOpenGLShaderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLShaderPrivate;
};

 inline QFlags<QOpenGLShader::ShaderType::enum_type> operator|(QOpenGLShader::ShaderType::enum_type f1, QOpenGLShader::ShaderType::enum_type f2) { return QFlags<QOpenGLShader::ShaderType::enum_type>(f1) | f2; }  inline QFlags<QOpenGLShader::ShaderType::enum_type> operator|(QOpenGLShader::ShaderType::enum_type f1, QFlags<QOpenGLShader::ShaderType::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QOpenGLShader::ShaderType::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


class QOpenGLShaderProgramPrivate;

class  QOpenGLShaderProgram : public QObject
{
Q_OBJECT
public:
explicit QOpenGLShaderProgram(QObject *parent = 0);
virtual ~QOpenGLShaderProgram();

bool addShader(QOpenGLShader *shader);
void removeShader(QOpenGLShader *shader);
QList<QOpenGLShader *> shaders() const;

bool addShaderFromSourceCode(QOpenGLShader::ShaderType type, const char *source);
bool addShaderFromSourceCode(QOpenGLShader::ShaderType type, const QByteArray& source);
bool addShaderFromSourceCode(QOpenGLShader::ShaderType type, const QString& source);
bool addShaderFromSourceFile(QOpenGLShader::ShaderType type, const QString& fileName);

void removeAllShaders();

virtual bool link();
bool isLinked() const;
QString log() const;

bool bind();
void release();

GLuint programId() const;

int maxGeometryOutputVertices() const;

void setPatchVertexCount(int count);
int patchVertexCount() const;

void setDefaultOuterTessellationLevels(const QVector<float> &levels);
QVector<float> defaultOuterTessellationLevels() const;

void setDefaultInnerTessellationLevels(const QVector<float> &levels);
QVector<float> defaultInnerTessellationLevels() const;

void bindAttributeLocation(const char *name, int location);
void bindAttributeLocation(const QByteArray& name, int location);
void bindAttributeLocation(const QString& name, int location);

int attributeLocation(const char *name) const;
int attributeLocation(const QByteArray& name) const;
int attributeLocation(const QString& name) const;

void setAttributeValue(int location, GLfloat value);
void setAttributeValue(int location, GLfloat x, GLfloat y);
void setAttributeValue(int location, GLfloat x, GLfloat y, GLfloat z);
void setAttributeValue(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setAttributeValue(int location, const QVector2D& value);
void setAttributeValue(int location, const QVector3D& value);
void setAttributeValue(int location, const QVector4D& value);
void setAttributeValue(int location, const QColor& value);
void setAttributeValue(int location, const GLfloat *values, int columns, int rows);

void setAttributeValue(const char *name, GLfloat value);
void setAttributeValue(const char *name, GLfloat x, GLfloat y);
void setAttributeValue(const char *name, GLfloat x, GLfloat y, GLfloat z);
void setAttributeValue(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setAttributeValue(const char *name, const QVector2D& value);
void setAttributeValue(const char *name, const QVector3D& value);
void setAttributeValue(const char *name, const QVector4D& value);
void setAttributeValue(const char *name, const QColor& value);
void setAttributeValue(const char *name, const GLfloat *values, int columns, int rows);

void setAttributeArray
(int location, const GLfloat *values, int tupleSize, int stride = 0);
void setAttributeArray
(int location, const QVector2D *values, int stride = 0);
void setAttributeArray
(int location, const QVector3D *values, int stride = 0);
void setAttributeArray
(int location, const QVector4D *values, int stride = 0);
void setAttributeArray
(int location, GLenum type, const void *values, int tupleSize, int stride = 0);
void setAttributeArray
(const char *name, const GLfloat *values, int tupleSize, int stride = 0);
void setAttributeArray
(const char *name, const QVector2D *values, int stride = 0);
void setAttributeArray
(const char *name, const QVector3D *values, int stride = 0);
void setAttributeArray
(const char *name, const QVector4D *values, int stride = 0);
void setAttributeArray
(const char *name, GLenum type, const void *values, int tupleSize, int stride = 0);

void setAttributeBuffer
(int location, GLenum type, int offset, int tupleSize, int stride = 0);
void setAttributeBuffer
(const char *name, GLenum type, int offset, int tupleSize, int stride = 0);

void enableAttributeArray(int location);
void enableAttributeArray(const char *name);
void disableAttributeArray(int location);
void disableAttributeArray(const char *name);

int uniformLocation(const char *name) const;
int uniformLocation(const QByteArray& name) const;
int uniformLocation(const QString& name) const;

void setUniformValue(int location, GLfloat value);
void setUniformValue(int location, GLint value);
void setUniformValue(int location, GLuint value);
void setUniformValue(int location, GLfloat x, GLfloat y);
void setUniformValue(int location, GLfloat x, GLfloat y, GLfloat z);
void setUniformValue(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setUniformValue(int location, const QVector2D& value);
void setUniformValue(int location, const QVector3D& value);
void setUniformValue(int location, const QVector4D& value);
void setUniformValue(int location, const QColor& color);
void setUniformValue(int location, const QPoint& point);
void setUniformValue(int location, const QPointF& point);
void setUniformValue(int location, const QSize& size);
void setUniformValue(int location, const QSizeF& size);
void setUniformValue(int location, const QMatrix2x2& value);
void setUniformValue(int location, const QMatrix2x3& value);
void setUniformValue(int location, const QMatrix2x4& value);
void setUniformValue(int location, const QMatrix3x2& value);
void setUniformValue(int location, const QMatrix3x3& value);
void setUniformValue(int location, const QMatrix3x4& value);
void setUniformValue(int location, const QMatrix4x2& value);
void setUniformValue(int location, const QMatrix4x3& value);
void setUniformValue(int location, const QMatrix4x4& value);
void setUniformValue(int location, const GLfloat value[2][2]);
void setUniformValue(int location, const GLfloat value[3][3]);
void setUniformValue(int location, const GLfloat value[4][4]);
void setUniformValue(int location, const QTransform& value);

void setUniformValue(const char *name, GLfloat value);
void setUniformValue(const char *name, GLint value);
void setUniformValue(const char *name, GLuint value);
void setUniformValue(const char *name, GLfloat x, GLfloat y);
void setUniformValue(const char *name, GLfloat x, GLfloat y, GLfloat z);
void setUniformValue(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setUniformValue(const char *name, const QVector2D& value);
void setUniformValue(const char *name, const QVector3D& value);
void setUniformValue(const char *name, const QVector4D& value);
void setUniformValue(const char *name, const QColor& color);
void setUniformValue(const char *name, const QPoint& point);
void setUniformValue(const char *name, const QPointF& point);
void setUniformValue(const char *name, const QSize& size);
void setUniformValue(const char *name, const QSizeF& size);
void setUniformValue(const char *name, const QMatrix2x2& value);
void setUniformValue(const char *name, const QMatrix2x3& value);
void setUniformValue(const char *name, const QMatrix2x4& value);
void setUniformValue(const char *name, const QMatrix3x2& value);
void setUniformValue(const char *name, const QMatrix3x3& value);
void setUniformValue(const char *name, const QMatrix3x4& value);
void setUniformValue(const char *name, const QMatrix4x2& value);
void setUniformValue(const char *name, const QMatrix4x3& value);
void setUniformValue(const char *name, const QMatrix4x4& value);
void setUniformValue(const char *name, const GLfloat value[2][2]);
void setUniformValue(const char *name, const GLfloat value[3][3]);
void setUniformValue(const char *name, const GLfloat value[4][4]);
void setUniformValue(const char *name, const QTransform& value);

void setUniformValueArray(int location, const GLfloat *values, int count, int tupleSize);
void setUniformValueArray(int location, const GLint *values, int count);
void setUniformValueArray(int location, const GLuint *values, int count);
void setUniformValueArray(int location, const QVector2D *values, int count);
void setUniformValueArray(int location, const QVector3D *values, int count);
void setUniformValueArray(int location, const QVector4D *values, int count);
void setUniformValueArray(int location, const QMatrix2x2 *values, int count);
void setUniformValueArray(int location, const QMatrix2x3 *values, int count);
void setUniformValueArray(int location, const QMatrix2x4 *values, int count);
void setUniformValueArray(int location, const QMatrix3x2 *values, int count);
void setUniformValueArray(int location, const QMatrix3x3 *values, int count);
void setUniformValueArray(int location, const QMatrix3x4 *values, int count);
void setUniformValueArray(int location, const QMatrix4x2 *values, int count);
void setUniformValueArray(int location, const QMatrix4x3 *values, int count);
void setUniformValueArray(int location, const QMatrix4x4 *values, int count);

void setUniformValueArray(const char *name, const GLfloat *values, int count, int tupleSize);
void setUniformValueArray(const char *name, const GLint *values, int count);
void setUniformValueArray(const char *name, const GLuint *values, int count);
void setUniformValueArray(const char *name, const QVector2D *values, int count);
void setUniformValueArray(const char *name, const QVector3D *values, int count);
void setUniformValueArray(const char *name, const QVector4D *values, int count);
void setUniformValueArray(const char *name, const QMatrix2x2 *values, int count);
void setUniformValueArray(const char *name, const QMatrix2x3 *values, int count);
void setUniformValueArray(const char *name, const QMatrix2x4 *values, int count);
void setUniformValueArray(const char *name, const QMatrix3x2 *values, int count);
void setUniformValueArray(const char *name, const QMatrix3x3 *values, int count);
void setUniformValueArray(const char *name, const QMatrix3x4 *values, int count);
void setUniformValueArray(const char *name, const QMatrix4x2 *values, int count);
void setUniformValueArray(const char *name, const QMatrix4x3 *values, int count);
void setUniformValueArray(const char *name, const QMatrix4x4 *values, int count);

static bool hasOpenGLShaderPrograms(QOpenGLContext *context = 0);

private slots:
void shaderDestroyed();

private:
QOpenGLShaderProgram(const QOpenGLShaderProgram &) ; QOpenGLShaderProgram &operator=(const QOpenGLShaderProgram &) ;
inline QOpenGLShaderProgramPrivate* d_func() { return reinterpret_cast<QOpenGLShaderProgramPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLShaderProgramPrivate* d_func() const { return reinterpret_cast<const QOpenGLShaderProgramPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLShaderProgramPrivate;

bool init();
};






# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengltimerquery.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengltimerquery.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengltimerquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengltimerquery.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengltimerquery.h"


class QOpenGLTimerQueryPrivate;

class  QOpenGLTimerQuery : public QObject
{
Q_OBJECT

public:
explicit QOpenGLTimerQuery(QObject *parent = 0);
~QOpenGLTimerQuery();

bool create();
void destroy();
bool isCreated() const;
GLuint objectId() const;

void begin();
void end();
GLuint64 waitForTimestamp() const;
void recordTimestamp();
bool isResultAvailable() const;
GLuint64 waitForResult() const;

private:
inline QOpenGLTimerQueryPrivate* d_func() { return reinterpret_cast<QOpenGLTimerQueryPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLTimerQueryPrivate* d_func() const { return reinterpret_cast<const QOpenGLTimerQueryPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLTimerQueryPrivate;
QOpenGLTimerQuery(const QOpenGLTimerQuery &) ; QOpenGLTimerQuery &operator=(const QOpenGLTimerQuery &) ;
};


class QOpenGLTimeMonitorPrivate;

class  QOpenGLTimeMonitor : public QObject
{
Q_OBJECT

public:
explicit QOpenGLTimeMonitor(QObject *parent = 0);
~QOpenGLTimeMonitor();

void setSampleCount(int sampleCount);
int sampleCount() const;

bool create();
void destroy();
bool isCreated() const;
QVector<GLuint> objectIds() const;

int recordSample();

bool isResultAvailable() const;

QVector<GLuint64> waitForSamples() const;
QVector<GLuint64> waitForIntervals() const;

void reset();

private:
inline QOpenGLTimeMonitorPrivate* d_func() { return reinterpret_cast<QOpenGLTimeMonitorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLTimeMonitorPrivate* d_func() const { return reinterpret_cast<const QOpenGLTimeMonitorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLTimeMonitorPrivate;
QOpenGLTimeMonitor(const QOpenGLTimeMonitor &) ; QOpenGLTimeMonitor &operator=(const QOpenGLTimeMonitor &) ;
};






# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglversionfunctions.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglvertexarrayobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglvertexarrayobject.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglvertexarrayobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglvertexarrayobject.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglvertexarrayobject.h"


class QOpenGLVertexArrayObjectPrivate;

class  QOpenGLVertexArrayObject : public QObject
{
Q_OBJECT

public:
explicit QOpenGLVertexArrayObject(QObject* parent = 0);
~QOpenGLVertexArrayObject();

bool create();
void destroy();
bool isCreated() const;
GLuint objectId() const;
void bind();
void release();

class  Binder
{
public:
inline Binder(QOpenGLVertexArrayObject *v)
: vao(v)
{
qt_noop();
if (vao->isCreated() || vao->create())
vao->bind();
}

inline ~Binder()
{
release();
}

inline void release()
{
vao->release();
}

inline void rebind()
{
vao->bind();
}

private:
Binder(const Binder &) ; Binder &operator=(const Binder &) ;
QOpenGLVertexArrayObject *vao;
};

private:
QOpenGLVertexArrayObject(const QOpenGLVertexArrayObject &) ; QOpenGLVertexArrayObject &operator=(const QOpenGLVertexArrayObject &) ;
inline QOpenGLVertexArrayObjectPrivate* d_func() { return reinterpret_cast<QOpenGLVertexArrayObjectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QOpenGLVertexArrayObjectPrivate* d_func() const { return reinterpret_cast<const QOpenGLVertexArrayObjectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QOpenGLVertexArrayObjectPrivate;

QOpenGLVertexArrayObject(QOpenGLVertexArrayObjectPrivate &dd);
};






# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbackingstore.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbackingstore.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"














































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbackingstore.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"












































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbackingstore.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbackingstore.h"



class QRegion;
class QRect;
class QPoint;
class QImage;
class QBackingStorePrivate;
class QPlatformBackingStore;

class  QBackingStore
{
public:
explicit QBackingStore(QWindow *window);
~QBackingStore();

QWindow *window() const;

QPaintDevice *paintDevice();



void flush(const QRegion &region, QWindow *window = 0, const QPoint &offset = QPoint());

void resize(const QSize &size);
QSize size() const;

bool scroll(const QRegion &area, int dx, int dy);

void beginPaint(const QRegion &);
void endPaint();

void setStaticContents(const QRegion &region);
QRegion staticContents() const;
bool hasStaticContents() const;

QPlatformBackingStore *handle() const;

private:
QScopedPointer<QBackingStorePrivate> d_ptr;
};




# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpagedpaintdevice.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpagedpaintdevice.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpagedpaintdevice.h"






# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpagedpaintdevice.h"
class QPagedPaintDevicePrivate;

class  QPagedPaintDevice : public QPaintDevice
{
public:
QPagedPaintDevice();
~QPagedPaintDevice();

virtual bool newPage() = 0;

enum PageSize { A4, B5, Letter, Legal, Executive,
A0, A1, A2, A3, A5, A6, A7, A8, A9, B0, B1,
B10, B2, B3, B4, B6, B7, B8, B9, C5E, Comm10E,
DLE, Folio, Ledger, Tabloid, Custom, NPageSize = Custom };

virtual void setPageSize(PageSize size);
PageSize pageSize() const;

virtual void setPageSizeMM(const QSizeF &size);
QSizeF pageSizeMM() const;

struct Margins {
qreal left;
qreal right;
qreal top;
qreal bottom;
};

virtual void setMargins(const Margins &margins);
Margins margins() const;

protected:
friend class QPagedPaintDevicePrivate;
QPagedPaintDevicePrivate *d;
};




# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"















































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qchar.h"















































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"



template <typename T> class QList;
struct QTextOptionPrivate;

class  QTextOption
{
public:
enum TabType {
LeftTab,
RightTab,
CenterTab,
DelimiterTab
};

struct  Tab {
inline Tab() : position(80), type(QTextOption::LeftTab) { }
inline Tab(qreal pos, TabType tabType, QChar delim = QChar())
: position(pos), type(tabType), delimiter(delim) {}

inline bool operator==(const Tab &other) const {
return type == other.type
&& qFuzzyCompare(position, other.position)
&& delimiter == other.delimiter;
}

inline bool operator!=(const Tab &other) const {
return !operator==(other);
}

qreal position;
TabType type;
QChar delimiter;
};

QTextOption();
 QTextOption(Qt::Alignment alignment);
~QTextOption();

QTextOption(const QTextOption &o);
QTextOption &operator=(const QTextOption &o);

inline void setAlignment(Qt::Alignment alignment);
inline Qt::Alignment alignment() const { return Qt::Alignment(align); }

inline void setTextDirection(Qt::LayoutDirection aDirection) { this->direction = aDirection; }
inline Qt::LayoutDirection textDirection() const { return Qt::LayoutDirection(direction); }

enum WrapMode {
NoWrap,
WordWrap,
ManualWrap,
WrapAnywhere,
WrapAtWordBoundaryOrAnywhere
};
inline void setWrapMode(WrapMode wrap) { wordWrap = wrap; }
inline WrapMode wrapMode() const { return static_cast<WrapMode>(wordWrap); }

enum Flag {
ShowTabsAndSpaces = 0x1,
ShowLineAndParagraphSeparators = 0x2,
AddSpaceForLineAndParagraphSeparators = 0x4,
SuppressColors = 0x8,
IncludeTrailingSpaces = 0x80000000
};
typedef QFlags<Flag> Flags;
inline void setFlags(Flags flags);
inline Flags flags() const { return Flags(f); }

inline void setTabStop(qreal tabStop);
inline qreal tabStop() const { return tab; }

void setTabArray(const QList<qreal> &tabStops);
QList<qreal> tabArray() const;

void setTabs(const QList<Tab> &tabStops);
QList<Tab> tabs() const;

void setUseDesignMetrics(bool b) { design = b; }
bool useDesignMetrics() const { return design; }

private:
uint align : 8;
uint wordWrap : 4;
uint design : 1;
uint direction : 2;
uint unused : 18;
uint f;
qreal tab;
QTextOptionPrivate *d;
};

 inline QFlags<QTextOption::Flags::enum_type> operator|(QTextOption::Flags::enum_type f1, QTextOption::Flags::enum_type f2) { return QFlags<QTextOption::Flags::enum_type>(f1) | f2; }  inline QFlags<QTextOption::Flags::enum_type> operator|(QTextOption::Flags::enum_type f1, QFlags<QTextOption::Flags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextOption::Flags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

inline void QTextOption::setAlignment(Qt::Alignment aalignment)
{ align = aalignment; }

inline void QTextOption::setFlags(Flags aflags)
{ f = aflags; }

inline void QTextOption::setTabStop(qreal atabStop)
{ tab = atabStop; }



 template <> struct QMetaTypeId< QTextOption::Tab  > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QTextOption::Tab  >("QTextOption::Tab ", reinterpret_cast< QTextOption::Tab  *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




















































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"



class QVariant;
class QPenPrivate;
class QBrush;
class QPen;


# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"
 QDataStream &operator<<(QDataStream &, const QPen &);
 QDataStream &operator>>(QDataStream &, QPen &);


# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"
class  QPen
{
public:
QPen();
QPen(Qt::PenStyle);
QPen(const QColor &color);
QPen(const QBrush &brush, qreal width, Qt::PenStyle s = Qt::SolidLine,
Qt::PenCapStyle c = Qt::SquareCap, Qt::PenJoinStyle j = Qt::BevelJoin);
QPen(const QPen &pen);

~QPen();

QPen &operator=(const QPen &pen);




# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"
inline void swap(QPen &other) { qSwap(d, other.d); }

Qt::PenStyle style() const;
void setStyle(Qt::PenStyle);

QVector<qreal> dashPattern() const;
void setDashPattern(const QVector<qreal> &pattern);

qreal dashOffset() const;
void setDashOffset(qreal doffset);

qreal miterLimit() const;
void setMiterLimit(qreal limit);

qreal widthF() const;
void setWidthF(qreal width);

int width() const;
void setWidth(int width);

QColor color() const;
void setColor(const QColor &color);

QBrush brush() const;
void setBrush(const QBrush &brush);

bool isSolid() const;

Qt::PenCapStyle capStyle() const;
void setCapStyle(Qt::PenCapStyle pcs);

Qt::PenJoinStyle joinStyle() const;
void setJoinStyle(Qt::PenJoinStyle pcs);

bool isCosmetic() const;
void setCosmetic(bool cosmetic);

bool operator==(const QPen &p) const;
inline bool operator!=(const QPen &p) const { return !(operator==(p)); }
operator QVariant() const;

bool isDetached();
private:
friend  QDataStream &operator>>(QDataStream &, QPen &);
friend  QDataStream &operator<<(QDataStream &, const QPen &);

void detach();
class QPenPrivate *d;

public:
typedef QPenPrivate * DataPtr;
inline DataPtr &data_ptr() { return d; }
};

template<> class QTypeInfo<QPen > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QPen)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPen) }; static inline const char *name() { return "QPen"; } }; template <> inline void qSwap<QPen>(QPen &value1, QPen &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QPen>(::QPen &value1, ::QPen &value2) { value1.swap(value2); } } 


# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"
 QDebug operator<<(QDebug, const QPen &);


# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"



# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontinfo.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontinfo.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontinfo.h"



class  QFontInfo
{
public:
QFontInfo(const QFont &);
QFontInfo(const QFontInfo &);
~QFontInfo();

QFontInfo &operator=(const QFontInfo &);

void swap(QFontInfo &other) { qSwap(d, other.d); }

QString family() const;
QString styleName() const;
int pixelSize() const;
int pointSize() const;
qreal pointSizeF() const;
bool italic() const;
QFont::Style style() const;
int weight() const;
inline bool bold() const { return weight() > QFont::Normal; }
bool underline() const;
bool overline() const;
bool strikeOut() const;
bool fixedPitch() const;
QFont::StyleHint styleHint() const;
bool rawMode() const;

bool exactMatch() const;

private:
QExplicitlySharedDataPointer<QFontPrivate> d;
};

template<> class QTypeInfo<QFontInfo > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFontInfo)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFontInfo) }; static inline const char *name() { return "QFontInfo"; } }; template <> inline void qSwap<QFontInfo>(QFontInfo &value1, QFontInfo &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QFontInfo>(::QFontInfo &value1, ::QFontInfo &value2) { value1.swap(value2); } } 




# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"



# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"




class QTextCodec;
class QRect;


class  QFontMetrics
{
public:
explicit QFontMetrics(const QFont &);
QFontMetrics(const QFont &, QPaintDevice *pd);
QFontMetrics(const QFontMetrics &);
~QFontMetrics();

QFontMetrics &operator=(const QFontMetrics &);





# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"
void swap(QFontMetrics &other) { qSwap(d, other.d); }

int ascent() const;
int descent() const;
int height() const;
int leading() const;
int lineSpacing() const;
int minLeftBearing() const;
int minRightBearing() const;
int maxWidth() const;

int xHeight() const;
int averageCharWidth() const;

bool inFont(QChar) const;
bool inFontUcs4(uint ucs4) const;

int leftBearing(QChar) const;
int rightBearing(QChar) const;
int width(const QString &, int len = -1) const;
int width(const QString &, int len, int flags) const;

int width(QChar) const;
int charWidth(const QString &str, int pos) const;

QRect boundingRect(QChar) const;

QRect boundingRect(const QString &text) const;
QRect boundingRect(const QRect &r, int flags, const QString &text, int tabstops=0, int *tabarray=0) const;
inline QRect boundingRect(int x, int y, int w, int h, int flags, const QString &text,
int tabstops=0, int *tabarray=0) const
{ return boundingRect(QRect(x, y, w, h), flags, text, tabstops, tabarray); }
QSize size(int flags, const QString& str, int tabstops=0, int *tabarray=0) const;

QRect tightBoundingRect(const QString &text) const;

QString elidedText(const QString &text, Qt::TextElideMode mode, int width, int flags = 0) const;

int underlinePos() const;
int overlinePos() const;
int strikeOutPos() const;
int lineWidth() const;

bool operator==(const QFontMetrics &other) const;
inline bool operator !=(const QFontMetrics &other) const { return !operator==(other); }

private:
friend class QFontMetricsF;
friend class QStackTextEngine;

QExplicitlySharedDataPointer<QFontPrivate> d;
};

template<> class QTypeInfo<QFontMetrics > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFontMetrics)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFontMetrics) }; static inline const char *name() { return "QFontMetrics"; } }; template <> inline void qSwap<QFontMetrics>(QFontMetrics &value1, QFontMetrics &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QFontMetrics>(::QFontMetrics &value1, ::QFontMetrics &value2) { value1.swap(value2); } } 

class  QFontMetricsF
{
public:
explicit QFontMetricsF(const QFont &);
QFontMetricsF(const QFont &, QPaintDevice *pd);
QFontMetricsF(const QFontMetrics &);
QFontMetricsF(const QFontMetricsF &);
~QFontMetricsF();

QFontMetricsF &operator=(const QFontMetricsF &);
QFontMetricsF &operator=(const QFontMetrics &);





# 144 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"
void swap(QFontMetricsF &other) { qSwap(d, other.d); }

qreal ascent() const;
qreal descent() const;
qreal height() const;
qreal leading() const;
qreal lineSpacing() const;
qreal minLeftBearing() const;
qreal minRightBearing() const;
qreal maxWidth() const;

qreal xHeight() const;
qreal averageCharWidth() const;

bool inFont(QChar) const;
bool inFontUcs4(uint ucs4) const;

qreal leftBearing(QChar) const;
qreal rightBearing(QChar) const;
qreal width(const QString &string) const;

qreal width(QChar) const;

QRectF boundingRect(const QString &string) const;
QRectF boundingRect(QChar) const;
QRectF boundingRect(const QRectF &r, int flags, const QString& string, int tabstops=0, int *tabarray=0) const;
QSizeF size(int flags, const QString& str, int tabstops=0, int *tabarray=0) const;

QRectF tightBoundingRect(const QString &text) const;

QString elidedText(const QString &text, Qt::TextElideMode mode, qreal width, int flags = 0) const;

qreal underlinePos() const;
qreal overlinePos() const;
qreal strikeOutPos() const;
qreal lineWidth() const;

bool operator==(const QFontMetricsF &other) const;
inline bool operator !=(const QFontMetricsF &other) const { return !operator==(other); }

private:
QExplicitlySharedDataPointer<QFontPrivate> d;
};

template<> class QTypeInfo<QFontMetricsF > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QFontMetricsF)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFontMetricsF) }; static inline const char *name() { return "QFontMetricsF"; } }; template <> inline void qSwap<QFontMetricsF>(QFontMetricsF &value1, QFontMetricsF &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QFontMetricsF>(::QFontMetricsF &value1, ::QFontMetricsF &value2) { value1.swap(value2); } } 




# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"



# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"



class QBrush;
class QFontInfo;
class QFontMetrics;
class QPaintDevice;
class QPainterPath;
class QPainterPrivate;
class QPen;
class QPolygon;
class QTextItem;
class QTextEngine;
class QMatrix;
class QTransform;
class QStaticText;
class QGlyphRun;

class QPainterPrivateDeleter;

class  QPainter
{
inline QPainterPrivate* d_func() { return reinterpret_cast<QPainterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPainterPrivate* d_func() const { return reinterpret_cast<const QPainterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPainterPrivate;



public:
enum RenderHint {
Antialiasing = 0x01,
TextAntialiasing = 0x02,
SmoothPixmapTransform = 0x04,
HighQualityAntialiasing = 0x08,
NonCosmeticDefaultPen = 0x10,
Qt4CompatiblePainting = 0x20
};

typedef QFlags<RenderHint> RenderHints;

class PixmapFragment {
public:
qreal x;
qreal y;
qreal sourceLeft;
qreal sourceTop;
qreal width;
qreal height;
qreal scaleX;
qreal scaleY;
qreal rotation;
qreal opacity;
static PixmapFragment  create(const QPointF &pos, const QRectF &sourceRect,
qreal scaleX = 1, qreal scaleY = 1,
qreal rotation = 0, qreal opacity = 1);
};

enum PixmapFragmentHint {
OpaqueHint = 0x01
};

typedef QFlags<PixmapFragmentHint> PixmapFragmentHints;

QPainter();
explicit QPainter(QPaintDevice *);
~QPainter();

QPaintDevice *device() const;

bool begin(QPaintDevice *);
bool end();
bool isActive() const;

void initFrom(const QPaintDevice *device);

enum CompositionMode {
CompositionMode_SourceOver,
CompositionMode_DestinationOver,
CompositionMode_Clear,
CompositionMode_Source,
CompositionMode_Destination,
CompositionMode_SourceIn,
CompositionMode_DestinationIn,
CompositionMode_SourceOut,
CompositionMode_DestinationOut,
CompositionMode_SourceAtop,
CompositionMode_DestinationAtop,
CompositionMode_Xor,


CompositionMode_Plus,
CompositionMode_Multiply,
CompositionMode_Screen,
CompositionMode_Overlay,
CompositionMode_Darken,
CompositionMode_Lighten,
CompositionMode_ColorDodge,
CompositionMode_ColorBurn,
CompositionMode_HardLight,
CompositionMode_SoftLight,
CompositionMode_Difference,
CompositionMode_Exclusion,


RasterOp_SourceOrDestination,
RasterOp_SourceAndDestination,
RasterOp_SourceXorDestination,
RasterOp_NotSourceAndNotDestination,
RasterOp_NotSourceOrNotDestination,
RasterOp_NotSourceXorDestination,
RasterOp_NotSource,
RasterOp_NotSourceAndDestination,
RasterOp_SourceAndNotDestination,
RasterOp_NotSourceOrDestination,
RasterOp_SourceOrNotDestination,
RasterOp_ClearDestination,
RasterOp_SetDestination,
RasterOp_NotDestination
};
void setCompositionMode(CompositionMode mode);
CompositionMode compositionMode() const;

const QFont &font() const;
void setFont(const QFont &f);

QFontMetrics fontMetrics() const;
QFontInfo fontInfo() const;

void setPen(const QColor &color);
void setPen(const QPen &pen);
void setPen(Qt::PenStyle style);
const QPen &pen() const;

void setBrush(const QBrush &brush);
void setBrush(Qt::BrushStyle style);
const QBrush &brush() const;


void setBackgroundMode(Qt::BGMode mode);
Qt::BGMode backgroundMode() const;

QPoint brushOrigin() const;
inline void setBrushOrigin(int x, int y);
inline void setBrushOrigin(const QPoint &);
void setBrushOrigin(const QPointF &);

void setBackground(const QBrush &bg);
const QBrush &background() const;

qreal opacity() const;
void setOpacity(qreal opacity);


QRegion clipRegion() const;
QPainterPath clipPath() const;

void setClipRect(const QRectF &, Qt::ClipOperation op = Qt::ReplaceClip);
void setClipRect(const QRect &, Qt::ClipOperation op = Qt::ReplaceClip);
inline void setClipRect(int x, int y, int w, int h, Qt::ClipOperation op = Qt::ReplaceClip);

void setClipRegion(const QRegion &, Qt::ClipOperation op = Qt::ReplaceClip);

void setClipPath(const QPainterPath &path, Qt::ClipOperation op = Qt::ReplaceClip);

void setClipping(bool enable);
bool hasClipping() const;

QRectF clipBoundingRect() const;

void save();
void restore();


void setMatrix(const QMatrix &matrix, bool combine = false);
const QMatrix &matrix() const;
const QMatrix &deviceMatrix() const;
void resetMatrix();

void setTransform(const QTransform &transform, bool combine = false);
const QTransform &transform() const;
const QTransform &deviceTransform() const;
void resetTransform();

void setWorldMatrix(const QMatrix &matrix, bool combine = false);
const QMatrix &worldMatrix() const;

void setWorldTransform(const QTransform &matrix, bool combine = false);
const QTransform &worldTransform() const;

QMatrix combinedMatrix() const;
QTransform combinedTransform() const;

void setMatrixEnabled(bool enabled);
bool matrixEnabled() const;

void setWorldMatrixEnabled(bool enabled);
bool worldMatrixEnabled() const;

void scale(qreal sx, qreal sy);
void shear(qreal sh, qreal sv);
void rotate(qreal a);

void translate(const QPointF &offset);
inline void translate(const QPoint &offset);
inline void translate(qreal dx, qreal dy);

QRect window() const;
void setWindow(const QRect &window);
inline void setWindow(int x, int y, int w, int h);

QRect viewport() const;
void setViewport(const QRect &viewport);
inline void setViewport(int x, int y, int w, int h);

void setViewTransformEnabled(bool enable);
bool viewTransformEnabled() const;


void strokePath(const QPainterPath &path, const QPen &pen);
void fillPath(const QPainterPath &path, const QBrush &brush);
void drawPath(const QPainterPath &path);

inline void drawPoint(const QPointF &pt);
inline void drawPoint(const QPoint &p);
inline void drawPoint(int x, int y);

void drawPoints(const QPointF *points, int pointCount);
inline void drawPoints(const QPolygonF &points);
void drawPoints(const QPoint *points, int pointCount);
inline void drawPoints(const QPolygon &points);

inline void drawLine(const QLineF &line);
inline void drawLine(const QLine &line);
inline void drawLine(int x1, int y1, int x2, int y2);
inline void drawLine(const QPoint &p1, const QPoint &p2);
inline void drawLine(const QPointF &p1, const QPointF &p2);

void drawLines(const QLineF *lines, int lineCount);
inline void drawLines(const QVector<QLineF> &lines);
void drawLines(const QPointF *pointPairs, int lineCount);
inline void drawLines(const QVector<QPointF> &pointPairs);
void drawLines(const QLine *lines, int lineCount);
inline void drawLines(const QVector<QLine> &lines);
void drawLines(const QPoint *pointPairs, int lineCount);
inline void drawLines(const QVector<QPoint> &pointPairs);

inline void drawRect(const QRectF &rect);
inline void drawRect(int x1, int y1, int w, int h);
inline void drawRect(const QRect &rect);

void drawRects(const QRectF *rects, int rectCount);
inline void drawRects(const QVector<QRectF> &rectangles);
void drawRects(const QRect *rects, int rectCount);
inline void drawRects(const QVector<QRect> &rectangles);

void drawEllipse(const QRectF &r);
void drawEllipse(const QRect &r);
inline void drawEllipse(int x, int y, int w, int h);

inline void drawEllipse(const QPointF &center, qreal rx, qreal ry);
inline void drawEllipse(const QPoint &center, int rx, int ry);

void drawPolyline(const QPointF *points, int pointCount);
inline void drawPolyline(const QPolygonF &polyline);
void drawPolyline(const QPoint *points, int pointCount);
inline void drawPolyline(const QPolygon &polygon);

void drawPolygon(const QPointF *points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill);
inline void drawPolygon(const QPolygonF &polygon, Qt::FillRule fillRule = Qt::OddEvenFill);
void drawPolygon(const QPoint *points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill);
inline void drawPolygon(const QPolygon &polygon, Qt::FillRule fillRule = Qt::OddEvenFill);

void drawConvexPolygon(const QPointF *points, int pointCount);
inline void drawConvexPolygon(const QPolygonF &polygon);
void drawConvexPolygon(const QPoint *points, int pointCount);
inline void drawConvexPolygon(const QPolygon &polygon);

void drawArc(const QRectF &rect, int a, int alen);
inline void drawArc(const QRect &, int a, int alen);
inline void drawArc(int x, int y, int w, int h, int a, int alen);

void drawPie(const QRectF &rect, int a, int alen);
inline void drawPie(int x, int y, int w, int h, int a, int alen);
inline void drawPie(const QRect &, int a, int alen);

void drawChord(const QRectF &rect, int a, int alen);
inline void drawChord(int x, int y, int w, int h, int a, int alen);
inline void drawChord(const QRect &, int a, int alen);

void drawRoundedRect(const QRectF &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);
inline void drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);
inline void drawRoundedRect(const QRect &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode = Qt::AbsoluteSize);

void drawRoundRect(const QRectF &r, int xround = 25, int yround = 25);
inline void drawRoundRect(int x, int y, int w, int h, int = 25, int = 25);
inline void drawRoundRect(const QRect &r, int xround = 25, int yround = 25);

void drawTiledPixmap(const QRectF &rect, const QPixmap &pm, const QPointF &offset = QPointF());
inline void drawTiledPixmap(int x, int y, int w, int h, const QPixmap &, int sx=0, int sy=0);
inline void drawTiledPixmap(const QRect &, const QPixmap &, const QPoint & = QPoint());

# 365 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"
void drawPicture(const QPointF &p, const QPicture &picture);
inline void drawPicture(int x, int y, const QPicture &picture);
inline void drawPicture(const QPoint &p, const QPicture &picture);


# 370 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"
void drawPixmap(const QRectF &targetRect, const QPixmap &pixmap, const QRectF &sourceRect);
inline void drawPixmap(const QRect &targetRect, const QPixmap &pixmap, const QRect &sourceRect);
inline void drawPixmap(int x, int y, int w, int h, const QPixmap &pm,
int sx, int sy, int sw, int sh);
inline void drawPixmap(int x, int y, const QPixmap &pm,
int sx, int sy, int sw, int sh);
inline void drawPixmap(const QPointF &p, const QPixmap &pm, const QRectF &sr);
inline void drawPixmap(const QPoint &p, const QPixmap &pm, const QRect &sr);
void drawPixmap(const QPointF &p, const QPixmap &pm);
inline void drawPixmap(const QPoint &p, const QPixmap &pm);
inline void drawPixmap(int x, int y, const QPixmap &pm);
inline void drawPixmap(const QRect &r, const QPixmap &pm);
inline void drawPixmap(int x, int y, int w, int h, const QPixmap &pm);

void drawPixmapFragments(const PixmapFragment *fragments, int fragmentCount,
const QPixmap &pixmap, PixmapFragmentHints hints = 0);

void drawImage(const QRectF &targetRect, const QImage &image, const QRectF &sourceRect,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QRect &targetRect, const QImage &image, const QRect &sourceRect,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QPointF &p, const QImage &image, const QRectF &sr,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QPoint &p, const QImage &image, const QRect &sr,
Qt::ImageConversionFlags flags = Qt::AutoColor);
inline void drawImage(const QRectF &r, const QImage &image);
inline void drawImage(const QRect &r, const QImage &image);
void drawImage(const QPointF &p, const QImage &image);
inline void drawImage(const QPoint &p, const QImage &image);
inline void drawImage(int x, int y, const QImage &image, int sx = 0, int sy = 0,
int sw = -1, int sh = -1, Qt::ImageConversionFlags flags = Qt::AutoColor);

void setLayoutDirection(Qt::LayoutDirection direction);
Qt::LayoutDirection layoutDirection() const;


# 406 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"
void drawGlyphRun(const QPointF &position, const QGlyphRun &glyphRun);


# 409 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"
void drawStaticText(const QPointF &topLeftPosition, const QStaticText &staticText);
inline void drawStaticText(const QPoint &topLeftPosition, const QStaticText &staticText);
inline void drawStaticText(int left, int top, const QStaticText &staticText);

void drawText(const QPointF &p, const QString &s);
inline void drawText(const QPoint &p, const QString &s);
inline void drawText(int x, int y, const QString &s);

void drawText(const QPointF &p, const QString &str, int tf, int justificationPadding);

void drawText(const QRectF &r, int flags, const QString &text, QRectF *br=0);
void drawText(const QRect &r, int flags, const QString &text, QRect *br=0);
inline void drawText(int x, int y, int w, int h, int flags, const QString &text, QRect *br=0);

void drawText(const QRectF &r, const QString &text, const QTextOption &o = QTextOption());

QRectF boundingRect(const QRectF &rect, int flags, const QString &text);
QRect boundingRect(const QRect &rect, int flags, const QString &text);
inline QRect boundingRect(int x, int y, int w, int h, int flags, const QString &text);

QRectF boundingRect(const QRectF &rect, const QString &text, const QTextOption &o = QTextOption());

void drawTextItem(const QPointF &p, const QTextItem &ti);
inline void drawTextItem(int x, int y, const QTextItem &ti);
inline void drawTextItem(const QPoint &p, const QTextItem &ti);

void fillRect(const QRectF &, const QBrush &);
inline void fillRect(int x, int y, int w, int h, const QBrush &);
void fillRect(const QRect &, const QBrush &);

void fillRect(const QRectF &, const QColor &color);
inline void fillRect(int x, int y, int w, int h, const QColor &color);
void fillRect(const QRect &, const QColor &color);

inline void fillRect(int x, int y, int w, int h, Qt::GlobalColor c);
inline void fillRect(const QRect &r, Qt::GlobalColor c);
inline void fillRect(const QRectF &r, Qt::GlobalColor c);

inline void fillRect(int x, int y, int w, int h, Qt::BrushStyle style);
inline void fillRect(const QRect &r, Qt::BrushStyle style);
inline void fillRect(const QRectF &r, Qt::BrushStyle style);

void eraseRect(const QRectF &);
inline void eraseRect(int x, int y, int w, int h);
inline void eraseRect(const QRect &);

void setRenderHint(RenderHint hint, bool on = true);
void setRenderHints(RenderHints hints, bool on = true);
RenderHints renderHints() const;
inline bool testRenderHint(RenderHint hint) const { return renderHints() & hint; }

QPaintEngine *paintEngine() const;

static void setRedirected(const QPaintDevice *device, QPaintDevice *replacement,
const QPoint& offset = QPoint());
static QPaintDevice *redirected(const QPaintDevice *device, QPoint *offset = 0);
static void restoreRedirected(const QPaintDevice *device);

void beginNativePainting();
void endNativePainting();

private:
QPainter(const QPainter &) ; QPainter &operator=(const QPainter &) ;

QScopedPointer<QPainterPrivate> d_ptr;

friend class QWidget;
friend class QFontEngine;
friend class QFontEngineBox;
friend class QFontEngineFT;
friend class QFontEngineMac;
friend class QFontEngineWin;
friend class QPaintEngine;
friend class QPaintEngineExPrivate;
friend class QOpenGLPaintEngine;
friend class QWin32PaintEngine;
friend class QWin32PaintEnginePrivate;
friend class QRasterPaintEngine;
friend class QAlphaPaintEngine;
friend class QPreviewPaintEngine;
friend class QTextEngine;
};

 inline QFlags<QPainter::RenderHints::enum_type> operator|(QPainter::RenderHints::enum_type f1, QPainter::RenderHints::enum_type f2) { return QFlags<QPainter::RenderHints::enum_type>(f1) | f2; }  inline QFlags<QPainter::RenderHints::enum_type> operator|(QPainter::RenderHints::enum_type f1, QFlags<QPainter::RenderHints::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QPainter::RenderHints::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




inline void QPainter::drawLine(const QLineF &l)
{
drawLines(&l, 1);
}

inline void QPainter::drawLine(const QLine &line)
{
drawLines(&line, 1);
}

inline void QPainter::drawLine(int x1, int y1, int x2, int y2)
{
QLine l(x1, y1, x2, y2);
drawLines(&l, 1);
}

inline void QPainter::drawLine(const QPoint &p1, const QPoint &p2)
{
QLine l(p1, p2);
drawLines(&l, 1);
}

inline void QPainter::drawLine(const QPointF &p1, const QPointF &p2)
{
drawLine(QLineF(p1, p2));
}

inline void QPainter::drawLines(const QVector<QLineF> &lines)
{
drawLines(lines.constData(), lines.size());
}

inline void QPainter::drawLines(const QVector<QLine> &lines)
{
drawLines(lines.constData(), lines.size());
}

inline void QPainter::drawLines(const QVector<QPointF> &pointPairs)
{
drawLines(pointPairs.constData(), pointPairs.size() / 2);
}

inline void QPainter::drawLines(const QVector<QPoint> &pointPairs)
{
drawLines(pointPairs.constData(), pointPairs.size() / 2);
}

inline void QPainter::drawPolyline(const QPolygonF &polyline)
{
drawPolyline(polyline.constData(), polyline.size());
}

inline void QPainter::drawPolyline(const QPolygon &polyline)
{
drawPolyline(polyline.constData(), polyline.size());
}

inline void QPainter::drawPolygon(const QPolygonF &polygon, Qt::FillRule fillRule)
{
drawPolygon(polygon.constData(), polygon.size(), fillRule);
}

inline void QPainter::drawPolygon(const QPolygon &polygon, Qt::FillRule fillRule)
{
drawPolygon(polygon.constData(), polygon.size(), fillRule);
}

inline void QPainter::drawConvexPolygon(const QPolygonF &poly)
{
drawConvexPolygon(poly.constData(), poly.size());
}

inline void QPainter::drawConvexPolygon(const QPolygon &poly)
{
drawConvexPolygon(poly.constData(), poly.size());
}

inline void QPainter::drawRect(const QRectF &rect)
{
drawRects(&rect, 1);
}

inline void QPainter::drawRect(int x, int y, int w, int h)
{
QRect r(x, y, w, h);
drawRects(&r, 1);
}

inline void QPainter::drawRect(const QRect &r)
{
drawRects(&r, 1);
}

inline void QPainter::drawRects(const QVector<QRectF> &rects)
{
drawRects(rects.constData(), rects.size());
}

inline void QPainter::drawRects(const QVector<QRect> &rects)
{
drawRects(rects.constData(), rects.size());
}

inline void QPainter::drawPoint(const QPointF &p)
{
drawPoints(&p, 1);
}

inline void QPainter::drawPoint(int x, int y)
{
QPoint p(x, y);
drawPoints(&p, 1);
}

inline void QPainter::drawPoint(const QPoint &p)
{
drawPoints(&p, 1);
}

inline void QPainter::drawPoints(const QPolygonF &points)
{
drawPoints(points.constData(), points.size());
}

inline void QPainter::drawPoints(const QPolygon &points)
{
drawPoints(points.constData(), points.size());
}

inline void QPainter::drawRoundRect(int x, int y, int w, int h, int xRnd, int yRnd)
{
drawRoundRect(QRectF(x, y, w, h), xRnd, yRnd);
}

inline void QPainter::drawRoundRect(const QRect &rect, int xRnd, int yRnd)
{
drawRoundRect(QRectF(rect), xRnd, yRnd);
}

inline void QPainter::drawRoundedRect(int x, int y, int w, int h, qreal xRadius, qreal yRadius,
Qt::SizeMode mode)
{
drawRoundedRect(QRectF(x, y, w, h), xRadius, yRadius, mode);
}

inline void QPainter::drawRoundedRect(const QRect &rect, qreal xRadius, qreal yRadius,
Qt::SizeMode mode)
{
drawRoundedRect(QRectF(rect), xRadius, yRadius, mode);
}

inline void QPainter::drawEllipse(int x, int y, int w, int h)
{
drawEllipse(QRect(x, y, w, h));
}

inline void QPainter::drawEllipse(const QPointF &center, qreal rx, qreal ry)
{
drawEllipse(QRectF(center.x() - rx, center.y() - ry, 2 * rx, 2 * ry));
}

inline void QPainter::drawEllipse(const QPoint &center, int rx, int ry)
{
drawEllipse(QRect(center.x() - rx, center.y() - ry, 2 * rx, 2 * ry));
}

inline void QPainter::drawArc(const QRect &r, int a, int alen)
{
drawArc(QRectF(r), a, alen);
}

inline void QPainter::drawArc(int x, int y, int w, int h, int a, int alen)
{
drawArc(QRectF(x, y, w, h), a, alen);
}

inline void QPainter::drawPie(const QRect &rect, int a, int alen)
{
drawPie(QRectF(rect), a, alen);
}

inline void QPainter::drawPie(int x, int y, int w, int h, int a, int alen)
{
drawPie(QRectF(x, y, w, h), a, alen);
}

inline void QPainter::drawChord(const QRect &rect, int a, int alen)
{
drawChord(QRectF(rect), a, alen);
}

inline void QPainter::drawChord(int x, int y, int w, int h, int a, int alen)
{
drawChord(QRectF(x, y, w, h), a, alen);
}

inline void QPainter::setClipRect(int x, int y, int w, int h, Qt::ClipOperation op)
{
setClipRect(QRect(x, y, w, h), op);
}

inline void QPainter::eraseRect(const QRect &rect)
{
eraseRect(QRectF(rect));
}

inline void QPainter::eraseRect(int x, int y, int w, int h)
{
eraseRect(QRectF(x, y, w, h));
}

inline void QPainter::fillRect(int x, int y, int w, int h, const QBrush &b)
{
fillRect(QRect(x, y, w, h), b);
}

inline void QPainter::fillRect(int x, int y, int w, int h, const QColor &b)
{
fillRect(QRect(x, y, w, h), b);
}

inline void QPainter::fillRect(int x, int y, int w, int h, Qt::GlobalColor c)
{
fillRect(QRect(x, y, w, h), QColor(c));
}

inline void QPainter::fillRect(const QRect &r, Qt::GlobalColor c)
{
fillRect(r, QColor(c));
}

inline void QPainter::fillRect(const QRectF &r, Qt::GlobalColor c)
{
fillRect(r, QColor(c));
}

inline void QPainter::fillRect(int x, int y, int w, int h, Qt::BrushStyle style)
{
fillRect(QRectF(x, y, w, h), QBrush(style));
}

inline void QPainter::fillRect(const QRect &r, Qt::BrushStyle style)
{
fillRect(QRectF(r), QBrush(style));
}

inline void QPainter::fillRect(const QRectF &r, Qt::BrushStyle style)
{
fillRect(r, QBrush(style));
}


inline void QPainter::setBrushOrigin(int x, int y)
{
setBrushOrigin(QPoint(x, y));
}

inline void QPainter::setBrushOrigin(const QPoint &p)
{
setBrushOrigin(QPointF(p));
}

inline void QPainter::drawTiledPixmap(const QRect &rect, const QPixmap &pm, const QPoint &offset)
{
drawTiledPixmap(QRectF(rect), pm, QPointF(offset));
}

inline void QPainter::drawTiledPixmap(int x, int y, int w, int h, const QPixmap &pm, int sx, int sy)
{
drawTiledPixmap(QRectF(x, y, w, h), pm, QPointF(sx, sy));
}

inline void QPainter::drawPixmap(const QRect &targetRect, const QPixmap &pixmap, const QRect &sourceRect)
{
drawPixmap(QRectF(targetRect), pixmap, QRectF(sourceRect));
}

inline void QPainter::drawPixmap(const QPoint &p, const QPixmap &pm)
{
drawPixmap(QPointF(p), pm);
}

inline void QPainter::drawPixmap(const QRect &r, const QPixmap &pm)
{
drawPixmap(QRectF(r), pm, QRectF());
}

inline void QPainter::drawPixmap(int x, int y, const QPixmap &pm)
{
drawPixmap(QPointF(x, y), pm);
}

inline void QPainter::drawPixmap(int x, int y, int w, int h, const QPixmap &pm)
{
drawPixmap(QRectF(x, y, w, h), pm, QRectF());
}

inline void QPainter::drawPixmap(int x, int y, int w, int h, const QPixmap &pm,
int sx, int sy, int sw, int sh)
{
drawPixmap(QRectF(x, y, w, h), pm, QRectF(sx, sy, sw, sh));
}

inline void QPainter::drawPixmap(int x, int y, const QPixmap &pm,
int sx, int sy, int sw, int sh)
{
drawPixmap(QRectF(x, y, -1, -1), pm, QRectF(sx, sy, sw, sh));
}

inline void QPainter::drawPixmap(const QPointF &p, const QPixmap &pm, const QRectF &sr)
{
drawPixmap(QRectF(p.x(), p.y(), -1, -1), pm, sr);
}

inline void QPainter::drawPixmap(const QPoint &p, const QPixmap &pm, const QRect &sr)
{
drawPixmap(QRectF(p.x(), p.y(), -1, -1), pm, sr);
}

inline void QPainter::drawTextItem(int x, int y, const QTextItem &ti)
{
drawTextItem(QPointF(x, y), ti);
}

inline void QPainter::drawImage(const QRect &targetRect, const QImage &image, const QRect &sourceRect,
Qt::ImageConversionFlags flags)
{
drawImage(QRectF(targetRect), image, QRectF(sourceRect), flags);
}

inline void QPainter::drawImage(const QPointF &p, const QImage &image, const QRectF &sr,
Qt::ImageConversionFlags flags)
{
drawImage(QRectF(p.x(), p.y(), -1, -1), image, sr, flags);
}

inline void QPainter::drawImage(const QPoint &p, const QImage &image, const QRect &sr,
Qt::ImageConversionFlags flags)
{
drawImage(QRect(p.x(), p.y(), -1, -1), image, sr, flags);
}


inline void QPainter::drawImage(const QRectF &r, const QImage &image)
{
drawImage(r, image, QRect(0, 0, image.width(), image.height()));
}

inline void QPainter::drawImage(const QRect &r, const QImage &image)
{
drawImage(r, image, QRectF(0, 0, image.width(), image.height()));
}

inline void QPainter::drawImage(const QPoint &p, const QImage &image)
{
drawImage(QPointF(p), image);
}

inline void QPainter::drawImage(int x, int y, const QImage &image, int sx, int sy, int sw, int sh,
Qt::ImageConversionFlags flags)
{
if (sx == 0 && sy == 0 && sw == -1 && sh == -1 && flags == Qt::AutoColor)
drawImage(QPointF(x, y), image);
else
drawImage(QRectF(x, y, -1, -1), image, QRectF(sx, sy, sw, sh), flags);
}

inline void QPainter::drawStaticText(const QPoint &p, const QStaticText &staticText)
{
drawStaticText(QPointF(p), staticText);
}

inline void QPainter::drawStaticText(int x, int y, const QStaticText &staticText)
{
drawStaticText(QPointF(x, y), staticText);
}

inline void QPainter::drawTextItem(const QPoint &p, const QTextItem &ti)
{
drawTextItem(QPointF(p), ti);
}

inline void QPainter::drawText(const QPoint &p, const QString &s)
{
drawText(QPointF(p), s);
}

inline void QPainter::drawText(int x, int y, int w, int h, int flags, const QString &str, QRect *br)
{
drawText(QRect(x, y, w, h), flags, str, br);
}

inline void QPainter::drawText(int x, int y, const QString &s)
{
drawText(QPointF(x, y), s);
}

inline QRect QPainter::boundingRect(int x, int y, int w, int h, int flags, const QString &text)
{
return boundingRect(QRect(x, y, w, h), flags, text);
}

inline void QPainter::translate(qreal dx, qreal dy)
{
translate(QPointF(dx, dy));
}

inline void QPainter::translate(const QPoint &offset)
{
translate(offset.x(), offset.y());
}

inline void QPainter::setViewport(int x, int y, int w, int h)
{
setViewport(QRect(x, y, w, h));
}

inline void QPainter::setWindow(int x, int y, int w, int h)
{
setWindow(QRect(x, y, w, h));
}


# 920 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"
inline void QPainter::drawPicture(int x, int y, const QPicture &p)
{
drawPicture(QPoint(x, y), p);
}

inline void QPainter::drawPicture(const QPoint &pt, const QPicture &p)
{
drawPicture(QPointF(pt), p);
}


# 931 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"



# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"



class QFontEngine;
class QLineF;
class QPaintDevice;
class QPaintEnginePrivate;
class QPainterPath;
class QPointF;
class QPolygonF;
class QRectF;
struct QGlyphLayout;
class QTextItemInt;
class QPaintEngineState;

class  QTextItem {
public:
enum RenderFlag {
RightToLeft = 0x1,
Overline = 0x10,
Underline = 0x20,
StrikeOut = 0x40,

Dummy = 0xffffffff
};
typedef QFlags<RenderFlag> RenderFlags;
qreal descent() const;
qreal ascent() const;
qreal width() const;

RenderFlags renderFlags() const;
QString text() const;
QFont font() const;
};
template<> class QTypeInfo<QTextItem > { public: enum { isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextItem)>sizeof(void*)), isPointer = false, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextItem) }; static inline const char *name() { return "QTextItem"; } };


class  QPaintEngine
{
inline QPaintEnginePrivate* d_func() { return reinterpret_cast<QPaintEnginePrivate *>(qGetPtrHelper(d_ptr)); } inline const QPaintEnginePrivate* d_func() const { return reinterpret_cast<const QPaintEnginePrivate *>(qGetPtrHelper(d_ptr)); } friend class QPaintEnginePrivate;
public:
enum PaintEngineFeature {
PrimitiveTransform = 0x00000001, 
PatternTransform = 0x00000002, 
PixmapTransform = 0x00000004, 
PatternBrush = 0x00000008, 
LinearGradientFill = 0x00000010, 
RadialGradientFill = 0x00000020, 
ConicalGradientFill = 0x00000040, 
AlphaBlend = 0x00000080, 
PorterDuff = 0x00000100, 
PainterPaths = 0x00000200, 
Antialiasing = 0x00000400, 
BrushStroke = 0x00000800, 
ConstantOpacity = 0x00001000, 
MaskedBrush = 0x00002000, 
PerspectiveTransform = 0x00004000, 
BlendModes = 0x00008000, 
ObjectBoundingModeGradients = 0x00010000, 
RasterOpModes = 0x00020000, 
PaintOutsidePaintEvent = 0x20000000, 







AllFeatures = 0xffffffff 
};
typedef QFlags<PaintEngineFeature> PaintEngineFeatures;

enum DirtyFlag {
DirtyPen = 0x0001,
DirtyBrush = 0x0002,
DirtyBrushOrigin = 0x0004,
DirtyFont = 0x0008,
DirtyBackground = 0x0010,
DirtyBackgroundMode = 0x0020,
DirtyTransform = 0x0040,
DirtyClipRegion = 0x0080,
DirtyClipPath = 0x0100,
DirtyHints = 0x0200,
DirtyCompositionMode = 0x0400,
DirtyClipEnabled = 0x0800,
DirtyOpacity = 0x1000,

AllDirty = 0xffff
};
typedef QFlags<DirtyFlag> DirtyFlags;

enum PolygonDrawMode {
OddEvenMode,
WindingMode,
ConvexMode,
PolylineMode
};

explicit QPaintEngine(PaintEngineFeatures features=0);
virtual ~QPaintEngine();

bool isActive() const { return active; }
void setActive(bool newState) { active = newState; }

virtual bool begin(QPaintDevice *pdev) = 0;
virtual bool end() = 0;

virtual void updateState(const QPaintEngineState &state) = 0;

virtual void drawRects(const QRect *rects, int rectCount);
virtual void drawRects(const QRectF *rects, int rectCount);

virtual void drawLines(const QLine *lines, int lineCount);
virtual void drawLines(const QLineF *lines, int lineCount);

virtual void drawEllipse(const QRectF &r);
virtual void drawEllipse(const QRect &r);

virtual void drawPath(const QPainterPath &path);

virtual void drawPoints(const QPointF *points, int pointCount);
virtual void drawPoints(const QPoint *points, int pointCount);

virtual void drawPolygon(const QPointF *points, int pointCount, PolygonDrawMode mode);
virtual void drawPolygon(const QPoint *points, int pointCount, PolygonDrawMode mode);

virtual void drawPixmap(const QRectF &r, const QPixmap &pm, const QRectF &sr) = 0;
virtual void drawTextItem(const QPointF &p, const QTextItem &textItem);
virtual void drawTiledPixmap(const QRectF &r, const QPixmap &pixmap, const QPointF &s);
virtual void drawImage(const QRectF &r, const QImage &pm, const QRectF &sr,
Qt::ImageConversionFlags flags = Qt::AutoColor);

void setPaintDevice(QPaintDevice *device);
QPaintDevice *paintDevice() const;

void setSystemClip(const QRegion &baseClip);
QRegion systemClip() const;

void setSystemRect(const QRect &rect);
QRect systemRect() const;


virtual QPoint coordinateOffset() const;

enum Type {
X11,
Windows,
QuickDraw, CoreGraphics, MacPrinter,
QWindowSystem,
PostScript, 
OpenGL,
Picture,
SVG,
Raster,
Direct3D,
Pdf,
OpenVG,
OpenGL2,
PaintBuffer,
Blitter,

User = 50, 
MaxUser = 100 
};
virtual Type type() const = 0;

inline void fix_neg_rect(int *x, int *y, int *w, int *h);

inline bool testDirty(DirtyFlags df);
inline void setDirty(DirtyFlags df);
inline void clearDirty(DirtyFlags df);

bool hasFeature(PaintEngineFeatures feature) const { return (gccaps & feature) != 0; }

QPainter *painter() const;

void syncState();
inline bool isExtended() const { return extended; }

protected:
QPaintEngine(QPaintEnginePrivate &data, PaintEngineFeatures devcaps=0);

QPaintEngineState *state;
PaintEngineFeatures gccaps;

uint active : 1;
uint selfDestruct : 1;
uint extended : 1;

QScopedPointer<QPaintEnginePrivate> d_ptr;

private:
void setAutoDestruct(bool autoDestr) { selfDestruct = autoDestr; }
bool autoDestruct() const { return selfDestruct; }
QPaintEngine(const QPaintEngine &) ; QPaintEngine &operator=(const QPaintEngine &) ;

friend class QPainterReplayer;
friend class QFontEngineBox;
friend class QFontEngineMac;
friend class QFontEngineWin;

# 251 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"
friend class QFontEngineQPF1;


# 254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"
friend class QFontEngineQPF;

# 256 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"
friend class QMacPrintEngine;
friend class QMacPrintEnginePrivate;
friend class QFontEngineQPA;
friend class QPainter;
friend class QPainterPrivate;
friend class QWidget;
friend class QWidgetPrivate;
friend class QWin32PaintEngine;
friend class QWin32PaintEnginePrivate;
friend class QMacCGContext;
friend class QPreviewPaintEngine;
friend class QX11GLPlatformPixmap;
};


class  QPaintEngineState
{
public:
QPaintEngine::DirtyFlags state() const { return dirtyFlags; }

QPen pen() const;
QBrush brush() const;
QPointF brushOrigin() const;
QBrush backgroundBrush() const;
Qt::BGMode backgroundMode() const;
QFont font() const;
QMatrix matrix() const;
QTransform transform() const;

Qt::ClipOperation clipOperation() const;
QRegion clipRegion() const;
QPainterPath clipPath() const;
bool isClipEnabled() const;

QPainter::RenderHints renderHints() const;
QPainter::CompositionMode compositionMode() const;
qreal opacity() const;

QPainter *painter() const;

bool brushNeedsResolving() const;
bool penNeedsResolving() const;

protected:
friend class QPaintEngine;
friend class QRasterPaintEngine;
friend class QWidget;
friend class QPainter;
friend class QPainterPrivate;
friend class QMacPrintEnginePrivate;

QPaintEngine::DirtyFlags dirtyFlags;
};





inline void QPaintEngine::fix_neg_rect(int *x, int *y, int *w, int *h)
{
if (*w < 0) {
*w = -*w;
*x -= *w - 1;
}
if (*h < 0) {
*h = -*h;
*y -= *h - 1;
}
}

inline bool QPaintEngine::testDirty(DirtyFlags df) {
qt_noop();
return ((state->dirtyFlags & df) != 0);
}

inline void QPaintEngine::setDirty(DirtyFlags df) {
qt_noop();
state->dirtyFlags |= df;
}

inline void QPaintEngine::clearDirty(DirtyFlags df)
{
qt_noop();
state->dirtyFlags &= ~static_cast<uint>(df);
}

 inline QFlags<QTextItem::RenderFlags::enum_type> operator|(QTextItem::RenderFlags::enum_type f1, QTextItem::RenderFlags::enum_type f2) { return QFlags<QTextItem::RenderFlags::enum_type>(f1) | f2; }  inline QFlags<QTextItem::RenderFlags::enum_type> operator|(QTextItem::RenderFlags::enum_type f1, QFlags<QTextItem::RenderFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextItem::RenderFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QPaintEngine::PaintEngineFeatures::enum_type> operator|(QPaintEngine::PaintEngineFeatures::enum_type f1, QPaintEngine::PaintEngineFeatures::enum_type f2) { return QFlags<QPaintEngine::PaintEngineFeatures::enum_type>(f1) | f2; }  inline QFlags<QPaintEngine::PaintEngineFeatures::enum_type> operator|(QPaintEngine::PaintEngineFeatures::enum_type f1, QFlags<QPaintEngine::PaintEngineFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QPaintEngine::PaintEngineFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QPaintEngine::DirtyFlags::enum_type> operator|(QPaintEngine::DirtyFlags::enum_type f1, QPaintEngine::DirtyFlags::enum_type f2) { return QFlags<QPaintEngine::DirtyFlags::enum_type>(f1) | f2; }  inline QFlags<QPaintEngine::DirtyFlags::enum_type> operator|(QPaintEngine::DirtyFlags::enum_type f1, QFlags<QPaintEngine::DirtyFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QPaintEngine::DirtyFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
























































































































































































































































































































































































# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpdfwriter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpdfwriter.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpdfwriter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpagedpaintdevice.h"



























































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpdfwriter.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpdfwriter.h"


class QIODevice;
class QPdfWriterPrivate;

class  QPdfWriter : public QObject, public QPagedPaintDevice
{
Q_OBJECT
public:
explicit QPdfWriter(const QString &filename);
explicit QPdfWriter(QIODevice *device);
~QPdfWriter();

QString title() const;
void setTitle(const QString &title);

QString creator() const;
void setCreator(const QString &creator);

bool newPage();

void setPageSize(PageSize size);
void setPageSizeMM(const QSizeF &size);

void setMargins(const Margins &m);

protected:
QPaintEngine *paintEngine() const;
int metric(PaintDeviceMetric id) const;

private:
QPdfWriter(const QPdfWriter &) ; QPdfWriter &operator=(const QPdfWriter &) ;
inline QPdfWriterPrivate* d_func() { return reinterpret_cast<QPdfWriterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPdfWriterPrivate* d_func() const { return reinterpret_cast<const QPdfWriterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPdfWriterPrivate;
};






# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"












































































































































# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




















































































































































































# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"












































































































































































# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrgb.h"




















































































# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"












































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"






























































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"


# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"



class QString;
class QVariant;
class QFont;

class QTextFormatCollection;
class QTextFormatPrivate;
class QTextBlockFormat;
class QTextCharFormat;
class QTextListFormat;
class QTextTableFormat;
class QTextFrameFormat;
class QTextImageFormat;
class QTextTableCellFormat;
class QTextFormat;
class QTextObject;
class QTextCursor;
class QTextDocument;
class QTextLength;


# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"
 QDataStream &operator<<(QDataStream &, const QTextLength &);
 QDataStream &operator>>(QDataStream &, QTextLength &);



# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"
 QDebug operator<<(QDebug, const QTextLength &);


# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"
class  QTextLength
{
public:
enum Type { VariableLength = 0, FixedLength, PercentageLength };

inline QTextLength() : lengthType(VariableLength), fixedValueOrPercentage(0) {}

inline explicit QTextLength(Type type, qreal value);

inline Type type() const { return lengthType; }
inline qreal value(qreal maximumLength) const
{
switch (lengthType) {
case FixedLength: return fixedValueOrPercentage;
case VariableLength: return maximumLength;
case PercentageLength: return fixedValueOrPercentage * maximumLength / qreal(100);
}
return -1;
}

inline qreal rawValue() const { return fixedValueOrPercentage; }

inline bool operator==(const QTextLength &other) const
{ return lengthType == other.lengthType
&& qFuzzyCompare(fixedValueOrPercentage, other.fixedValueOrPercentage); }
inline bool operator!=(const QTextLength &other) const
{ return lengthType != other.lengthType
|| !qFuzzyCompare(fixedValueOrPercentage, other.fixedValueOrPercentage); }
operator QVariant() const;

private:
Type lengthType;
qreal fixedValueOrPercentage;
friend  QDataStream &operator<<(QDataStream &, const QTextLength &);
friend  QDataStream &operator>>(QDataStream &, QTextLength &);
};

inline QTextLength::QTextLength(Type atype, qreal avalue)
: lengthType(atype), fixedValueOrPercentage(avalue) {}


# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"
 QDataStream &operator<<(QDataStream &, const QTextFormat &);
 QDataStream &operator>>(QDataStream &, QTextFormat &);



# 131 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"
 QDebug operator<<(QDebug, const QTextFormat &);


# 134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"
class  QTextFormat
{

Q_ENUMS(FormatType Property ObjectTypes)
public:
enum FormatType {
InvalidFormat = -1,
BlockFormat = 1,
CharFormat = 2,
ListFormat = 3,
TableFormat = 4,
FrameFormat = 5,

UserFormat = 100
};

enum Property {
ObjectIndex = 0x0,


CssFloat = 0x0800,
LayoutDirection = 0x0801,

OutlinePen = 0x810,
BackgroundBrush = 0x820,
ForegroundBrush = 0x821,

BackgroundImageUrl = 0x823,


BlockAlignment = 0x1010,
BlockTopMargin = 0x1030,
BlockBottomMargin = 0x1031,
BlockLeftMargin = 0x1032,
BlockRightMargin = 0x1033,
TextIndent = 0x1034,
TabPositions = 0x1035,
BlockIndent = 0x1040,
LineHeight = 0x1048,
LineHeightType = 0x1049,
BlockNonBreakableLines = 0x1050,
BlockTrailingHorizontalRulerWidth = 0x1060,


FirstFontProperty = 0x1FE0,
FontCapitalization = FirstFontProperty,
FontLetterSpacingType = 0x2033,
FontLetterSpacing = 0x1FE1,
FontWordSpacing = 0x1FE2,
FontStretch = 0x2034,
FontStyleHint = 0x1FE3,
FontStyleStrategy = 0x1FE4,
FontKerning = 0x1FE5,
FontHintingPreference = 0x1FE6,
FontFamily = 0x2000,
FontPointSize = 0x2001,
FontSizeAdjustment = 0x2002,
FontSizeIncrement = FontSizeAdjustment, 
FontWeight = 0x2003,
FontItalic = 0x2004,
FontUnderline = 0x2005, 
FontOverline = 0x2006,
FontStrikeOut = 0x2007,
FontFixedPitch = 0x2008,
FontPixelSize = 0x2009,
LastFontProperty = FontPixelSize,

TextUnderlineColor = 0x2010,
TextVerticalAlignment = 0x2021,
TextOutline = 0x2022,
TextUnderlineStyle = 0x2023,
TextToolTip = 0x2024,

IsAnchor = 0x2030,
AnchorHref = 0x2031,
AnchorName = 0x2032,
ObjectType = 0x2f00,


ListStyle = 0x3000,
ListIndent = 0x3001,
ListNumberPrefix = 0x3002,
ListNumberSuffix = 0x3003,


FrameBorder = 0x4000,
FrameMargin = 0x4001,
FramePadding = 0x4002,
FrameWidth = 0x4003,
FrameHeight = 0x4004,
FrameTopMargin = 0x4005,
FrameBottomMargin = 0x4006,
FrameLeftMargin = 0x4007,
FrameRightMargin = 0x4008,
FrameBorderBrush = 0x4009,
FrameBorderStyle = 0x4010,

TableColumns = 0x4100,
TableColumnWidthConstraints = 0x4101,
TableCellSpacing = 0x4102,
TableCellPadding = 0x4103,
TableHeaderRowCount = 0x4104,


TableCellRowSpan = 0x4810,
TableCellColumnSpan = 0x4811,

TableCellTopPadding = 0x4812,
TableCellBottomPadding = 0x4813,
TableCellLeftPadding = 0x4814,
TableCellRightPadding = 0x4815,


ImageName = 0x5000,
ImageWidth = 0x5010,
ImageHeight = 0x5011,








FullWidthSelection = 0x06000,


PageBreakPolicy = 0x7000,


UserProperty = 0x100000
};

enum ObjectTypes {
NoObject,
ImageObject,
TableObject,
TableCellObject,

UserObject = 0x1000
};

enum PageBreakFlag {
PageBreak_Auto = 0,
PageBreak_AlwaysBefore = 0x001,
PageBreak_AlwaysAfter = 0x010

};
typedef QFlags<PageBreakFlag> PageBreakFlags;

QTextFormat();

explicit QTextFormat(int type);

QTextFormat(const QTextFormat &rhs);
QTextFormat &operator=(const QTextFormat &rhs);
~QTextFormat();

void swap(QTextFormat &other)
{ qSwap(d, other.d); qSwap(format_type, other.format_type); }

void merge(const QTextFormat &other);

inline bool isValid() const { return type() != InvalidFormat; }

int type() const;

int objectIndex() const;
void setObjectIndex(int object);

QVariant property(int propertyId) const;
void setProperty(int propertyId, const QVariant &value);
void clearProperty(int propertyId);
bool hasProperty(int propertyId) const;

bool boolProperty(int propertyId) const;
int intProperty(int propertyId) const;
qreal doubleProperty(int propertyId) const;
QString stringProperty(int propertyId) const;
QColor colorProperty(int propertyId) const;
QPen penProperty(int propertyId) const;
QBrush brushProperty(int propertyId) const;
QTextLength lengthProperty(int propertyId) const;
QVector<QTextLength> lengthVectorProperty(int propertyId) const;

void setProperty(int propertyId, const QVector<QTextLength> &lengths);

QMap<int, QVariant> properties() const;
int propertyCount() const;

inline void setObjectType(int type);
inline int objectType() const
{ return intProperty(ObjectType); }

inline bool isCharFormat() const { return type() == CharFormat; }
inline bool isBlockFormat() const { return type() == BlockFormat; }
inline bool isListFormat() const { return type() == ListFormat; }
inline bool isFrameFormat() const { return type() == FrameFormat; }
inline bool isImageFormat() const { return type() == CharFormat && objectType() == ImageObject; }
inline bool isTableFormat() const { return type() == FrameFormat && objectType() == TableObject; }
inline bool isTableCellFormat() const { return type() == CharFormat && objectType() == TableCellObject; }

QTextBlockFormat toBlockFormat() const;
QTextCharFormat toCharFormat() const;
QTextListFormat toListFormat() const;
QTextTableFormat toTableFormat() const;
QTextFrameFormat toFrameFormat() const;
QTextImageFormat toImageFormat() const;
QTextTableCellFormat toTableCellFormat() const;

bool operator==(const QTextFormat &rhs) const;
inline bool operator!=(const QTextFormat &rhs) const { return !operator==(rhs); }
operator QVariant() const;

inline void setLayoutDirection(Qt::LayoutDirection direction)
{ setProperty(QTextFormat::LayoutDirection, direction); }
inline Qt::LayoutDirection layoutDirection() const
{ return Qt::LayoutDirection(intProperty(QTextFormat::LayoutDirection)); }

inline void setBackground(const QBrush &brush)
{ setProperty(BackgroundBrush, brush); }
inline QBrush background() const
{ return brushProperty(BackgroundBrush); }
inline void clearBackground()
{ clearProperty(BackgroundBrush); }

inline void setForeground(const QBrush &brush)
{ setProperty(ForegroundBrush, brush); }
inline QBrush foreground() const
{ return brushProperty(ForegroundBrush); }
inline void clearForeground()
{ clearProperty(ForegroundBrush); }

private:
QSharedDataPointer<QTextFormatPrivate> d;
qint32 format_type;

friend class QTextFormatCollection;
friend class QTextCharFormat;
friend  QDataStream &operator<<(QDataStream &, const QTextFormat &);
friend  QDataStream &operator>>(QDataStream &, QTextFormat &);
};

template<> class QTypeInfo<QTextFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextFormat) }; static inline const char *name() { return "QTextFormat"; } }; template <> inline void qSwap<QTextFormat>(QTextFormat &value1, QTextFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextFormat>(::QTextFormat &value1, ::QTextFormat &value2) { value1.swap(value2); } } 

inline void QTextFormat::setObjectType(int atype)
{ setProperty(ObjectType, atype); }

 inline QFlags<QTextFormat::PageBreakFlags::enum_type> operator|(QTextFormat::PageBreakFlags::enum_type f1, QTextFormat::PageBreakFlags::enum_type f2) { return QFlags<QTextFormat::PageBreakFlags::enum_type>(f1) | f2; }  inline QFlags<QTextFormat::PageBreakFlags::enum_type> operator|(QTextFormat::PageBreakFlags::enum_type f1, QFlags<QTextFormat::PageBreakFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextFormat::PageBreakFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class  QTextCharFormat : public QTextFormat
{
public:
enum VerticalAlignment {
AlignNormal = 0,
AlignSuperScript,
AlignSubScript,
AlignMiddle,
AlignTop,
AlignBottom,
AlignBaseline
};
enum UnderlineStyle { 
NoUnderline,
SingleUnderline,
DashUnderline,
DotLine,
DashDotLine,
DashDotDotLine,
WaveUnderline,
SpellCheckUnderline
};

QTextCharFormat();

bool isValid() const { return isCharFormat(); }
void setFont(const QFont &font);
QFont font() const;

inline void setFontFamily(const QString &family)
{ setProperty(FontFamily, family); }
inline QString fontFamily() const
{ return stringProperty(FontFamily); }

inline void setFontPointSize(qreal size)
{ setProperty(FontPointSize, size); }
inline qreal fontPointSize() const
{ return doubleProperty(FontPointSize); }

inline void setFontWeight(int weight)
{ if (weight == QFont::Normal) weight = 0; setProperty(FontWeight, weight); }
inline int fontWeight() const
{ int weight = intProperty(FontWeight); if (weight == 0) weight = QFont::Normal; return weight; }
inline void setFontItalic(bool italic)
{ setProperty(FontItalic, italic); }
inline bool fontItalic() const
{ return boolProperty(FontItalic); }
inline void setFontCapitalization(QFont::Capitalization capitalization)
{ setProperty(FontCapitalization, capitalization); }
inline QFont::Capitalization fontCapitalization() const
{ return static_cast<QFont::Capitalization>(intProperty(FontCapitalization)); }
inline void setFontLetterSpacingType(QFont::SpacingType letterSpacingType)
{ setProperty(FontLetterSpacingType, letterSpacingType); }
inline QFont::SpacingType fontLetterSpacingType() const
{ return static_cast<QFont::SpacingType>(intProperty(FontLetterSpacingType)); }
inline void setFontLetterSpacing(qreal spacing)
{ setProperty(FontLetterSpacing, spacing); }
inline qreal fontLetterSpacing() const
{ return doubleProperty(FontLetterSpacing); }
inline void setFontWordSpacing(qreal spacing)
{ setProperty(FontWordSpacing, spacing); }
inline qreal fontWordSpacing() const
{ return doubleProperty(FontWordSpacing); }

inline void setFontUnderline(bool underline)
{ setProperty(TextUnderlineStyle, underline ? SingleUnderline : NoUnderline); }
bool fontUnderline() const;

inline void setFontOverline(bool overline)
{ setProperty(FontOverline, overline); }
inline bool fontOverline() const
{ return boolProperty(FontOverline); }

inline void setFontStrikeOut(bool strikeOut)
{ setProperty(FontStrikeOut, strikeOut); }
inline bool fontStrikeOut() const
{ return boolProperty(FontStrikeOut); }

inline void setUnderlineColor(const QColor &color)
{ setProperty(TextUnderlineColor, color); }
inline QColor underlineColor() const
{ return colorProperty(TextUnderlineColor); }

inline void setFontFixedPitch(bool fixedPitch)
{ setProperty(FontFixedPitch, fixedPitch); }
inline bool fontFixedPitch() const
{ return boolProperty(FontFixedPitch); }

inline void setFontStretch(int factor)
{ setProperty(FontStretch, factor); }
inline int fontStretch() const
{ return intProperty(FontStretch); }

inline void setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy = QFont::PreferDefault)
{ setProperty(FontStyleHint, hint); setProperty(FontStyleStrategy, strategy); }
inline void setFontStyleStrategy(QFont::StyleStrategy strategy)
{ setProperty(FontStyleStrategy, strategy); }
QFont::StyleHint fontStyleHint() const
{ return static_cast<QFont::StyleHint>(intProperty(FontStyleHint)); }
QFont::StyleStrategy fontStyleStrategy() const
{ return static_cast<QFont::StyleStrategy>(intProperty(FontStyleStrategy)); }

inline void setFontHintingPreference(QFont::HintingPreference hintingPreference)
{
setProperty(FontHintingPreference, hintingPreference);
}

inline QFont::HintingPreference fontHintingPreference() const
{
return static_cast<QFont::HintingPreference>(intProperty(FontHintingPreference));
}

inline void setFontKerning(bool enable)
{ setProperty(FontKerning, enable); }
inline bool fontKerning() const
{ return boolProperty(FontKerning); }

void setUnderlineStyle(UnderlineStyle style);
inline UnderlineStyle underlineStyle() const
{ return static_cast<UnderlineStyle>(intProperty(TextUnderlineStyle)); }

inline void setVerticalAlignment(VerticalAlignment alignment)
{ setProperty(TextVerticalAlignment, alignment); }
inline VerticalAlignment verticalAlignment() const
{ return static_cast<VerticalAlignment>(intProperty(TextVerticalAlignment)); }

inline void setTextOutline(const QPen &pen)
{ setProperty(TextOutline, pen); }
inline QPen textOutline() const
{ return penProperty(TextOutline); }

inline void setToolTip(const QString &tip)
{ setProperty(TextToolTip, tip); }
inline QString toolTip() const
{ return stringProperty(TextToolTip); }

inline void setAnchor(bool anchor)
{ setProperty(IsAnchor, anchor); }
inline bool isAnchor() const
{ return boolProperty(IsAnchor); }

inline void setAnchorHref(const QString &value)
{ setProperty(AnchorHref, value); }
inline QString anchorHref() const
{ return stringProperty(AnchorHref); }

inline void setAnchorName(const QString &name)
{ setAnchorNames(QStringList(name)); }
QString anchorName() const;

inline void setAnchorNames(const QStringList &names)
{ setProperty(AnchorName, names); }
QStringList anchorNames() const;

inline void setTableCellRowSpan(int tableCellRowSpan);
inline int tableCellRowSpan() const
{ int s = intProperty(TableCellRowSpan); if (s == 0) s = 1; return s; }
inline void setTableCellColumnSpan(int tableCellColumnSpan);
inline int tableCellColumnSpan() const
{ int s = intProperty(TableCellColumnSpan); if (s == 0) s = 1; return s; }

protected:
explicit QTextCharFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextCharFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextCharFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextCharFormat) }; static inline const char *name() { return "QTextCharFormat"; } }; template <> inline void qSwap<QTextCharFormat>(QTextCharFormat &value1, QTextCharFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextCharFormat>(::QTextCharFormat &value1, ::QTextCharFormat &value2) { value1.swap(value2); } } 

inline void QTextCharFormat::setTableCellRowSpan(int _tableCellRowSpan)
{
if (_tableCellRowSpan <= 1)
clearProperty(TableCellRowSpan); 
else
setProperty(TableCellRowSpan, _tableCellRowSpan);
}

inline void QTextCharFormat::setTableCellColumnSpan(int _tableCellColumnSpan)
{
if (_tableCellColumnSpan <= 1)
clearProperty(TableCellColumnSpan); 
else
setProperty(TableCellColumnSpan, _tableCellColumnSpan);
}

class  QTextBlockFormat : public QTextFormat
{
public:
enum LineHeightTypes {
SingleHeight = 0,
ProportionalHeight = 1,
FixedHeight = 2,
MinimumHeight = 3,
LineDistanceHeight = 4
};

QTextBlockFormat();

bool isValid() const { return isBlockFormat(); }

inline void setAlignment(Qt::Alignment alignment);
inline Qt::Alignment alignment() const
{ int a = intProperty(BlockAlignment); if (a == 0) a = Qt::AlignLeft; return QFlag(a); }

inline void setTopMargin(qreal margin)
{ setProperty(BlockTopMargin, margin); }
inline qreal topMargin() const
{ return doubleProperty(BlockTopMargin); }

inline void setBottomMargin(qreal margin)
{ setProperty(BlockBottomMargin, margin); }
inline qreal bottomMargin() const
{ return doubleProperty(BlockBottomMargin); }

inline void setLeftMargin(qreal margin)
{ setProperty(BlockLeftMargin, margin); }
inline qreal leftMargin() const
{ return doubleProperty(BlockLeftMargin); }

inline void setRightMargin(qreal margin)
{ setProperty(BlockRightMargin, margin); }
inline qreal rightMargin() const
{ return doubleProperty(BlockRightMargin); }

inline void setTextIndent(qreal aindent)
{ setProperty(TextIndent, aindent); }
inline qreal textIndent() const
{ return doubleProperty(TextIndent); }

inline void setIndent(int indent);
inline int indent() const
{ return intProperty(BlockIndent); }

inline void setLineHeight(qreal height, int heightType)
{ setProperty(LineHeight, height); setProperty(LineHeightType, heightType); }
inline qreal lineHeight(qreal scriptLineHeight, qreal scaling) const;
inline qreal lineHeight() const
{ return doubleProperty(LineHeight); }
inline int lineHeightType() const
{ return intProperty(LineHeightType); }

inline void setNonBreakableLines(bool b)
{ setProperty(BlockNonBreakableLines, b); }
inline bool nonBreakableLines() const
{ return boolProperty(BlockNonBreakableLines); }

inline void setPageBreakPolicy(PageBreakFlags flags)
{ setProperty(PageBreakPolicy, int(flags)); }
inline PageBreakFlags pageBreakPolicy() const
{ return PageBreakFlags(intProperty(PageBreakPolicy)); }

void setTabPositions(const QList<QTextOption::Tab> &tabs);
QList<QTextOption::Tab> tabPositions() const;

protected:
explicit QTextBlockFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextBlockFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextBlockFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextBlockFormat) }; static inline const char *name() { return "QTextBlockFormat"; } }; template <> inline void qSwap<QTextBlockFormat>(QTextBlockFormat &value1, QTextBlockFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextBlockFormat>(::QTextBlockFormat &value1, ::QTextBlockFormat &value2) { value1.swap(value2); } } 

inline void QTextBlockFormat::setAlignment(Qt::Alignment aalignment)
{ setProperty(BlockAlignment, int(aalignment)); }

inline void QTextBlockFormat::setIndent(int aindent)
{ setProperty(BlockIndent, aindent); }

inline qreal QTextBlockFormat::lineHeight(qreal scriptLineHeight, qreal scaling = 1.0) const
{
switch(intProperty(LineHeightType)) {
case SingleHeight:
return(scriptLineHeight);
case ProportionalHeight:
return(scriptLineHeight * doubleProperty(LineHeight) / 100.0);
case FixedHeight:
return(doubleProperty(LineHeight) * scaling);
case MinimumHeight:
return(qMax(scriptLineHeight, doubleProperty(LineHeight) * scaling));
case LineDistanceHeight:
return(scriptLineHeight + doubleProperty(LineHeight) * scaling);
}
return(0);
}

class  QTextListFormat : public QTextFormat
{
public:
QTextListFormat();

bool isValid() const { return isListFormat(); }

enum Style {
ListDisc = -1,
ListCircle = -2,
ListSquare = -3,
ListDecimal = -4,
ListLowerAlpha = -5,
ListUpperAlpha = -6,
ListLowerRoman = -7,
ListUpperRoman = -8,
ListStyleUndefined = 0
};

inline void setStyle(Style style);
inline Style style() const
{ return static_cast<Style>(intProperty(ListStyle)); }

inline void setIndent(int indent);
inline int indent() const
{ return intProperty(ListIndent); }

inline void setNumberPrefix(const QString &numberPrefix);
inline QString numberPrefix() const
{ return stringProperty(ListNumberPrefix); }

inline void setNumberSuffix(const QString &numberSuffix);
inline QString numberSuffix() const
{ return stringProperty(ListNumberSuffix); }

protected:
explicit QTextListFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextListFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextListFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextListFormat) }; static inline const char *name() { return "QTextListFormat"; } }; template <> inline void qSwap<QTextListFormat>(QTextListFormat &value1, QTextListFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextListFormat>(::QTextListFormat &value1, ::QTextListFormat &value2) { value1.swap(value2); } } 

inline void QTextListFormat::setStyle(Style astyle)
{ setProperty(ListStyle, astyle); }

inline void QTextListFormat::setIndent(int aindent)
{ setProperty(ListIndent, aindent); }

inline void QTextListFormat::setNumberPrefix(const QString &np)
{ setProperty(ListNumberPrefix, np); }

inline void QTextListFormat::setNumberSuffix(const QString &ns)
{ setProperty(ListNumberSuffix, ns); }

class  QTextImageFormat : public QTextCharFormat
{
public:
QTextImageFormat();

bool isValid() const { return isImageFormat(); }

inline void setName(const QString &name);
inline QString name() const
{ return stringProperty(ImageName); }

inline void setWidth(qreal width);
inline qreal width() const
{ return doubleProperty(ImageWidth); }

inline void setHeight(qreal height);
inline qreal height() const
{ return doubleProperty(ImageHeight); }

protected:
explicit QTextImageFormat(const QTextFormat &format);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextImageFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextImageFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextImageFormat) }; static inline const char *name() { return "QTextImageFormat"; } }; template <> inline void qSwap<QTextImageFormat>(QTextImageFormat &value1, QTextImageFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextImageFormat>(::QTextImageFormat &value1, ::QTextImageFormat &value2) { value1.swap(value2); } } 

inline void QTextImageFormat::setName(const QString &aname)
{ setProperty(ImageName, aname); }

inline void QTextImageFormat::setWidth(qreal awidth)
{ setProperty(ImageWidth, awidth); }

inline void QTextImageFormat::setHeight(qreal aheight)
{ setProperty(ImageHeight, aheight); }

class  QTextFrameFormat : public QTextFormat
{
public:
QTextFrameFormat();

bool isValid() const { return isFrameFormat(); }

enum Position {
InFlow,
FloatLeft,
FloatRight


};

enum BorderStyle {
BorderStyle_None,
BorderStyle_Dotted,
BorderStyle_Dashed,
BorderStyle_Solid,
BorderStyle_Double,
BorderStyle_DotDash,
BorderStyle_DotDotDash,
BorderStyle_Groove,
BorderStyle_Ridge,
BorderStyle_Inset,
BorderStyle_Outset
};

inline void setPosition(Position f)
{ setProperty(CssFloat, f); }
inline Position position() const
{ return static_cast<Position>(intProperty(CssFloat)); }

inline void setBorder(qreal border);
inline qreal border() const
{ return doubleProperty(FrameBorder); }

inline void setBorderBrush(const QBrush &brush)
{ setProperty(FrameBorderBrush, brush); }
inline QBrush borderBrush() const
{ return brushProperty(FrameBorderBrush); }

inline void setBorderStyle(BorderStyle style)
{ setProperty(FrameBorderStyle, style); }
inline BorderStyle borderStyle() const
{ return static_cast<BorderStyle>(intProperty(FrameBorderStyle)); }

void setMargin(qreal margin);
inline qreal margin() const
{ return doubleProperty(FrameMargin); }

inline void setTopMargin(qreal margin);
qreal topMargin() const;

inline void setBottomMargin(qreal margin);
qreal bottomMargin() const;

inline void setLeftMargin(qreal margin);
qreal leftMargin() const;

inline void setRightMargin(qreal margin);
qreal rightMargin() const;

inline void setPadding(qreal padding);
inline qreal padding() const
{ return doubleProperty(FramePadding); }

inline void setWidth(qreal width);
inline void setWidth(const QTextLength &length)
{ setProperty(FrameWidth, length); }
inline QTextLength width() const
{ return lengthProperty(FrameWidth); }

inline void setHeight(qreal height);
inline void setHeight(const QTextLength &height);
inline QTextLength height() const
{ return lengthProperty(FrameHeight); }

inline void setPageBreakPolicy(PageBreakFlags flags)
{ setProperty(PageBreakPolicy, int(flags)); }
inline PageBreakFlags pageBreakPolicy() const
{ return PageBreakFlags(intProperty(PageBreakPolicy)); }

protected:
explicit QTextFrameFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextFrameFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextFrameFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextFrameFormat) }; static inline const char *name() { return "QTextFrameFormat"; } }; template <> inline void qSwap<QTextFrameFormat>(QTextFrameFormat &value1, QTextFrameFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextFrameFormat>(::QTextFrameFormat &value1, ::QTextFrameFormat &value2) { value1.swap(value2); } } 

inline void QTextFrameFormat::setBorder(qreal aborder)
{ setProperty(FrameBorder, aborder); }

inline void QTextFrameFormat::setPadding(qreal apadding)
{ setProperty(FramePadding, apadding); }

inline void QTextFrameFormat::setWidth(qreal awidth)
{ setProperty(FrameWidth, QTextLength(QTextLength::FixedLength, awidth)); }

inline void QTextFrameFormat::setHeight(qreal aheight)
{ setProperty(FrameHeight, QTextLength(QTextLength::FixedLength, aheight)); }
inline void QTextFrameFormat::setHeight(const QTextLength &aheight)
{ setProperty(FrameHeight, aheight); }

inline void QTextFrameFormat::setTopMargin(qreal amargin)
{ setProperty(FrameTopMargin, amargin); }

inline void QTextFrameFormat::setBottomMargin(qreal amargin)
{ setProperty(FrameBottomMargin, amargin); }

inline void QTextFrameFormat::setLeftMargin(qreal amargin)
{ setProperty(FrameLeftMargin, amargin); }

inline void QTextFrameFormat::setRightMargin(qreal amargin)
{ setProperty(FrameRightMargin, amargin); }

class  QTextTableFormat : public QTextFrameFormat
{
public:
QTextTableFormat();

inline bool isValid() const { return isTableFormat(); }

inline int columns() const
{ int cols = intProperty(TableColumns); if (cols == 0) cols = 1; return cols; }
inline void setColumns(int columns);

inline void setColumnWidthConstraints(const QVector<QTextLength> &constraints)
{ setProperty(TableColumnWidthConstraints, constraints); }

inline QVector<QTextLength> columnWidthConstraints() const
{ return lengthVectorProperty(TableColumnWidthConstraints); }

inline void clearColumnWidthConstraints()
{ clearProperty(TableColumnWidthConstraints); }

inline qreal cellSpacing() const
{ return doubleProperty(TableCellSpacing); }
inline void setCellSpacing(qreal spacing)
{ setProperty(TableCellSpacing, spacing); }

inline qreal cellPadding() const
{ return doubleProperty(TableCellPadding); }
inline void setCellPadding(qreal padding);

inline void setAlignment(Qt::Alignment alignment);
inline Qt::Alignment alignment() const
{ return QFlag(intProperty(BlockAlignment)); }

inline void setHeaderRowCount(int count)
{ setProperty(TableHeaderRowCount, count); }
inline int headerRowCount() const
{ return intProperty(TableHeaderRowCount); }

protected:
explicit QTextTableFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextTableFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextTableFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextTableFormat) }; static inline const char *name() { return "QTextTableFormat"; } }; template <> inline void qSwap<QTextTableFormat>(QTextTableFormat &value1, QTextTableFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextTableFormat>(::QTextTableFormat &value1, ::QTextTableFormat &value2) { value1.swap(value2); } } 

inline void QTextTableFormat::setColumns(int acolumns)
{
if (acolumns == 1)
acolumns = 0;
setProperty(TableColumns, acolumns);
}

inline void QTextTableFormat::setCellPadding(qreal apadding)
{ setProperty(TableCellPadding, apadding); }

inline void QTextTableFormat::setAlignment(Qt::Alignment aalignment)
{ setProperty(BlockAlignment, int(aalignment)); }

class  QTextTableCellFormat : public QTextCharFormat
{
public:
QTextTableCellFormat();

inline bool isValid() const { return isTableCellFormat(); }

inline void setTopPadding(qreal padding);
inline qreal topPadding() const;

inline void setBottomPadding(qreal padding);
inline qreal bottomPadding() const;

inline void setLeftPadding(qreal padding);
inline qreal leftPadding() const;

inline void setRightPadding(qreal padding);
inline qreal rightPadding() const;

inline void setPadding(qreal padding);

protected:
explicit QTextTableCellFormat(const QTextFormat &fmt);
friend class QTextFormat;
};

template<> class QTypeInfo<QTextTableCellFormat > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextTableCellFormat)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextTableCellFormat) }; static inline const char *name() { return "QTextTableCellFormat"; } }; template <> inline void qSwap<QTextTableCellFormat>(QTextTableCellFormat &value1, QTextTableCellFormat &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextTableCellFormat>(::QTextTableCellFormat &value1, ::QTextTableCellFormat &value2) { value1.swap(value2); } } 

inline void QTextTableCellFormat::setTopPadding(qreal padding)
{
setProperty(TableCellTopPadding, padding);
}

inline qreal QTextTableCellFormat::topPadding() const
{
return doubleProperty(TableCellTopPadding);
}

inline void QTextTableCellFormat::setBottomPadding(qreal padding)
{
setProperty(TableCellBottomPadding, padding);
}

inline qreal QTextTableCellFormat::bottomPadding() const
{
return doubleProperty(TableCellBottomPadding);
}

inline void QTextTableCellFormat::setLeftPadding(qreal padding)
{
setProperty(TableCellLeftPadding, padding);
}

inline qreal QTextTableCellFormat::leftPadding() const
{
return doubleProperty(TableCellLeftPadding);
}

inline void QTextTableCellFormat::setRightPadding(qreal padding)
{
setProperty(TableCellRightPadding, padding);
}

inline qreal QTextTableCellFormat::rightPadding() const
{
return doubleProperty(TableCellRightPadding);
}

inline void QTextTableCellFormat::setPadding(qreal padding)
{
setTopPadding(padding);
setBottomPadding(padding);
setLeftPadding(padding);
setRightPadding(padding);
}





# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"



class QStringList;
template <class T> class QList;
struct QFontDef;
class QFontEngine;

class QFontDatabasePrivate;

class  QFontDatabase
{

Q_ENUMS(WritingSystem)
public:


enum WritingSystem {
Any,

Latin,
Greek,
Cyrillic,
Armenian,
Hebrew,
Arabic,
Syriac,
Thaana,
Devanagari,
Bengali,
Gurmukhi,
Gujarati,
Oriya,
Tamil,
Telugu,
Kannada,
Malayalam,
Sinhala,
Thai,
Lao,
Tibetan,
Myanmar,
Georgian,
Khmer,
SimplifiedChinese,
TraditionalChinese,
Japanese,
Korean,
Vietnamese,

Symbol,
Other = Symbol,

Ogham,
Runic,
Nko,

WritingSystemsCount
};

static QList<int> standardSizes();

QFontDatabase();

QList<WritingSystem> writingSystems() const;
QList<WritingSystem> writingSystems(const QString &family) const;

QStringList families(WritingSystem writingSystem = Any) const;
QStringList styles(const QString &family) const;
QList<int> pointSizes(const QString &family, const QString &style = QString());
QList<int> smoothSizes(const QString &family, const QString &style);
QString styleString(const QFont &font);
QString styleString(const QFontInfo &fontInfo);

QFont font(const QString &family, const QString &style, int pointSize) const;

bool isBitmapScalable(const QString &family, const QString &style = QString()) const;
bool isSmoothlyScalable(const QString &family, const QString &style = QString()) const;
bool isScalable(const QString &family, const QString &style = QString()) const;
bool isFixedPitch(const QString &family, const QString &style = QString()) const;

bool italic(const QString &family, const QString &style) const;
bool bold(const QString &family, const QString &style) const;
int weight(const QString &family, const QString &style) const;

bool hasFamily(const QString &family) const;

static QString writingSystemName(WritingSystem writingSystem);
static QString writingSystemSample(WritingSystem writingSystem);

static int addApplicationFont(const QString &fileName);
static int addApplicationFontFromData(const QByteArray &fontData);
static QStringList applicationFontFamilies(int id);
static bool removeApplicationFont(int id);
static bool removeAllApplicationFonts();

static bool supportsThreadedFontRendering();

private:
static void createDatabase();
static void parseFontName(const QString &name, QString &foundry, QString &family);
static QString resolveFontFamilyAlias(const QString &family);
static QFontEngine *findFont(int script, const QFontPrivate *fp, const QFontDef &request, bool multi = false);
static void load(const QFontPrivate *d, int script);

friend struct QFontDef;
friend class QFontPrivate;
friend class QFontDialog;
friend class QFontDialogPrivate;
friend class QFontEngineMultiXLFD;
friend class QFontEngineMultiQWS;
friend class QFontEngineMultiQPA;

QFontDatabasePrivate *d;
};




# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"




# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"



class QRawFontPrivate;
class  QRawFont
{
public:
enum AntialiasingType {
PixelAntialiasing,
SubPixelAntialiasing
};

enum LayoutFlag {
SeparateAdvances = 0,
KernedAdvances = 1,
UseDesignMetrics = 2
};
typedef QFlags<LayoutFlag> LayoutFlags;

QRawFont();
QRawFont(const QString &fileName,
qreal pixelSize,
QFont::HintingPreference hintingPreference = QFont::PreferDefaultHinting);
QRawFont(const QByteArray &fontData,
qreal pixelSize,
QFont::HintingPreference hintingPreference = QFont::PreferDefaultHinting);
QRawFont(const QRawFont &other);
~QRawFont();

bool isValid() const;

QRawFont &operator=(const QRawFont &other);

void swap(QRawFont &other) { qSwap(d, other.d); }

bool operator==(const QRawFont &other) const;
inline bool operator!=(const QRawFont &other) const
{ return !operator==(other); }

QString familyName() const;
QString styleName() const;

QFont::Style style() const;
int weight() const;

QVector<quint32> glyphIndexesForString(const QString &text) const;
inline QVector<QPointF> advancesForGlyphIndexes(const QVector<quint32> &glyphIndexes) const;
inline QVector<QPointF> advancesForGlyphIndexes(const QVector<quint32> &glyphIndexes, LayoutFlags layoutFlags) const;
bool glyphIndexesForChars(const QChar *chars, int numChars, quint32 *glyphIndexes, int *numGlyphs) const;
bool advancesForGlyphIndexes(const quint32 *glyphIndexes, QPointF *advances, int numGlyphs) const;
bool advancesForGlyphIndexes(const quint32 *glyphIndexes, QPointF *advances, int numGlyphs, LayoutFlags layoutFlags) const;

QImage alphaMapForGlyph(quint32 glyphIndex,
AntialiasingType antialiasingType = SubPixelAntialiasing,
const QTransform &transform = QTransform()) const;
QPainterPath pathForGlyph(quint32 glyphIndex) const;
QRectF boundingRect(quint32 glyphIndex) const;

void setPixelSize(qreal pixelSize);
qreal pixelSize() const;

QFont::HintingPreference hintingPreference() const;

qreal ascent() const;
qreal descent() const;
qreal leading() const;
qreal xHeight() const;
qreal averageCharWidth() const;
qreal maxCharWidth() const;
qreal lineThickness() const;
qreal underlinePosition() const;

qreal unitsPerEm() const;

void loadFromFile(const QString &fileName,
qreal pixelSize,
QFont::HintingPreference hintingPreference);

void loadFromData(const QByteArray &fontData,
qreal pixelSize,
QFont::HintingPreference hintingPreference);

bool supportsCharacter(uint ucs4) const;
bool supportsCharacter(QChar character) const;
QList<QFontDatabase::WritingSystem> supportedWritingSystems() const;

QByteArray fontTable(const char *tagName) const;

static QRawFont fromFont(const QFont &font,
QFontDatabase::WritingSystem writingSystem = QFontDatabase::Any);

private:
friend class QRawFontPrivate;
friend class QTextLayout;
friend class QTextEngine;

QExplicitlySharedDataPointer<QRawFontPrivate> d;
};

template<> class QTypeInfo<QRawFont > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QRawFont)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRawFont) }; static inline const char *name() { return "QRawFont"; } }; template <> inline void qSwap<QRawFont>(QRawFont &value1, QRawFont &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QRawFont>(::QRawFont &value1, ::QRawFont &value2) { value1.swap(value2); } } 

 inline QFlags<QRawFont::LayoutFlags::enum_type> operator|(QRawFont::LayoutFlags::enum_type f1, QRawFont::LayoutFlags::enum_type f2) { return QFlags<QRawFont::LayoutFlags::enum_type>(f1) | f2; }  inline QFlags<QRawFont::LayoutFlags::enum_type> operator|(QRawFont::LayoutFlags::enum_type f1, QFlags<QRawFont::LayoutFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QRawFont::LayoutFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

inline QVector<QPointF> QRawFont::advancesForGlyphIndexes(const QVector<quint32> &glyphIndexes, QRawFont::LayoutFlags layoutFlags) const
{
QVector<QPointF> advances(glyphIndexes.size());
if (advancesForGlyphIndexes(glyphIndexes.constData(), advances.data(), glyphIndexes.size(), layoutFlags))
return advances;
return QVector<QPointF>();
}

inline QVector<QPointF> QRawFont::advancesForGlyphIndexes(const QVector<quint32> &glyphIndexes) const
{
return advancesForGlyphIndexes(glyphIndexes, QRawFont::SeparateAdvances);
}






# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"




# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"



class QGlyphRunPrivate;
class  QGlyphRun
{
public:
enum GlyphRunFlag {
Overline = 0x01,
Underline = 0x02,
StrikeOut = 0x04,
RightToLeft = 0x08,
SplitLigature = 0x10
};
typedef QFlags<GlyphRunFlag> GlyphRunFlags;

QGlyphRun();
QGlyphRun(const QGlyphRun &other);
~QGlyphRun();

void swap(QGlyphRun &other) { qSwap(d, other.d); }

QRawFont rawFont() const;
void setRawFont(const QRawFont &rawFont);

void setRawData(const quint32 *glyphIndexArray,
const QPointF *glyphPositionArray,
int size);

QVector<quint32> glyphIndexes() const;
void setGlyphIndexes(const QVector<quint32> &glyphIndexes);

QVector<QPointF> positions() const;
void setPositions(const QVector<QPointF> &positions);

void clear();

QGlyphRun &operator=(const QGlyphRun &other);

bool operator==(const QGlyphRun &other) const;
inline bool operator!=(const QGlyphRun &other) const
{ return !operator==(other); }

void setOverline(bool overline);
bool overline() const;

void setUnderline(bool underline);
bool underline() const;

void setStrikeOut(bool strikeOut);
bool strikeOut() const;

void setRightToLeft(bool on);
bool isRightToLeft() const;

void setFlag(GlyphRunFlag flag, bool enabled = true);
void setFlags(GlyphRunFlags flags);
GlyphRunFlags flags() const;

void setBoundingRect(const QRectF &boundingRect);
QRectF boundingRect() const;

bool isEmpty() const;

private:
friend class QGlyphRunPrivate;
friend class QTextLine;

QGlyphRun operator+(const QGlyphRun &other) const;
QGlyphRun &operator+=(const QGlyphRun &other);

void detach();
QExplicitlySharedDataPointer<QGlyphRunPrivate> d;
};

template<> class QTypeInfo<QGlyphRun > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QGlyphRun)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QGlyphRun) }; static inline const char *name() { return "QGlyphRun"; } }; template <> inline void qSwap<QGlyphRun>(QGlyphRun &value1, QGlyphRun &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QGlyphRun>(::QGlyphRun &value1, ::QGlyphRun &value2) { value1.swap(value2); } } 






# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"



class QTextDocument;
class QTextCursorPrivate;
class QTextDocumentFragment;
class QTextCharFormat;
class QTextBlockFormat;
class QTextListFormat;
class QTextTableFormat;
class QTextFrameFormat;
class QTextImageFormat;
class QTextDocumentPrivate;
class QTextList;
class QTextTable;
class QTextFrame;
class QTextBlock;

class  QTextCursor
{
public:
QTextCursor();
explicit QTextCursor(QTextDocument *document);
QTextCursor(QTextDocumentPrivate *p, int pos);
explicit QTextCursor(QTextFrame *frame);
explicit QTextCursor(const QTextBlock &block);
explicit QTextCursor(QTextCursorPrivate *d);
QTextCursor(const QTextCursor &cursor);
QTextCursor &operator=(const QTextCursor &other);
~QTextCursor();

void swap(QTextCursor &other) { qSwap(d, other.d); }

bool isNull() const;

enum MoveMode {
MoveAnchor,
KeepAnchor
};

void setPosition(int pos, MoveMode mode = MoveAnchor);
int position() const;
int positionInBlock() const;

int anchor() const;

void insertText(const QString &text);
void insertText(const QString &text, const QTextCharFormat &format);

enum MoveOperation {
NoMove,

Start,
Up,
StartOfLine,
StartOfBlock,
StartOfWord,
PreviousBlock,
PreviousCharacter,
PreviousWord,
Left,
WordLeft,

End,
Down,
EndOfLine,
EndOfWord,
EndOfBlock,
NextBlock,
NextCharacter,
NextWord,
Right,
WordRight,

NextCell,
PreviousCell,
NextRow,
PreviousRow
};

bool movePosition(MoveOperation op, MoveMode = MoveAnchor, int n = 1);

bool visualNavigation() const;
void setVisualNavigation(bool b);

void setVerticalMovementX(int x);
int verticalMovementX() const;

void setKeepPositionOnInsert(bool b);
bool keepPositionOnInsert() const;

void deleteChar();
void deletePreviousChar();

enum SelectionType {
WordUnderCursor,
LineUnderCursor,
BlockUnderCursor,
Document
};
void select(SelectionType selection);

bool hasSelection() const;
bool hasComplexSelection() const;
void removeSelectedText();
void clearSelection();
int selectionStart() const;
int selectionEnd() const;

QString selectedText() const;
QTextDocumentFragment selection() const;
void selectedTableCells(int *firstRow, int *numRows, int *firstColumn, int *numColumns) const;

QTextBlock block() const;

QTextCharFormat charFormat() const;
void setCharFormat(const QTextCharFormat &format);
void mergeCharFormat(const QTextCharFormat &modifier);

QTextBlockFormat blockFormat() const;
void setBlockFormat(const QTextBlockFormat &format);
void mergeBlockFormat(const QTextBlockFormat &modifier);

QTextCharFormat blockCharFormat() const;
void setBlockCharFormat(const QTextCharFormat &format);
void mergeBlockCharFormat(const QTextCharFormat &modifier);

bool atBlockStart() const;
bool atBlockEnd() const;
bool atStart() const;
bool atEnd() const;

void insertBlock();
void insertBlock(const QTextBlockFormat &format);
void insertBlock(const QTextBlockFormat &format, const QTextCharFormat &charFormat);

QTextList *insertList(const QTextListFormat &format);
QTextList *insertList(QTextListFormat::Style style);

QTextList *createList(const QTextListFormat &format);
QTextList *createList(QTextListFormat::Style style);
QTextList *currentList() const;

QTextTable *insertTable(int rows, int cols, const QTextTableFormat &format);
QTextTable *insertTable(int rows, int cols);
QTextTable *currentTable() const;

QTextFrame *insertFrame(const QTextFrameFormat &format);
QTextFrame *currentFrame() const;

void insertFragment(const QTextDocumentFragment &fragment);


# 202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
void insertHtml(const QString &html);


# 205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
void insertImage(const QTextImageFormat &format, QTextFrameFormat::Position alignment);
void insertImage(const QTextImageFormat &format);
void insertImage(const QString &name);
void insertImage(const QImage &image, const QString &name = QString());

void beginEditBlock();
void joinPreviousEditBlock();
void endEditBlock();

bool operator!=(const QTextCursor &rhs) const;
bool operator<(const QTextCursor &rhs) const;
bool operator<=(const QTextCursor &rhs) const;
bool operator==(const QTextCursor &rhs) const;
bool operator>=(const QTextCursor &rhs) const;
bool operator>(const QTextCursor &rhs) const;

bool isCopyOf(const QTextCursor &other) const;

int blockNumber() const;
int columnNumber() const;

QTextDocument *document() const;

private:
QSharedDataPointer<QTextCursorPrivate> d;
friend class QTextCursorPrivate;
friend class QTextDocumentFragmentPrivate;
friend class QTextCopyHelper;
friend class QWidgetTextControlPrivate;
};

template<> class QTypeInfo<QTextCursor > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextCursor)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextCursor) }; static inline const char *name() { return "QTextCursor"; } }; template <> inline void qSwap<QTextCursor>(QTextCursor &value1, QTextCursor &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QTextCursor>(::QTextCursor &value1, ::QTextCursor &value2) { value1.swap(value2); } } 




# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"



class QTextEngine;
class QFont;

# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
class QRawFont;

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
class QRect;
class QRegion;
class QTextFormat;
class QPalette;
class QPainter;

class  QTextInlineObject
{
public:
QTextInlineObject(int i, QTextEngine *e) : itm(i), eng(e) {}
inline QTextInlineObject() : itm(0), eng(0) {}
inline bool isValid() const { return eng; }

QRectF rect() const;
qreal width() const;
qreal ascent() const;
qreal descent() const;
qreal height() const;

Qt::LayoutDirection textDirection() const;

void setWidth(qreal w);
void setAscent(qreal a);
void setDescent(qreal d);

int textPosition() const;

int formatIndex() const;
QTextFormat format() const;

private:
friend class QTextLayout;
int itm;
QTextEngine *eng;
};

class QPaintDevice;
class QTextFormat;
class QTextLine;
class QTextBlock;
class QTextOption;

class  QTextLayout
{
public:

QTextLayout();
QTextLayout(const QString& text);
QTextLayout(const QString& text, const QFont &font, QPaintDevice *paintdevice = 0);
QTextLayout(const QTextBlock &b);
~QTextLayout();

void setFont(const QFont &f);
QFont font() const;


# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
void setRawFont(const QRawFont &rawFont);


# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
void setText(const QString& string);
QString text() const;

void setTextOption(const QTextOption &option);
const QTextOption &textOption() const;

void setPreeditArea(int position, const QString &text);
int preeditAreaPosition() const;
QString preeditAreaText() const;

struct FormatRange {
int start;
int length;
QTextCharFormat format;
};
void setAdditionalFormats(const QList<FormatRange> &overrides);
QList<FormatRange> additionalFormats() const;
void clearAdditionalFormats();

void setCacheEnabled(bool enable);
bool cacheEnabled() const;

void setCursorMoveStyle(Qt::CursorMoveStyle style);
Qt::CursorMoveStyle cursorMoveStyle() const;

void beginLayout();
void endLayout();
void clearLayout();

QTextLine createLine();

int lineCount() const;
QTextLine lineAt(int i) const;
QTextLine lineForTextPosition(int pos) const;

enum CursorMode {
SkipCharacters,
SkipWords
};
bool isValidCursorPosition(int pos) const;
int nextCursorPosition(int oldPos, CursorMode mode = SkipCharacters) const;
int previousCursorPosition(int oldPos, CursorMode mode = SkipCharacters) const;
int leftCursorPosition(int oldPos) const;
int rightCursorPosition(int oldPos) const;

void draw(QPainter *p, const QPointF &pos, const QVector<FormatRange> &selections = QVector<FormatRange>(),
const QRectF &clip = QRectF()) const;
void drawCursor(QPainter *p, const QPointF &pos, int cursorPosition) const;
void drawCursor(QPainter *p, const QPointF &pos, int cursorPosition, int width) const;

QPointF position() const;
void setPosition(const QPointF &p);

QRectF boundingRect() const;

qreal minimumWidth() const;
qreal maximumWidth() const;


# 181 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
QList<QGlyphRun> glyphRuns(int from = -1, int length = -1) const;


# 184 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
QTextEngine *engine() const { return d; }
void setFlags(int flags);
private:
QTextLayout(QTextEngine *e) : d(e) {}
QTextLayout(const QTextLayout &) ; QTextLayout &operator=(const QTextLayout &) ;

friend class QPainter;
friend class QGraphicsSimpleTextItemPrivate;
friend class QGraphicsSimpleTextItem;
friend void qt_format_text(const QFont &font, const QRectF &_r, int tf, const QTextOption *, const QString& str,
QRectF *brect, int tabstops, int* tabarray, int tabarraylen,
QPainter *painter);
QTextEngine *d;
};


class  QTextLine
{
public:
inline QTextLine() : index(0), eng(0) {}
inline bool isValid() const { return eng; }

QRectF rect() const;
qreal x() const;
qreal y() const;
qreal width() const;
qreal ascent() const;
qreal descent() const;
qreal height() const;
qreal leading() const;

void setLeadingIncluded(bool included);
bool leadingIncluded() const;

qreal naturalTextWidth() const;
qreal horizontalAdvance() const;
QRectF naturalTextRect() const;

enum Edge {
Leading,
Trailing
};
enum CursorPosition {
CursorBetweenCharacters,
CursorOnCharacter
};


qreal cursorToX(int *cursorPos, Edge edge = Leading) const;
inline qreal cursorToX(int cursorPos, Edge edge = Leading) const { return cursorToX(&cursorPos, edge); }
int xToCursor(qreal x, CursorPosition = CursorBetweenCharacters) const;

void setLineWidth(qreal width);
void setNumColumns(int columns);
void setNumColumns(int columns, qreal alignmentWidth);

void setPosition(const QPointF &pos);
QPointF position() const;

int textStart() const;
int textLength() const;

int lineNumber() const { return index; }

void draw(QPainter *p, const QPointF &point, const QTextLayout::FormatRange *selection = 0) const;


# 251 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
QList<QGlyphRun> glyphRuns(int from = -1, int length = -1) const;


# 254 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"
private:
QTextLine(int line, QTextEngine *e) : index(line), eng(e) {}
void layout_helper(int numGlyphs);

friend class QTextLayout;
friend class QTextFragment;
int index;
QTextEngine *eng;
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"



class QTextFormatCollection;
class QTextListFormat;
class QRect;
class QPainter;
class QPagedPaintDevice;
class QAbstractTextDocumentLayout;
class QPoint;
class QTextObject;
class QTextFormat;
class QTextFrame;
class QTextBlock;
class QTextCodec;
class QUrl;
class QVariant;
class QRectF;
class QTextOption;
class QTextCursor;

template<typename T> class QVector;

namespace Qt
{
 bool mightBeRichText(const QString&);
 QString convertFromPlainText(const QString &plain, WhiteSpaceMode mode = WhiteSpacePre);


# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
 QTextCodec *codecForHtml(const QByteArray &ba);

# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
}

class  QAbstractUndoItem
{
public:
virtual ~QAbstractUndoItem() = 0;
virtual void undo() = 0;
virtual void redo() = 0;
};

inline QAbstractUndoItem::~QAbstractUndoItem()
{
}

class QTextDocumentPrivate;

class  QTextDocument : public QObject
{
Q_OBJECT

Q_PROPERTY(bool undoRedoEnabled READ isUndoRedoEnabled WRITE setUndoRedoEnabled)
Q_PROPERTY(bool modified READ isModified WRITE setModified DESIGNABLE false)
Q_PROPERTY(QSizeF pageSize READ pageSize WRITE setPageSize)
Q_PROPERTY(QFont defaultFont READ defaultFont WRITE setDefaultFont)
Q_PROPERTY(bool useDesignMetrics READ useDesignMetrics WRITE setUseDesignMetrics)
Q_PROPERTY(QSizeF size READ size)
Q_PROPERTY(qreal textWidth READ textWidth WRITE setTextWidth)
Q_PROPERTY(int blockCount READ blockCount)
Q_PROPERTY(qreal indentWidth READ indentWidth WRITE setIndentWidth)

# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
Q_PROPERTY(QString defaultStyleSheet READ defaultStyleSheet WRITE setDefaultStyleSheet)

# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
Q_PROPERTY(int maximumBlockCount READ maximumBlockCount WRITE setMaximumBlockCount)
Q_PROPERTY(qreal documentMargin READ documentMargin WRITE setDocumentMargin)


public:
explicit QTextDocument(QObject *parent = 0);
explicit QTextDocument(const QString &text, QObject *parent = 0);
~QTextDocument();

QTextDocument *clone(QObject *parent = 0) const;

bool isEmpty() const;
virtual void clear();

void setUndoRedoEnabled(bool enable);
bool isUndoRedoEnabled() const;

bool isUndoAvailable() const;
bool isRedoAvailable() const;

int availableUndoSteps() const;
int availableRedoSteps() const;

int revision() const;

void setDocumentLayout(QAbstractTextDocumentLayout *layout);
QAbstractTextDocumentLayout *documentLayout() const;

enum MetaInformation {
DocumentTitle,
DocumentUrl
};
void setMetaInformation(MetaInformation info, const QString &);
QString metaInformation(MetaInformation info) const;


# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
QString toHtml(const QByteArray &encoding = QByteArray()) const;
void setHtml(const QString &html);


# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
QString toPlainText() const;
void setPlainText(const QString &text);

QChar characterAt(int pos) const;

enum FindFlag
{
FindBackward = 0x00001,
FindCaseSensitively = 0x00002,
FindWholeWords = 0x00004
};
typedef QFlags<FindFlag> FindFlags;

QTextCursor find(const QString &subString, int from = 0, FindFlags options = 0) const;
QTextCursor find(const QString &subString, const QTextCursor &from, FindFlags options = 0) const;

QTextCursor find(const QRegExp &expr, int from = 0, FindFlags options = 0) const;
QTextCursor find(const QRegExp &expr, const QTextCursor &from, FindFlags options = 0) const;

QTextFrame *frameAt(int pos) const;
QTextFrame *rootFrame() const;

QTextObject *object(int objectIndex) const;
QTextObject *objectForFormat(const QTextFormat &) const;

QTextBlock findBlock(int pos) const;
QTextBlock findBlockByNumber(int blockNumber) const;
QTextBlock findBlockByLineNumber(int blockNumber) const;
QTextBlock begin() const;
QTextBlock end() const;

QTextBlock firstBlock() const;
QTextBlock lastBlock() const;

void setPageSize(const QSizeF &size);
QSizeF pageSize() const;

void setDefaultFont(const QFont &font);
QFont defaultFont() const;

int pageCount() const;

bool isModified() const;

void print(QPagedPaintDevice *printer) const;

enum ResourceType {
HtmlResource = 1,
ImageResource = 2,
StyleSheetResource = 3,

UserResource = 100
};

QVariant resource(int type, const QUrl &name) const;
void addResource(int type, const QUrl &name, const QVariant &resource);

QVector<QTextFormat> allFormats() const;

void markContentsDirty(int from, int length);

void setUseDesignMetrics(bool b);
bool useDesignMetrics() const;

void drawContents(QPainter *painter, const QRectF &rect = QRectF());

void setTextWidth(qreal width);
qreal textWidth() const;

qreal idealWidth() const;

qreal indentWidth() const;
void setIndentWidth(qreal width);

qreal documentMargin() const;
void setDocumentMargin(qreal margin);

void adjustSize();
QSizeF size() const;

int blockCount() const;
int lineCount() const;
int characterCount() const;


# 239 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
void setDefaultStyleSheet(const QString &sheet);
QString defaultStyleSheet() const;


# 243 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"
void undo(QTextCursor *cursor);
void redo(QTextCursor *cursor);

enum Stacks {
UndoStack = 0x01,
RedoStack = 0x02,
UndoAndRedoStacks = UndoStack | RedoStack
};
void clearUndoRedoStacks(Stacks historyToClear = UndoAndRedoStacks);

int maximumBlockCount() const;
void setMaximumBlockCount(int maximum);

QTextOption defaultTextOption() const;
void setDefaultTextOption(const QTextOption &option);

Qt::CursorMoveStyle defaultCursorMoveStyle() const;
void setDefaultCursorMoveStyle(Qt::CursorMoveStyle style);

signals:
void contentsChange(int from, int charsRemoves, int charsAdded);
void contentsChanged();
void undoAvailable(bool);
void redoAvailable(bool);
void undoCommandAdded();
void modificationChanged(bool m);
void cursorPositionChanged(const QTextCursor &cursor);
void blockCountChanged(int newBlockCount);

void documentLayoutChanged();

public slots:
void undo();
void redo();
void appendUndoItem(QAbstractUndoItem *);
void setModified(bool m = true);

protected:
virtual QTextObject *createObject(const QTextFormat &f);
Q_INVOKABLE virtual QVariant loadResource(int type, const QUrl &name);

QTextDocument(QTextDocumentPrivate &dd, QObject *parent);
public:
QTextDocumentPrivate *docHandle() const;
private:
QTextDocument(const QTextDocument &) ; QTextDocument &operator=(const QTextDocument &) ;
inline QTextDocumentPrivate* d_func() { return reinterpret_cast<QTextDocumentPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextDocumentPrivate* d_func() const { return reinterpret_cast<const QTextDocumentPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextDocumentPrivate;
friend class QTextObjectPrivate;
};

 inline QFlags<QTextDocument::FindFlags::enum_type> operator|(QTextDocument::FindFlags::enum_type f1, QTextDocument::FindFlags::enum_type f2) { return QFlags<QTextDocument::FindFlags::enum_type>(f1) | f2; }  inline QFlags<QTextDocument::FindFlags::enum_type> operator|(QTextDocument::FindFlags::enum_type f1, QFlags<QTextDocument::FindFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextDocument::FindFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

















































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"



class QAbstractTextDocumentLayoutPrivate;
class QTextBlock;
class QTextObjectInterface;
class QTextFrame;

class  QAbstractTextDocumentLayout : public QObject
{
Q_OBJECT
inline QAbstractTextDocumentLayoutPrivate* d_func() { return reinterpret_cast<QAbstractTextDocumentLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractTextDocumentLayoutPrivate* d_func() const { return reinterpret_cast<const QAbstractTextDocumentLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractTextDocumentLayoutPrivate;

public:
explicit QAbstractTextDocumentLayout(QTextDocument *doc);
~QAbstractTextDocumentLayout();

struct Selection
{
QTextCursor cursor;
QTextCharFormat format;
};

struct PaintContext
{
PaintContext()
: cursorPosition(-1)
{}
int cursorPosition;
QPalette palette;
QRectF clip;
QVector<Selection> selections;
};

virtual void draw(QPainter *painter, const PaintContext &context) = 0;
virtual int hitTest(const QPointF &point, Qt::HitTestAccuracy accuracy) const = 0;
QString anchorAt(const QPointF& pos) const;

virtual int pageCount() const = 0;
virtual QSizeF documentSize() const = 0;

virtual QRectF frameBoundingRect(QTextFrame *frame) const = 0;
virtual QRectF blockBoundingRect(const QTextBlock &block) const = 0;

void setPaintDevice(QPaintDevice *device);
QPaintDevice *paintDevice() const;

QTextDocument *document() const;

void registerHandler(int objectType, QObject *component);
QTextObjectInterface *handlerForObject(int objectType) const;

signals:
void update(const QRectF & = QRectF(0., 0., 1000000000., 1000000000.));
void updateBlock(const QTextBlock &block);
void documentSizeChanged(const QSizeF &newSize);
void pageCountChanged(int newPages);

protected:
QAbstractTextDocumentLayout(QAbstractTextDocumentLayoutPrivate &, QTextDocument *);

virtual void documentChanged(int from, int charsRemoved, int charsAdded) = 0;

virtual void resizeInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
virtual void positionInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
virtual void drawInlineObject(QPainter *painter, const QRectF &rect, QTextInlineObject object, int posInDocument, const QTextFormat &format);

int formatIndex(int pos);
QTextCharFormat format(int pos);

private:
friend class QWidgetTextControl;
friend class QTextDocument;
friend class QTextDocumentPrivate;
friend class QTextEngine;
friend class QTextLayout;
friend class QTextLine;



};

class  QTextObjectInterface
{
public:
virtual ~QTextObjectInterface() {}
virtual QSizeF intrinsicSize(QTextDocument *doc, int posInDocument, const QTextFormat &format) = 0;
virtual void drawObject(QPainter *painter, const QRectF &rect, QTextDocument *doc, int posInDocument, const QTextFormat &format) = 0;
};

template <> inline const char *qobject_interface_iid<QTextObjectInterface *>() { return "org.qt-project.Qt.QTextObjectInterface"; } template <> inline QTextObjectInterface *qobject_cast<QTextObjectInterface *>(QObject *object) { return reinterpret_cast<QTextObjectInterface *>((object ? object->qt_metacast("org.qt-project.Qt.QTextObjectInterface") : 0)); } template <> inline QTextObjectInterface *qobject_cast<QTextObjectInterface *>(const QObject *object) { return reinterpret_cast<QTextObjectInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QTextObjectInterface") : 0)); }




# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"







































































































































































# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontinfo.h"
























































































# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"
































































































































































































# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"





































































































































# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrawfont.h"
















































































































































































# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"






























































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qstatictext.h"



class QStaticTextPrivate;
class  QStaticText
{
public:
enum PerformanceHint {
ModerateCaching,
AggressiveCaching
};

QStaticText();
QStaticText(const QString &text);
QStaticText(const QStaticText &other);
~QStaticText();

void swap(QStaticText &other) { qSwap(data, other.data); }

void setText(const QString &text);
QString text() const;

void setTextFormat(Qt::TextFormat textFormat);
Qt::TextFormat textFormat() const;

void setTextWidth(qreal textWidth);
qreal textWidth() const;

void setTextOption(const QTextOption &textOption);
QTextOption textOption() const;

QSizeF size() const;

void prepare(const QTransform &matrix = QTransform(), const QFont &font = QFont());

void setPerformanceHint(PerformanceHint performanceHint);
PerformanceHint performanceHint() const;

QStaticText &operator=(const QStaticText &);
bool operator==(const QStaticText &) const;
bool operator!=(const QStaticText &) const;

private:
void detach();

QExplicitlySharedDataPointer<QStaticTextPrivate> data;
friend class QStaticTextPrivate;
};

template<> class QTypeInfo<QStaticText > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QStaticText)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QStaticText) }; static inline const char *name() { return "QStaticText"; } }; template <> inline void qSwap<QStaticText>(QStaticText &value1, QStaticText &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QStaticText>(::QStaticText &value1, ::QStaticText &value2) { value1.swap(value2); } } 



 template <> struct QMetaTypeId< QStaticText > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QStaticText >("QStaticText", reinterpret_cast< QStaticText *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsyntaxhighlighter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsyntaxhighlighter.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsyntaxhighlighter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qglyphrun.h"





































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"



class QTextObjectPrivate;
class QTextDocument;
class QTextDocumentPrivate;
class QTextCursor;
class QTextBlock;
class QTextFragment;
class QTextLayout;
class QTextList;

class  QTextObject : public QObject
{
Q_OBJECT

protected:
explicit QTextObject(QTextDocument *doc);
~QTextObject();

void setFormat(const QTextFormat &format);

public:
QTextFormat format() const;
int formatIndex() const;

QTextDocument *document() const;

int objectIndex() const;

QTextDocumentPrivate *docHandle() const;

protected:
QTextObject(QTextObjectPrivate &p, QTextDocument *doc);

private:
inline QTextObjectPrivate* d_func() { return reinterpret_cast<QTextObjectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextObjectPrivate* d_func() const { return reinterpret_cast<const QTextObjectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextObjectPrivate;
QTextObject(const QTextObject &) ; QTextObject &operator=(const QTextObject &) ;
friend class QTextDocumentPrivate;
};

class QTextBlockGroupPrivate;
class  QTextBlockGroup : public QTextObject
{
Q_OBJECT

protected:
explicit QTextBlockGroup(QTextDocument *doc);
~QTextBlockGroup();

virtual void blockInserted(const QTextBlock &block);
virtual void blockRemoved(const QTextBlock &block);
virtual void blockFormatChanged(const QTextBlock &block);

QList<QTextBlock> blockList() const;

protected:
QTextBlockGroup(QTextBlockGroupPrivate &p, QTextDocument *doc);
private:
inline QTextBlockGroupPrivate* d_func() { return reinterpret_cast<QTextBlockGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextBlockGroupPrivate* d_func() const { return reinterpret_cast<const QTextBlockGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextBlockGroupPrivate;
QTextBlockGroup(const QTextBlockGroup &) ; QTextBlockGroup &operator=(const QTextBlockGroup &) ;
friend class QTextDocumentPrivate;
};

class  QTextFrameLayoutData {
public:
virtual ~QTextFrameLayoutData();
};

class QTextFramePrivate;
class  QTextFrame : public QTextObject
{
Q_OBJECT

public:
explicit QTextFrame(QTextDocument *doc);
~QTextFrame();

inline void setFrameFormat(const QTextFrameFormat &format);
QTextFrameFormat frameFormat() const { return QTextObject::format().toFrameFormat(); }

QTextCursor firstCursorPosition() const;
QTextCursor lastCursorPosition() const;
int firstPosition() const;
int lastPosition() const;

QTextFrameLayoutData *layoutData() const;
void setLayoutData(QTextFrameLayoutData *data);

QList<QTextFrame *> childFrames() const;
QTextFrame *parentFrame() const;

class  iterator {
QTextFrame *f;
int b;
int e;
QTextFrame *cf;
int cb;

friend class QTextFrame;
friend class QTextTableCell;
friend class QTextDocumentLayoutPrivate;
iterator(QTextFrame *frame, int block, int begin, int end);
public:
iterator();
iterator(const iterator &o);
iterator &operator=(const iterator &o);

QTextFrame *parentFrame() const { return f; }

QTextFrame *currentFrame() const;
QTextBlock currentBlock() const;

bool atEnd() const { return !cf && cb == e; }

inline bool operator==(const iterator &o) const { return f == o.f && cf == o.cf && cb == o.cb; }
inline bool operator!=(const iterator &o) const { return f != o.f || cf != o.cf || cb != o.cb; }
iterator &operator++();
inline iterator operator++(int) { iterator tmp = *this; operator++(); return tmp; }
iterator &operator--();
inline iterator operator--(int) { iterator tmp = *this; operator--(); return tmp; }
};

friend class iterator;

typedef iterator Iterator;

iterator begin() const;
iterator end() const;

protected:
QTextFrame(QTextFramePrivate &p, QTextDocument *doc);
private:
friend class QTextDocumentPrivate;
inline QTextFramePrivate* d_func() { return reinterpret_cast<QTextFramePrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextFramePrivate* d_func() const { return reinterpret_cast<const QTextFramePrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextFramePrivate;
QTextFrame(const QTextFrame &) ; QTextFrame &operator=(const QTextFrame &) ;
};
template<> class QTypeInfo<QTextFrame::iterator > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextFrame::iterator)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextFrame::iterator) }; static inline const char *name() { return "QTextFrame::iterator"; } };

inline void QTextFrame::setFrameFormat(const QTextFrameFormat &aformat)
{ QTextObject::setFormat(aformat); }

class  QTextBlockUserData {
public:
virtual ~QTextBlockUserData();
};

class  QTextBlock
{
friend class QSyntaxHighlighter;
public:
inline QTextBlock(QTextDocumentPrivate *priv, int b) : p(priv), n(b) {}
inline QTextBlock() : p(0), n(0) {}
inline QTextBlock(const QTextBlock &o) : p(o.p), n(o.n) {}
inline QTextBlock &operator=(const QTextBlock &o) { p = o.p; n = o.n; return *this; }

bool isValid() const;

inline bool operator==(const QTextBlock &o) const { return p == o.p && n == o.n; }
inline bool operator!=(const QTextBlock &o) const { return p != o.p || n != o.n; }
inline bool operator<(const QTextBlock &o) const { return position() < o.position(); }

int position() const;
int length() const;
bool contains(int position) const;

QTextLayout *layout() const;
void clearLayout();
QTextBlockFormat blockFormat() const;
int blockFormatIndex() const;
QTextCharFormat charFormat() const;
int charFormatIndex() const;

Qt::LayoutDirection textDirection() const;

QString text() const;

const QTextDocument *document() const;

QTextList *textList() const;

QTextBlockUserData *userData() const;
void setUserData(QTextBlockUserData *data);

int userState() const;
void setUserState(int state);

int revision() const;
void setRevision(int rev);

bool isVisible() const;
void setVisible(bool visible);

int blockNumber() const;
int firstLineNumber() const;

void setLineCount(int count);
int lineCount() const;

class  iterator {
const QTextDocumentPrivate *p;
int b;
int e;
int n;
friend class QTextBlock;
iterator(const QTextDocumentPrivate *priv, int begin, int end, int f) : p(priv), b(begin), e(end), n(f) {}
public:
iterator() : p(0), b(0), e(0), n(0) {}
iterator(const iterator &o) : p(o.p), b(o.b), e(o.e), n(o.n) {}

QTextFragment fragment() const;

bool atEnd() const { return n == e; }

inline bool operator==(const iterator &o) const { return p == o.p && n == o.n; }
inline bool operator!=(const iterator &o) const { return p != o.p || n != o.n; }
iterator &operator++();
inline iterator operator++(int) { iterator tmp = *this; operator++(); return tmp; }
iterator &operator--();
inline iterator operator--(int) { iterator tmp = *this; operator--(); return tmp; }
};


typedef iterator Iterator;

iterator begin() const;
iterator end() const;

QTextBlock next() const;
QTextBlock previous() const;

inline QTextDocumentPrivate *docHandle() const { return p; }
inline int fragmentIndex() const { return n; }

private:
QTextDocumentPrivate *p;
int n;
friend class QTextDocumentPrivate;
friend class QTextLayout;
};

template<> class QTypeInfo<QTextBlock > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextBlock)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextBlock) }; static inline const char *name() { return "QTextBlock"; } };
template<> class QTypeInfo<QTextBlock::iterator > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextBlock::iterator)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextBlock::iterator) }; static inline const char *name() { return "QTextBlock::iterator"; } };


class  QTextFragment
{
public:
inline QTextFragment(const QTextDocumentPrivate *priv, int f, int fe) : p(priv), n(f), ne(fe) {}
inline QTextFragment() : p(0), n(0), ne(0) {}
inline QTextFragment(const QTextFragment &o) : p(o.p), n(o.n), ne(o.ne) {}
inline QTextFragment &operator=(const QTextFragment &o) { p = o.p; n = o.n; ne = o.ne; return *this; }

inline bool isValid() const { return p && n; }

inline bool operator==(const QTextFragment &o) const { return p == o.p && n == o.n; }
inline bool operator!=(const QTextFragment &o) const { return p != o.p || n != o.n; }
inline bool operator<(const QTextFragment &o) const { return position() < o.position(); }

int position() const;
int length() const;
bool contains(int position) const;

QTextCharFormat charFormat() const;
int charFormatIndex() const;
QString text() const;


# 317 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"
QList<QGlyphRun> glyphRuns(int from = -1, int length = -1) const;


# 320 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"
private:
const QTextDocumentPrivate *p;
int n;
int ne;
};

template<> class QTypeInfo<QTextFragment > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QTextFragment)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QTextFragment) }; static inline const char *name() { return "QTextFragment"; } };




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsyntaxhighlighter.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsyntaxhighlighter.h"



class QTextDocument;
class QSyntaxHighlighterPrivate;
class QTextCharFormat;
class QFont;
class QColor;
class QTextBlockUserData;

class  QSyntaxHighlighter : public QObject
{
Q_OBJECT
inline QSyntaxHighlighterPrivate* d_func() { return reinterpret_cast<QSyntaxHighlighterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSyntaxHighlighterPrivate* d_func() const { return reinterpret_cast<const QSyntaxHighlighterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSyntaxHighlighterPrivate;
public:
explicit QSyntaxHighlighter(QObject *parent);
explicit QSyntaxHighlighter(QTextDocument *parent);
virtual ~QSyntaxHighlighter();

void setDocument(QTextDocument *doc);
QTextDocument *document() const;

public slots:
void rehighlight();
void rehighlightBlock(const QTextBlock &block);

protected:
virtual void highlightBlock(const QString &text) = 0;

void setFormat(int start, int count, const QTextCharFormat &format);
void setFormat(int start, int count, const QColor &color);
void setFormat(int start, int count, const QFont &font);
QTextCharFormat format(int pos) const;

int previousBlockState() const;
int currentBlockState() const;
void setCurrentBlockState(int newState);

void setCurrentBlockUserData(QTextBlockUserData *data);
QTextBlockUserData *currentBlockUserData() const;

QTextBlock currentBlock() const;

private:
QSyntaxHighlighter(const QSyntaxHighlighter &) ; QSyntaxHighlighter &operator=(const QSyntaxHighlighter &) ;


};






# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
















































































































































































































































# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"









































































































































































































































































































# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"



class QTextStream;
class QTextDocument;
class QTextDocumentFragmentPrivate;
class QTextCursor;

class  QTextDocumentFragment
{
public:
QTextDocumentFragment();
explicit QTextDocumentFragment(const QTextDocument *document);
explicit QTextDocumentFragment(const QTextCursor &range);
QTextDocumentFragment(const QTextDocumentFragment &rhs);
QTextDocumentFragment &operator=(const QTextDocumentFragment &rhs);
~QTextDocumentFragment();

bool isEmpty() const;

QString toPlainText() const;

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"
QString toHtml(const QByteArray &encoding = QByteArray()) const;


# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"
static QTextDocumentFragment fromPlainText(const QString &plainText);

# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"
static QTextDocumentFragment fromHtml(const QString &html);
static QTextDocumentFragment fromHtml(const QString &html, const QTextDocument *resourceProvider);


# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentfragment.h"
private:
QTextDocumentFragmentPrivate *d;
friend class QTextCursor;
friend class QTextDocumentWriter;
};




# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentwriter.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentwriter.h"


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentwriter.h"



class QTextDocumentWriterPrivate;
class QIODevice;
class QByteArray;
class QTextDocument;
class QTextDocumentFragment;

class  QTextDocumentWriter
{
public:
QTextDocumentWriter();
QTextDocumentWriter(QIODevice *device, const QByteArray &format);
explicit QTextDocumentWriter(const QString &fileName, const QByteArray &format = QByteArray());
~QTextDocumentWriter();

void setFormat (const QByteArray &format);
QByteArray format () const;

void setDevice (QIODevice *device);
QIODevice *device () const;
void setFileName (const QString &fileName);
QString fileName () const;

bool write(const QTextDocument *document);
bool write(const QTextDocumentFragment &fragment);


# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentwriter.h"
void setCodec(QTextCodec *codec);
QTextCodec *codec() const;


# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocumentwriter.h"
static QList<QByteArray> supportedDocumentFormats();

private:
QTextDocumentWriter(const QTextDocumentWriter &) ; QTextDocumentWriter &operator=(const QTextDocumentWriter &) ;
QTextDocumentWriterPrivate *d;
};




# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlayout.h"










































































































































































































































































# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlist.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"










































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlist.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextlist.h"



class QTextListPrivate;
class QTextCursor;

class  QTextList : public QTextBlockGroup
{
Q_OBJECT
public:
explicit QTextList(QTextDocument *doc);
~QTextList();

int count() const;

inline bool isEmpty() const
{ return count() == 0; }

QTextBlock item(int i) const;

int itemNumber(const QTextBlock &) const;
QString itemText(const QTextBlock &) const;

void removeItem(int i);
void remove(const QTextBlock &);

void add(const QTextBlock &block);

inline void setFormat(const QTextListFormat &format);
QTextListFormat format() const { return QTextObject::format().toListFormat(); }

private:
QTextList(const QTextList &) ; QTextList &operator=(const QTextList &) ;
inline QTextListPrivate* d_func() { return reinterpret_cast<QTextListPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextListPrivate* d_func() const { return reinterpret_cast<const QTextListPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextListPrivate;
};

inline void QTextList::setFormat(const QTextListFormat &aformat)
{ QTextObject::setFormat(aformat); }




# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"










































































































































































































































































































































# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"






























































































































































# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtexttable.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtexttable.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtexttable.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextobject.h"










































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtexttable.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtexttable.h"



class QTextCursor;
class QTextTable;
class QTextTablePrivate;

class  QTextTableCell
{
public:
QTextTableCell() : table(0) {}
~QTextTableCell() {}
QTextTableCell(const QTextTableCell &o) : table(o.table), fragment(o.fragment) {}
QTextTableCell &operator=(const QTextTableCell &o)
{ table = o.table; fragment = o.fragment; return *this; }

void setFormat(const QTextCharFormat &format);
QTextCharFormat format() const;

int row() const;
int column() const;

int rowSpan() const;
int columnSpan() const;

inline bool isValid() const { return table != 0; }

QTextCursor firstCursorPosition() const;
QTextCursor lastCursorPosition() const;
int firstPosition() const;
int lastPosition() const;

inline bool operator==(const QTextTableCell &other) const
{ return table == other.table && fragment == other.fragment; }
inline bool operator!=(const QTextTableCell &other) const
{ return !operator==(other); }

QTextFrame::iterator begin() const;
QTextFrame::iterator end() const;

int tableCellFormatIndex() const;

private:
friend class QTextTable;
QTextTableCell(const QTextTable *t, int f)
: table(t), fragment(f) {}

const QTextTable *table;
int fragment;
};

class  QTextTable : public QTextFrame
{
Q_OBJECT
public:
explicit QTextTable(QTextDocument *doc);
~QTextTable();

void resize(int rows, int cols);
void insertRows(int pos, int num);
void insertColumns(int pos, int num);
void appendRows(int count);
void appendColumns(int count);
void removeRows(int pos, int num);
void removeColumns(int pos, int num);

void mergeCells(int row, int col, int numRows, int numCols);
void mergeCells(const QTextCursor &cursor);
void splitCell(int row, int col, int numRows, int numCols);

int rows() const;
int columns() const;

QTextTableCell cellAt(int row, int col) const;
QTextTableCell cellAt(int position) const;
QTextTableCell cellAt(const QTextCursor &c) const;

QTextCursor rowStart(const QTextCursor &c) const;
QTextCursor rowEnd(const QTextCursor &c) const;

void setFormat(const QTextTableFormat &format);
QTextTableFormat format() const { return QTextObject::format().toTableFormat(); }

private:
QTextTable(const QTextTable &) ; QTextTable &operator=(const QTextTable &) ;
inline QTextTablePrivate* d_func() { return reinterpret_cast<QTextTablePrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextTablePrivate* d_func() const { return reinterpret_cast<const QTextTablePrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextTablePrivate;
friend class QTextTableCell;
};




# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstandardpaths.h"









































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"
class QStringList;
class QUrl;
class QObject;

class  QDesktopServices
{
public:
static bool openUrl(const QUrl &url);
static void setUrlHandler(const QString &scheme, QObject *receiver, const char *method);
static void unsetUrlHandler(const QString &scheme);
























# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"
private:
static QString storageLocationImpl(QStandardPaths::StandardLocation type);
};



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qdesktopservices.h"




# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"






































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregularexpression.h"


























































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlocale.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"





# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"
class QValidatorPrivate;

class  QValidator : public QObject
{
Q_OBJECT
public:
explicit QValidator(QObject * parent = 0);
~QValidator();

enum State {
Invalid,
Intermediate,
Acceptable
};

void setLocale(const QLocale &locale);
QLocale locale() const;

virtual State validate(QString &, int &) const = 0;
virtual void fixup(QString &) const;

signals:
void changed();

protected:
QValidator(QObjectPrivate &d, QObject *parent);
QValidator(QValidatorPrivate &d, QObject *parent);

private:
QValidator(const QValidator &) ; QValidator &operator=(const QValidator &) ;
inline QValidatorPrivate* d_func() { return reinterpret_cast<QValidatorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QValidatorPrivate* d_func() const { return reinterpret_cast<const QValidatorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QValidatorPrivate;
};

class  QIntValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(int bottom READ bottom WRITE setBottom NOTIFY bottomChanged)
Q_PROPERTY(int top READ top WRITE setTop NOTIFY topChanged)

public:
explicit QIntValidator(QObject * parent = 0);
QIntValidator(int bottom, int top, QObject *parent = 0);
~QIntValidator();

QValidator::State validate(QString &, int &) const;
void fixup(QString &input) const;

void setBottom(int);
void setTop(int);
virtual void setRange(int bottom, int top);

int bottom() const { return b; }
int top() const { return t; }
signals:
void bottomChanged(int bottom);
void topChanged(int top);

private:
QIntValidator(const QIntValidator &) ; QIntValidator &operator=(const QIntValidator &) ;

int b;
int t;
};



# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"
class QDoubleValidatorPrivate;

class  QDoubleValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(double bottom READ bottom WRITE setBottom NOTIFY bottomChanged)
Q_PROPERTY(double top READ top WRITE setTop NOTIFY topChanged)
Q_PROPERTY(int decimals READ decimals WRITE setDecimals NOTIFY decimalsChanged)
Q_ENUMS(Notation)
Q_PROPERTY(Notation notation READ notation WRITE setNotation NOTIFY notationChanged)

public:
explicit QDoubleValidator(QObject * parent = 0);
QDoubleValidator(double bottom, double top, int decimals, QObject *parent = 0);
~QDoubleValidator();

enum Notation {
StandardNotation,
ScientificNotation
};
QValidator::State validate(QString &, int &) const;

virtual void setRange(double bottom, double top, int decimals = 0);
void setBottom(double);
void setTop(double);
void setDecimals(int);
void setNotation(Notation);

double bottom() const { return b; }
double top() const { return t; }
int decimals() const { return dec; }
Notation notation() const;

signals:
void bottomChanged(double bottom);
void topChanged(double top);
void decimalsChanged(int decimals);
void notationChanged(QDoubleValidator::Notation notation);

private:
inline QDoubleValidatorPrivate* d_func() { return reinterpret_cast<QDoubleValidatorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDoubleValidatorPrivate* d_func() const { return reinterpret_cast<const QDoubleValidatorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDoubleValidatorPrivate;
QDoubleValidator(const QDoubleValidator &) ; QDoubleValidator &operator=(const QDoubleValidator &) ;

double b;
double t;
int dec;
};


class  QRegExpValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(QRegExp regExp READ regExp WRITE setRegExp NOTIFY regExpChanged)

public:
explicit QRegExpValidator(QObject *parent = 0);
explicit QRegExpValidator(const QRegExp& rx, QObject *parent = 0);
~QRegExpValidator();

virtual QValidator::State validate(QString& input, int& pos) const;

void setRegExp(const QRegExp& rx);
const QRegExp& regExp() const { return r; }

signals:
void regExpChanged(const QRegExp& regExp);

private:
QRegExpValidator(const QRegExpValidator &) ; QRegExpValidator &operator=(const QRegExpValidator &) ;

QRegExp r;
};





# 200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"
class QRegularExpressionValidatorPrivate;

class  QRegularExpressionValidator : public QValidator
{
Q_OBJECT
Q_PROPERTY(QRegularExpression regularExpression READ regularExpression WRITE setRegularExpression NOTIFY regularExpressionChanged)

public:
explicit QRegularExpressionValidator(QObject *parent = 0);
explicit QRegularExpressionValidator(const QRegularExpression &re, QObject *parent = 0);
~QRegularExpressionValidator();

virtual QValidator::State validate(QString &input, int &pos) const ;

QRegularExpression regularExpression() const;

public slots:
void setRegularExpression(const QRegularExpression &re);

signals:
void regularExpressionChanged(const QRegularExpression &re);

private:
QRegularExpressionValidator(const QRegularExpressionValidator &) ; QRegularExpressionValidator &operator=(const QRegularExpressionValidator &) ;
inline QRegularExpressionValidatorPrivate* d_func() { return reinterpret_cast<QRegularExpressionValidatorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QRegularExpressionValidatorPrivate* d_func() const { return reinterpret_cast<const QRegularExpressionValidatorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QRegularExpressionValidatorPrivate;
};





# 231 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtguiversion.h"









# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QtGui"


# 44 "qtscript_masterinclude.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetworkDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetworkDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSharedDataPointer"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QString"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVariant"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"



class QSslConfiguration;

class QNetworkRequestPrivate;
class  QNetworkRequest
{
public:
enum KnownHeaders {
ContentTypeHeader,
ContentLengthHeader,
LocationHeader,
LastModifiedHeader,
CookieHeader,
SetCookieHeader,
ContentDispositionHeader, 
UserAgentHeader,
ServerHeader
};
enum Attribute {
HttpStatusCodeAttribute,
HttpReasonPhraseAttribute,
RedirectionTargetAttribute,
ConnectionEncryptedAttribute,
CacheLoadControlAttribute,
CacheSaveControlAttribute,
SourceIsFromCacheAttribute,
DoNotBufferUploadDataAttribute,
HttpPipeliningAllowedAttribute,
HttpPipeliningWasUsedAttribute,
CustomVerbAttribute,
CookieLoadControlAttribute,
AuthenticationReuseAttribute,
CookieSaveControlAttribute,
MaximumDownloadBufferSizeAttribute, 
DownloadBufferAttribute, 
SynchronousRequestAttribute, 
BackgroundRequestAttribute,

User = 1000,
UserMax = 32767
};
enum CacheLoadControl {
AlwaysNetwork,
PreferNetwork,
PreferCache,
AlwaysCache
};
enum LoadControl {
Automatic = 0,
Manual
};

enum Priority {
HighPriority = 1,
NormalPriority = 3,
LowPriority = 5
};

explicit QNetworkRequest(const QUrl &url = QUrl());
QNetworkRequest(const QNetworkRequest &other);
~QNetworkRequest();
QNetworkRequest &operator=(const QNetworkRequest &other);

inline void swap(QNetworkRequest &other) { qSwap(d, other.d); }

bool operator==(const QNetworkRequest &other) const;
inline bool operator!=(const QNetworkRequest &other) const
{ return !operator==(other); }

QUrl url() const;
void setUrl(const QUrl &url);


QVariant header(KnownHeaders header) const;
void setHeader(KnownHeaders header, const QVariant &value);


bool hasRawHeader(const QByteArray &headerName) const;
QList<QByteArray> rawHeaderList() const;
QByteArray rawHeader(const QByteArray &headerName) const;
void setRawHeader(const QByteArray &headerName, const QByteArray &value);


QVariant attribute(Attribute code, const QVariant &defaultValue = QVariant()) const;
void setAttribute(Attribute code, const QVariant &value);


# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"
QSslConfiguration sslConfiguration() const;
void setSslConfiguration(const QSslConfiguration &configuration);


# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"
void setOriginatingObject(QObject *object);
QObject *originatingObject() const;

Priority priority() const;
void setPriority(Priority priority);

private:
QSharedDataPointer<QNetworkRequestPrivate> d;
friend class QNetworkRequestPrivate;
};

template<> class QTypeInfo<QNetworkRequest > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkRequest)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkRequest) }; static inline const char *name() { return "QNetworkRequest"; } }; template <> inline void qSwap<QNetworkRequest>(QNetworkRequest &value1, QNetworkRequest &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkRequest>(::QNetworkRequest &value1, ::QNetworkRequest &value2) { value1.swap(value2); } } 



 template <> struct QMetaTypeId< QNetworkRequest > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkRequest >("QNetworkRequest", reinterpret_cast< QNetworkRequest *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"



class QIODevice;
class QDateTime;
class QUrl;
template<class T> class QList;

class QNetworkCacheMetaDataPrivate;
class  QNetworkCacheMetaData
{

public:
typedef QPair<QByteArray, QByteArray> RawHeader;
typedef QList<RawHeader> RawHeaderList;
typedef QHash<QNetworkRequest::Attribute, QVariant> AttributesMap;

QNetworkCacheMetaData();
QNetworkCacheMetaData(const QNetworkCacheMetaData &other);
~QNetworkCacheMetaData();

QNetworkCacheMetaData &operator=(const QNetworkCacheMetaData &other);

void swap(QNetworkCacheMetaData &other)
{ qSwap(d, other.d); }

bool operator==(const QNetworkCacheMetaData &other) const;
inline bool operator!=(const QNetworkCacheMetaData &other) const
{ return !(*this == other); }

bool isValid() const;

QUrl url() const;
void setUrl(const QUrl &url);

RawHeaderList rawHeaders() const;
void setRawHeaders(const RawHeaderList &headers);

QDateTime lastModified() const;
void setLastModified(const QDateTime &dateTime);

QDateTime expirationDate() const;
void setExpirationDate(const QDateTime &dateTime);

bool saveToDisk() const;
void setSaveToDisk(bool allow);

AttributesMap attributes() const;
void setAttributes(const AttributesMap &attributes);

private:
friend class QNetworkCacheMetaDataPrivate;
QSharedDataPointer<QNetworkCacheMetaDataPrivate> d;
};

template<> class QTypeInfo<QNetworkCacheMetaData > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkCacheMetaData)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkCacheMetaData) }; static inline const char *name() { return "QNetworkCacheMetaData"; } }; template <> inline void qSwap<QNetworkCacheMetaData>(QNetworkCacheMetaData &value1, QNetworkCacheMetaData &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkCacheMetaData>(::QNetworkCacheMetaData &value1, ::QNetworkCacheMetaData &value2) { value1.swap(value2); } } 

 QDataStream &operator<<(QDataStream &, const QNetworkCacheMetaData &);
 QDataStream &operator>>(QDataStream &, QNetworkCacheMetaData &);


class QAbstractNetworkCachePrivate;
class  QAbstractNetworkCache : public QObject
{
Q_OBJECT

public:
virtual ~QAbstractNetworkCache();

virtual QNetworkCacheMetaData metaData(const QUrl &url) = 0;
virtual void updateMetaData(const QNetworkCacheMetaData &metaData) = 0;
virtual QIODevice *data(const QUrl &url) = 0;
virtual bool remove(const QUrl &url) = 0;
virtual qint64 cacheSize() const = 0;

virtual QIODevice *prepare(const QNetworkCacheMetaData &metaData) = 0;
virtual void insert(QIODevice *device) = 0;

public slots:
virtual void clear() = 0;

protected:
explicit QAbstractNetworkCache(QObject *parent = 0);
QAbstractNetworkCache(QAbstractNetworkCachePrivate &dd, QObject *parent);

private:
inline QAbstractNetworkCachePrivate* d_func() { return reinterpret_cast<QAbstractNetworkCachePrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractNetworkCachePrivate* d_func() const { return reinterpret_cast<const QAbstractNetworkCachePrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractNetworkCachePrivate;
QAbstractNetworkCache(const QAbstractNetworkCache &) ; QAbstractNetworkCache &operator=(const QAbstractNetworkCache &) ;
};




# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhttpmultipart.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSharedDataPointer"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhttpmultipart.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QByteArray"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhttpmultipart.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QIODevice"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhttpmultipart.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"
































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QNetworkRequest"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhttpmultipart.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhttpmultipart.h"



class QHttpPartPrivate;
class QHttpMultiPart;

class  QHttpPart
{
public:
QHttpPart();
QHttpPart(const QHttpPart &other);
~QHttpPart();
QHttpPart &operator=(const QHttpPart &other);

void swap(QHttpPart &other) { qSwap(d, other.d); }

bool operator==(const QHttpPart &other) const;
inline bool operator!=(const QHttpPart &other) const
{ return !operator==(other); }

void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value);
void setRawHeader(const QByteArray &headerName, const QByteArray &headerValue);

void setBody(const QByteArray &body);
void setBodyDevice(QIODevice *device);

private:
QSharedDataPointer<QHttpPartPrivate> d;

friend class QHttpMultiPartIODevice;
};

template<> class QTypeInfo<QHttpPart > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QHttpPart)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QHttpPart) }; static inline const char *name() { return "QHttpPart"; } }; template <> inline void qSwap<QHttpPart>(QHttpPart &value1, QHttpPart &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QHttpPart>(::QHttpPart &value1, ::QHttpPart &value2) { value1.swap(value2); } } 

class QHttpMultiPartPrivate;

class  QHttpMultiPart : public QObject
{
Q_OBJECT

public:

enum ContentType {
MixedType,
RelatedType,
FormDataType,
AlternativeType
};

explicit QHttpMultiPart(QObject *parent = 0);
explicit QHttpMultiPart(ContentType contentType, QObject *parent = 0);
~QHttpMultiPart();

void append(const QHttpPart &httpPart);

void setContentType(ContentType contentType);

QByteArray boundary() const;
void setBoundary(const QByteArray &boundary);

private:
inline QHttpMultiPartPrivate* d_func() { return reinterpret_cast<QHttpMultiPartPrivate *>(qGetPtrHelper(d_ptr)); } inline const QHttpMultiPartPrivate* d_func() const { return reinterpret_cast<const QHttpMultiPartPrivate *>(qGetPtrHelper(d_ptr)); } friend class QHttpMultiPartPrivate;
QHttpMultiPart(const QHttpMultiPart &) ; QHttpMultiPart &operator=(const QHttpMultiPart &) ;

friend class QNetworkAccessManager;
friend class QNetworkAccessManagerPrivate;
};




# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"



class QIODevice;
class QAbstractNetworkCache;
class QAuthenticator;
class QByteArray;
template<typename T> class QList;
class QNetworkCookie;
class QNetworkCookieJar;
class QNetworkRequest;
class QNetworkReply;
class QNetworkProxy;
class QNetworkProxyFactory;
class QSslError;

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
class QNetworkConfiguration;

# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
class QHttpMultiPart;

class QNetworkReplyImplPrivate;
class QNetworkAccessManagerPrivate;
class  QNetworkAccessManager: public QObject
{
Q_OBJECT


# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
Q_PROPERTY(NetworkAccessibility networkAccessible READ networkAccessible WRITE setNetworkAccessible NOTIFY networkAccessibleChanged)


# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
public:
enum Operation {
HeadOperation = 1,
GetOperation,
PutOperation,
PostOperation,
DeleteOperation,
CustomOperation,

UnknownOperation = 0
};


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
enum NetworkAccessibility {
UnknownAccessibility = -1,
NotAccessible = 0,
Accessible = 1
};


# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
explicit QNetworkAccessManager(QObject *parent = 0);
~QNetworkAccessManager();

void clearAccessCache();


# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
QNetworkProxy proxy() const;
void setProxy(const QNetworkProxy &proxy);
QNetworkProxyFactory *proxyFactory() const;
void setProxyFactory(QNetworkProxyFactory *factory);


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
QAbstractNetworkCache *cache() const;
void setCache(QAbstractNetworkCache *cache);

QNetworkCookieJar *cookieJar() const;
void setCookieJar(QNetworkCookieJar *cookieJar);

QNetworkReply *head(const QNetworkRequest &request);
QNetworkReply *get(const QNetworkRequest &request);
QNetworkReply *post(const QNetworkRequest &request, QIODevice *data);
QNetworkReply *post(const QNetworkRequest &request, const QByteArray &data);
QNetworkReply *post(const QNetworkRequest &request, QHttpMultiPart *multiPart);
QNetworkReply *put(const QNetworkRequest &request, QIODevice *data);
QNetworkReply *put(const QNetworkRequest &request, const QByteArray &data);
QNetworkReply *put(const QNetworkRequest &request, QHttpMultiPart *multiPart);
QNetworkReply *deleteResource(const QNetworkRequest &request);
QNetworkReply *sendCustomRequest(const QNetworkRequest &request, const QByteArray &verb, QIODevice *data = 0);


# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
void setConfiguration(const QNetworkConfiguration &config);
QNetworkConfiguration configuration() const;
QNetworkConfiguration activeConfiguration() const;

void setNetworkAccessible(NetworkAccessibility accessible);
NetworkAccessibility networkAccessible() const;


# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
signals:

# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator);

# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
void authenticationRequired(QNetworkReply *reply, QAuthenticator *authenticator);
void finished(QNetworkReply *reply);

# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
void encrypted(QNetworkReply *reply);
void sslErrors(QNetworkReply *reply, const QList<QSslError> &errors);



# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
void networkSessionConnected();

void networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility accessible);


# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
protected:
virtual QNetworkReply *createRequest(Operation op, const QNetworkRequest &request,
QIODevice *outgoingData = 0);

private:
friend class QNetworkReplyImplPrivate;
friend class QNetworkReplyHttpImpl;
friend class QNetworkReplyHttpImplPrivate;

inline QNetworkAccessManagerPrivate* d_func() { return reinterpret_cast<QNetworkAccessManagerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QNetworkAccessManagerPrivate* d_func() const { return reinterpret_cast<const QNetworkAccessManagerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QNetworkAccessManagerPrivate;




# 166 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"



# 169 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"
};




# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSharedDataPointer"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QList"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMetaType"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"



class QByteArray;
class QDateTime;
class QString;
class QUrl;

class QNetworkCookiePrivate;
class  QNetworkCookie
{
public:
enum RawForm {
NameAndValueOnly,
Full
};

explicit QNetworkCookie(const QByteArray &name = QByteArray(), const QByteArray &value = QByteArray());
QNetworkCookie(const QNetworkCookie &other);
~QNetworkCookie();
QNetworkCookie &operator=(const QNetworkCookie &other);

void swap(QNetworkCookie &other) { qSwap(d, other.d); }

bool operator==(const QNetworkCookie &other) const;
inline bool operator!=(const QNetworkCookie &other) const
{ return !(*this == other); }

bool isSecure() const;
void setSecure(bool enable);
bool isHttpOnly() const;
void setHttpOnly(bool enable);

bool isSessionCookie() const;
QDateTime expirationDate() const;
void setExpirationDate(const QDateTime &date);

QString domain() const;
void setDomain(const QString &domain);

QString path() const;
void setPath(const QString &path);

QByteArray name() const;
void setName(const QByteArray &cookieName);

QByteArray value() const;
void setValue(const QByteArray &value);

QByteArray toRawForm(RawForm form = Full) const;

bool hasSameIdentifier(const QNetworkCookie &other) const;
void normalize(const QUrl &url);

static QList<QNetworkCookie> parseCookies(const QByteArray &cookieString);

private:
QSharedDataPointer<QNetworkCookiePrivate> d;
friend class QNetworkCookiePrivate;
};

template<> class QTypeInfo<QNetworkCookie > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkCookie)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkCookie) }; static inline const char *name() { return "QNetworkCookie"; } }; template <> inline void qSwap<QNetworkCookie>(QNetworkCookie &value1, QNetworkCookie &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkCookie>(::QNetworkCookie &value1, ::QNetworkCookie &value2) { value1.swap(value2); } } 


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"
class QDebug;
 QDebug operator<<(QDebug, const QNetworkCookie &);


# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookie.h"


 template <> struct QMetaTypeId< QNetworkCookie > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkCookie >("QNetworkCookie", reinterpret_cast< QNetworkCookie *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookiejar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookiejar.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookiejar.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkcookiejar.h"



class QNetworkCookie;

class QNetworkCookieJarPrivate;
class  QNetworkCookieJar: public QObject
{
Q_OBJECT
public:
explicit QNetworkCookieJar(QObject *parent = 0);
virtual ~QNetworkCookieJar();

virtual QList<QNetworkCookie> cookiesForUrl(const QUrl &url) const;
virtual bool setCookiesFromUrl(const QList<QNetworkCookie> &cookieList, const QUrl &url);

virtual bool insertCookie(const QNetworkCookie &cookie);
virtual bool updateCookie(const QNetworkCookie &cookie);
virtual bool deleteCookie(const QNetworkCookie &cookie);

protected:
QList<QNetworkCookie> allCookies() const;
void setAllCookies(const QList<QNetworkCookie> &cookieList);
virtual bool validateCookie(const QNetworkCookie &cookie, const QUrl &url) const;

private:
inline QNetworkCookieJarPrivate* d_func() { return reinterpret_cast<QNetworkCookieJarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QNetworkCookieJarPrivate* d_func() const { return reinterpret_cast<const QNetworkCookieJarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QNetworkCookieJarPrivate;
QNetworkCookieJar(const QNetworkCookieJar &) ; QNetworkCookieJar &operator=(const QNetworkCookieJar &) ;
};




# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkdiskcache.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractnetworkcache.h"














































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkdiskcache.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkdiskcache.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkdiskcache.h"
class QNetworkDiskCachePrivate;
class  QNetworkDiskCache : public QAbstractNetworkCache
{
Q_OBJECT

public:
explicit QNetworkDiskCache(QObject *parent = 0);
~QNetworkDiskCache();

QString cacheDirectory() const;
void setCacheDirectory(const QString &cacheDir);

qint64 maximumCacheSize() const;
void setMaximumCacheSize(qint64 size);

qint64 cacheSize() const;
QNetworkCacheMetaData metaData(const QUrl &url);
void updateMetaData(const QNetworkCacheMetaData &metaData);
QIODevice *data(const QUrl &url);
bool remove(const QUrl &url);
QIODevice *prepare(const QNetworkCacheMetaData &metaData);
void insert(QIODevice *device);

QNetworkCacheMetaData fileMetaData(const QString &fileName) const;

public slots:
void clear();

protected:
virtual qint64 expire();

private:
inline QNetworkDiskCachePrivate* d_func() { return reinterpret_cast<QNetworkDiskCachePrivate *>(qGetPtrHelper(d_ptr)); } inline const QNetworkDiskCachePrivate* d_func() const { return reinterpret_cast<const QNetworkDiskCachePrivate *>(qGetPtrHelper(d_ptr)); } friend class QNetworkDiskCachePrivate;
QNetworkDiskCache(const QNetworkDiskCache &) ; QNetworkDiskCache &operator=(const QNetworkDiskCache &) ;
};



# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkdiskcache.h"



# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QIODevice"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QString"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVariant"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"
































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QNetworkRequest"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"













































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QNetworkAccessManager"

# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"



class QUrl;
class QVariant;
class QAuthenticator;
class QSslConfiguration;
class QSslError;

class QNetworkReplyPrivate;
class  QNetworkReply: public QIODevice
{
Q_OBJECT
Q_ENUMS(NetworkError)
public:
enum NetworkError {
NoError = 0,


ConnectionRefusedError = 1,
RemoteHostClosedError,
HostNotFoundError,
TimeoutError,
OperationCanceledError,
SslHandshakeFailedError,
TemporaryNetworkFailureError,
NetworkSessionFailedError,
BackgroundRequestNotAllowedError,
UnknownNetworkError = 99,


ProxyConnectionRefusedError = 101,
ProxyConnectionClosedError,
ProxyNotFoundError,
ProxyTimeoutError,
ProxyAuthenticationRequiredError,
UnknownProxyError = 199,


ContentAccessDenied = 201,
ContentOperationNotPermittedError,
ContentNotFoundError,
AuthenticationRequiredError,
ContentReSendError,
UnknownContentError = 299,


ProtocolUnknownError = 301,
ProtocolInvalidOperationError,
ProtocolFailure = 399
};

~QNetworkReply();


virtual void close();
virtual bool isSequential() const;


qint64 readBufferSize() const;
virtual void setReadBufferSize(qint64 size);

QNetworkAccessManager *manager() const;
QNetworkAccessManager::Operation operation() const;
QNetworkRequest request() const;
NetworkError error() const;
bool isFinished() const;
bool isRunning() const;
QUrl url() const;


QVariant header(QNetworkRequest::KnownHeaders header) const;


bool hasRawHeader(const QByteArray &headerName) const;
QList<QByteArray> rawHeaderList() const;
QByteArray rawHeader(const QByteArray &headerName) const;

typedef QPair<QByteArray, QByteArray> RawHeaderPair;
const QList<RawHeaderPair>& rawHeaderPairs() const;


QVariant attribute(QNetworkRequest::Attribute code) const;


# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"
QSslConfiguration sslConfiguration() const;
void setSslConfiguration(const QSslConfiguration &configuration);
void ignoreSslErrors(const QList<QSslError> &errors);


# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"
public slots:
virtual void abort() = 0;
virtual void ignoreSslErrors();

signals:
void metaDataChanged();
void finished();
void error(QNetworkReply::NetworkError);

# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"
void encrypted();
void sslErrors(const QList<QSslError> &errors);


# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkreply.h"
void uploadProgress(qint64 bytesSent, qint64 bytesTotal);
void downloadProgress(qint64 bytesReceived, qint64 bytesTotal);

protected:
explicit QNetworkReply(QObject *parent = 0);
QNetworkReply(QNetworkReplyPrivate &dd, QObject *parent);
virtual qint64 writeData(const char *data, qint64 len);

void setOperation(QNetworkAccessManager::Operation operation);
void setRequest(const QNetworkRequest &request);
void setError(NetworkError errorCode, const QString &errorString);
void setFinished(bool);
void setUrl(const QUrl &url);
void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value);
void setRawHeader(const QByteArray &headerName, const QByteArray &value);
void setAttribute(QNetworkRequest::Attribute code, const QVariant &value);

virtual void sslConfigurationImplementation(QSslConfiguration &) const;
virtual void setSslConfigurationImplementation(const QSslConfiguration &);
virtual void ignoreSslErrorsImplementation(const QList<QSslError> &);

private:
inline QNetworkReplyPrivate* d_func() { return reinterpret_cast<QNetworkReplyPrivate *>(qGetPtrHelper(d_ptr)); } inline const QNetworkReplyPrivate* d_func() const { return reinterpret_cast<const QNetworkReplyPrivate *>(qGetPtrHelper(d_ptr)); } friend class QNetworkReplyPrivate;
};



 template <> struct QMetaTypeId< QNetworkReply::NetworkError > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkReply::NetworkError >("QNetworkReply::NetworkError", reinterpret_cast< QNetworkReply::NetworkError *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"
































































































































































# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfigmanager.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfigmanager.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"


class QNetworkConfigurationPrivate;
class  QNetworkConfiguration
{
public:
QNetworkConfiguration();
QNetworkConfiguration(const QNetworkConfiguration& other);
QNetworkConfiguration &operator=(const QNetworkConfiguration &other);
~QNetworkConfiguration();

void swap(QNetworkConfiguration &other) { qSwap(d, other.d); }

bool operator==(const QNetworkConfiguration &other) const;
inline bool operator!=(const QNetworkConfiguration &other) const
{ return !operator==(other); }

enum Type {
InternetAccessPoint = 0,
ServiceNetwork,
UserChoice,
Invalid
};

enum Purpose {
UnknownPurpose = 0,
PublicPurpose,
PrivatePurpose,
ServiceSpecificPurpose
};

enum StateFlag {
Undefined = 0x0000001,
Defined = 0x0000002,
Discovered = 0x0000006,
Active = 0x000000e
};
typedef QFlags<StateFlag> StateFlags;

enum BearerType {
BearerUnknown,
BearerEthernet,
BearerWLAN,
Bearer2G,
BearerCDMA2000,
BearerWCDMA,
BearerHSPA,
BearerBluetooth,
BearerWiMAX
};

StateFlags state() const;
Type type() const;
Purpose purpose() const;

BearerType bearerType() const;
QString bearerTypeName() const;

QString identifier() const;
bool isRoamingAvailable() const;
QList<QNetworkConfiguration> children() const;

QString name() const;
bool isValid() const;

private:
friend class QNetworkConfigurationPrivate;
friend class QNetworkConfigurationManager;
friend class QNetworkConfigurationManagerPrivate;
friend class QNetworkSessionPrivate;
QExplicitlySharedDataPointer<QNetworkConfigurationPrivate> d;
};

template<> class QTypeInfo<QNetworkConfiguration > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkConfiguration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkConfiguration) }; static inline const char *name() { return "QNetworkConfiguration"; } }; template <> inline void qSwap<QNetworkConfiguration>(QNetworkConfiguration &value1, QNetworkConfiguration &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkConfiguration>(::QNetworkConfiguration &value1, ::QNetworkConfiguration &value2) { value1.swap(value2); } } 



 template <> struct QMetaTypeId< QNetworkConfiguration > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkConfiguration >("QNetworkConfiguration", reinterpret_cast< QNetworkConfiguration *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfigmanager.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfigmanager.h"


class QNetworkConfigurationManagerPrivate;
class  QNetworkConfigurationManager : public QObject
{
Q_OBJECT

public:
enum Capability {
CanStartAndStopInterfaces = 0x00000001,
DirectConnectionRouting = 0x00000002,
SystemSessionSupport = 0x00000004,
ApplicationLevelRoaming = 0x00000008,
ForcedRoaming = 0x00000010,
DataStatistics = 0x00000020,
NetworkSessionRequired = 0x00000040
};

typedef QFlags<Capability> Capabilities;

explicit QNetworkConfigurationManager(QObject *parent = 0);
virtual ~QNetworkConfigurationManager();

QNetworkConfigurationManager::Capabilities capabilities() const;

QNetworkConfiguration defaultConfiguration() const;
QList<QNetworkConfiguration> allConfigurations(QNetworkConfiguration::StateFlags flags = 0) const;
QNetworkConfiguration configurationFromIdentifier(const QString &identifier) const;

bool isOnline() const;

public slots:
void updateConfigurations();

signals:
void configurationAdded(const QNetworkConfiguration &config);
void configurationRemoved(const QNetworkConfiguration &config);
void configurationChanged(const QNetworkConfiguration &config);
void onlineStateChanged(bool isOnline);
void updateCompleted();

private:
QNetworkConfigurationManager(const QNetworkConfigurationManager &) ; QNetworkConfigurationManager &operator=(const QNetworkConfigurationManager &) ;
};

 inline QFlags<QNetworkConfigurationManager::Capabilities::enum_type> operator|(QNetworkConfigurationManager::Capabilities::enum_type f1, QNetworkConfigurationManager::Capabilities::enum_type f2) { return QFlags<QNetworkConfigurationManager::Capabilities::enum_type>(f1) | f2; }  inline QFlags<QNetworkConfigurationManager::Capabilities::enum_type> operator|(QNetworkConfigurationManager::Capabilities::enum_type f1, QFlags<QNetworkConfigurationManager::Capabilities::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QNetworkConfigurationManager::Capabilities::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }






# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"



































































































































# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



class QHostAddress;

# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
class QNetworkProxy;

# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
class QAbstractSocketPrivate;
class QAuthenticator;

class  QAbstractSocket : public QIODevice
{
Q_OBJECT
Q_ENUMS(SocketType NetworkLayerProtocol SocketError SocketState SocketOption)
public:
enum SocketType {
TcpSocket,
UdpSocket,
UnknownSocketType = -1
};
enum NetworkLayerProtocol {
IPv4Protocol,
IPv6Protocol,
AnyIPProtocol,
UnknownNetworkLayerProtocol = -1
};
enum SocketError {
ConnectionRefusedError,
RemoteHostClosedError,
HostNotFoundError,
SocketAccessError,
SocketResourceError,
SocketTimeoutError, 
DatagramTooLargeError,
NetworkError,
AddressInUseError,
SocketAddressNotAvailableError,
UnsupportedSocketOperationError, 
UnfinishedSocketOperationError,
ProxyAuthenticationRequiredError,
SslHandshakeFailedError,
ProxyConnectionRefusedError,
ProxyConnectionClosedError, 
ProxyConnectionTimeoutError,
ProxyNotFoundError,
ProxyProtocolError,
OperationError,
SslInternalError, 
SslInvalidUserDataError,
TemporaryError,

UnknownSocketError = -1
};
enum SocketState {
UnconnectedState,
HostLookupState,
ConnectingState,
ConnectedState,
BoundState,
ListeningState,
ClosingState
};
enum SocketOption {
LowDelayOption, 
KeepAliveOption, 
MulticastTtlOption, 
MulticastLoopbackOption, 
TypeOfServiceOption 
};
enum BindFlag {
DefaultForPlatform = 0x0,
ShareAddress = 0x1,
DontShareAddress = 0x2,
ReuseAddressHint = 0x4
};
typedef QFlags<BindFlag> BindMode;
enum PauseMode {
PauseNever = 0x0,
PauseOnSslErrors = 0x1
};
typedef QFlags<PauseMode> PauseModes;

QAbstractSocket(SocketType socketType, QObject *parent);
virtual ~QAbstractSocket();

virtual void resume(); 
PauseModes pauseMode() const;
void setPauseMode(PauseModes pauseMode);

bool bind(const QHostAddress &address, quint16 port = 0, BindMode mode = DefaultForPlatform);
bool bind(quint16 port = 0, BindMode mode = DefaultForPlatform);

virtual void connectToHost(const QString &hostName, quint16 port, OpenMode mode = ReadWrite, NetworkLayerProtocol protocol = AnyIPProtocol);
virtual void connectToHost(const QHostAddress &address, quint16 port, OpenMode mode = ReadWrite);
virtual void disconnectFromHost();

bool isValid() const;

qint64 bytesAvailable() const;
qint64 bytesToWrite() const;

bool canReadLine() const;

quint16 localPort() const;
QHostAddress localAddress() const;
quint16 peerPort() const;
QHostAddress peerAddress() const;
QString peerName() const;

qint64 readBufferSize() const;
virtual void setReadBufferSize(qint64 size);

void abort();

virtual qintptr socketDescriptor() const;
virtual bool setSocketDescriptor(qintptr socketDescriptor, SocketState state = ConnectedState,
OpenMode openMode = ReadWrite);

virtual void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &value);
virtual QVariant socketOption(QAbstractSocket::SocketOption option);

SocketType socketType() const;
SocketState state() const;
SocketError error() const;


void close();
bool isSequential() const;
bool atEnd() const;
bool flush();


virtual bool waitForConnected(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);
bool waitForBytesWritten(int msecs = 30000);
virtual bool waitForDisconnected(int msecs = 30000);


# 189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
void setProxy(const QNetworkProxy &networkProxy);
QNetworkProxy proxy() const;


# 193 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
signals:
void hostFound();
void connected();
void disconnected();
void stateChanged(QAbstractSocket::SocketState);
void error(QAbstractSocket::SocketError);

# 200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
void proxyAuthenticationRequired(const QNetworkProxy &proxy, QAuthenticator *authenticator);


# 203 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
protected:
qint64 readData(char *data, qint64 maxlen);
qint64 readLineData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

void setSocketState(SocketState state);
void setSocketError(SocketError socketError);
void setLocalPort(quint16 port);
void setLocalAddress(const QHostAddress &address);
void setPeerPort(quint16 port);
void setPeerAddress(const QHostAddress &address);
void setPeerName(const QString &name);

QAbstractSocket(SocketType socketType, QAbstractSocketPrivate &dd, QObject *parent = 0);

private:
inline QAbstractSocketPrivate* d_func() { return reinterpret_cast<QAbstractSocketPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractSocketPrivate* d_func() const { return reinterpret_cast<const QAbstractSocketPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractSocketPrivate;
QAbstractSocket(const QAbstractSocket &) ; QAbstractSocket &operator=(const QAbstractSocket &) ;






};


 inline QFlags<QAbstractSocket::BindMode::enum_type> operator|(QAbstractSocket::BindMode::enum_type f1, QAbstractSocket::BindMode::enum_type f2) { return QFlags<QAbstractSocket::BindMode::enum_type>(f1) | f2; }  inline QFlags<QAbstractSocket::BindMode::enum_type> operator|(QAbstractSocket::BindMode::enum_type f1, QFlags<QAbstractSocket::BindMode::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QAbstractSocket::BindMode::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QAbstractSocket::PauseModes::enum_type> operator|(QAbstractSocket::PauseModes::enum_type f1, QAbstractSocket::PauseModes::enum_type f2) { return QFlags<QAbstractSocket::PauseModes::enum_type>(f1) | f2; }  inline QFlags<QAbstractSocket::PauseModes::enum_type> operator|(QAbstractSocket::PauseModes::enum_type f1, QFlags<QAbstractSocket::PauseModes::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QAbstractSocket::PauseModes::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 234 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"
 QDebug operator<<(QDebug, QAbstractSocket::SocketError);
 QDebug operator<<(QDebug, QAbstractSocket::SocketState);


# 238 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"


 template <> struct QMetaTypeId< QAbstractSocket::SocketState > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QAbstractSocket::SocketState >("QAbstractSocket::SocketState", reinterpret_cast< QAbstractSocket::SocketState *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QAbstractSocket::SocketError > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QAbstractSocket::SocketError >("QAbstractSocket::SocketError", reinterpret_cast< QAbstractSocket::SocketError *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"
struct sockaddr;




class QHostAddressPrivate;

class  QIPv6Address
{
public:
inline quint8 &operator [](int index) { return c[index]; }
inline quint8 operator [](int index) const { return c[index]; }
quint8 c[16];
};

typedef QIPv6Address Q_IPV6ADDR;

class QHostAddress;

 uint qHash(const QHostAddress &key, uint seed = 0);

class  QHostAddress
{
public:
enum SpecialAddress {
Null,
Broadcast,
LocalHost,
LocalHostIPv6,
Any,
AnyIPv6,
AnyIPv4
};

QHostAddress();
explicit QHostAddress(quint32 ip4Addr);
explicit QHostAddress(quint8 *ip6Addr);
explicit QHostAddress(const Q_IPV6ADDR &ip6Addr);
explicit QHostAddress(const sockaddr *sockaddr);
explicit QHostAddress(const QString &address);
QHostAddress(const QHostAddress &copy);
QHostAddress(SpecialAddress address);
~QHostAddress();

QHostAddress &operator=(const QHostAddress &other);
QHostAddress &operator=(const QString &address);

void setAddress(quint32 ip4Addr);
void setAddress(quint8 *ip6Addr);
void setAddress(const Q_IPV6ADDR &ip6Addr);
void setAddress(const sockaddr *sockaddr);
bool setAddress(const QString &address);

QAbstractSocket::NetworkLayerProtocol protocol() const;
quint32 toIPv4Address() const;
Q_IPV6ADDR toIPv6Address() const;

QString toString() const;

QString scopeId() const;
void setScopeId(const QString &id);

bool operator ==(const QHostAddress &address) const;
bool operator ==(SpecialAddress address) const;
inline bool operator !=(const QHostAddress &address) const
{ return !operator==(address); }
inline bool operator !=(SpecialAddress address) const
{ return !operator==(address); }
bool isNull() const;
void clear();

bool isInSubnet(const QHostAddress &subnet, int netmask) const;
bool isInSubnet(const QPair<QHostAddress, int> &subnet) const;

bool isLoopback() const;

static QPair<QHostAddress, int> parseSubnet(const QString &subnet);

friend  uint qHash(const QHostAddress &key, uint seed);
protected:
QScopedPointer<QHostAddressPrivate> d;
};

inline bool operator ==(QHostAddress::SpecialAddress address1, const QHostAddress &address2)
{ return address2 == address1; }


# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"
 QDebug operator<<(QDebug, const QHostAddress &);



# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"
 QDataStream &operator<<(QDataStream &, const QHostAddress &);
 QDataStream &operator>>(QDataStream &, QHostAddress &);


# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"



template<typename T> class QList;

class QNetworkAddressEntryPrivate;
class  QNetworkAddressEntry
{
public:
QNetworkAddressEntry();
QNetworkAddressEntry(const QNetworkAddressEntry &other);
QNetworkAddressEntry &operator=(const QNetworkAddressEntry &other);
~QNetworkAddressEntry();

void swap(QNetworkAddressEntry &other) { qSwap(d, other.d); }

bool operator==(const QNetworkAddressEntry &other) const;
inline bool operator!=(const QNetworkAddressEntry &other) const
{ return !(*this == other); }

QHostAddress ip() const;
void setIp(const QHostAddress &newIp);

QHostAddress netmask() const;
void setNetmask(const QHostAddress &newNetmask);
int prefixLength() const;
void setPrefixLength(int length);

QHostAddress broadcast() const;
void setBroadcast(const QHostAddress &newBroadcast);

private:
QScopedPointer<QNetworkAddressEntryPrivate> d;
};

template<> class QTypeInfo<QNetworkAddressEntry > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkAddressEntry)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkAddressEntry) }; static inline const char *name() { return "QNetworkAddressEntry"; } }; template <> inline void qSwap<QNetworkAddressEntry>(QNetworkAddressEntry &value1, QNetworkAddressEntry &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkAddressEntry>(::QNetworkAddressEntry &value1, ::QNetworkAddressEntry &value2) { value1.swap(value2); } } 

class QNetworkInterfacePrivate;
class  QNetworkInterface
{
public:
enum InterfaceFlag {
IsUp = 0x1,
IsRunning = 0x2,
CanBroadcast = 0x4,
IsLoopBack = 0x8,
IsPointToPoint = 0x10,
CanMulticast = 0x20
};
typedef QFlags<InterfaceFlag> InterfaceFlags;

QNetworkInterface();
QNetworkInterface(const QNetworkInterface &other);
QNetworkInterface &operator=(const QNetworkInterface &other);
~QNetworkInterface();

void swap(QNetworkInterface &other) { qSwap(d, other.d); }

bool isValid() const;

int index() const;
QString name() const;
QString humanReadableName() const;
InterfaceFlags flags() const;
QString hardwareAddress() const;
QList<QNetworkAddressEntry> addressEntries() const;

static QNetworkInterface interfaceFromName(const QString &name);
static QNetworkInterface interfaceFromIndex(int index);
static QList<QNetworkInterface> allInterfaces();
static QList<QHostAddress> allAddresses();

private:
friend class QNetworkInterfacePrivate;
QSharedDataPointer<QNetworkInterfacePrivate> d;
};

template<> class QTypeInfo<QNetworkInterface > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkInterface)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkInterface) }; static inline const char *name() { return "QNetworkInterface"; } }; template <> inline void qSwap<QNetworkInterface>(QNetworkInterface &value1, QNetworkInterface &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkInterface>(::QNetworkInterface &value1, ::QNetworkInterface &value2) { value1.swap(value2); } } 

 inline QFlags<QNetworkInterface::InterfaceFlags::enum_type> operator|(QNetworkInterface::InterfaceFlags::enum_type f1, QNetworkInterface::InterfaceFlags::enum_type f2) { return QFlags<QNetworkInterface::InterfaceFlags::enum_type>(f1) | f2; }  inline QFlags<QNetworkInterface::InterfaceFlags::enum_type> operator|(QNetworkInterface::InterfaceFlags::enum_type f1, QFlags<QNetworkInterface::InterfaceFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QNetworkInterface::InterfaceFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"
 QDebug operator<<(QDebug debug, const QNetworkInterface &networkInterface);


# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"





# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkconfiguration.h"



































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"








# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"

# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"


class QNetworkSessionPrivate;
class  QNetworkSession : public QObject
{
Q_OBJECT

public:
enum State {
Invalid = 0,
NotAvailable,
Connecting,
Connected,
Closing,
Disconnected,
Roaming
};

enum SessionError {
UnknownSessionError = 0,
SessionAbortedError,
RoamingError,
OperationNotSupportedError,
InvalidConfigurationError
};

enum UsagePolicy {
NoPolicy = 0,
NoBackgroundTrafficPolicy = 1
};

typedef QFlags<UsagePolicy> UsagePolicies;

explicit QNetworkSession(const QNetworkConfiguration &connConfig, QObject *parent = 0);
virtual ~QNetworkSession();

bool isOpen() const;
QNetworkConfiguration configuration() const;

# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"
QNetworkInterface interface() const;


# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworksession.h"
State state() const;
SessionError error() const;
QString errorString() const;
QVariant sessionProperty(const QString &key) const;
void setSessionProperty(const QString &key, const QVariant &value);

quint64 bytesWritten() const;
quint64 bytesReceived() const;
quint64 activeTime() const;

QNetworkSession::UsagePolicies usagePolicies() const;

bool waitForOpened(int msecs = 30000);

public slots:
void open();
void close();
void stop();


void migrate();
void ignore();
void accept();
void reject();

signals:
void stateChanged(QNetworkSession::State);
void opened();
void closed();
void error(QNetworkSession::SessionError);
void preferredConfigurationChanged(const QNetworkConfiguration &config, bool isSeamless);
void newConfigurationActivated();
void usagePoliciesChanged(QNetworkSession::UsagePolicies usagePolicies);

protected:
virtual void connectNotify(const QMetaMethod &signal);
virtual void disconnectNotify(const QMetaMethod &signal);

private:
QNetworkSession(const QNetworkSession &) ; QNetworkSession &operator=(const QNetworkSession &) ;
friend class QNetworkSessionPrivate;
QNetworkSessionPrivate *d;
};


 template <> struct QMetaTypeId< QNetworkSession::State > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkSession::State >("QNetworkSession::State", reinterpret_cast< QNetworkSession::State *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QNetworkSession::SessionError > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkSession::SessionError >("QNetworkSession::SessionError", reinterpret_cast< QNetworkSession::SessionError *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QNetworkSession::UsagePolicies > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkSession::UsagePolicies >("QNetworkSession::UsagePolicies", reinterpret_cast< QNetworkSession::UsagePolicies *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 




# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qauthenticator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qauthenticator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qauthenticator.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qauthenticator.h"



class QAuthenticatorPrivate;
class QUrl;

class  QAuthenticator
{
public:
QAuthenticator();
~QAuthenticator();

QAuthenticator(const QAuthenticator &other);
QAuthenticator &operator=(const QAuthenticator &other);

bool operator==(const QAuthenticator &other) const;
inline bool operator!=(const QAuthenticator &other) const { return !operator==(other); }

QString user() const;
void setUser(const QString &user);

QString password() const;
void setPassword(const QString &password);

QString realm() const;

QVariant option(const QString &opt) const;
QVariantHash options() const;
void setOption(const QString &opt, const QVariant &value);

bool isNull() const;
void detach();
private:
friend class QAuthenticatorPrivate;
QAuthenticatorPrivate *d;
};




# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qdnslookup.h"


class QHostAddress;
class QDnsLookupPrivate;
class QDnsDomainNameRecordPrivate;
class QDnsHostAddressRecordPrivate;
class QDnsMailExchangeRecordPrivate;
class QDnsServiceRecordPrivate;
class QDnsTextRecordPrivate;

class  QDnsDomainNameRecord
{
public:
QDnsDomainNameRecord();
QDnsDomainNameRecord(const QDnsDomainNameRecord &other);
~QDnsDomainNameRecord();

void swap(QDnsDomainNameRecord &other) { qSwap(d, other.d); }

QString name() const;
quint32 timeToLive() const;
QString value() const;

QDnsDomainNameRecord &operator=(const QDnsDomainNameRecord &other);

private:
QSharedDataPointer<QDnsDomainNameRecordPrivate> d;
friend class QDnsLookupRunnable;
};

template<> class QTypeInfo<QDnsDomainNameRecord > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDnsDomainNameRecord)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDnsDomainNameRecord) }; static inline const char *name() { return "QDnsDomainNameRecord"; } }; template <> inline void qSwap<QDnsDomainNameRecord>(QDnsDomainNameRecord &value1, QDnsDomainNameRecord &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDnsDomainNameRecord>(::QDnsDomainNameRecord &value1, ::QDnsDomainNameRecord &value2) { value1.swap(value2); } } 

class  QDnsHostAddressRecord
{
public:
QDnsHostAddressRecord();
QDnsHostAddressRecord(const QDnsHostAddressRecord &other);
~QDnsHostAddressRecord();

void swap(QDnsHostAddressRecord &other) { qSwap(d, other.d); }

QString name() const;
quint32 timeToLive() const;
QHostAddress value() const;

QDnsHostAddressRecord &operator=(const QDnsHostAddressRecord &other);

private:
QSharedDataPointer<QDnsHostAddressRecordPrivate> d;
friend class QDnsLookupRunnable;
};

template<> class QTypeInfo<QDnsHostAddressRecord > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDnsHostAddressRecord)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDnsHostAddressRecord) }; static inline const char *name() { return "QDnsHostAddressRecord"; } }; template <> inline void qSwap<QDnsHostAddressRecord>(QDnsHostAddressRecord &value1, QDnsHostAddressRecord &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDnsHostAddressRecord>(::QDnsHostAddressRecord &value1, ::QDnsHostAddressRecord &value2) { value1.swap(value2); } } 

class  QDnsMailExchangeRecord
{
public:
QDnsMailExchangeRecord();
QDnsMailExchangeRecord(const QDnsMailExchangeRecord &other);
~QDnsMailExchangeRecord();

void swap(QDnsMailExchangeRecord &other) { qSwap(d, other.d); }

QString exchange() const;
QString name() const;
quint16 preference() const;
quint32 timeToLive() const;

QDnsMailExchangeRecord &operator=(const QDnsMailExchangeRecord &other);

private:
QSharedDataPointer<QDnsMailExchangeRecordPrivate> d;
friend class QDnsLookupRunnable;
};

template<> class QTypeInfo<QDnsMailExchangeRecord > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDnsMailExchangeRecord)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDnsMailExchangeRecord) }; static inline const char *name() { return "QDnsMailExchangeRecord"; } }; template <> inline void qSwap<QDnsMailExchangeRecord>(QDnsMailExchangeRecord &value1, QDnsMailExchangeRecord &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDnsMailExchangeRecord>(::QDnsMailExchangeRecord &value1, ::QDnsMailExchangeRecord &value2) { value1.swap(value2); } } 

class  QDnsServiceRecord
{
public:
QDnsServiceRecord();
QDnsServiceRecord(const QDnsServiceRecord &other);
~QDnsServiceRecord();

void swap(QDnsServiceRecord &other) { qSwap(d, other.d); }

QString name() const;
quint16 port() const;
quint16 priority() const;
QString target() const;
quint32 timeToLive() const;
quint16 weight() const;

QDnsServiceRecord &operator=(const QDnsServiceRecord &other);

private:
QSharedDataPointer<QDnsServiceRecordPrivate> d;
friend class QDnsLookupRunnable;
};

template<> class QTypeInfo<QDnsServiceRecord > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDnsServiceRecord)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDnsServiceRecord) }; static inline const char *name() { return "QDnsServiceRecord"; } }; template <> inline void qSwap<QDnsServiceRecord>(QDnsServiceRecord &value1, QDnsServiceRecord &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDnsServiceRecord>(::QDnsServiceRecord &value1, ::QDnsServiceRecord &value2) { value1.swap(value2); } } 

class  QDnsTextRecord
{
public:
QDnsTextRecord();
QDnsTextRecord(const QDnsTextRecord &other);
~QDnsTextRecord();

void swap(QDnsTextRecord &other) { qSwap(d, other.d); }

QString name() const;
quint32 timeToLive() const;
QList<QByteArray> values() const;

QDnsTextRecord &operator=(const QDnsTextRecord &other);

private:
QSharedDataPointer<QDnsTextRecordPrivate> d;
friend class QDnsLookupRunnable;
};

template<> class QTypeInfo<QDnsTextRecord > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QDnsTextRecord)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDnsTextRecord) }; static inline const char *name() { return "QDnsTextRecord"; } }; template <> inline void qSwap<QDnsTextRecord>(QDnsTextRecord &value1, QDnsTextRecord &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QDnsTextRecord>(::QDnsTextRecord &value1, ::QDnsTextRecord &value2) { value1.swap(value2); } } 

class  QDnsLookup : public QObject
{
Q_OBJECT
Q_ENUMS(Error Type)
Q_PROPERTY(Error error READ error NOTIFY finished)
Q_PROPERTY(QString errorString READ errorString NOTIFY finished)
Q_PROPERTY(QString name READ name WRITE setName NOTIFY nameChanged)
Q_PROPERTY(Type type READ type WRITE setType NOTIFY typeChanged)

public:
enum Error
{
NoError = 0,
ResolverError,
OperationCancelledError,
InvalidRequestError,
InvalidReplyError,
ServerFailureError,
ServerRefusedError,
NotFoundError
};

enum Type
{
A = 1,
AAAA = 28,
ANY = 255,
CNAME = 5,
MX = 15,
NS = 2,
PTR = 12,
SRV = 33,
TXT = 16
};

explicit QDnsLookup(QObject *parent = 0);
QDnsLookup(Type type, const QString &name, QObject *parent = 0);
~QDnsLookup();

Error error() const;
QString errorString() const;
bool isFinished() const;

QString name() const;
void setName(const QString &name);

Type type() const;
void setType(QDnsLookup::Type);

QList<QDnsDomainNameRecord> canonicalNameRecords() const;
QList<QDnsHostAddressRecord> hostAddressRecords() const;
QList<QDnsMailExchangeRecord> mailExchangeRecords() const;
QList<QDnsDomainNameRecord> nameServerRecords() const;
QList<QDnsDomainNameRecord> pointerRecords() const;
QList<QDnsServiceRecord> serviceRecords() const;
QList<QDnsTextRecord> textRecords() const;


public slots:
void abort();
void lookup();

signals:
void finished();
void nameChanged(const QString &name);
void typeChanged(Type type);

private:
inline QDnsLookupPrivate* d_func() { return reinterpret_cast<QDnsLookupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDnsLookupPrivate* d_func() const { return reinterpret_cast<const QDnsLookupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDnsLookupPrivate;

};




# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"



















































































































































# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostinfo.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"



















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostinfo.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostinfo.h"



class QObject;
class QHostInfoPrivate;

class  QHostInfo
{
public:
enum HostInfoError {
NoError,
HostNotFound,
UnknownError
};

explicit QHostInfo(int lookupId = -1);
QHostInfo(const QHostInfo &d);
QHostInfo &operator=(const QHostInfo &d);
~QHostInfo();

QString hostName() const;
void setHostName(const QString &name);

QList<QHostAddress> addresses() const;
void setAddresses(const QList<QHostAddress> &addresses);

HostInfoError error() const;
void setError(HostInfoError error);

QString errorString() const;
void setErrorString(const QString &errorString);

void setLookupId(int id);
int lookupId() const;

static int lookupHost(const QString &name, QObject *receiver, const char *member);
static void abortHostLookup(int lookupId);

static QHostInfo fromName(const QString &name);
static QString localHostName();
static QString localDomainName();

private:
QScopedPointer<QHostInfoPrivate> d;
};



 template <> struct QMetaTypeId< QHostInfo > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QHostInfo >("QHostInfo", reinterpret_cast< QHostInfo *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkinterface.h"












































































































































# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"



















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkrequest.h"
































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"



class QUrl;
class QNetworkConfiguration;

class QNetworkProxyQueryPrivate;
class  QNetworkProxyQuery
{
public:
enum QueryType {
TcpSocket,
UdpSocket,
TcpServer = 100,
UrlRequest
};

QNetworkProxyQuery();
explicit QNetworkProxyQuery(const QUrl &requestUrl, QueryType queryType = UrlRequest);
QNetworkProxyQuery(const QString &hostname, int port, const QString &protocolTag = QString(),
QueryType queryType = TcpSocket);
explicit QNetworkProxyQuery(quint16 bindPort, const QString &protocolTag = QString(),
QueryType queryType = TcpServer);
QNetworkProxyQuery(const QNetworkProxyQuery &other);

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"
QNetworkProxyQuery(const QNetworkConfiguration &networkConfiguration,
const QUrl &requestUrl, QueryType queryType = UrlRequest);
QNetworkProxyQuery(const QNetworkConfiguration &networkConfiguration,
const QString &hostname, int port, const QString &protocolTag = QString(),
QueryType queryType = TcpSocket);
QNetworkProxyQuery(const QNetworkConfiguration &networkConfiguration,
quint16 bindPort, const QString &protocolTag = QString(),
QueryType queryType = TcpServer);

# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"
~QNetworkProxyQuery();
QNetworkProxyQuery &operator=(const QNetworkProxyQuery &other);

void swap(QNetworkProxyQuery &other) { qSwap(d, other.d); }

bool operator==(const QNetworkProxyQuery &other) const;
inline bool operator!=(const QNetworkProxyQuery &other) const
{ return !(*this == other); }

QueryType queryType() const;
void setQueryType(QueryType type);

int peerPort() const;
void setPeerPort(int port);

QString peerHostName() const;
void setPeerHostName(const QString &hostname);

int localPort() const;
void setLocalPort(int port);

QString protocolTag() const;
void setProtocolTag(const QString &protocolTag);

QUrl url() const;
void setUrl(const QUrl &url);


# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"
QNetworkConfiguration networkConfiguration() const;
void setNetworkConfiguration(const QNetworkConfiguration &networkConfiguration);


# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"
private:
QSharedDataPointer<QNetworkProxyQueryPrivate> d;
};

template<> class QTypeInfo<QNetworkProxyQuery > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkProxyQuery)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkProxyQuery) }; static inline const char *name() { return "QNetworkProxyQuery"; } }; template <> inline void qSwap<QNetworkProxyQuery>(QNetworkProxyQuery &value1, QNetworkProxyQuery &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkProxyQuery>(::QNetworkProxyQuery &value1, ::QNetworkProxyQuery &value2) { value1.swap(value2); } } 

class QNetworkProxyPrivate;

class  QNetworkProxy
{
public:
enum ProxyType {
DefaultProxy,
Socks5Proxy,
NoProxy,
HttpProxy,
HttpCachingProxy,
FtpCachingProxy
};

enum Capability {
TunnelingCapability = 0x0001,
ListeningCapability = 0x0002,
UdpTunnelingCapability = 0x0004,
CachingCapability = 0x0008,
HostNameLookupCapability = 0x0010
};
typedef QFlags<Capability> Capabilities;

QNetworkProxy();
QNetworkProxy(ProxyType type, const QString &hostName = QString(), quint16 port = 0,
const QString &user = QString(), const QString &password = QString());
QNetworkProxy(const QNetworkProxy &other);
QNetworkProxy &operator=(const QNetworkProxy &other);
~QNetworkProxy();

void swap(QNetworkProxy &other) { qSwap(d, other.d); }

bool operator==(const QNetworkProxy &other) const;
inline bool operator!=(const QNetworkProxy &other) const
{ return !(*this == other); }

void setType(QNetworkProxy::ProxyType type);
QNetworkProxy::ProxyType type() const;

void setCapabilities(Capabilities capab);
Capabilities capabilities() const;
bool isCachingProxy() const;
bool isTransparentProxy() const;

void setUser(const QString &userName);
QString user() const;

void setPassword(const QString &password);
QString password() const;

void setHostName(const QString &hostName);
QString hostName() const;

void setPort(quint16 port);
quint16 port() const;

static void setApplicationProxy(const QNetworkProxy &proxy);
static QNetworkProxy applicationProxy();


QVariant header(QNetworkRequest::KnownHeaders header) const;
void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value);


bool hasRawHeader(const QByteArray &headerName) const;
QList<QByteArray> rawHeaderList() const;
QByteArray rawHeader(const QByteArray &headerName) const;
void setRawHeader(const QByteArray &headerName, const QByteArray &value);

private:
QSharedDataPointer<QNetworkProxyPrivate> d;
};

template<> class QTypeInfo<QNetworkProxy > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QNetworkProxy)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QNetworkProxy) }; static inline const char *name() { return "QNetworkProxy"; } }; template <> inline void qSwap<QNetworkProxy>(QNetworkProxy &value1, QNetworkProxy &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QNetworkProxy>(::QNetworkProxy &value1, ::QNetworkProxy &value2) { value1.swap(value2); } } 
 inline QFlags<QNetworkProxy::Capabilities::enum_type> operator|(QNetworkProxy::Capabilities::enum_type f1, QNetworkProxy::Capabilities::enum_type f2) { return QFlags<QNetworkProxy::Capabilities::enum_type>(f1) | f2; }  inline QFlags<QNetworkProxy::Capabilities::enum_type> operator|(QNetworkProxy::Capabilities::enum_type f1, QFlags<QNetworkProxy::Capabilities::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QNetworkProxy::Capabilities::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class  QNetworkProxyFactory
{
public:
QNetworkProxyFactory();
virtual ~QNetworkProxyFactory();

virtual QList<QNetworkProxy> queryProxy(const QNetworkProxyQuery &query = QNetworkProxyQuery()) = 0;

static void setUseSystemConfiguration(bool enable);
static void setApplicationProxyFactory(QNetworkProxyFactory *factory);
static QList<QNetworkProxy> proxyForQuery(const QNetworkProxyQuery &query);
static QList<QNetworkProxy> systemProxyForQuery(const QNetworkProxyQuery &query = QNetworkProxyQuery());
};


# 214 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"
 QDebug operator<<(QDebug debug, const QNetworkProxy &proxy);


# 217 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkproxy.h"


 template <> struct QMetaTypeId< QNetworkProxy > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QNetworkProxy >("QNetworkProxy", reinterpret_cast< QNetworkProxy *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 




# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



















































































































































































































































# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalserver.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalserver.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalserver.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalserver.h"
class QLocalSocket;
class QLocalServerPrivate;

class  QLocalServer : public QObject
{
Q_OBJECT
inline QLocalServerPrivate* d_func() { return reinterpret_cast<QLocalServerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLocalServerPrivate* d_func() const { return reinterpret_cast<const QLocalServerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLocalServerPrivate;
Q_PROPERTY(SocketOptions socketOptions READ socketOptions WRITE setSocketOptions)


signals:
void newConnection();

public:
enum SocketOption {
NoOptions = 0x0,
UserAccessOption = 0x01,
GroupAccessOption = 0x2,
OtherAccessOption = 0x4,
WorldAccessOption = 0x7
};
typedef QFlags<SocketOption> SocketOptions;

explicit QLocalServer(QObject *parent = 0);
~QLocalServer();

void close();
QString errorString() const;
virtual bool hasPendingConnections() const;
bool isListening() const;
bool listen(const QString &name);
bool listen(qintptr socketDescriptor);
int maxPendingConnections() const;
virtual QLocalSocket *nextPendingConnection();
QString serverName() const;
QString fullServerName() const;
static bool removeServer(const QString &name);
QAbstractSocket::SocketError serverError() const;
void setMaxPendingConnections(int numConnections);
bool waitForNewConnection(int msec = 0, bool *timedOut = 0);

void setSocketOptions(SocketOptions options);
SocketOptions socketOptions() const;

protected:
virtual void incomingConnection(quintptr socketDescriptor);

private:
QLocalServer(const QLocalServer &) ; QLocalServer &operator=(const QLocalServer &) ;

};

 inline QFlags<QLocalServer::SocketOptions::enum_type> operator|(QLocalServer::SocketOptions::enum_type f1, QLocalServer::SocketOptions::enum_type f2) { return QFlags<QLocalServer::SocketOptions::enum_type>(f1) | f2; }  inline QFlags<QLocalServer::SocketOptions::enum_type> operator|(QLocalServer::SocketOptions::enum_type f1, QFlags<QLocalServer::SocketOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QLocalServer::SocketOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalserver.h"




# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"
class QLocalSocketPrivate;

class  QLocalSocket : public QIODevice
{
Q_OBJECT
inline QLocalSocketPrivate* d_func() { return reinterpret_cast<QLocalSocketPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLocalSocketPrivate* d_func() const { return reinterpret_cast<const QLocalSocketPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLocalSocketPrivate;

public:
enum LocalSocketError
{
ConnectionRefusedError = QAbstractSocket::ConnectionRefusedError,
PeerClosedError = QAbstractSocket::RemoteHostClosedError,
ServerNotFoundError = QAbstractSocket::HostNotFoundError,
SocketAccessError = QAbstractSocket::SocketAccessError,
SocketResourceError = QAbstractSocket::SocketResourceError,
SocketTimeoutError = QAbstractSocket::SocketTimeoutError,
DatagramTooLargeError = QAbstractSocket::DatagramTooLargeError,
ConnectionError = QAbstractSocket::NetworkError,
UnsupportedSocketOperationError = QAbstractSocket::UnsupportedSocketOperationError,
UnknownSocketError = QAbstractSocket::UnknownSocketError,
OperationError = QAbstractSocket::OperationError
};

enum LocalSocketState
{
UnconnectedState = QAbstractSocket::UnconnectedState,
ConnectingState = QAbstractSocket::ConnectingState,
ConnectedState = QAbstractSocket::ConnectedState,
ClosingState = QAbstractSocket::ClosingState
};

QLocalSocket(QObject *parent = 0);
~QLocalSocket();

void connectToServer(OpenMode openMode = ReadWrite);
void connectToServer(const QString &name, OpenMode openMode = ReadWrite);
void disconnectFromServer();

void setServerName(const QString &name);
QString serverName() const;
QString fullServerName() const;

void abort();
virtual bool isSequential() const;
virtual qint64 bytesAvailable() const;
virtual qint64 bytesToWrite() const;
virtual bool canReadLine() const;
virtual bool open(OpenMode openMode = ReadWrite) ;
virtual void close();
LocalSocketError error() const;
bool flush();
bool isValid() const;
qint64 readBufferSize() const;
void setReadBufferSize(qint64 size);

bool setSocketDescriptor(qintptr socketDescriptor,
LocalSocketState socketState = ConnectedState,
OpenMode openMode = ReadWrite);
qintptr socketDescriptor() const;

LocalSocketState state() const;
bool waitForBytesWritten(int msecs = 30000);
bool waitForConnected(int msecs = 30000);
bool waitForDisconnected(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);

signals:
void connected();
void disconnected();
void error(QLocalSocket::LocalSocketError socketError);
void stateChanged(QLocalSocket::LocalSocketState socketState);

protected:
virtual qint64 readData(char*, qint64);
virtual qint64 writeData(const char*, qint64);

private:
QLocalSocket(const QLocalSocket &) ; QLocalSocket &operator=(const QLocalSocket &) ;








# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"





# 144 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"
};


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"

# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"
 QDebug operator<<(QDebug, QLocalSocket::LocalSocketError);
 QDebug operator<<(QDebug, QLocalSocket::LocalSocketState);




# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qlocalsocket.h"



# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"



















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"



class QTcpServerPrivate;

# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"
class QNetworkProxy;

# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"
class QTcpSocket;

class  QTcpServer : public QObject
{
Q_OBJECT
public:
explicit QTcpServer(QObject *parent = 0);
virtual ~QTcpServer();

bool listen(const QHostAddress &address = QHostAddress::Any, quint16 port = 0);
void close();

bool isListening() const;

void setMaxPendingConnections(int numConnections);
int maxPendingConnections() const;

quint16 serverPort() const;
QHostAddress serverAddress() const;

qintptr socketDescriptor() const;
bool setSocketDescriptor(qintptr socketDescriptor);

bool waitForNewConnection(int msec = 0, bool *timedOut = 0);
virtual bool hasPendingConnections() const;
virtual QTcpSocket *nextPendingConnection();

QAbstractSocket::SocketError serverError() const;
QString errorString() const;

void pauseAccepting();
void resumeAccepting();


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"
void setProxy(const QNetworkProxy &networkProxy);
QNetworkProxy proxy() const;


# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpserver.h"
protected:
virtual void incomingConnection(qintptr handle);
void addPendingConnection(QTcpSocket* socket);

signals:
void newConnection();
void acceptError(QAbstractSocket::SocketError socketError);

private:
QTcpServer(const QTcpServer &) ; QTcpServer &operator=(const QTcpServer &) ;
inline QTcpServerPrivate* d_func() { return reinterpret_cast<QTcpServerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTcpServerPrivate* d_func() const { return reinterpret_cast<const QTcpServerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTcpServerPrivate;
};




# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpsocket.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpsocket.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpsocket.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpsocket.h"



class QTcpSocketPrivate;

class  QTcpSocket : public QAbstractSocket
{
Q_OBJECT
public:
explicit QTcpSocket(QObject *parent = 0);
virtual ~QTcpSocket();

protected:
QTcpSocket(QTcpSocketPrivate &dd, QObject *parent = 0);

private:
QTcpSocket(const QTcpSocket &) ; QTcpSocket &operator=(const QTcpSocket &) ;
inline QTcpSocketPrivate* d_func() { return reinterpret_cast<QTcpSocketPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTcpSocketPrivate* d_func() const { return reinterpret_cast<const QTcpSocketPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTcpSocketPrivate;
};




# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qabstractsocket.h"



















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qhostaddress.h"



















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"
class QNetworkInterface;
class QUdpSocketPrivate;

class  QUdpSocket : public QAbstractSocket
{
Q_OBJECT
public:
explicit QUdpSocket(QObject *parent = 0);
virtual ~QUdpSocket();


# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"
bool joinMulticastGroup(const QHostAddress &groupAddress);
bool joinMulticastGroup(const QHostAddress &groupAddress,
const QNetworkInterface &iface);
bool leaveMulticastGroup(const QHostAddress &groupAddress);
bool leaveMulticastGroup(const QHostAddress &groupAddress,
const QNetworkInterface &iface);

QNetworkInterface multicastInterface() const;
void setMulticastInterface(const QNetworkInterface &iface);


# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"
bool hasPendingDatagrams() const;
qint64 pendingDatagramSize() const;
qint64 readDatagram(char *data, qint64 maxlen, QHostAddress *host = 0, quint16 *port = 0);
qint64 writeDatagram(const char *data, qint64 len, const QHostAddress &host, quint16 port);
inline qint64 writeDatagram(const QByteArray &datagram, const QHostAddress &host, quint16 port)
{ return writeDatagram(datagram.constData(), datagram.size(), host, port); }

private:
QUdpSocket(const QUdpSocket &) ; QUdpSocket &operator=(const QUdpSocket &) ;
inline QUdpSocketPrivate* d_func() { return reinterpret_cast<QUdpSocketPrivate *>(qGetPtrHelper(d_ptr)); } inline const QUdpSocketPrivate* d_func() const { return reinterpret_cast<const QUdpSocketPrivate *>(qGetPtrHelper(d_ptr)); } friend class QUdpSocketPrivate;
};



# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qudpsocket.h"



# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qflags.h"









































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QFlags"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"



namespace QSsl {
enum KeyType {
PrivateKey,
PublicKey
};

enum EncodingFormat {
Pem,
Der
};

enum KeyAlgorithm {
Opaque,
Rsa,
Dsa
};

enum AlternativeNameEntryType {
EmailEntry,
DnsEntry
};





# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"
enum SslProtocol {
SslV3,
SslV2,
TlsV1_0,



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"
TlsV1_1,
TlsV1_2,
AnyProtocol,
TlsV1SslV3,
SecureProtocols,
UnknownProtocol = -1
};

enum SslOption {
SslOptionDisableEmptyFragments = 0x01,
SslOptionDisableSessionTickets = 0x02,
SslOptionDisableCompression = 0x04,
SslOptionDisableServerNameIndication = 0x08,
SslOptionDisableLegacyRenegotiation = 0x10
};
typedef QFlags<SslOption> SslOptions;
}

 inline QFlags<QSsl::SslOptions::enum_type> operator|(QSsl::SslOptions::enum_type f1, QSsl::SslOptions::enum_type f2) { return QFlags<QSsl::SslOptions::enum_type>(f1) | f2; }  inline QFlags<QSsl::SslOptions::enum_type> operator|(QSsl::SslOptions::enum_type f1, QFlags<QSsl::SslOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSsl::SslOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcryptographichash.h"


























































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"













































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"






































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"











































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"




# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"


class QDateTime;
class QIODevice;
class QSslError;
class QSslKey;
class QSslCertificateExtension;
class QStringList;

class QSslCertificatePrivate;
class  QSslCertificate
{
public:
enum SubjectInfo {
Organization,
CommonName,
LocalityName,
OrganizationalUnitName,
CountryName,
StateOrProvinceName,
DistinguishedNameQualifier,
SerialNumber,
EmailAddress
};

explicit QSslCertificate(QIODevice *device, QSsl::EncodingFormat format = QSsl::Pem);
explicit QSslCertificate(const QByteArray &data = QByteArray(), QSsl::EncodingFormat format = QSsl::Pem);
QSslCertificate(const QSslCertificate &other);
~QSslCertificate();
QSslCertificate &operator=(const QSslCertificate &other);

inline void swap(QSslCertificate &other)
{ qSwap(d, other.d); }

bool operator==(const QSslCertificate &other) const;
inline bool operator!=(const QSslCertificate &other) const { return !operator==(other); }

bool isNull() const;








# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"
bool isBlacklisted() const;
void clear();


QByteArray version() const;
QByteArray serialNumber() const;
QByteArray digest(QCryptographicHash::Algorithm algorithm = QCryptographicHash::Md5) const;
QStringList issuerInfo(SubjectInfo info) const;
QStringList issuerInfo(const QByteArray &attribute) const;
QStringList subjectInfo(SubjectInfo info) const;
QStringList subjectInfo(const QByteArray &attribute) const;
QList<QByteArray> subjectInfoAttributes() const;
QList<QByteArray> issuerInfoAttributes() const;




# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"
QMultiMap<QSsl::AlternativeNameEntryType, QString> subjectAlternativeNames() const;
QDateTime effectiveDate() const;
QDateTime expiryDate() const;
QSslKey publicKey() const;
QList<QSslCertificateExtension> extensions() const;

QByteArray toPem() const;
QByteArray toDer() const;
QString toText() const;

static QList<QSslCertificate> fromPath(
const QString &path, QSsl::EncodingFormat format = QSsl::Pem,
QRegExp::PatternSyntax syntax = QRegExp::FixedString);
static QList<QSslCertificate> fromDevice(
QIODevice *device, QSsl::EncodingFormat format = QSsl::Pem);
static QList<QSslCertificate> fromData(
const QByteArray &data, QSsl::EncodingFormat format = QSsl::Pem);

static QList<QSslError> verify(QList<QSslCertificate> certificateChain, const QString &hostName = QString());

Qt::HANDLE handle() const;

private:
QExplicitlySharedDataPointer<QSslCertificatePrivate> d;
friend class QSslCertificatePrivate;
friend class QSslSocketBackendPrivate;
};
template<> class QTypeInfo<QSslCertificate > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSslCertificate)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSslCertificate) }; static inline const char *name() { return "QSslCertificate"; } }; template <> inline void qSwap<QSslCertificate>(QSslCertificate &value1, QSslCertificate &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QSslCertificate>(::QSslCertificate &value1, ::QSslCertificate &value2) { value1.swap(value2); } } 


# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslCertificate &certificate);
 QDebug operator<<(QDebug debug, QSslCertificate::SubjectInfo info);


# 159 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"


 template <> struct QMetaTypeId< QSslCertificate > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QSslCertificate >("QSslCertificate", reinterpret_cast< QSslCertificate *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 




# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"
class QSslCertificateExtensionPrivate;

class  QSslCertificateExtension
{
public:
QSslCertificateExtension();
QSslCertificateExtension(const QSslCertificateExtension &other);
~QSslCertificateExtension();

QSslCertificateExtension &operator=(const QSslCertificateExtension &other);

void swap(QSslCertificateExtension &other) { qSwap(d, other.d); }

QString oid() const;
QString name() const;
QVariant value() const;
bool isCritical() const;

bool isSupported() const;

private:
friend class QSslCertificatePrivate;
QSharedDataPointer<QSslCertificateExtensionPrivate> d;
};

template<> class QTypeInfo<QSslCertificateExtension > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSslCertificateExtension)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSslCertificateExtension) }; static inline const char *name() { return "QSslCertificateExtension"; } }; template <> inline void qSwap<QSslCertificateExtension>(QSslCertificateExtension &value1, QSslCertificateExtension &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QSslCertificateExtension>(::QSslCertificateExtension &value1, ::QSslCertificateExtension &value2) { value1.swap(value2); } } 



# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificateextension.h"






# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"











































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"
class QSslCipherPrivate;
class  QSslCipher
{
public:
QSslCipher();
QSslCipher(const QString &name, QSsl::SslProtocol protocol);
QSslCipher(const QSslCipher &other);
~QSslCipher();
QSslCipher &operator=(const QSslCipher &other);

inline void swap(QSslCipher &other)
{ qSwap(d, other.d); }

bool operator==(const QSslCipher &other) const;
inline bool operator!=(const QSslCipher &other) const { return !operator==(other); }

bool isNull() const;
QString name() const;
int supportedBits() const;
int usedBits() const;

QString keyExchangeMethod() const;
QString authenticationMethod() const;
QString encryptionMethod() const;
QString protocolString() const;
QSsl::SslProtocol protocol() const;

private:
QScopedPointer<QSslCipherPrivate> d;
friend class QSslSocketBackendPrivate;
};

template<> class QTypeInfo<QSslCipher > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSslCipher)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSslCipher) }; static inline const char *name() { return "QSslCipher"; } }; template <> inline void qSwap<QSslCipher>(QSslCipher &value1, QSslCipher &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QSslCipher>(::QSslCipher &value1, ::QSslCipher &value2) { value1.swap(value2); } } 


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslCipher &cipher);




# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcipher.h"




# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslconfiguration.h"



























































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslconfiguration.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qregexp.h"






































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtcpsocket.h"






































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslcertificate.h"





































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"
class QSslErrorPrivate;
class  QSslError
{
public:
enum SslError {
NoError,
UnableToGetIssuerCertificate,
UnableToDecryptCertificateSignature,
UnableToDecodeIssuerPublicKey,
CertificateSignatureFailed,
CertificateNotYetValid,
CertificateExpired,
InvalidNotBeforeField,
InvalidNotAfterField,
SelfSignedCertificate,
SelfSignedCertificateInChain,
UnableToGetLocalIssuerCertificate,
UnableToVerifyFirstCertificate,
CertificateRevoked,
InvalidCaCertificate,
PathLengthExceeded,
InvalidPurpose,
CertificateUntrusted,
CertificateRejected,
SubjectIssuerMismatch, 
AuthorityIssuerSerialNumberMismatch,
NoPeerCertificate,
HostNameMismatch,
NoSslSupport,
CertificateBlacklisted,
UnspecifiedError = -1
};



QSslError();
QSslError(SslError error);
QSslError(SslError error, const QSslCertificate &certificate);

QSslError(const QSslError &other);

inline void swap(QSslError &other)
{ qSwap(d, other.d); }

~QSslError();
QSslError &operator=(const QSslError &other);
bool operator==(const QSslError &other) const;
inline bool operator!=(const QSslError &other) const
{ return !(*this == other); }

SslError error() const;
QString errorString() const;
QSslCertificate certificate() const;

private:
QScopedPointer<QSslErrorPrivate> d;
};
template<> class QTypeInfo<QSslError > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSslError)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSslError) }; static inline const char *name() { return "QSslError"; } }; template <> inline void qSwap<QSslError>(QSslError &value1, QSslError &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QSslError>(::QSslError &value1, ::QSslError &value2) { value1.swap(value2); } } 


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslError &error);
 QDebug operator<<(QDebug debug, const QSslError::SslError &error);




# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"



# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"
 template <> struct QMetaTypeId< QList<QSslError> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QList<QSslError> >("QList<QSslError>", reinterpret_cast< QList<QSslError> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"



# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"
class QDir;
class QSslCipher;
class QSslCertificate;
class QSslConfiguration;

class QSslSocketPrivate;
class  QSslSocket : public QTcpSocket
{
Q_OBJECT
public:
enum SslMode {
UnencryptedMode,
SslClientMode,
SslServerMode
};

enum PeerVerifyMode {
VerifyNone,
QueryPeer,
VerifyPeer,
AutoVerifyPeer
};

explicit QSslSocket(QObject *parent = 0);
~QSslSocket();
void resume(); 


void connectToHostEncrypted(const QString &hostName, quint16 port, OpenMode mode = ReadWrite, NetworkLayerProtocol protocol = AnyIPProtocol);
void connectToHostEncrypted(const QString &hostName, quint16 port, const QString &sslPeerName, OpenMode mode = ReadWrite, NetworkLayerProtocol protocol = AnyIPProtocol);
bool setSocketDescriptor(qintptr socketDescriptor, SocketState state = ConnectedState,
OpenMode openMode = ReadWrite);

using QAbstractSocket::connectToHost;
void connectToHost(const QString &hostName, quint16 port, OpenMode openMode = ReadWrite, NetworkLayerProtocol protocol = AnyIPProtocol);
void disconnectFromHost();

virtual void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &value);
virtual QVariant socketOption(QAbstractSocket::SocketOption option);

SslMode mode() const;
bool isEncrypted() const;

QSsl::SslProtocol protocol() const;
void setProtocol(QSsl::SslProtocol protocol);

QSslSocket::PeerVerifyMode peerVerifyMode() const;
void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode);

int peerVerifyDepth() const;
void setPeerVerifyDepth(int depth);

QString peerVerifyName() const;
void setPeerVerifyName(const QString &hostName);


qint64 bytesAvailable() const;
qint64 bytesToWrite() const;
bool canReadLine() const;
void close();
bool atEnd() const;
bool flush();
void abort();


void setReadBufferSize(qint64 size);


qint64 encryptedBytesAvailable() const;
qint64 encryptedBytesToWrite() const;


QSslConfiguration sslConfiguration() const;
void setSslConfiguration(const QSslConfiguration &config);


void setLocalCertificateChain(const QList<QSslCertificate> &localChain);
QList<QSslCertificate> localCertificateChain() const;

void setLocalCertificate(const QSslCertificate &certificate);
void setLocalCertificate(const QString &fileName, QSsl::EncodingFormat format = QSsl::Pem);
QSslCertificate localCertificate() const;
QSslCertificate peerCertificate() const;
QList<QSslCertificate> peerCertificateChain() const;
QSslCipher sessionCipher() const;


void setPrivateKey(const QSslKey &key);
void setPrivateKey(const QString &fileName, QSsl::KeyAlgorithm algorithm = QSsl::Rsa,
QSsl::EncodingFormat format = QSsl::Pem,
const QByteArray &passPhrase = QByteArray());
QSslKey privateKey() const;


QList<QSslCipher> ciphers() const;
void setCiphers(const QList<QSslCipher> &ciphers);
void setCiphers(const QString &ciphers);
static void setDefaultCiphers(const QList<QSslCipher> &ciphers);
static QList<QSslCipher> defaultCiphers();
static QList<QSslCipher> supportedCiphers();


bool addCaCertificates(const QString &path, QSsl::EncodingFormat format = QSsl::Pem,
QRegExp::PatternSyntax syntax = QRegExp::FixedString);
void addCaCertificate(const QSslCertificate &certificate);
void addCaCertificates(const QList<QSslCertificate> &certificates);
void setCaCertificates(const QList<QSslCertificate> &certificates);
QList<QSslCertificate> caCertificates() const;
static bool addDefaultCaCertificates(const QString &path, QSsl::EncodingFormat format = QSsl::Pem,
QRegExp::PatternSyntax syntax = QRegExp::FixedString);
static void addDefaultCaCertificate(const QSslCertificate &certificate);
static void addDefaultCaCertificates(const QList<QSslCertificate> &certificates);
static void setDefaultCaCertificates(const QList<QSslCertificate> &certificates);
static QList<QSslCertificate> defaultCaCertificates();
static QList<QSslCertificate> systemCaCertificates();

bool waitForConnected(int msecs = 30000);
bool waitForEncrypted(int msecs = 30000);
bool waitForReadyRead(int msecs = 30000);
bool waitForBytesWritten(int msecs = 30000);
bool waitForDisconnected(int msecs = 30000);

QList<QSslError> sslErrors() const;

static bool supportsSsl();
static long sslLibraryVersionNumber();
static QString sslLibraryVersionString();

void ignoreSslErrors(const QList<QSslError> &errors);

public slots:
void startClientEncryption();
void startServerEncryption();
void ignoreSslErrors();

signals:
void encrypted();
void peerVerifyError(const QSslError &error);
void sslErrors(const QList<QSslError> &errors);
void modeChanged(QSslSocket::SslMode newMode);
void encryptedBytesWritten(qint64 totalBytes);

protected:
qint64 readData(char *data, qint64 maxlen);
qint64 writeData(const char *data, qint64 len);

private:
inline QSslSocketPrivate* d_func() { return reinterpret_cast<QSslSocketPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSslSocketPrivate* d_func() const { return reinterpret_cast<const QSslSocketPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSslSocketPrivate;
QSslSocket(const QSslSocket &) ; QSslSocket &operator=(const QSslSocket &) ;













# 220 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"
friend class QSslSocketBackendPrivate;
};



# 225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"



# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslconfiguration.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"











































































































# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslconfiguration.h"




# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslconfiguration.h"


template<typename T> class QList;
class QSslCertificate;
class QSslCipher;
class QSslKey;

class QSslConfigurationPrivate;
class  QSslConfiguration
{
public:
QSslConfiguration();
QSslConfiguration(const QSslConfiguration &other);
~QSslConfiguration();
QSslConfiguration &operator=(const QSslConfiguration &other);

inline void swap(QSslConfiguration &other)
{ qSwap(d, other.d); }

bool operator==(const QSslConfiguration &other) const;
inline bool operator!=(const QSslConfiguration &other) const
{ return !(*this == other); }

bool isNull() const;

QSsl::SslProtocol protocol() const;
void setProtocol(QSsl::SslProtocol protocol);


QSslSocket::PeerVerifyMode peerVerifyMode() const;
void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode);

int peerVerifyDepth() const;
void setPeerVerifyDepth(int depth);


QList<QSslCertificate> localCertificateChain() const;
void setLocalCertificateChain(const QList<QSslCertificate> &localChain);

QSslCertificate localCertificate() const;
void setLocalCertificate(const QSslCertificate &certificate);

QSslCertificate peerCertificate() const;
QList<QSslCertificate> peerCertificateChain() const;
QSslCipher sessionCipher() const;


QSslKey privateKey() const;
void setPrivateKey(const QSslKey &key);


QList<QSslCipher> ciphers() const;
void setCiphers(const QList<QSslCipher> &ciphers);


QList<QSslCertificate> caCertificates() const;
void setCaCertificates(const QList<QSslCertificate> &certificates);

void setSslOption(QSsl::SslOption option, bool on);
bool testSslOption(QSsl::SslOption option) const;

static QSslConfiguration defaultConfiguration();
static void setDefaultConfiguration(const QSslConfiguration &configuration);

private:
friend class QSslSocket;
friend class QSslConfigurationPrivate;
friend class QSslSocketBackendPrivate;
friend class QSslContext;
QSslConfiguration(QSslConfigurationPrivate *dd);
QSharedDataPointer<QSslConfigurationPrivate> d;
};

template<> class QTypeInfo<QSslConfiguration > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSslConfiguration)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSslConfiguration) }; static inline const char *name() { return "QSslConfiguration"; } }; template <> inline void qSwap<QSslConfiguration>(QSslConfiguration &value1, QSslConfiguration &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QSslConfiguration>(::QSslConfiguration &value1, ::QSslConfiguration &value2) { value1.swap(value2); } } 



 template <> struct QMetaTypeId< QSslConfiguration > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QSslConfiguration >("QSslConfiguration", reinterpret_cast< QSslConfiguration *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 




# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslerror.h"































































































































# 32 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qssl.h"











































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"





# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"
template <typename A, typename B> struct QPair;

class QIODevice;

class QSslKeyPrivate;
class  QSslKey
{
public:
QSslKey();
QSslKey(const QByteArray &encoded, QSsl::KeyAlgorithm algorithm,
QSsl::EncodingFormat format = QSsl::Pem,
QSsl::KeyType type = QSsl::PrivateKey,
const QByteArray &passPhrase = QByteArray());
QSslKey(QIODevice *device, QSsl::KeyAlgorithm algorithm,
QSsl::EncodingFormat format = QSsl::Pem,
QSsl::KeyType type = QSsl::PrivateKey,
const QByteArray &passPhrase = QByteArray());
explicit QSslKey(Qt::HANDLE handle, QSsl::KeyType type = QSsl::PrivateKey);
QSslKey(const QSslKey &other);
~QSslKey();
QSslKey &operator=(const QSslKey &other);

inline void swap(QSslKey &other) { qSwap(d, other.d); }

bool isNull() const;
void clear();

int length() const;
QSsl::KeyType type() const;
QSsl::KeyAlgorithm algorithm() const;

QByteArray toPem(const QByteArray &passPhrase = QByteArray()) const;
QByteArray toDer(const QByteArray &passPhrase = QByteArray()) const;

Qt::HANDLE handle() const;

bool operator==(const QSslKey &key) const;
inline bool operator!=(const QSslKey &key) const { return !operator==(key); }

private:
QExplicitlySharedDataPointer<QSslKeyPrivate> d;
friend class QSslCertificate;
};

template<> class QTypeInfo<QSslKey > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSslKey)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSslKey) }; static inline const char *name() { return "QSslKey"; } }; template <> inline void qSwap<QSslKey>(QSslKey &value1, QSslKey &value2) { value1.swap(value2); }  namespace std { template<> inline void swap<::QSslKey>(::QSslKey &value1, ::QSslKey &value2) { value1.swap(value2); } } 


# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"
class QDebug;
 QDebug operator<<(QDebug debug, const QSslKey &key);




# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslkey.h"



# 33 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qsslsocket.h"



































































































































































































































# 34 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qtnetworkversion.h"









# 35 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/QtNetwork"


# 45 "qtscript_masterinclude.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSqlDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSqlDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"
namespace QSql
{
enum Location
{
BeforeFirstRow = -1,
AfterLastRow = -2
};

enum ParamTypeFlag
{
In = 0x00000001,
Out = 0x00000002,
InOut = In | Out,
Binary = 0x00000004
};
typedef QFlags<ParamTypeFlag> ParamType;

enum TableType
{
Tables = 0x01,
SystemTables = 0x02,
Views = 0x04,
AllTables = 0xff
};

enum NumericalPrecisionPolicy
{
LowPrecisionInt32 = 0x01,
LowPrecisionInt64 = 0x02,
LowPrecisionDouble = 0x04,

HighPrecision = 0
};
}

 inline QFlags<QSql::ParamType::enum_type> operator|(QSql::ParamType::enum_type f1, QSql::ParamType::enum_type f2) { return QFlags<QSql::ParamType::enum_type>(f1) | f2; }  inline QFlags<QSql::ParamType::enum_type> operator|(QSql::ParamType::enum_type f1, QFlags<QSql::ParamType::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSql::ParamType::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"



class QSqlError;
class QSqlDriver;
class QSqlIndex;
class QSqlRecord;
class QSqlQuery;
class QSqlDatabasePrivate;

class  QSqlDriverCreatorBase
{
public:
virtual ~QSqlDriverCreatorBase() {}
virtual QSqlDriver *createObject() const = 0;
};

template <class T>
class QSqlDriverCreator : public QSqlDriverCreatorBase
{
public:
QSqlDriver *createObject() const { return new T; }
};

class  QSqlDatabase
{
public:
QSqlDatabase();
QSqlDatabase(const QSqlDatabase &other);
~QSqlDatabase();

QSqlDatabase &operator=(const QSqlDatabase &other);

bool open();
bool open(const QString& user, const QString& password);
void close();
bool isOpen() const;
bool isOpenError() const;
QStringList tables(QSql::TableType type = QSql::Tables) const;
QSqlIndex primaryIndex(const QString& tablename) const;
QSqlRecord record(const QString& tablename) const;
QSqlQuery exec(const QString& query = QString()) const;
QSqlError lastError() const;
bool isValid() const;

bool transaction();
bool commit();
bool rollback();

void setDatabaseName(const QString& name);
void setUserName(const QString& name);
void setPassword(const QString& password);
void setHostName(const QString& host);
void setPort(int p);
void setConnectOptions(const QString& options = QString());
QString databaseName() const;
QString userName() const;
QString password() const;
QString hostName() const;
QString driverName() const;
int port() const;
QString connectOptions() const;
QString connectionName() const;
void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy);
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const;

QSqlDriver* driver() const;

static const char *defaultConnection;

static QSqlDatabase addDatabase(const QString& type,
const QString& connectionName = QLatin1String(defaultConnection));
static QSqlDatabase addDatabase(QSqlDriver* driver,
const QString& connectionName = QLatin1String(defaultConnection));
static QSqlDatabase cloneDatabase(const QSqlDatabase &other, const QString& connectionName);
static QSqlDatabase database(const QString& connectionName = QLatin1String(defaultConnection),
bool open = true);
static void removeDatabase(const QString& connectionName);
static bool contains(const QString& connectionName = QLatin1String(defaultConnection));
static QStringList drivers();
static QStringList connectionNames();
static void registerSqlDriver(const QString &name, QSqlDriverCreatorBase *creator);
static bool isDriverAvailable(const QString &name);

protected:
explicit QSqlDatabase(const QString& type);
explicit QSqlDatabase(QSqlDriver* driver);

private:
friend class QSqlDatabasePrivate;
QSqlDatabasePrivate *d;
};


# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"
 QDebug operator<<(QDebug, const QSqlDatabase &);


# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"



# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriver.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriver.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriver.h"



class QSqlDatabase;
class QSqlDriverPrivate;
class QSqlError;
class QSqlField;
class QSqlIndex;
class QSqlRecord;
class QSqlResult;
class QVariant;

class  QSqlDriver : public QObject
{
friend class QSqlDatabase;
Q_OBJECT
inline QSqlDriverPrivate* d_func() { return reinterpret_cast<QSqlDriverPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSqlDriverPrivate* d_func() const { return reinterpret_cast<const QSqlDriverPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSqlDriverPrivate;

public:
enum DriverFeature { Transactions, QuerySize, BLOB, Unicode, PreparedQueries,
NamedPlaceholders, PositionalPlaceholders, LastInsertId,
BatchOperations, SimpleLocking, LowPrecisionNumbers,
EventNotifications, FinishQuery, MultipleResultSets, CancelQuery };

enum StatementType { WhereStatement, SelectStatement, UpdateStatement,
InsertStatement, DeleteStatement };

enum IdentifierType { FieldName, TableName };

enum NotificationSource { UnknownSource, SelfSource, OtherSource };

explicit QSqlDriver(QObject *parent=0);
~QSqlDriver();
virtual bool isOpen() const;
bool isOpenError() const;

virtual bool beginTransaction();
virtual bool commitTransaction();
virtual bool rollbackTransaction();
virtual QStringList tables(QSql::TableType tableType) const;
virtual QSqlIndex primaryIndex(const QString &tableName) const;
virtual QSqlRecord record(const QString &tableName) const;
virtual QString formatValue(const QSqlField& field, bool trimStrings = false) const;

virtual QString escapeIdentifier(const QString &identifier, IdentifierType type) const;
virtual QString sqlStatement(StatementType type, const QString &tableName,
const QSqlRecord &rec, bool preparedStatement) const;

QSqlError lastError() const;

virtual QVariant handle() const;
virtual bool hasFeature(DriverFeature f) const = 0;
virtual void close() = 0;
virtual QSqlResult *createResult() const = 0;

virtual bool open(const QString& db,
const QString& user = QString(),
const QString& password = QString(),
const QString& host = QString(),
int port = -1,
const QString& connOpts = QString()) = 0;
virtual bool subscribeToNotification(const QString &name);
virtual bool unsubscribeFromNotification(const QString &name);
virtual QStringList subscribedToNotifications() const;

virtual bool isIdentifierEscaped(const QString &identifier, IdentifierType type) const;
virtual QString stripDelimiters(const QString &identifier, IdentifierType type) const;

void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy);
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const;

public slots:
virtual bool cancelQuery();

signals:
void notification(const QString &name);
void notification(const QString &name, QSqlDriver::NotificationSource source, const QVariant &payload);

protected:
QSqlDriver(QSqlDriverPrivate &dd, QObject *parent = 0);
virtual void setOpen(bool o);
virtual void setOpenError(bool e);
virtual void setLastError(const QSqlError& e);


private:
QSqlDriver(const QSqlDriver &) ; QSqlDriver &operator=(const QSqlDriver &) ;
};




# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriverplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriverplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriverplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriverplugin.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriverplugin.h"



class QSqlDriver;



# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldriverplugin.h"
class  QSqlDriverPlugin : public QObject
{
Q_OBJECT
public:
explicit QSqlDriverPlugin(QObject *parent = 0);
~QSqlDriverPlugin();

virtual QSqlDriver *create(const QString &key) = 0;

};




# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"



class  QSqlError
{
public:
enum ErrorType {
NoError,
ConnectionError,
StatementError,
TransactionError,
UnknownError
};
QSqlError( const QString& driverText = QString(),
const QString& databaseText = QString(),
ErrorType type = NoError,
int number = -1);
QSqlError(const QSqlError& other);
QSqlError& operator=(const QSqlError& other);
bool operator==(const QSqlError& other) const;
bool operator!=(const QSqlError& other) const;
~QSqlError();

QString driverText() const;
QString databaseText() const;
ErrorType type() const;
int number() const;
QString text() const;
bool isValid() const;


# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"
 void setDriverText(const QString &driverText);
 void setDatabaseText(const QString &databaseText);
 void setType(ErrorType type);
 void setNumber(int number);


# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"
private:
QString driverError;
QString databaseError;
ErrorType errorType;
int errorNumber;
};


# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"
 QDebug operator<<(QDebug, const QSqlError &);


# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlerror.h"



# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"



class QSqlFieldPrivate;

class  QSqlField
{
public:
enum RequiredStatus { Unknown = -1, Optional = 0, Required = 1 };

explicit QSqlField(const QString& fieldName = QString(),
QVariant::Type type = QVariant::Invalid);

QSqlField(const QSqlField& other);
QSqlField& operator=(const QSqlField& other);
bool operator==(const QSqlField& other) const;
inline bool operator!=(const QSqlField &other) const { return !operator==(other); }
~QSqlField();

void setValue(const QVariant& value);
inline QVariant value() const
{ return val; }
void setName(const QString& name);
QString name() const;
bool isNull() const;
void setReadOnly(bool readOnly);
bool isReadOnly() const;
void clear();
QVariant::Type type() const;
bool isAutoValue() const;

void setType(QVariant::Type type);
void setRequiredStatus(RequiredStatus status);
inline void setRequired(bool required)
{ setRequiredStatus(required ? Required : Optional); }
void setLength(int fieldLength);
void setPrecision(int precision);
void setDefaultValue(const QVariant &value);
void setSqlType(int type);
void setGenerated(bool gen);
void setAutoValue(bool autoVal);

RequiredStatus requiredStatus() const;
int length() const;
int precision() const;
QVariant defaultValue() const;
int typeID() const;
bool isGenerated() const;
bool isValid() const;

private:
void detach();
QVariant val;
QSqlFieldPrivate* d;
};


# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"
 QDebug operator<<(QDebug, const QSqlField &);


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlfield.h"



# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlindex.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"



class QSqlField;
class QStringList;
class QVariant;
class QSqlRecordPrivate;

class  QSqlRecord
{
public:
QSqlRecord();
QSqlRecord(const QSqlRecord& other);
QSqlRecord& operator=(const QSqlRecord& other);
~QSqlRecord();

bool operator==(const QSqlRecord &other) const;
inline bool operator!=(const QSqlRecord &other) const { return !operator==(other); }

QVariant value(int i) const;
QVariant value(const QString& name) const;
void setValue(int i, const QVariant& val);
void setValue(const QString& name, const QVariant& val);

void setNull(int i);
void setNull(const QString& name);
bool isNull(int i) const;
bool isNull(const QString& name) const;

int indexOf(const QString &name) const;
QString fieldName(int i) const;

QSqlField field(int i) const;
QSqlField field(const QString &name) const;

bool isGenerated(int i) const;
bool isGenerated(const QString& name) const;
void setGenerated(const QString& name, bool generated);
void setGenerated(int i, bool generated);

void append(const QSqlField& field);
void replace(int pos, const QSqlField& field);
void insert(int pos, const QSqlField& field);
void remove(int pos);

bool isEmpty() const;
bool contains(const QString& name) const;
void clear();
void clearValues();
int count() const;
QSqlRecord keyValues(const QSqlRecord &keyFields) const;

private:
void detach();
QSqlRecordPrivate* d;
};


# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"
 QDebug operator<<(QDebug, const QSqlRecord &);


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlindex.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlindex.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlindex.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlindex.h"



class  QSqlIndex : public QSqlRecord
{
public:
explicit QSqlIndex(const QString &cursorName = QString(), const QString &name = QString());
QSqlIndex(const QSqlIndex &other);
~QSqlIndex();
QSqlIndex &operator=(const QSqlIndex &other);
void setCursorName(const QString &cursorName);
inline QString cursorName() const { return cursor; }
void setName(const QString& name);
inline QString name() const { return nm; }

void append(const QSqlField &field);
void append(const QSqlField &field, bool desc);

bool isDescending(int i) const;
void setDescending(int i, bool desc);

private:
QString createField(int i, const QString& prefix, bool verbose) const;
QString cursor;
QString nm;
QList<bool> sorts;
};




# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquery.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"



















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquery.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquery.h"



class QVariant;
class QSqlDriver;
class QSqlError;
class QSqlResult;
class QSqlRecord;
template <class Key, class T> class QMap;
class QSqlQueryPrivate;

class  QSqlQuery
{
public:
explicit QSqlQuery(QSqlResult *r);
explicit QSqlQuery(const QString& query = QString(), QSqlDatabase db = QSqlDatabase());
explicit QSqlQuery(QSqlDatabase db);
QSqlQuery(const QSqlQuery& other);
QSqlQuery& operator=(const QSqlQuery& other);
~QSqlQuery();

bool isValid() const;
bool isActive() const;
bool isNull(int field) const;
int at() const;
QString lastQuery() const;
int numRowsAffected() const;
QSqlError lastError() const;
bool isSelect() const;
int size() const;
const QSqlDriver* driver() const;
const QSqlResult* result() const;
bool isForwardOnly() const;
QSqlRecord record() const;

void setForwardOnly(bool forward);
bool exec(const QString& query);
QVariant value(int i) const;
QVariant value(const QString& name) const;

void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy);
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const;

bool seek(int i, bool relative = false);
bool next();
bool previous();
bool first();
bool last();

void clear();


bool exec();
enum BatchExecutionMode { ValuesAsRows, ValuesAsColumns };
bool execBatch(BatchExecutionMode mode = ValuesAsRows);
bool prepare(const QString& query);
void bindValue(const QString& placeholder, const QVariant& val,
QSql::ParamType type = QSql::In);
void bindValue(int pos, const QVariant& val, QSql::ParamType type = QSql::In);
void addBindValue(const QVariant& val, QSql::ParamType type = QSql::In);
QVariant boundValue(const QString& placeholder) const;
QVariant boundValue(int pos) const;
QMap<QString, QVariant> boundValues() const;
QString executedQuery() const;
QVariant lastInsertId() const;
void finish();
bool nextResult();

private:
QSqlQueryPrivate* d;
};




# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrecord.h"















































































































# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlresult.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlresult.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlresult.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsql.h"


































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlresult.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlresult.h"



class QString;
class QSqlRecord;
template <typename T> class QVector;
class QVariant;
class QSqlDriver;
class QSqlError;
class QSqlResultPrivate;

class  QSqlResult
{
inline QSqlResultPrivate* d_func() { return reinterpret_cast<QSqlResultPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSqlResultPrivate* d_func() const { return reinterpret_cast<const QSqlResultPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSqlResultPrivate;
friend class QSqlQuery;
friend class QSqlTableModelPrivate;

public:
virtual ~QSqlResult();
virtual QVariant handle() const;

protected:
enum BindingSyntax {
PositionalBinding,
NamedBinding
};

explicit QSqlResult(const QSqlDriver * db);
QSqlResult(QSqlResultPrivate &dd, const QSqlDriver *db);
int at() const;
QString lastQuery() const;
QSqlError lastError() const;
bool isValid() const;
bool isActive() const;
bool isSelect() const;
bool isForwardOnly() const;
const QSqlDriver* driver() const;
virtual void setAt(int at);
virtual void setActive(bool a);
virtual void setLastError(const QSqlError& e);
virtual void setQuery(const QString& query);
virtual void setSelect(bool s);
virtual void setForwardOnly(bool forward);


virtual bool exec();
virtual bool prepare(const QString& query);
virtual bool savePrepare(const QString& sqlquery);
virtual void bindValue(int pos, const QVariant& val, QSql::ParamType type);
virtual void bindValue(const QString& placeholder, const QVariant& val,
QSql::ParamType type);
void addBindValue(const QVariant& val, QSql::ParamType type);
QVariant boundValue(const QString& placeholder) const;
QVariant boundValue(int pos) const;
QSql::ParamType bindValueType(const QString& placeholder) const;
QSql::ParamType bindValueType(int pos) const;
int boundValueCount() const;
QVector<QVariant>& boundValues() const;
QString executedQuery() const;
QString boundValueName(int pos) const;
void clear();
bool hasOutValues() const;

BindingSyntax bindingSyntax() const;

virtual QVariant data(int i) = 0;
virtual bool isNull(int i) = 0;
virtual bool reset(const QString& sqlquery) = 0;
virtual bool fetch(int i) = 0;
virtual bool fetchNext();
virtual bool fetchPrevious();
virtual bool fetchFirst() = 0;
virtual bool fetchLast() = 0;
virtual int size() = 0;
virtual int numRowsAffected() = 0;
virtual QSqlRecord record() const;
virtual QVariant lastInsertId() const;

enum VirtualHookOperation { };
virtual void virtual_hook(int id, void *data);
virtual bool execBatch(bool arrayBind = false);
virtual void detachFromResultSet();
virtual void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy policy);
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const;
virtual bool nextResult();
void resetBindCount(); 

QSqlResultPrivate *d_ptr;

private:
QSqlResult(const QSqlResult &) ; QSqlResult &operator=(const QSqlResult &) ;
};




# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquerymodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquerymodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"



















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquerymodel.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquerymodel.h"



class QSqlQueryModelPrivate;
class QSqlError;
class QSqlRecord;
class QSqlQuery;

class  QSqlQueryModel: public QAbstractTableModel
{
Q_OBJECT
inline QSqlQueryModelPrivate* d_func() { return reinterpret_cast<QSqlQueryModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSqlQueryModelPrivate* d_func() const { return reinterpret_cast<const QSqlQueryModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSqlQueryModelPrivate;

public:
explicit QSqlQueryModel(QObject *parent = 0);
virtual ~QSqlQueryModel();

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;
QSqlRecord record(int row) const;
QSqlRecord record() const;

QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const;
QVariant headerData(int section, Qt::Orientation orientation,
int role = Qt::DisplayRole) const;
bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value,
int role = Qt::EditRole);

bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

void setQuery(const QSqlQuery &query);
void setQuery(const QString &query, const QSqlDatabase &db = QSqlDatabase());
QSqlQuery query() const;

virtual void clear();

QSqlError lastError() const;

void fetchMore(const QModelIndex &parent = QModelIndex());
bool canFetchMore(const QModelIndex &parent = QModelIndex()) const;

protected:
void beginInsertRows(const QModelIndex &parent, int first, int last);
void endInsertRows();

void beginRemoveRows(const QModelIndex &parent, int first, int last);
void endRemoveRows();

void beginInsertColumns(const QModelIndex &parent, int first, int last);
void endInsertColumns();

void beginRemoveColumns(const QModelIndex &parent, int first, int last);
void endRemoveColumns();

void beginResetModel();
void endResetModel();
virtual void queryChange();

virtual QModelIndex indexInQuery(const QModelIndex &item) const;
void setLastError(const QSqlError &error);
QSqlQueryModel(QSqlQueryModelPrivate &dd, QObject *parent = 0);
};




# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrelationaldelegate.h"

















































































































# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrelationaltablemodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqltablemodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqldatabase.h"



















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqltablemodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlquerymodel.h"


















































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqltablemodel.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqltablemodel.h"



class QSqlTableModelPrivate;
class QSqlRecord;
class QSqlField;
class QSqlIndex;

class  QSqlTableModel: public QSqlQueryModel
{
Q_OBJECT
inline QSqlTableModelPrivate* d_func() { return reinterpret_cast<QSqlTableModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSqlTableModelPrivate* d_func() const { return reinterpret_cast<const QSqlTableModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSqlTableModelPrivate;

public:
enum EditStrategy {OnFieldChange, OnRowChange, OnManualSubmit};

explicit QSqlTableModel(QObject *parent = 0, QSqlDatabase db = QSqlDatabase());
virtual ~QSqlTableModel();

virtual void setTable(const QString &tableName);
QString tableName() const;

Qt::ItemFlags flags(const QModelIndex &index) const;

QSqlRecord record() const;
QSqlRecord record(int row) const;
QVariant data(const QModelIndex &idx, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;

bool isDirty() const;
bool isDirty(const QModelIndex &index) const;

void clear();

virtual void setEditStrategy(EditStrategy strategy);
EditStrategy editStrategy() const;

QSqlIndex primaryKey() const;
QSqlDatabase database() const;
int fieldIndex(const QString &fieldName) const;

void sort(int column, Qt::SortOrder order);
virtual void setSort(int column, Qt::SortOrder order);

QString filter() const;
virtual void setFilter(const QString &filter);

int rowCount(const QModelIndex &parent = QModelIndex()) const;

bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());
bool removeRows(int row, int count, const QModelIndex &parent = QModelIndex());
bool insertRows(int row, int count, const QModelIndex &parent = QModelIndex());

bool insertRecord(int row, const QSqlRecord &record);
bool setRecord(int row, const QSqlRecord &record);

virtual void revertRow(int row);

public slots:
virtual bool select();
virtual bool selectRow(int row);

bool submit();
void revert();

bool submitAll();
void revertAll();

signals:
void primeInsert(int row, QSqlRecord &record);

void beforeInsert(QSqlRecord &record);
void beforeUpdate(int row, QSqlRecord &record);
void beforeDelete(int row);

protected:
QSqlTableModel(QSqlTableModelPrivate &dd, QObject *parent = 0, QSqlDatabase db = QSqlDatabase());

virtual bool updateRowInTable(int row, const QSqlRecord &values);
virtual bool insertRowIntoTable(const QSqlRecord &values);
virtual bool deleteRowFromTable(int row);
virtual QString orderByClause() const;
virtual QString selectStatement() const;

void setPrimaryKey(const QSqlIndex &key);
void setQuery(const QSqlQuery &query);
QModelIndex indexInQuery(const QModelIndex &item) const;
QSqlRecord primaryValues(int row) const;
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrelationaltablemodel.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqlrelationaltablemodel.h"



class  QSqlRelation
{
public:
QSqlRelation() {}
QSqlRelation(const QString &aTableName, const QString &indexCol,
const QString &displayCol)
: tName(aTableName), iColumn(indexCol), dColumn(displayCol) {}
inline QString tableName() const
{ return tName; }
inline QString indexColumn() const
{ return iColumn; }
inline QString displayColumn() const
{ return dColumn; }
inline bool isValid() const
{ return !(tName.isEmpty() || iColumn.isEmpty() || dColumn.isEmpty()); }
private:
QString tName, iColumn, dColumn;
};

class QSqlRelationalTableModelPrivate;

class  QSqlRelationalTableModel: public QSqlTableModel
{
Q_OBJECT

public:
enum JoinMode {
InnerJoin,
LeftJoin
};

explicit QSqlRelationalTableModel(QObject *parent = 0,
QSqlDatabase db = QSqlDatabase());
virtual ~QSqlRelationalTableModel();

QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &item, const QVariant &value, int role = Qt::EditRole);
bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());

void clear();
bool select();

void setTable(const QString &tableName);
virtual void setRelation(int column, const QSqlRelation &relation);
QSqlRelation relation(int column) const;
virtual QSqlTableModel *relationModel(int column) const;
void setJoinMode( QSqlRelationalTableModel::JoinMode joinMode );

public slots:
void revertRow(int row);

protected:
QString selectStatement() const;
bool updateRowInTable(int row, const QSqlRecord &values);
bool insertRowIntoTable(const QSqlRecord &values);
QString orderByClause() const;

private:
inline QSqlRelationalTableModelPrivate* d_func() { return reinterpret_cast<QSqlRelationalTableModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSqlRelationalTableModelPrivate* d_func() const { return reinterpret_cast<const QSqlRelationalTableModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSqlRelationalTableModelPrivate;
};




# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qsqltablemodel.h"














































































































































# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/qtsqlversion.h"









# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSql/QtSql"


# 46 "qtscript_masterinclude.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvgDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvgDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvgDepends"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgetsDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgetsDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgetsDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
















































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

















































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontmetrics.h"
































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontinfo.h"
























































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"



class QVariant;

class  QSizePolicy
{

Q_ENUMS(Policy)

public:
enum PolicyFlag {
GrowFlag = 1,
ExpandFlag = 2,
ShrinkFlag = 4,
IgnoreFlag = 8
};

enum Policy {
Fixed = 0,
Minimum = GrowFlag,
Maximum = ShrinkFlag,
Preferred = GrowFlag | ShrinkFlag,
MinimumExpanding = GrowFlag | ExpandFlag,
Expanding = GrowFlag | ShrinkFlag | ExpandFlag,
Ignored = ShrinkFlag | GrowFlag | IgnoreFlag
};

enum ControlType {
DefaultType = 0x00000001,
ButtonBox = 0x00000002,
CheckBox = 0x00000004,
ComboBox = 0x00000008,
Frame = 0x00000010,
GroupBox = 0x00000020,
Label = 0x00000040,
Line = 0x00000080,
LineEdit = 0x00000100,
PushButton = 0x00000200,
RadioButton = 0x00000400,
Slider = 0x00000800,
SpinBox = 0x00001000,
TabWidget = 0x00002000,
ToolButton = 0x00004000
};
typedef QFlags<ControlType> ControlTypes;

QSizePolicy() : data(0) { }


QSizePolicy(Policy horizontal, Policy vertical, ControlType type = DefaultType)
: data(0) {
bits.horPolicy = horizontal;
bits.verPolicy = vertical;
setControlType(type);
}
Policy horizontalPolicy() const { return static_cast<Policy>(bits.horPolicy); }
Policy verticalPolicy() const { return static_cast<Policy>(bits.verPolicy); }
ControlType controlType() const;

void setHorizontalPolicy(Policy d) { bits.horPolicy = d; }
void setVerticalPolicy(Policy d) { bits.verPolicy = d; }
void setControlType(ControlType type);

Qt::Orientations expandingDirections() const {
Qt::Orientations result;
if (verticalPolicy() & ExpandFlag)
result |= Qt::Vertical;
if (horizontalPolicy() & ExpandFlag)
result |= Qt::Horizontal;
return result;
}

void setHeightForWidth(bool b) { bits.hfw = b; }
bool hasHeightForWidth() const { return bits.hfw; }
void setWidthForHeight(bool b) { bits.wfh = b; }
bool hasWidthForHeight() const { return bits.wfh; }

bool operator==(const QSizePolicy& s) const { return data == s.data; }
bool operator!=(const QSizePolicy& s) const { return data != s.data; }
operator QVariant() const; 

int horizontalStretch() const { return static_cast<int>(bits.horStretch); }
int verticalStretch() const { return static_cast<int>(bits.verStretch); }
void setHorizontalStretch(int stretchFactor) { bits.horStretch = static_cast<quint32>(qBound(0, stretchFactor, 255)); }
void setVerticalStretch(int stretchFactor) { bits.verStretch = static_cast<quint32>(qBound(0, stretchFactor, 255)); }

void transpose();


private:

# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
friend  QDataStream &operator<<(QDataStream &, const QSizePolicy &);
friend  QDataStream &operator>>(QDataStream &, QSizePolicy &);

# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
QSizePolicy(int i) : data(i) { }

union {
struct {
quint32 horStretch : 8;
quint32 verStretch : 8;
quint32 horPolicy : 4;
quint32 verPolicy : 4;
quint32 ctype : 5;
quint32 hfw : 1;
quint32 wfh : 1;
quint32 padding : 1; 
} bits;
quint32 data;
};
};

 inline QFlags<QSizePolicy::ControlTypes::enum_type> operator|(QSizePolicy::ControlTypes::enum_type f1, QSizePolicy::ControlTypes::enum_type f2) { return QFlags<QSizePolicy::ControlTypes::enum_type>(f1) | f2; }  inline QFlags<QSizePolicy::ControlTypes::enum_type> operator|(QSizePolicy::ControlTypes::enum_type f1, QFlags<QSizePolicy::ControlTypes::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSizePolicy::ControlTypes::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 162 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"

 QDataStream &operator<<(QDataStream &, const QSizePolicy &);
 QDataStream &operator>>(QDataStream &, QSizePolicy &);



# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
 QDebug operator<<(QDebug dbg, const QSizePolicy &);


# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
inline void QSizePolicy::transpose() {
Policy hData = horizontalPolicy();
Policy vData = verticalPolicy();
int hStretch = horizontalStretch();
int vStretch = verticalStretch();
setHorizontalPolicy(vData);
setVerticalPolicy(hData);
setHorizontalStretch(vStretch);
setVerticalStretch(hStretch);
}




# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qregion.h"












































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"










































































































































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"






# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"



class QLayout;
class QWSRegionManager;
class QStyle;
class QAction;
class QVariant;
class QWindow;
class QActionEvent;
class QMouseEvent;
class QWheelEvent;
class QHoverEvent;
class QKeyEvent;
class QFocusEvent;
class QPaintEvent;
class QMoveEvent;
class QResizeEvent;
class QCloseEvent;
class QContextMenuEvent;
class QInputMethodEvent;
class QTabletEvent;
class QDragEnterEvent;
class QDragMoveEvent;
class QDragLeaveEvent;
class QDropEvent;
class QShowEvent;
class QHideEvent;
class QIcon;
class QBackingStore;
class QPlatformWindow;
class QLocale;
class QGraphicsProxyWidget;
class QGraphicsEffect;
class QRasterWindowSurface;
class QUnifiedToolbarSurface;
class QPixmap;

class QWidgetData
{
public:
WId winid;
uint widget_attributes;
Qt::WindowFlags window_flags;
uint window_state : 4;
uint focus_policy : 4;
uint sizehint_forced :1;
uint is_closing :1;
uint in_show : 1;
uint in_set_window_state : 1;
mutable uint fstrut_dirty : 1;
uint context_menu_policy : 3;
uint window_modality : 2;
uint in_destructor : 1;
uint unused : 13;
QRect crect;
mutable QPalette pal;
QFont fnt;
QRect wrect;
};

class QWidgetPrivate;

class  QWidget : public QObject, public QPaintDevice
{
Q_OBJECT
inline QWidgetPrivate* d_func() { return reinterpret_cast<QWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QWidgetPrivate* d_func() const { return reinterpret_cast<const QWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QWidgetPrivate;

Q_PROPERTY(bool modal READ isModal)
Q_PROPERTY(Qt::WindowModality windowModality READ windowModality WRITE setWindowModality)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(QRect geometry READ geometry WRITE setGeometry)
Q_PROPERTY(QRect frameGeometry READ frameGeometry)
Q_PROPERTY(QRect normalGeometry READ normalGeometry)
Q_PROPERTY(int x READ x)
Q_PROPERTY(int y READ y)
Q_PROPERTY(QPoint pos READ pos WRITE move DESIGNABLE false STORED false)
Q_PROPERTY(QSize frameSize READ frameSize)
Q_PROPERTY(QSize size READ size WRITE resize DESIGNABLE false STORED false)
Q_PROPERTY(int width READ width)
Q_PROPERTY(int height READ height)
Q_PROPERTY(QRect rect READ rect)
Q_PROPERTY(QRect childrenRect READ childrenRect)
Q_PROPERTY(QRegion childrenRegion READ childrenRegion)
Q_PROPERTY(QSizePolicy sizePolicy READ sizePolicy WRITE setSizePolicy)
Q_PROPERTY(QSize minimumSize READ minimumSize WRITE setMinimumSize)
Q_PROPERTY(QSize maximumSize READ maximumSize WRITE setMaximumSize)
Q_PROPERTY(int minimumWidth READ minimumWidth WRITE setMinimumWidth STORED false DESIGNABLE false)
Q_PROPERTY(int minimumHeight READ minimumHeight WRITE setMinimumHeight STORED false DESIGNABLE false)
Q_PROPERTY(int maximumWidth READ maximumWidth WRITE setMaximumWidth STORED false DESIGNABLE false)
Q_PROPERTY(int maximumHeight READ maximumHeight WRITE setMaximumHeight STORED false DESIGNABLE false)
Q_PROPERTY(QSize sizeIncrement READ sizeIncrement WRITE setSizeIncrement)
Q_PROPERTY(QSize baseSize READ baseSize WRITE setBaseSize)
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(QFont font READ font WRITE setFont)

# 159 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QCursor cursor READ cursor WRITE setCursor RESET unsetCursor)

# 161 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(bool mouseTracking READ hasMouseTracking WRITE setMouseTracking)
Q_PROPERTY(bool isActiveWindow READ isActiveWindow)
Q_PROPERTY(Qt::FocusPolicy focusPolicy READ focusPolicy WRITE setFocusPolicy)
Q_PROPERTY(bool focus READ hasFocus)
Q_PROPERTY(Qt::ContextMenuPolicy contextMenuPolicy READ contextMenuPolicy WRITE setContextMenuPolicy)
Q_PROPERTY(bool updatesEnabled READ updatesEnabled WRITE setUpdatesEnabled DESIGNABLE false)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible DESIGNABLE false)
Q_PROPERTY(bool minimized READ isMinimized)
Q_PROPERTY(bool maximized READ isMaximized)
Q_PROPERTY(bool fullScreen READ isFullScreen)
Q_PROPERTY(QSize sizeHint READ sizeHint)
Q_PROPERTY(QSize minimumSizeHint READ minimumSizeHint)
Q_PROPERTY(bool acceptDrops READ acceptDrops WRITE setAcceptDrops)
Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle DESIGNABLE isWindow)
Q_PROPERTY(QIcon windowIcon READ windowIcon WRITE setWindowIcon DESIGNABLE isWindow)
Q_PROPERTY(QString windowIconText READ windowIconText WRITE setWindowIconText DESIGNABLE isWindow)
Q_PROPERTY(double windowOpacity READ windowOpacity WRITE setWindowOpacity DESIGNABLE isWindow)
Q_PROPERTY(bool windowModified READ isWindowModified WRITE setWindowModified DESIGNABLE isWindow)

# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip)


# 183 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QString statusTip READ statusTip WRITE setStatusTip)


# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QString whatsThis READ whatsThis WRITE setWhatsThis)


# 189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QString accessibleName READ accessibleName WRITE setAccessibleName)
Q_PROPERTY(QString accessibleDescription READ accessibleDescription WRITE setAccessibleDescription)

# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(Qt::LayoutDirection layoutDirection READ layoutDirection WRITE setLayoutDirection RESET unsetLayoutDirection)

Q_PROPERTY(bool autoFillBackground READ autoFillBackground WRITE setAutoFillBackground)

# 196 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QString styleSheet READ styleSheet WRITE setStyleSheet)

# 198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
Q_PROPERTY(QLocale locale READ locale WRITE setLocale RESET unsetLocale)
Q_PROPERTY(QString windowFilePath READ windowFilePath WRITE setWindowFilePath DESIGNABLE isWindow)
Q_PROPERTY(Qt::InputMethodHints inputMethodHints READ inputMethodHints WRITE setInputMethodHints)

public:
enum RenderFlag {
DrawWindowBackground = 0x1,
DrawChildren = 0x2,
IgnoreMask = 0x4
};
typedef QFlags<RenderFlag> RenderFlags;

explicit QWidget(QWidget* parent = 0, Qt::WindowFlags f = 0);
~QWidget();

int devType() const;

WId winId() const;
void createWinId(); 
inline WId internalWinId() const { return data->winid; }
WId effectiveWinId() const;


QStyle *style() const;
void setStyle(QStyle *);


bool isTopLevel() const;
bool isWindow() const;

bool isModal() const;
Qt::WindowModality windowModality() const;
void setWindowModality(Qt::WindowModality windowModality);

bool isEnabled() const;
bool isEnabledTo(const QWidget *) const;
bool isEnabledToTLW() const;

public slots:
void setEnabled(bool);
void setDisabled(bool);
void setWindowModified(bool);



public:
QRect frameGeometry() const;
const QRect &geometry() const;
QRect normalGeometry() const;

int x() const;
int y() const;
QPoint pos() const;
QSize frameSize() const;
QSize size() const;
inline int width() const;
inline int height() const;
inline QRect rect() const;
QRect childrenRect() const;
QRegion childrenRegion() const;

QSize minimumSize() const;
QSize maximumSize() const;
int minimumWidth() const;
int minimumHeight() const;
int maximumWidth() const;
int maximumHeight() const;
void setMinimumSize(const QSize &);
void setMinimumSize(int minw, int minh);
void setMaximumSize(const QSize &);
void setMaximumSize(int maxw, int maxh);
void setMinimumWidth(int minw);
void setMinimumHeight(int minh);
void setMaximumWidth(int maxw);
void setMaximumHeight(int maxh);





# 278 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QSize sizeIncrement() const;
void setSizeIncrement(const QSize &);
void setSizeIncrement(int w, int h);
QSize baseSize() const;
void setBaseSize(const QSize &);
void setBaseSize(int basew, int baseh);

void setFixedSize(const QSize &);
void setFixedSize(int w, int h);
void setFixedWidth(int w);
void setFixedHeight(int h);



QPoint mapToGlobal(const QPoint &) const;
QPoint mapFromGlobal(const QPoint &) const;
QPoint mapToParent(const QPoint &) const;
QPoint mapFromParent(const QPoint &) const;
QPoint mapTo(const QWidget *, const QPoint &) const;
QPoint mapFrom(const QWidget *, const QPoint &) const;

QWidget *window() const;
QWidget *nativeParentWidget() const;
inline QWidget *topLevelWidget() const { return window(); }


const QPalette &palette() const;
void setPalette(const QPalette &);

void setBackgroundRole(QPalette::ColorRole);
QPalette::ColorRole backgroundRole() const;

void setForegroundRole(QPalette::ColorRole);
QPalette::ColorRole foregroundRole() const;

const QFont &font() const;
void setFont(const QFont &);
QFontMetrics fontMetrics() const;
QFontInfo fontInfo() const;


# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QCursor cursor() const;
void setCursor(const QCursor &);
void unsetCursor();


# 324 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setMouseTracking(bool enable);
bool hasMouseTracking() const;
bool underMouse() const;

void setMask(const QBitmap &);
void setMask(const QRegion &);
QRegion mask() const;
void clearMask();

void render(QPaintDevice *target, const QPoint &targetOffset = QPoint(),
const QRegion &sourceRegion = QRegion(),
RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren));

void render(QPainter *painter, const QPoint &targetOffset = QPoint(),
const QRegion &sourceRegion = QRegion(),
RenderFlags renderFlags = RenderFlags(DrawWindowBackground | DrawChildren));

Q_INVOKABLE QPixmap grab(const QRect &rectangle = QRect(QPoint(0, 0), QSize(-1, -1)));


# 344 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QGraphicsEffect *graphicsEffect() const;
void setGraphicsEffect(QGraphicsEffect *effect);



# 349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags());
void ungrabGesture(Qt::GestureType type);


# 353 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
public slots:
void setWindowTitle(const QString &);

# 356 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setStyleSheet(const QString& styleSheet);

# 358 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
public:

# 360 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QString styleSheet() const;

# 362 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QString windowTitle() const;
void setWindowIcon(const QIcon &icon);
QIcon windowIcon() const;
void setWindowIconText(const QString &);
QString windowIconText() const;
void setWindowRole(const QString &);
QString windowRole() const;
void setWindowFilePath(const QString &filePath);
QString windowFilePath() const;

void setWindowOpacity(qreal level);
qreal windowOpacity() const;

bool isWindowModified() const;

# 377 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setToolTip(const QString &);
QString toolTip() const;


# 381 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setStatusTip(const QString &);
QString statusTip() const;


# 385 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setWhatsThis(const QString &);
QString whatsThis() const;


# 389 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QString accessibleName() const;
void setAccessibleName(const QString &name);
QString accessibleDescription() const;
void setAccessibleDescription(const QString &description);


# 395 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setLayoutDirection(Qt::LayoutDirection direction);
Qt::LayoutDirection layoutDirection() const;
void unsetLayoutDirection();

void setLocale(const QLocale &locale);
QLocale locale() const;
void unsetLocale();

inline bool isRightToLeft() const { return layoutDirection() == Qt::RightToLeft; }
inline bool isLeftToRight() const { return layoutDirection() == Qt::LeftToRight; }

public slots:
inline void setFocus() { setFocus(Qt::OtherFocusReason); }

public:
bool isActiveWindow() const;
void activateWindow();
void clearFocus();

void setFocus(Qt::FocusReason reason);
Qt::FocusPolicy focusPolicy() const;
void setFocusPolicy(Qt::FocusPolicy policy);
bool hasFocus() const;
static void setTabOrder(QWidget *, QWidget *);
void setFocusProxy(QWidget *);
QWidget *focusProxy() const;
Qt::ContextMenuPolicy contextMenuPolicy() const;
void setContextMenuPolicy(Qt::ContextMenuPolicy policy);


void grabMouse();

# 427 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void grabMouse(const QCursor &);

# 429 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void releaseMouse();
void grabKeyboard();
void releaseKeyboard();

# 433 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
int grabShortcut(const QKeySequence &key, Qt::ShortcutContext context = Qt::WindowShortcut);
void releaseShortcut(int id);
void setShortcutEnabled(int id, bool enable = true);
void setShortcutAutoRepeat(int id, bool enable = true);

# 438 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
static QWidget *mouseGrabber();
static QWidget *keyboardGrabber();


inline bool updatesEnabled() const;
void setUpdatesEnabled(bool enable);


# 446 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QGraphicsProxyWidget *graphicsProxyWidget() const;


# 449 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
public slots:
void update();
void repaint();

public:
inline void update(int x, int y, int w, int h);
void update(const QRect&);
void update(const QRegion&);

void repaint(int x, int y, int w, int h);
void repaint(const QRect &);
void repaint(const QRegion &);

public slots:


virtual void setVisible(bool visible);
void setHidden(bool hidden);
void show();
void hide();

void showMinimized();
void showMaximized();
void showFullScreen();
void showNormal();

bool close();
void raise();
void lower();

public:
void stackUnder(QWidget*);
void move(int x, int y);
void move(const QPoint &);
void resize(int w, int h);
void resize(const QSize &);
inline void setGeometry(int x, int y, int w, int h);
void setGeometry(const QRect &);
QByteArray saveGeometry() const;
bool restoreGeometry(const QByteArray &geometry);
void adjustSize();
bool isVisible() const;
bool isVisibleTo(const QWidget *) const;
inline bool isHidden() const;

bool isMinimized() const;
bool isMaximized() const;
bool isFullScreen() const;

Qt::WindowStates windowState() const;
void setWindowState(Qt::WindowStates state);
void overrideWindowState(Qt::WindowStates state);

virtual QSize sizeHint() const;
virtual QSize minimumSizeHint() const;

QSizePolicy sizePolicy() const;
void setSizePolicy(QSizePolicy);
inline void setSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical);
virtual int heightForWidth(int) const;
virtual bool hasHeightForWidth() const;

QRegion visibleRegion() const;

void setContentsMargins(int left, int top, int right, int bottom);
void setContentsMargins(const QMargins &margins);
void getContentsMargins(int *left, int *top, int *right, int *bottom) const;
QMargins contentsMargins() const;

QRect contentsRect() const;

public:
QLayout *layout() const;
void setLayout(QLayout *);
void updateGeometry();

void setParent(QWidget *parent);
void setParent(QWidget *parent, Qt::WindowFlags f);

void scroll(int dx, int dy);
void scroll(int dx, int dy, const QRect&);



QWidget *focusWidget() const;
QWidget *nextInFocusChain() const;
QWidget *previousInFocusChain() const;


bool acceptDrops() const;
void setAcceptDrops(bool on);


# 542 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"

void addAction(QAction *action);
void addActions(QList<QAction*> actions);
void insertAction(QAction *before, QAction *action);
void insertActions(QAction *before, QList<QAction*> actions);
void removeAction(QAction *action);
QList<QAction*> actions() const;


# 551 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
QWidget *parentWidget() const;

void setWindowFlags(Qt::WindowFlags type);
inline Qt::WindowFlags windowFlags() const;
void overrideWindowFlags(Qt::WindowFlags type);

inline Qt::WindowType windowType() const;

static QWidget *find(WId);
inline QWidget *childAt(int x, int y) const;
QWidget *childAt(const QPoint &p) const;











# 573 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
void setAttribute(Qt::WidgetAttribute, bool on = true);
inline bool testAttribute(Qt::WidgetAttribute) const;

QPaintEngine *paintEngine() const;

void ensurePolished() const;

bool isAncestorOf(const QWidget *child) const;






# 587 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
bool autoFillBackground() const;
void setAutoFillBackground(bool enabled);

QBackingStore *backingStore() const;

QWindow *windowHandle() const;

static QWidget *createWindowContainer(QWindow *window, QWidget *parent=0, Qt::WindowFlags flags=0);

friend class QDesktopScreenWidget;

signals:
void customContextMenuRequested(const QPoint &pos);

protected:

bool event(QEvent *);
virtual void mousePressEvent(QMouseEvent *);
virtual void mouseReleaseEvent(QMouseEvent *);
virtual void mouseDoubleClickEvent(QMouseEvent *);
virtual void mouseMoveEvent(QMouseEvent *);

# 609 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void wheelEvent(QWheelEvent *);

# 611 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void keyPressEvent(QKeyEvent *);
virtual void keyReleaseEvent(QKeyEvent *);
virtual void focusInEvent(QFocusEvent *);
virtual void focusOutEvent(QFocusEvent *);
virtual void enterEvent(QEvent *);
virtual void leaveEvent(QEvent *);
virtual void paintEvent(QPaintEvent *);
virtual void moveEvent(QMoveEvent *);
virtual void resizeEvent(QResizeEvent *);
virtual void closeEvent(QCloseEvent *);

# 622 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void contextMenuEvent(QContextMenuEvent *);


# 625 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void tabletEvent(QTabletEvent *);


# 628 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void actionEvent(QActionEvent *);



# 632 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void dragEnterEvent(QDragEnterEvent *);
virtual void dragMoveEvent(QDragMoveEvent *);
virtual void dragLeaveEvent(QDragLeaveEvent *);
virtual void dropEvent(QDropEvent *);


# 638 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
virtual void showEvent(QShowEvent *);
virtual void hideEvent(QHideEvent *);
virtual bool nativeEvent(const QByteArray &eventType, void *message, long *result);


virtual void changeEvent(QEvent *);

int metric(PaintDeviceMetric) const;
void initPainter(QPainter *painter) const;
QPaintDevice *redirected(QPoint *offset) const;
QPainter *sharedPainter() const;

virtual void inputMethodEvent(QInputMethodEvent *);
public:
virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;

Qt::InputMethodHints inputMethodHints() const;
void setInputMethodHints(Qt::InputMethodHints hints);

protected slots:
void updateMicroFocus();
protected:

void create(WId = 0, bool initializeWindow = true,
bool destroyOldWindow = true);
void destroy(bool destroyWindow = true,
bool destroySubWindows = true);

virtual bool focusNextPrevChild(bool next);
inline bool focusNextChild() { return focusNextPrevChild(true); }
inline bool focusPreviousChild() { return focusNextPrevChild(false); }

protected:
QWidget(QWidgetPrivate &d, QWidget* parent, Qt::WindowFlags f);
private:
void setBackingStore(QBackingStore *store);

bool testAttribute_helper(Qt::WidgetAttribute) const;

QLayout *takeLayout();

friend class QBackingStoreDevice;
friend class QWidgetBackingStore;
friend class QApplication;
friend class QApplicationPrivate;
friend class QGuiApplication;
friend class QGuiApplicationPrivate;
friend class QBaseApplication;
friend class QPainter;
friend class QPainterPrivate;
friend class QPixmap; 
friend class QFontMetrics;
friend class QFontInfo;
friend class QETWidget;
friend class QLayout;
friend class QWidgetItem;
friend class QWidgetItemV2;
friend class QGLContext;
friend class QGLWidget;
friend class QGLWindowSurface;
friend class QX11PaintEngine;
friend class QWin32PaintEngine;
friend class QShortcutPrivate;
friend class QWindowSurface;
friend class QGraphicsProxyWidget;
friend class QGraphicsProxyWidgetPrivate;
friend class QStyleSheetStyle;
friend struct QWidgetExceptionCleaner;
friend class QWidgetWindow;
friend class QAccessibleWidget;
friend class QAccessibleTable;

# 710 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
friend class QGestureManager;
friend class QWinNativePanGestureRecognizer;

# 713 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
friend class QWidgetEffectSourcePrivate;




# 718 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"
friend  QWidgetData *qt_qwidget_data(QWidget *widget);
friend  QWidgetPrivate *qt_widget_private(QWidget *widget);

private:
QWidget(const QWidget &) ; QWidget &operator=(const QWidget &) ;


QWidgetData *data;
};

 inline QFlags<QWidget::RenderFlags::enum_type> operator|(QWidget::RenderFlags::enum_type f1, QWidget::RenderFlags::enum_type f2) { return QFlags<QWidget::RenderFlags::enum_type>(f1) | f2; }  inline QFlags<QWidget::RenderFlags::enum_type> operator|(QWidget::RenderFlags::enum_type f1, QFlags<QWidget::RenderFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QWidget::RenderFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

template <> inline QWidget *qobject_cast<QWidget*>(QObject *o)
{
if (!o || !o->isWidgetType()) return 0;
return static_cast<QWidget*>(o);
}
template <> inline const QWidget *qobject_cast<const QWidget*>(const QObject *o)
{
if (!o || !o->isWidgetType()) return 0;
return static_cast<const QWidget*>(o);
}

inline QWidget *QWidget::childAt(int ax, int ay) const
{ return childAt(QPoint(ax, ay)); }

inline Qt::WindowType QWidget::windowType() const
{ return static_cast<Qt::WindowType>(int(data->window_flags & Qt::WindowType_Mask)); }
inline Qt::WindowFlags QWidget::windowFlags() const
{ return data->window_flags; }

inline bool QWidget::isTopLevel() const
{ return (windowType() & Qt::Window); }

inline bool QWidget::isWindow() const
{ return (windowType() & Qt::Window); }

inline bool QWidget::isEnabled() const
{ return !testAttribute(Qt::WA_Disabled); }

inline bool QWidget::isModal() const
{ return data->window_modality != Qt::NonModal; }

inline bool QWidget::isEnabledToTLW() const
{ return isEnabled(); }

inline int QWidget::minimumWidth() const
{ return minimumSize().width(); }

inline int QWidget::minimumHeight() const
{ return minimumSize().height(); }

inline int QWidget::maximumWidth() const
{ return maximumSize().width(); }

inline int QWidget::maximumHeight() const
{ return maximumSize().height(); }

inline void QWidget::setMinimumSize(const QSize &s)
{ setMinimumSize(s.width(),s.height()); }

inline void QWidget::setMaximumSize(const QSize &s)
{ setMaximumSize(s.width(),s.height()); }

inline void QWidget::setSizeIncrement(const QSize &s)
{ setSizeIncrement(s.width(),s.height()); }

inline void QWidget::setBaseSize(const QSize &s)
{ setBaseSize(s.width(),s.height()); }

inline const QFont &QWidget::font() const
{ return data->fnt; }

inline QFontMetrics QWidget::fontMetrics() const
{ return QFontMetrics(data->fnt); }

inline QFontInfo QWidget::fontInfo() const
{ return QFontInfo(data->fnt); }

inline void QWidget::setMouseTracking(bool enable)
{ setAttribute(Qt::WA_MouseTracking, enable); }

inline bool QWidget::hasMouseTracking() const
{ return testAttribute(Qt::WA_MouseTracking); }

inline bool QWidget::underMouse() const
{ return testAttribute(Qt::WA_UnderMouse); }

inline bool QWidget::updatesEnabled() const
{ return !testAttribute(Qt::WA_UpdatesDisabled); }

inline void QWidget::update(int ax, int ay, int aw, int ah)
{ update(QRect(ax, ay, aw, ah)); }

inline bool QWidget::isVisible() const
{ return testAttribute(Qt::WA_WState_Visible); }

inline bool QWidget::isHidden() const
{ return testAttribute(Qt::WA_WState_Hidden); }

inline void QWidget::move(int ax, int ay)
{ move(QPoint(ax, ay)); }

inline void QWidget::resize(int w, int h)
{ resize(QSize(w, h)); }

inline void QWidget::setGeometry(int ax, int ay, int aw, int ah)
{ setGeometry(QRect(ax, ay, aw, ah)); }

inline QRect QWidget::rect() const
{ return QRect(0,0,data->crect.width(),data->crect.height()); }

inline const QRect &QWidget::geometry() const
{ return data->crect; }

inline QSize QWidget::size() const
{ return data->crect.size(); }

inline int QWidget::width() const
{ return data->crect.width(); }

inline int QWidget::height() const
{ return data->crect.height(); }

inline QWidget *QWidget::parentWidget() const
{ return static_cast<QWidget *>(QObject::parent()); }

inline void QWidget::setSizePolicy(QSizePolicy::Policy hor, QSizePolicy::Policy ver)
{ setSizePolicy(QSizePolicy(hor, ver)); }

inline bool QWidget::testAttribute(Qt::WidgetAttribute attribute) const
{
if (attribute < int(8*sizeof(uint)))
return data->widget_attributes & (1<<attribute);
return testAttribute_helper(attribute);
}




# 858 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"



class QPushButton;
class QDialogPrivate;

class  QDialog : public QWidget
{
Q_OBJECT
friend class QPushButton;

Q_PROPERTY(bool sizeGripEnabled READ isSizeGripEnabled WRITE setSizeGripEnabled)
Q_PROPERTY(bool modal READ isModal WRITE setModal)

public:
explicit QDialog(QWidget *parent = 0, Qt::WindowFlags f = 0);
~QDialog();

enum DialogCode { Rejected, Accepted };

int result() const;

void setVisible(bool visible);

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

void setExtension(QWidget* extension);
QWidget* extension() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setSizeGripEnabled(bool);
bool isSizeGripEnabled() const;

void setModal(bool modal);
void setResult(int r);

signals:
void finished(int result);
void accepted();
void rejected();

public slots:
virtual void open();
virtual int exec();
virtual void done(int);
virtual void accept();
virtual void reject();

void showExtension(bool);

protected:
QDialog(QDialogPrivate &, QWidget *parent, Qt::WindowFlags f = 0);




# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"
void keyPressEvent(QKeyEvent *);
void closeEvent(QCloseEvent *);
void showEvent(QShowEvent *);
void resizeEvent(QResizeEvent *);

# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"
void contextMenuEvent(QContextMenuEvent *);

# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"
bool eventFilter(QObject *, QEvent *);
void adjustPosition(QWidget*);
private:
inline QDialogPrivate* d_func() { return reinterpret_cast<QDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDialogPrivate* d_func() const { return reinterpret_cast<const QDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDialogPrivate;
QDialog(const QDialog &) ; QDialog &operator=(const QDialog &) ;




# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"
class QColorDialogPrivate;

class  QColorDialog : public QDialog
{
Q_OBJECT
inline QColorDialogPrivate* d_func() { return reinterpret_cast<QColorDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QColorDialogPrivate* d_func() const { return reinterpret_cast<const QColorDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QColorDialogPrivate;
Q_ENUMS(ColorDialogOption)
Q_PROPERTY(QColor currentColor READ currentColor WRITE setCurrentColor
NOTIFY currentColorChanged)
Q_PROPERTY(ColorDialogOptions options READ options WRITE setOptions)

public:
enum ColorDialogOption {
ShowAlphaChannel = 0x00000001,
NoButtons = 0x00000002,
DontUseNativeDialog = 0x00000004
};

typedef QFlags<ColorDialogOption> ColorDialogOptions;

explicit QColorDialog(QWidget *parent = 0);
explicit QColorDialog(const QColor &initial, QWidget *parent = 0);
~QColorDialog();

void setCurrentColor(const QColor &color);
QColor currentColor() const;

QColor selectedColor() const;

void setOption(ColorDialogOption option, bool on = true);
bool testOption(ColorDialogOption option) const;
void setOptions(ColorDialogOptions options);
ColorDialogOptions options() const;


# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"
void open() { QDialog::open(); }



# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"
void open(QObject *receiver, const char *member);

void setVisible(bool visible);

static QColor getColor(const QColor &initial = Qt::white,
QWidget *parent = 0,
const QString &title = QString(),
ColorDialogOptions options = 0);


static QRgb getRgba(QRgb rgba = 0xffffffff, bool *ok = 0, QWidget *parent = 0);

static int customCount();
static QColor customColor(int index);
static void setCustomColor(int index, QColor color);
static QColor standardColor(int index);
static void setStandardColor(int index, QColor color);

signals:
void currentColorChanged(const QColor &color);
void colorSelected(const QColor &color);

protected:
void changeEvent(QEvent *event);
void done(int result);

private:
QColorDialog(const QColorDialog &) ; QColorDialog &operator=(const QColorDialog &) ;







friend class QColorShower;
};

 inline QFlags<QColorDialog::ColorDialogOptions::enum_type> operator|(QColorDialog::ColorDialogOptions::enum_type f1, QColorDialog::ColorDialogOptions::enum_type f2) { return QFlags<QColorDialog::ColorDialogOptions::enum_type>(f1) | f2; }  inline QFlags<QColorDialog::ColorDialogOptions::enum_type> operator|(QColorDialog::ColorDialogOptions::enum_type f1, QFlags<QColorDialog::ColorDialogOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QColorDialog::ColorDialogOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolordialog.h"



# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qerrormessage.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qerrormessage.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qerrormessage.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qerrormessage.h"
class QErrorMessagePrivate;

class  QErrorMessage: public QDialog
{
Q_OBJECT
inline QErrorMessagePrivate* d_func() { return reinterpret_cast<QErrorMessagePrivate *>(qGetPtrHelper(d_ptr)); } inline const QErrorMessagePrivate* d_func() const { return reinterpret_cast<const QErrorMessagePrivate *>(qGetPtrHelper(d_ptr)); } friend class QErrorMessagePrivate;
public:
explicit QErrorMessage(QWidget* parent = 0);
~QErrorMessage();

static QErrorMessage * qtHandler();

public slots:
void showMessage(const QString &message);
void showMessage(const QString &message, const QString &type);

protected:
void done(int);
void changeEvent(QEvent *e);

private:
QErrorMessage(const QErrorMessage &) ; QErrorMessage &operator=(const QErrorMessage &) ;
};



# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qerrormessage.h"



# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"













































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"
class QModelIndex;
class QItemSelection;
struct QFileDialogArgs;
class QFileIconProvider;
class QFileDialogPrivate;
class QAbstractItemDelegate;
class QAbstractProxyModel;
class QUrl;

class  QFileDialog : public QDialog
{
Q_OBJECT
Q_ENUMS(ViewMode FileMode AcceptMode Option)

Q_PROPERTY(ViewMode viewMode READ viewMode WRITE setViewMode)
Q_PROPERTY(FileMode fileMode READ fileMode WRITE setFileMode)
Q_PROPERTY(AcceptMode acceptMode READ acceptMode WRITE setAcceptMode)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly DESIGNABLE false)
Q_PROPERTY(bool resolveSymlinks READ resolveSymlinks WRITE setResolveSymlinks DESIGNABLE false)
Q_PROPERTY(bool confirmOverwrite READ confirmOverwrite WRITE setConfirmOverwrite DESIGNABLE false)
Q_PROPERTY(QString defaultSuffix READ defaultSuffix WRITE setDefaultSuffix)
Q_PROPERTY(bool nameFilterDetailsVisible READ isNameFilterDetailsVisible
WRITE setNameFilterDetailsVisible DESIGNABLE false)
Q_PROPERTY(Options options READ options WRITE setOptions)

public:
enum ViewMode { Detail, List };
enum FileMode { AnyFile, ExistingFile, Directory, ExistingFiles, DirectoryOnly };
enum AcceptMode { AcceptOpen, AcceptSave };
enum DialogLabel { LookIn, FileName, FileType, Accept, Reject };

enum Option
{
ShowDirsOnly = 0x00000001,
DontResolveSymlinks = 0x00000002,
DontConfirmOverwrite = 0x00000004,
DontUseSheet = 0x00000008,
DontUseNativeDialog = 0x00000010,
ReadOnly = 0x00000020,
HideNameFilterDetails = 0x00000040
};
typedef QFlags<Option> Options;

QFileDialog(QWidget *parent, Qt::WindowFlags f);
explicit QFileDialog(QWidget *parent = 0,
const QString &caption = QString(),
const QString &directory = QString(),
const QString &filter = QString());
~QFileDialog();

void setDirectory(const QString &directory);
inline void setDirectory(const QDir &directory);
QDir directory() const;

void selectFile(const QString &filename);
QStringList selectedFiles() const;

void setNameFilterDetailsVisible(bool enabled);
bool isNameFilterDetailsVisible() const;

void setNameFilter(const QString &filter);
void setNameFilters(const QStringList &filters);
QStringList nameFilters() const;
void selectNameFilter(const QString &filter);
QString selectedNameFilter() const;

QDir::Filters filter() const;
void setFilter(QDir::Filters filters);

void setViewMode(ViewMode mode);
ViewMode viewMode() const;

void setFileMode(FileMode mode);
FileMode fileMode() const;

void setAcceptMode(AcceptMode mode);
AcceptMode acceptMode() const;

void setReadOnly(bool enabled);
bool isReadOnly() const;

void setResolveSymlinks(bool enabled);
bool resolveSymlinks() const;

void setSidebarUrls(const QList<QUrl> &urls);
QList<QUrl> sidebarUrls() const;

QByteArray saveState() const;
bool restoreState(const QByteArray &state);

void setConfirmOverwrite(bool enabled);
bool confirmOverwrite() const;

void setDefaultSuffix(const QString &suffix);
QString defaultSuffix() const;

void setHistory(const QStringList &paths);
QStringList history() const;

void setItemDelegate(QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegate() const;

void setIconProvider(QFileIconProvider *provider);
QFileIconProvider *iconProvider() const;

void setLabelText(DialogLabel label, const QString &text);
QString labelText(DialogLabel label) const;


# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"
void setProxyModel(QAbstractProxyModel *model);
QAbstractProxyModel *proxyModel() const;


# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"
void setOption(Option option, bool on = true);
bool testOption(Option option) const;
void setOptions(Options options);
Options options() const;



# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"
void open() { QDialog::open(); }




# 179 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"
void open(QObject *receiver, const char *member);
void setVisible(bool visible);

signals:
void fileSelected(const QString &file);
void filesSelected(const QStringList &files);
void currentChanged(const QString &path);
void directoryEntered(const QString &directory);
void filterSelected(const QString &filter);

public:

static QString getOpenFileName(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
const QString &filter = QString(),
QString *selectedFilter = 0,
Options options = 0);

static QString getSaveFileName(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
const QString &filter = QString(),
QString *selectedFilter = 0,
Options options = 0);

static QString getExistingDirectory(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
Options options = ShowDirsOnly);

static QStringList getOpenFileNames(QWidget *parent = 0,
const QString &caption = QString(),
const QString &dir = QString(),
const QString &filter = QString(),
QString *selectedFilter = 0,
Options options = 0);


protected:
QFileDialog(const QFileDialogArgs &args);
void done(int result);
void accept();
void changeEvent(QEvent *e);

private:
inline QFileDialogPrivate* d_func() { return reinterpret_cast<QFileDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFileDialogPrivate* d_func() const { return reinterpret_cast<const QFileDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFileDialogPrivate;
QFileDialog(const QFileDialog &) ; QFileDialog &operator=(const QFileDialog &) ;


























friend class QPlatformDialogHelper;
};

inline void QFileDialog::setDirectory(const QDir &adirectory)
{ setDirectory(adirectory.absolutePath()); }

 inline QFlags<QFileDialog::Options::enum_type> operator|(QFileDialog::Options::enum_type f1, QFileDialog::Options::enum_type f2) { return QFlags<QFileDialog::Options::enum_type>(f1) | f2; }  inline QFlags<QFileDialog::Options::enum_type> operator|(QFileDialog::Options::enum_type f1, QFlags<QFileDialog::Options::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QFileDialog::Options::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 263 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfiledialog.h"



# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"













































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdiriterator.h"




























































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"





# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"
class ExtendedInformation;
class QFileSystemModelPrivate;
class QFileIconProvider;

class  QFileSystemModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(bool resolveSymlinks READ resolveSymlinks WRITE setResolveSymlinks)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool nameFilterDisables READ nameFilterDisables WRITE setNameFilterDisables)

signals:
void rootPathChanged(const QString &newPath);
void fileRenamed(const QString &path, const QString &oldName, const QString &newName);
void directoryLoaded(const QString &path);

public:
enum Roles {
FileIconRole = Qt::DecorationRole,
FilePathRole = Qt::UserRole + 1,
FileNameRole = Qt::UserRole + 2,
FilePermissions = Qt::UserRole + 3
};

explicit QFileSystemModel(QObject *parent = 0);
~QFileSystemModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex index(const QString &path, int column = 0) const;
QModelIndex parent(const QModelIndex &child) const;
bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
bool canFetchMore(const QModelIndex &parent) const;
void fetchMore(const QModelIndex &parent);

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;

QVariant myComputer(int role = Qt::DisplayRole) const;
QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;

Qt::ItemFlags flags(const QModelIndex &index) const;

void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList mimeTypes() const;
QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
Qt::DropActions supportedDropActions() const;


QModelIndex setRootPath(const QString &path);
QString rootPath() const;
QDir rootDirectory() const;

void setIconProvider(QFileIconProvider *provider);
QFileIconProvider *iconProvider() const;

void setFilter(QDir::Filters filters);
QDir::Filters filter() const;

void setResolveSymlinks(bool enable);
bool resolveSymlinks() const;

void setReadOnly(bool enable);
bool isReadOnly() const;

void setNameFilterDisables(bool enable);
bool nameFilterDisables() const;

void setNameFilters(const QStringList &filters);
QStringList nameFilters() const;

QString filePath(const QModelIndex &index) const;
bool isDir(const QModelIndex &index) const;
qint64 size(const QModelIndex &index) const;
QString type(const QModelIndex &index) const;
QDateTime lastModified(const QModelIndex &index) const;

QModelIndex mkdir(const QModelIndex &parent, const QString &name);
bool rmdir(const QModelIndex &index);
inline QString fileName(const QModelIndex &index) const;
inline QIcon fileIcon(const QModelIndex &index) const;
QFile::Permissions permissions(const QModelIndex &index) const;
inline QFileInfo fileInfo(const QModelIndex &index) const;
bool remove(const QModelIndex &index);

protected:
QFileSystemModel(QFileSystemModelPrivate &, QObject *parent = 0);
void timerEvent(QTimerEvent *event);
bool event(QEvent *event);

private:
inline QFileSystemModelPrivate* d_func() { return reinterpret_cast<QFileSystemModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFileSystemModelPrivate* d_func() const { return reinterpret_cast<const QFileSystemModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFileSystemModelPrivate;
QFileSystemModel(const QFileSystemModel &) ; QFileSystemModel &operator=(const QFileSystemModel &) ;






friend class QFileDialogPrivate;
};

inline QString QFileSystemModel::fileName(const QModelIndex &aindex) const
{ return aindex.data(Qt::DisplayRole).toString(); }
inline QIcon QFileSystemModel::fileIcon(const QModelIndex &aindex) const
{ return qvariant_cast<QIcon>(aindex.data(Qt::DecorationRole)); }
inline QFileInfo QFileSystemModel::fileInfo(const QModelIndex &aindex) const
{ return QFileInfo(filePath(aindex)); }



# 172 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfilesystemmodel.h"




# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"
class QFontDialogPrivate;

class  QFontDialog : public QDialog
{
Q_OBJECT
inline QFontDialogPrivate* d_func() { return reinterpret_cast<QFontDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFontDialogPrivate* d_func() const { return reinterpret_cast<const QFontDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFontDialogPrivate;
Q_ENUMS(FontDialogOption)
Q_PROPERTY(QFont currentFont READ currentFont WRITE setCurrentFont NOTIFY currentFontChanged)
Q_PROPERTY(FontDialogOptions options READ options WRITE setOptions)

public:
enum FontDialogOption {
NoButtons = 0x00000001,
DontUseNativeDialog = 0x00000002
};

typedef QFlags<FontDialogOption> FontDialogOptions;

explicit QFontDialog(QWidget *parent = 0);
explicit QFontDialog(const QFont &initial, QWidget *parent = 0);
~QFontDialog();

void setCurrentFont(const QFont &font);
QFont currentFont() const;

QFont selectedFont() const;

void setOption(FontDialogOption option, bool on = true);
bool testOption(FontDialogOption option) const;
void setOptions(FontDialogOptions options);
FontDialogOptions options() const;



# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"
void open() { QDialog::open(); }




# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"
void open(QObject *receiver, const char *member);

void setVisible(bool visible);

static QFont getFont(bool *ok, QWidget *parent = 0);
static QFont getFont(bool *ok, const QFont &initial, QWidget *parent = 0, const QString &title = QString(),
FontDialogOptions options = 0);

signals:
void currentFontChanged(const QFont &font);
void fontSelected(const QFont &font);

protected:
void changeEvent(QEvent *event);
void done(int result);
bool eventFilter(QObject *object, QEvent *event);

private:
QFontDialog(const QFontDialog &) ; QFontDialog &operator=(const QFontDialog &) ;







};

 inline QFlags<QFontDialog::FontDialogOptions::enum_type> operator|(QFontDialog::FontDialogOptions::enum_type f1, QFontDialog::FontDialogOptions::enum_type f2) { return QFlags<QFontDialog::FontDialogOptions::enum_type>(f1) | f2; }  inline QFlags<QFontDialog::FontDialogOptions::enum_type> operator|(QFontDialog::FontDialogOptions::enum_type f1, QFlags<QFontDialog::FontDialogOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QFontDialog::FontDialogOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontdialog.h"



# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"



class QFramePrivate;

class  QFrame : public QWidget
{
Q_OBJECT

Q_ENUMS(Shape Shadow)
Q_PROPERTY(Shape frameShape READ frameShape WRITE setFrameShape)
Q_PROPERTY(Shadow frameShadow READ frameShadow WRITE setFrameShadow)
Q_PROPERTY(int lineWidth READ lineWidth WRITE setLineWidth)
Q_PROPERTY(int midLineWidth READ midLineWidth WRITE setMidLineWidth)
Q_PROPERTY(int frameWidth READ frameWidth)
Q_PROPERTY(QRect frameRect READ frameRect WRITE setFrameRect DESIGNABLE false)

public:
explicit QFrame(QWidget* parent = 0, Qt::WindowFlags f = 0);
~QFrame();

int frameStyle() const;
void setFrameStyle(int);

int frameWidth() const;

QSize sizeHint() const;

enum Shape {
NoFrame = 0, 
Box = 0x0001, 
Panel = 0x0002, 
WinPanel = 0x0003, 
HLine = 0x0004, 
VLine = 0x0005, 
StyledPanel = 0x0006 
};
enum Shadow {
Plain = 0x0010, 
Raised = 0x0020, 
Sunken = 0x0030 
};

enum StyleMask {
Shadow_Mask = 0x00f0, 
Shape_Mask = 0x000f 
};

Shape frameShape() const;
void setFrameShape(Shape);
Shadow frameShadow() const;
void setFrameShadow(Shadow);

int lineWidth() const;
void setLineWidth(int);

int midLineWidth() const;
void setMidLineWidth(int);

QRect frameRect() const;
void setFrameRect(const QRect &);

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void changeEvent(QEvent *);
void drawFrame(QPainter *);


protected:
QFrame(QFramePrivate &dd, QWidget* parent = 0, Qt::WindowFlags f = 0);

private:
QFrame(const QFrame &) ; QFrame &operator=(const QFrame &) ;
inline QFramePrivate* d_func() { return reinterpret_cast<QFramePrivate *>(qGetPtrHelper(d_ptr)); } inline const QFramePrivate* d_func() const { return reinterpret_cast<const QFramePrivate *>(qGetPtrHelper(d_ptr)); } friend class QFramePrivate;
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
















































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
class QValidator;
class QMenu;
class QLineEditPrivate;
class QCompleter;
class QStyleOptionFrame;
class QAbstractSpinBox;
class QDateTimeEdit;

class  QLineEdit : public QWidget
{
Q_OBJECT

Q_ENUMS(EchoMode)
Q_PROPERTY(QString inputMask READ inputMask WRITE setInputMask)
Q_PROPERTY(QString text READ text WRITE setText NOTIFY textChanged USER true)
Q_PROPERTY(int maxLength READ maxLength WRITE setMaxLength)
Q_PROPERTY(bool frame READ hasFrame WRITE setFrame)
Q_PROPERTY(EchoMode echoMode READ echoMode WRITE setEchoMode)
Q_PROPERTY(QString displayText READ displayText)
Q_PROPERTY(int cursorPosition READ cursorPosition WRITE setCursorPosition)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool modified READ isModified WRITE setModified DESIGNABLE false)
Q_PROPERTY(bool hasSelectedText READ hasSelectedText)
Q_PROPERTY(QString selectedText READ selectedText)
Q_PROPERTY(bool dragEnabled READ dragEnabled WRITE setDragEnabled)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool undoAvailable READ isUndoAvailable)
Q_PROPERTY(bool redoAvailable READ isRedoAvailable)
Q_PROPERTY(bool acceptableInput READ hasAcceptableInput)
Q_PROPERTY(QString placeholderText READ placeholderText WRITE setPlaceholderText)
Q_PROPERTY(Qt::CursorMoveStyle cursorMoveStyle READ cursorMoveStyle WRITE setCursorMoveStyle)

public:
explicit QLineEdit(QWidget* parent=0);
explicit QLineEdit(const QString &, QWidget* parent=0);
~QLineEdit();

QString text() const;

QString displayText() const;

QString placeholderText() const;
void setPlaceholderText(const QString &);

int maxLength() const;
void setMaxLength(int);

void setFrame(bool);
bool hasFrame() const;

enum EchoMode { Normal, NoEcho, Password, PasswordEchoOnEdit };
EchoMode echoMode() const;
void setEchoMode(EchoMode);

bool isReadOnly() const;
void setReadOnly(bool);


# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void setValidator(const QValidator *);
const QValidator * validator() const;



# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void setCompleter(QCompleter *completer);
QCompleter *completer() const;


# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
QSize sizeHint() const;
QSize minimumSizeHint() const;

int cursorPosition() const;
void setCursorPosition(int);
int cursorPositionAt(const QPoint &pos);

void setAlignment(Qt::Alignment flag);
Qt::Alignment alignment() const;

void cursorForward(bool mark, int steps = 1);
void cursorBackward(bool mark, int steps = 1);
void cursorWordForward(bool mark);
void cursorWordBackward(bool mark);
void backspace();
void del();
void home(bool mark);
void end(bool mark);

bool isModified() const;
void setModified(bool);

void setSelection(int, int);
bool hasSelectedText() const;
QString selectedText() const;
int selectionStart() const;

bool isUndoAvailable() const;
bool isRedoAvailable() const;

void setDragEnabled(bool b);
bool dragEnabled() const;

void setCursorMoveStyle(Qt::CursorMoveStyle style);
Qt::CursorMoveStyle cursorMoveStyle() const;

QString inputMask() const;
void setInputMask(const QString &inputMask);
bool hasAcceptableInput() const;

void setTextMargins(int left, int top, int right, int bottom);
void setTextMargins(const QMargins &margins);
void getTextMargins(int *left, int *top, int *right, int *bottom) const;
QMargins textMargins() const;

public slots:
void setText(const QString &);
void clear();
void selectAll();
void undo();
void redo();

# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void cut();
void copy() const;
void paste();


# 179 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
public:
void deselect();
void insert(const QString &);

# 183 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
QMenu *createStandardContextMenu();


# 186 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
signals:
void textChanged(const QString &);
void textEdited(const QString &);
void cursorPositionChanged(int, int);
void returnPressed();
void editingFinished();
void selectionChanged();

protected:
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mouseDoubleClickEvent(QMouseEvent *);
void keyPressEvent(QKeyEvent *);
void focusInEvent(QFocusEvent *);
void focusOutEvent(QFocusEvent *);
void paintEvent(QPaintEvent *);

# 204 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void dragEnterEvent(QDragEnterEvent *);
void dragMoveEvent(QDragMoveEvent *e);
void dragLeaveEvent(QDragLeaveEvent *e);
void dropEvent(QDropEvent *);

# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void changeEvent(QEvent *);

# 211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void contextMenuEvent(QContextMenuEvent *);


# 214 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
void inputMethodEvent(QInputMethodEvent *);
void initStyleOption(QStyleOptionFrame *option) const;
public:
QVariant inputMethodQuery(Qt::InputMethodQuery) const;
bool event(QEvent *);
protected:
QRect cursorRect() const;

public:

private:
friend class QAbstractSpinBox;
friend class QAccessibleLineEdit;



# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"
QLineEdit(const QLineEdit &) ; QLineEdit &operator=(const QLineEdit &) ;
inline QLineEditPrivate* d_func() { return reinterpret_cast<QLineEditPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLineEditPrivate* d_func() const { return reinterpret_cast<const QLineEditPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLineEditPrivate;




# 236 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"





# 241 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"


};



# 247 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"
class QInputDialogPrivate;

class  QInputDialog : public QDialog
{
Q_OBJECT
inline QInputDialogPrivate* d_func() { return reinterpret_cast<QInputDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QInputDialogPrivate* d_func() const { return reinterpret_cast<const QInputDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QInputDialogPrivate;



















public:
enum InputDialogOption {
NoButtons = 0x00000001,
UseListViewForComboBoxItems = 0x00000002
};

typedef QFlags<InputDialogOption> InputDialogOptions;

enum InputMode {
TextInput,
IntInput,
DoubleInput
};

QInputDialog(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QInputDialog();

void setInputMode(InputMode mode);
InputMode inputMode() const;

void setLabelText(const QString &text);
QString labelText() const;

void setOption(InputDialogOption option, bool on = true);
bool testOption(InputDialogOption option) const;
void setOptions(InputDialogOptions options);
InputDialogOptions options() const;

void setTextValue(const QString &text);
QString textValue() const;

void setTextEchoMode(QLineEdit::EchoMode mode);
QLineEdit::EchoMode textEchoMode() const;

void setComboBoxEditable(bool editable);
bool isComboBoxEditable() const;

void setComboBoxItems(const QStringList &items);
QStringList comboBoxItems() const;

void setIntValue(int value);
int intValue() const;

void setIntMinimum(int min);
int intMinimum() const;

void setIntMaximum(int max);
int intMaximum() const;

void setIntRange(int min, int max);

void setIntStep(int step);
int intStep() const;

void setDoubleValue(double value);
double doubleValue() const;

void setDoubleMinimum(double min);
double doubleMinimum() const;

void setDoubleMaximum(double max);
double doubleMaximum() const;

void setDoubleRange(double min, double max);

void setDoubleDecimals(int decimals);
int doubleDecimals() const;

void setOkButtonText(const QString &text);
QString okButtonText() const;

void setCancelButtonText(const QString &text);
QString cancelButtonText() const;



# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"
void open() { QDialog::open(); }




# 160 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"
void open(QObject *receiver, const char *member);

QSize minimumSizeHint() const;
QSize sizeHint() const;

void setVisible(bool visible);

static QString getText(QWidget *parent, const QString &title, const QString &label,
QLineEdit::EchoMode echo = QLineEdit::Normal,
const QString &text = QString(), bool *ok = 0, Qt::WindowFlags flags = 0,
Qt::InputMethodHints inputMethodHints = Qt::ImhNone);
static QString getItem(QWidget *parent, const QString &title, const QString &label,
const QStringList &items, int current = 0, bool editable = true,
bool *ok = 0, Qt::WindowFlags flags = 0,
Qt::InputMethodHints inputMethodHints = Qt::ImhNone);

static int getInt(QWidget *parent, const QString &title, const QString &label, int value = 0,
int minValue = -2147483647, int maxValue = 2147483647,
int step = 1, bool *ok = 0, Qt::WindowFlags flags = 0);
static double getDouble(QWidget *parent, const QString &title, const QString &label, double value = 0,
double minValue = -2147483647, double maxValue = 2147483647,
int decimals = 1, bool *ok = 0, Qt::WindowFlags flags = 0);










# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"
signals:

void textValueChanged(const QString &text);
void textValueSelected(const QString &text);
void intValueChanged(int value);
void intValueSelected(int value);
void doubleValueChanged(double value);
void doubleValueSelected(double value);

public:
void done(int result);

private:
QInputDialog(const QInputDialog &) ; QInputDialog &operator=(const QInputDialog &) ;


};

 inline QFlags<QInputDialog::InputDialogOptions::enum_type> operator|(QInputDialog::InputDialogOptions::enum_type f1, QInputDialog::InputDialogOptions::enum_type f2) { return QFlags<QInputDialog::InputDialogOptions::enum_type>(f1) | f2; }  inline QFlags<QInputDialog::InputDialogOptions::enum_type> operator|(QInputDialog::InputDialogOptions::enum_type f1, QFlags<QInputDialog::InputDialogOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QInputDialog::InputDialogOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 214 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qinputdialog.h"



# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
class QLabel;
class QMessageBoxPrivate;
class QAbstractButton;

class  QMessageBox : public QDialog
{
Q_OBJECT
Q_ENUMS(Icon)

Q_PROPERTY(QString text READ text WRITE setText)
Q_PROPERTY(Icon icon READ icon WRITE setIcon)
Q_PROPERTY(QPixmap iconPixmap READ iconPixmap WRITE setIconPixmap)
Q_PROPERTY(Qt::TextFormat textFormat READ textFormat WRITE setTextFormat)
Q_PROPERTY(StandardButtons standardButtons READ standardButtons WRITE setStandardButtons)

# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
Q_PROPERTY(QString detailedText READ detailedText WRITE setDetailedText)

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
Q_PROPERTY(QString informativeText READ informativeText WRITE setInformativeText)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)

public:
enum Icon {
NoIcon = 0,
Information = 1,
Warning = 2,
Critical = 3,
Question = 4
};

enum ButtonRole {

InvalidRole = -1,
AcceptRole,
RejectRole,
DestructiveRole,
ActionRole,
HelpRole,
YesRole,
NoRole,
ResetRole,
ApplyRole,

NRoles
};

enum StandardButton {

NoButton = 0x00000000,
Ok = 0x00000400,
Save = 0x00000800,
SaveAll = 0x00001000,
Open = 0x00002000,
Yes = 0x00004000,
YesToAll = 0x00008000,
No = 0x00010000,
NoToAll = 0x00020000,
Abort = 0x00040000,
Retry = 0x00080000,
Ignore = 0x00100000,
Close = 0x00200000,
Cancel = 0x00400000,
Discard = 0x00800000,
Help = 0x01000000,
Apply = 0x02000000,
Reset = 0x04000000,
RestoreDefaults = 0x08000000,

FirstButton = Ok, 
LastButton = RestoreDefaults, 

YesAll = YesToAll, 
NoAll = NoToAll, 

Default = 0x00000100, 
Escape = 0x00000200, 
FlagMask = 0x00000300, 
ButtonMask = ~FlagMask 
};
typedef StandardButton Button; 

typedef QFlags<StandardButton> StandardButtons;

explicit QMessageBox(QWidget *parent = 0);
QMessageBox(Icon icon, const QString &title, const QString &text,
StandardButtons buttons = NoButton, QWidget *parent = 0,
Qt::WindowFlags flags = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint);
~QMessageBox();

void addButton(QAbstractButton *button, ButtonRole role);
QPushButton *addButton(const QString &text, ButtonRole role);
QPushButton *addButton(StandardButton button);
void removeButton(QAbstractButton *button);







# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
void open() { QDialog::open(); }




# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
void open(QObject *receiver, const char *member);

QList<QAbstractButton *> buttons() const;
ButtonRole buttonRole(QAbstractButton *button) const;

void setStandardButtons(StandardButtons buttons);
StandardButtons standardButtons() const;
StandardButton standardButton(QAbstractButton *button) const;
QAbstractButton *button(StandardButton which) const;

QPushButton *defaultButton() const;
void setDefaultButton(QPushButton *button);
void setDefaultButton(StandardButton button);

QAbstractButton *escapeButton() const;
void setEscapeButton(QAbstractButton *button);
void setEscapeButton(StandardButton button);

QAbstractButton *clickedButton() const;

QString text() const;
void setText(const QString &text);

Icon icon() const;
void setIcon(Icon);

QPixmap iconPixmap() const;
void setIconPixmap(const QPixmap &pixmap);

Qt::TextFormat textFormat() const;
void setTextFormat(Qt::TextFormat format);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

static StandardButton information(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static StandardButton question(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = StandardButtons(Yes | No),
StandardButton defaultButton = NoButton);
static StandardButton warning(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static StandardButton critical(QWidget *parent, const QString &title,
const QString &text, StandardButtons buttons = Ok,
StandardButton defaultButton = NoButton);
static void about(QWidget *parent, const QString &title, const QString &text);
static void aboutQt(QWidget *parent, const QString &title = QString());



QMessageBox(const QString &title, const QString &text, Icon icon,
int button0, int button1, int button2,
QWidget *parent = 0,
Qt::WindowFlags f = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint);

static int information(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1 = 0, int button2 = 0);
static int information(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static StandardButton information(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1 = NoButton)
{ return information(parent, title, text, StandardButtons(button0), button1); }

static int question(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1 = 0, int button2 = 0);
static int question(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static int question(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1)
{ return question(parent, title, text, StandardButtons(button0), button1); }

static int warning(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1, int button2 = 0);
static int warning(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static int warning(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1)
{ return warning(parent, title, text, StandardButtons(button0), button1); }

static int critical(QWidget *parent, const QString &title,
const QString& text,
int button0, int button1, int button2 = 0);
static int critical(QWidget *parent, const QString &title,
const QString& text,
const QString& button0Text,
const QString& button1Text = QString(),
const QString& button2Text = QString(),
int defaultButtonNumber = 0,
int escapeButtonNumber = -1);
inline static int critical(QWidget *parent, const QString &title,
const QString& text,
StandardButton button0, StandardButton button1)
{ return critical(parent, title, text, StandardButtons(button0), button1); }

QString buttonText(int button) const;
void setButtonText(int button, const QString &text);

QString informativeText() const;
void setInformativeText(const QString &text);


# 280 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
QString detailedText() const;
void setDetailedText(const QString &text);


# 284 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
void setWindowTitle(const QString &title);
void setWindowModality(Qt::WindowModality windowModality);


static QPixmap standardIcon(Icon icon);

signals:
void buttonClicked(QAbstractButton *button);






# 298 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"
protected:
bool event(QEvent *e);
void resizeEvent(QResizeEvent *event);
void showEvent(QShowEvent *event);
void closeEvent(QCloseEvent *event);
void keyPressEvent(QKeyEvent *event);
void changeEvent(QEvent *event);

private:


QMessageBox(const QMessageBox &) ; QMessageBox &operator=(const QMessageBox &) ;
inline QMessageBoxPrivate* d_func() { return reinterpret_cast<QMessageBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMessageBoxPrivate* d_func() const { return reinterpret_cast<const QMessageBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMessageBoxPrivate;
};

 inline QFlags<QMessageBox::StandardButtons::enum_type> operator|(QMessageBox::StandardButtons::enum_type f1, QMessageBox::StandardButtons::enum_type f2) { return QFlags<QMessageBox::StandardButtons::enum_type>(f1) | f2; }  inline QFlags<QMessageBox::StandardButtons::enum_type> operator|(QMessageBox::StandardButtons::enum_type f1, QFlags<QMessageBox::StandardButtons::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QMessageBox::StandardButtons::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }





# 332 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmessagebox.h"



# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"
class QPushButton;
class QLabel;
class QProgressBar;
class QTimer;
class QProgressDialogPrivate;

class  QProgressDialog : public QDialog
{
Q_OBJECT
inline QProgressDialogPrivate* d_func() { return reinterpret_cast<QProgressDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QProgressDialogPrivate* d_func() const { return reinterpret_cast<const QProgressDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QProgressDialogPrivate;
Q_PROPERTY(bool wasCanceled READ wasCanceled)
Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(int value READ value WRITE setValue)
Q_PROPERTY(bool autoReset READ autoReset WRITE setAutoReset)
Q_PROPERTY(bool autoClose READ autoClose WRITE setAutoClose)
Q_PROPERTY(int minimumDuration READ minimumDuration WRITE setMinimumDuration)
Q_PROPERTY(QString labelText READ labelText WRITE setLabelText)

public:
explicit QProgressDialog(QWidget *parent = 0, Qt::WindowFlags flags = 0);
QProgressDialog(const QString &labelText, const QString &cancelButtonText,
int minimum, int maximum, QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QProgressDialog();

void setLabel(QLabel *label);
void setCancelButton(QPushButton *button);
void setBar(QProgressBar *bar);

bool wasCanceled() const;

int minimum() const;
int maximum() const;

int value() const;

QSize sizeHint() const;

QString labelText() const;
int minimumDuration() const;

void setAutoReset(bool reset);
bool autoReset() const;
void setAutoClose(bool close);
bool autoClose() const;



# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"
void open() { QDialog::open(); }




# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"
void open(QObject *receiver, const char *member);

public slots:
void cancel();
void reset();
void setMaximum(int maximum);
void setMinimum(int minimum);
void setRange(int minimum, int maximum);
void setValue(int progress);
void setLabelText(const QString &text);
void setCancelButtonText(const QString &text);
void setMinimumDuration(int ms);

signals:
void canceled();

protected:
void resizeEvent(QResizeEvent *event);
void closeEvent(QCloseEvent *event);
void changeEvent(QEvent *event);
void showEvent(QShowEvent *event);

protected slots:
void forceShow();

private:
QProgressDialog(const QProgressDialog &) ; QProgressDialog &operator=(const QProgressDialog &) ;


};



# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressdialog.h"



# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwizard.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwizard.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwizard.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwizard.h"
class QAbstractButton;
class QWizardPage;
class QWizardPrivate;

class  QWizard : public QDialog
{
Q_OBJECT
Q_ENUMS(WizardStyle WizardOption)

Q_PROPERTY(WizardStyle wizardStyle READ wizardStyle WRITE setWizardStyle)
Q_PROPERTY(WizardOptions options READ options WRITE setOptions)
Q_PROPERTY(Qt::TextFormat titleFormat READ titleFormat WRITE setTitleFormat)
Q_PROPERTY(Qt::TextFormat subTitleFormat READ subTitleFormat WRITE setSubTitleFormat)
Q_PROPERTY(int startId READ startId WRITE setStartId)
Q_PROPERTY(int currentId READ currentId NOTIFY currentIdChanged)

public:
enum WizardButton {
BackButton,
NextButton,
CommitButton,
FinishButton,
CancelButton,
HelpButton,
CustomButton1,
CustomButton2,
CustomButton3,
Stretch,

NoButton = -1,
NStandardButtons = 6,
NButtons = 9
};

enum WizardPixmap {
WatermarkPixmap,
LogoPixmap,
BannerPixmap,
BackgroundPixmap,
NPixmaps
};

enum WizardStyle {
ClassicStyle,
ModernStyle,
MacStyle,
AeroStyle,
NStyles
};

enum WizardOption {
IndependentPages = 0x00000001,
IgnoreSubTitles = 0x00000002,
ExtendedWatermarkPixmap = 0x00000004,
NoDefaultButton = 0x00000008,
NoBackButtonOnStartPage = 0x00000010,
NoBackButtonOnLastPage = 0x00000020,
DisabledBackButtonOnLastPage = 0x00000040,
HaveNextButtonOnLastPage = 0x00000080,
HaveFinishButtonOnEarlyPages = 0x00000100,
NoCancelButton = 0x00000200,
CancelButtonOnLeft = 0x00000400,
HaveHelpButton = 0x00000800,
HelpButtonOnRight = 0x00001000,
HaveCustomButton1 = 0x00002000,
HaveCustomButton2 = 0x00004000,
HaveCustomButton3 = 0x00008000
};

typedef QFlags<WizardOption> WizardOptions;

explicit QWizard(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QWizard();

int addPage(QWizardPage *page);
void setPage(int id, QWizardPage *page);
void removePage(int id);
QWizardPage *page(int id) const;
bool hasVisitedPage(int id) const;
QList<int> visitedPages() const; 
QList<int> pageIds() const;
void setStartId(int id);
int startId() const;
QWizardPage *currentPage() const;
int currentId() const;

virtual bool validateCurrentPage();
virtual int nextId() const;

void setField(const QString &name, const QVariant &value);
QVariant field(const QString &name) const;

void setWizardStyle(WizardStyle style);
WizardStyle wizardStyle() const;

void setOption(WizardOption option, bool on = true);
bool testOption(WizardOption option) const;
void setOptions(WizardOptions options);
WizardOptions options() const;

void setButtonText(WizardButton which, const QString &text);
QString buttonText(WizardButton which) const;
void setButtonLayout(const QList<WizardButton> &layout);
void setButton(WizardButton which, QAbstractButton *button);
QAbstractButton *button(WizardButton which) const;

void setTitleFormat(Qt::TextFormat format);
Qt::TextFormat titleFormat() const;
void setSubTitleFormat(Qt::TextFormat format);
Qt::TextFormat subTitleFormat() const;
void setPixmap(WizardPixmap which, const QPixmap &pixmap);
QPixmap pixmap(WizardPixmap which) const;

void setSideWidget(QWidget *widget);
QWidget *sideWidget() const;

void setDefaultProperty(const char *className, const char *property,
const char *changedSignal);

void setVisible(bool visible);
QSize sizeHint() const;

signals:
void currentIdChanged(int id);
void helpRequested();
void customButtonClicked(int which);
void pageAdded(int id);
void pageRemoved(int id);

public slots:
void back();
void next();
void restart();

protected:
bool event(QEvent *event);
void resizeEvent(QResizeEvent *event);
void paintEvent(QPaintEvent *event);



# 193 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwizard.h"
void done(int result);
virtual void initializePage(int id);
virtual void cleanupPage(int id);

private:
QWizard(const QWizard &) ; QWizard &operator=(const QWizard &) ;
inline QWizardPrivate* d_func() { return reinterpret_cast<QWizardPrivate *>(qGetPtrHelper(d_ptr)); } inline const QWizardPrivate* d_func() const { return reinterpret_cast<const QWizardPrivate *>(qGetPtrHelper(d_ptr)); } friend class QWizardPrivate;




friend class QWizardPage;
};

 inline QFlags<QWizard::WizardOptions::enum_type> operator|(QWizard::WizardOptions::enum_type f1, QWizard::WizardOptions::enum_type f2) { return QFlags<QWizard::WizardOptions::enum_type>(f1) | f2; }  inline QFlags<QWizard::WizardOptions::enum_type> operator|(QWizard::WizardOptions::enum_type f1, QFlags<QWizard::WizardOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QWizard::WizardOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class QWizardPagePrivate;

class  QWizardPage : public QWidget
{
Q_OBJECT
Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(QString subTitle READ subTitle WRITE setSubTitle)

public:
explicit QWizardPage(QWidget *parent = 0);
~QWizardPage();

void setTitle(const QString &title);
QString title() const;
void setSubTitle(const QString &subTitle);
QString subTitle() const;
void setPixmap(QWizard::WizardPixmap which, const QPixmap &pixmap);
QPixmap pixmap(QWizard::WizardPixmap which) const;
void setFinalPage(bool finalPage);
bool isFinalPage() const;
void setCommitPage(bool commitPage);
bool isCommitPage() const;
void setButtonText(QWizard::WizardButton which, const QString &text);
QString buttonText(QWizard::WizardButton which) const;

virtual void initializePage();
virtual void cleanupPage();
virtual bool validatePage();
virtual bool isComplete() const;
virtual int nextId() const;

signals:
void completeChanged();

protected:
void setField(const QString &name, const QVariant &value);
QVariant field(const QString &name) const;
void registerField(const QString &name, QWidget *widget, const char *property = 0,
const char *changedSignal = 0);
QWizard *wizard() const;

private:
QWizardPage(const QWizardPage &) ; QWizardPage &operator=(const QWizardPage &) ;
inline QWizardPagePrivate* d_func() { return reinterpret_cast<QWizardPagePrivate *>(qGetPtrHelper(d_ptr)); } inline const QWizardPagePrivate* d_func() const { return reinterpret_cast<const QWizardPagePrivate *>(qGetPtrHelper(d_ptr)); } friend class QWizardPagePrivate;



friend class QWizard;
friend class QWizardPrivate;
};






# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"



# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicseffect.h"



class QGraphicsItem;
class QStyleOption;
class QPainter;
class QPixmap;

class QGraphicsEffectSource;

class QGraphicsEffectPrivate;
class  QGraphicsEffect : public QObject
{
Q_OBJECT

Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled NOTIFY enabledChanged)
public:
enum ChangeFlag {
SourceAttached = 0x1,
SourceDetached = 0x2,
SourceBoundingRectChanged = 0x4,
SourceInvalidated = 0x8
};
typedef QFlags<ChangeFlag> ChangeFlags;

enum PixmapPadMode {
NoPad,
PadToTransparentBorder,
PadToEffectiveBoundingRect
};

QGraphicsEffect(QObject *parent = 0);
virtual ~QGraphicsEffect();

virtual QRectF boundingRectFor(const QRectF &sourceRect) const;
QRectF boundingRect() const;

bool isEnabled() const;

public slots:
void setEnabled(bool enable);
void update();

signals:
void enabledChanged(bool enabled);

protected:
QGraphicsEffect(QGraphicsEffectPrivate &d, QObject *parent = 0);
virtual void draw(QPainter *painter) = 0;
virtual void sourceChanged(ChangeFlags flags);
void updateBoundingRect();

bool sourceIsPixmap() const;
QRectF sourceBoundingRect(Qt::CoordinateSystem system = Qt::LogicalCoordinates) const;
void drawSource(QPainter *painter);
QPixmap sourcePixmap(Qt::CoordinateSystem system = Qt::LogicalCoordinates,
QPoint *offset = 0,
PixmapPadMode mode = PadToEffectiveBoundingRect) const;

private:
inline QGraphicsEffectPrivate* d_func() { return reinterpret_cast<QGraphicsEffectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsEffectPrivate* d_func() const { return reinterpret_cast<const QGraphicsEffectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsEffectPrivate;
QGraphicsEffect(const QGraphicsEffect &) ; QGraphicsEffect &operator=(const QGraphicsEffect &) ;
friend class QGraphicsItem;
friend class QGraphicsItemPrivate;
friend class QGraphicsScenePrivate;
friend class QWidget;
friend class QWidgetPrivate;

public:
QGraphicsEffectSource *source() const; 

};
 inline QFlags<QGraphicsEffect::ChangeFlags::enum_type> operator|(QGraphicsEffect::ChangeFlags::enum_type f1, QGraphicsEffect::ChangeFlags::enum_type f2) { return QFlags<QGraphicsEffect::ChangeFlags::enum_type>(f1) | f2; }  inline QFlags<QGraphicsEffect::ChangeFlags::enum_type> operator|(QGraphicsEffect::ChangeFlags::enum_type f1, QFlags<QGraphicsEffect::ChangeFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGraphicsEffect::ChangeFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class QGraphicsColorizeEffectPrivate;
class  QGraphicsColorizeEffect: public QGraphicsEffect
{
Q_OBJECT
Q_PROPERTY(QColor color READ color WRITE setColor NOTIFY colorChanged)
Q_PROPERTY(qreal strength READ strength WRITE setStrength NOTIFY strengthChanged)
public:
QGraphicsColorizeEffect(QObject *parent = 0);
~QGraphicsColorizeEffect();

QColor color() const;
qreal strength() const;

public slots:
void setColor(const QColor &c);
void setStrength(qreal strength);

signals:
void colorChanged(const QColor &color);
void strengthChanged(qreal strength);

protected:
void draw(QPainter *painter);

private:
inline QGraphicsColorizeEffectPrivate* d_func() { return reinterpret_cast<QGraphicsColorizeEffectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsColorizeEffectPrivate* d_func() const { return reinterpret_cast<const QGraphicsColorizeEffectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsColorizeEffectPrivate;
QGraphicsColorizeEffect(const QGraphicsColorizeEffect &) ; QGraphicsColorizeEffect &operator=(const QGraphicsColorizeEffect &) ;
};

class QGraphicsBlurEffectPrivate;
class  QGraphicsBlurEffect: public QGraphicsEffect
{
Q_OBJECT

Q_PROPERTY(qreal blurRadius READ blurRadius WRITE setBlurRadius NOTIFY blurRadiusChanged)
Q_PROPERTY(BlurHints blurHints READ blurHints WRITE setBlurHints NOTIFY blurHintsChanged)
public:
enum BlurHint {
PerformanceHint = 0x00,
QualityHint = 0x01,
AnimationHint = 0x02
};
typedef QFlags<BlurHint> BlurHints;

QGraphicsBlurEffect(QObject *parent = 0);
~QGraphicsBlurEffect();

QRectF boundingRectFor(const QRectF &rect) const;
qreal blurRadius() const;
BlurHints blurHints() const;

public slots:
void setBlurRadius(qreal blurRadius);
void setBlurHints(BlurHints hints);

signals:
void blurRadiusChanged(qreal blurRadius);
void blurHintsChanged(BlurHints hints);

protected:
void draw(QPainter *painter);

private:
inline QGraphicsBlurEffectPrivate* d_func() { return reinterpret_cast<QGraphicsBlurEffectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsBlurEffectPrivate* d_func() const { return reinterpret_cast<const QGraphicsBlurEffectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsBlurEffectPrivate;
QGraphicsBlurEffect(const QGraphicsBlurEffect &) ; QGraphicsBlurEffect &operator=(const QGraphicsBlurEffect &) ;
};

 inline QFlags<QGraphicsBlurEffect::BlurHints::enum_type> operator|(QGraphicsBlurEffect::BlurHints::enum_type f1, QGraphicsBlurEffect::BlurHints::enum_type f2) { return QFlags<QGraphicsBlurEffect::BlurHints::enum_type>(f1) | f2; }  inline QFlags<QGraphicsBlurEffect::BlurHints::enum_type> operator|(QGraphicsBlurEffect::BlurHints::enum_type f1, QFlags<QGraphicsBlurEffect::BlurHints::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGraphicsBlurEffect::BlurHints::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class QGraphicsDropShadowEffectPrivate;
class  QGraphicsDropShadowEffect: public QGraphicsEffect
{
Q_OBJECT
Q_PROPERTY(QPointF offset READ offset WRITE setOffset NOTIFY offsetChanged)
Q_PROPERTY(qreal xOffset READ xOffset WRITE setXOffset NOTIFY offsetChanged)
Q_PROPERTY(qreal yOffset READ yOffset WRITE setYOffset NOTIFY offsetChanged)
Q_PROPERTY(qreal blurRadius READ blurRadius WRITE setBlurRadius NOTIFY blurRadiusChanged)
Q_PROPERTY(QColor color READ color WRITE setColor NOTIFY colorChanged)
public:
QGraphicsDropShadowEffect(QObject *parent = 0);
~QGraphicsDropShadowEffect();

QRectF boundingRectFor(const QRectF &rect) const;
QPointF offset() const;

inline qreal xOffset() const
{ return offset().x(); }

inline qreal yOffset() const
{ return offset().y(); }

qreal blurRadius() const;
QColor color() const;

public slots:
void setOffset(const QPointF &ofs);

inline void setOffset(qreal dx, qreal dy)
{ setOffset(QPointF(dx, dy)); }

inline void setOffset(qreal d)
{ setOffset(QPointF(d, d)); }

inline void setXOffset(qreal dx)
{ setOffset(QPointF(dx, yOffset())); }

inline void setYOffset(qreal dy)
{ setOffset(QPointF(xOffset(), dy)); }

void setBlurRadius(qreal blurRadius);
void setColor(const QColor &color);

signals:
void offsetChanged(const QPointF &offset);
void blurRadiusChanged(qreal blurRadius);
void colorChanged(const QColor &color);

protected:
void draw(QPainter *painter);

private:
inline QGraphicsDropShadowEffectPrivate* d_func() { return reinterpret_cast<QGraphicsDropShadowEffectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsDropShadowEffectPrivate* d_func() const { return reinterpret_cast<const QGraphicsDropShadowEffectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsDropShadowEffectPrivate;
QGraphicsDropShadowEffect(const QGraphicsDropShadowEffect &) ; QGraphicsDropShadowEffect &operator=(const QGraphicsDropShadowEffect &) ;
};

class QGraphicsOpacityEffectPrivate;
class  QGraphicsOpacityEffect: public QGraphicsEffect
{
Q_OBJECT
Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity NOTIFY opacityChanged)
Q_PROPERTY(QBrush opacityMask READ opacityMask WRITE setOpacityMask NOTIFY opacityMaskChanged)
public:
QGraphicsOpacityEffect(QObject *parent = 0);
~QGraphicsOpacityEffect();

qreal opacity() const;
QBrush opacityMask() const;

public slots:
void setOpacity(qreal opacity);
void setOpacityMask(const QBrush &mask);

signals:
void opacityChanged(qreal opacity);
void opacityMaskChanged(const QBrush &mask);

protected:
void draw(QPainter *painter);

private:
inline QGraphicsOpacityEffectPrivate* d_func() { return reinterpret_cast<QGraphicsOpacityEffectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsOpacityEffectPrivate* d_func() const { return reinterpret_cast<const QGraphicsOpacityEffectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsOpacityEffectPrivate;
QGraphicsOpacityEffect(const QGraphicsOpacityEffect &) ; QGraphicsOpacityEffect &operator=(const QGraphicsOpacityEffect &) ;
};







# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsanchorlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainterpath.h"
























































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
class tst_QGraphicsItem;






# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
class QBrush;
class QCursor;
class QFocusEvent;
class QGraphicsEffect;
class QGraphicsItemGroup;
class QGraphicsObject;
class QGraphicsSceneContextMenuEvent;
class QGraphicsSceneDragDropEvent;
class QGraphicsSceneEvent;
class QGraphicsSceneHoverEvent;
class QGraphicsSceneMouseEvent;
class QGraphicsSceneWheelEvent;
class QGraphicsScene;
class QGraphicsTransform;
class QGraphicsWidget;
class QInputMethodEvent;
class QKeyEvent;
class QMatrix;
class QMenu;
class QPainter;
class QPen;
class QPointF;
class QRectF;
class QStyleOptionGraphicsItem;

class QGraphicsItemPrivate;
class  QGraphicsItem
{
public:
enum GraphicsItemFlag {
ItemIsMovable = 0x1,
ItemIsSelectable = 0x2,
ItemIsFocusable = 0x4,
ItemClipsToShape = 0x8,
ItemClipsChildrenToShape = 0x10,
ItemIgnoresTransformations = 0x20,
ItemIgnoresParentOpacity = 0x40,
ItemDoesntPropagateOpacityToChildren = 0x80,
ItemStacksBehindParent = 0x100,
ItemUsesExtendedStyleOption = 0x200,
ItemHasNoContents = 0x400,
ItemSendsGeometryChanges = 0x800,
ItemAcceptsInputMethod = 0x1000,
ItemNegativeZStacksBehindParent = 0x2000,
ItemIsPanel = 0x4000,
ItemIsFocusScope = 0x8000, 
ItemSendsScenePositionChanges = 0x10000,
ItemStopsClickFocusPropagation = 0x20000,
ItemStopsFocusHandling = 0x40000

};
typedef QFlags<GraphicsItemFlag> GraphicsItemFlags;

enum GraphicsItemChange {
ItemPositionChange,
ItemMatrixChange,
ItemVisibleChange,
ItemEnabledChange,
ItemSelectedChange,
ItemParentChange,
ItemChildAddedChange,
ItemChildRemovedChange,
ItemTransformChange,
ItemPositionHasChanged,
ItemTransformHasChanged,
ItemSceneChange,
ItemVisibleHasChanged,
ItemEnabledHasChanged,
ItemSelectedHasChanged,
ItemParentHasChanged,
ItemSceneHasChanged,
ItemCursorChange,
ItemCursorHasChanged,
ItemToolTipChange,
ItemToolTipHasChanged,
ItemFlagsChange,
ItemFlagsHaveChanged,
ItemZValueChange,
ItemZValueHasChanged,
ItemOpacityChange,
ItemOpacityHasChanged,
ItemScenePositionHasChanged,
ItemRotationChange,
ItemRotationHasChanged,
ItemScaleChange,
ItemScaleHasChanged,
ItemTransformOriginPointChange,
ItemTransformOriginPointHasChanged
};

enum CacheMode {
NoCache,
ItemCoordinateCache,
DeviceCoordinateCache
};

enum PanelModality
{
NonModal,
PanelModal,
SceneModal
};

explicit QGraphicsItem(QGraphicsItem *parent = 0);
virtual ~QGraphicsItem();

QGraphicsScene *scene() const;

QGraphicsItem *parentItem() const;
QGraphicsItem *topLevelItem() const;
QGraphicsObject *parentObject() const;
QGraphicsWidget *parentWidget() const;
QGraphicsWidget *topLevelWidget() const;
QGraphicsWidget *window() const;
QGraphicsItem *panel() const;
void setParentItem(QGraphicsItem *parent);



# 179 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
QList<QGraphicsItem *> childItems() const;
bool isWidget() const;
bool isWindow() const;
bool isPanel() const;

QGraphicsObject *toGraphicsObject();
const QGraphicsObject *toGraphicsObject() const;

QGraphicsItemGroup *group() const;
void setGroup(QGraphicsItemGroup *group);

GraphicsItemFlags flags() const;
void setFlag(GraphicsItemFlag flag, bool enabled = true);
void setFlags(GraphicsItemFlags flags);

CacheMode cacheMode() const;
void setCacheMode(CacheMode mode, const QSize &cacheSize = QSize());

PanelModality panelModality() const;
void setPanelModality(PanelModality panelModality);
bool isBlockedByModalPanel(QGraphicsItem **blockingPanel = 0) const;


# 202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
QString toolTip() const;
void setToolTip(const QString &toolTip);



# 207 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
QCursor cursor() const;
void setCursor(const QCursor &cursor);
bool hasCursor() const;
void unsetCursor();


# 213 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
bool isVisible() const;
bool isVisibleTo(const QGraphicsItem *parent) const;
void setVisible(bool visible);
inline void hide() { setVisible(false); }
inline void show() { setVisible(true); }

bool isEnabled() const;
void setEnabled(bool enabled);

bool isSelected() const;
void setSelected(bool selected);

bool acceptDrops() const;
void setAcceptDrops(bool on);

qreal opacity() const;
qreal effectiveOpacity() const;
void setOpacity(qreal opacity);


# 233 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"

QGraphicsEffect *graphicsEffect() const;
void setGraphicsEffect(QGraphicsEffect *effect);


# 238 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
Qt::MouseButtons acceptedMouseButtons() const;
void setAcceptedMouseButtons(Qt::MouseButtons buttons);




# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
bool acceptHoverEvents() const;
void setAcceptHoverEvents(bool enabled);
bool acceptTouchEvents() const;
void setAcceptTouchEvents(bool enabled);

bool filtersChildEvents() const;
void setFiltersChildEvents(bool enabled);

bool handlesChildEvents() const;
void setHandlesChildEvents(bool enabled);

bool isActive() const;
void setActive(bool active);

bool hasFocus() const;
void setFocus(Qt::FocusReason focusReason = Qt::OtherFocusReason);
void clearFocus();

QGraphicsItem *focusProxy() const;
void setFocusProxy(QGraphicsItem *item);

QGraphicsItem *focusItem() const;
QGraphicsItem *focusScopeItem() const;

void grabMouse();
void ungrabMouse();
void grabKeyboard();
void ungrabKeyboard();


QPointF pos() const;
inline qreal x() const { return pos().x(); }
void setX(qreal x);
inline qreal y() const { return pos().y(); }
void setY(qreal y);
QPointF scenePos() const;
void setPos(const QPointF &pos);
inline void setPos(qreal x, qreal y);
inline void moveBy(qreal dx, qreal dy) { setPos(pos().x() + dx, pos().y() + dy); }

void ensureVisible(const QRectF &rect = QRectF(), int xmargin = 50, int ymargin = 50);
inline void ensureVisible(qreal x, qreal y, qreal w, qreal h, int xmargin = 50, int ymargin = 50);


QMatrix matrix() const;
QMatrix sceneMatrix() const;
void setMatrix(const QMatrix &matrix, bool combine = false);
void resetMatrix();
QTransform transform() const;
QTransform sceneTransform() const;
QTransform deviceTransform(const QTransform &viewportTransform) const;
QTransform itemTransform(const QGraphicsItem *other, bool *ok = 0) const;
void setTransform(const QTransform &matrix, bool combine = false);
void resetTransform();






# 304 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
void setRotation(qreal angle);
qreal rotation() const;

void setScale(qreal scale);
qreal scale() const;

QList<QGraphicsTransform *> transformations() const;
void setTransformations(const QList<QGraphicsTransform *> &transformations);

QPointF transformOriginPoint() const;
void setTransformOriginPoint(const QPointF &origin);
inline void setTransformOriginPoint(qreal ax, qreal ay)
{ setTransformOriginPoint(QPointF(ax,ay)); }

virtual void advance(int phase);


qreal zValue() const;
void setZValue(qreal z);
void stackBefore(const QGraphicsItem *sibling);


virtual QRectF boundingRect() const = 0;
QRectF childrenBoundingRect() const;
QRectF sceneBoundingRect() const;
virtual QPainterPath shape() const;
bool isClipped() const;
QPainterPath clipPath() const;
virtual bool contains(const QPointF &point) const;
virtual bool collidesWithItem(const QGraphicsItem *other, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
virtual bool collidesWithPath(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> collidingItems(Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
bool isObscured(const QRectF &rect = QRectF()) const;
inline bool isObscured(qreal x, qreal y, qreal w, qreal h) const;
virtual bool isObscuredBy(const QGraphicsItem *item) const;
virtual QPainterPath opaqueArea() const;

QRegion boundingRegion(const QTransform &itemToDeviceTransform) const;
qreal boundingRegionGranularity() const;
void setBoundingRegionGranularity(qreal granularity);


virtual void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0) = 0;
void update(const QRectF &rect = QRectF());
inline void update(qreal x, qreal y, qreal width, qreal height);
void scroll(qreal dx, qreal dy, const QRectF &rect = QRectF());


QPointF mapToItem(const QGraphicsItem *item, const QPointF &point) const;
QPointF mapToParent(const QPointF &point) const;
QPointF mapToScene(const QPointF &point) const;
QPolygonF mapToItem(const QGraphicsItem *item, const QRectF &rect) const;
QPolygonF mapToParent(const QRectF &rect) const;
QPolygonF mapToScene(const QRectF &rect) const;
QRectF mapRectToItem(const QGraphicsItem *item, const QRectF &rect) const;
QRectF mapRectToParent(const QRectF &rect) const;
QRectF mapRectToScene(const QRectF &rect) const;
QPolygonF mapToItem(const QGraphicsItem *item, const QPolygonF &polygon) const;
QPolygonF mapToParent(const QPolygonF &polygon) const;
QPolygonF mapToScene(const QPolygonF &polygon) const;
QPainterPath mapToItem(const QGraphicsItem *item, const QPainterPath &path) const;
QPainterPath mapToParent(const QPainterPath &path) const;
QPainterPath mapToScene(const QPainterPath &path) const;
QPointF mapFromItem(const QGraphicsItem *item, const QPointF &point) const;
QPointF mapFromParent(const QPointF &point) const;
QPointF mapFromScene(const QPointF &point) const;
QPolygonF mapFromItem(const QGraphicsItem *item, const QRectF &rect) const;
QPolygonF mapFromParent(const QRectF &rect) const;
QPolygonF mapFromScene(const QRectF &rect) const;
QRectF mapRectFromItem(const QGraphicsItem *item, const QRectF &rect) const;
QRectF mapRectFromParent(const QRectF &rect) const;
QRectF mapRectFromScene(const QRectF &rect) const;
QPolygonF mapFromItem(const QGraphicsItem *item, const QPolygonF &polygon) const;
QPolygonF mapFromParent(const QPolygonF &polygon) const;
QPolygonF mapFromScene(const QPolygonF &polygon) const;
QPainterPath mapFromItem(const QGraphicsItem *item, const QPainterPath &path) const;
QPainterPath mapFromParent(const QPainterPath &path) const;
QPainterPath mapFromScene(const QPainterPath &path) const;

inline QPointF mapToItem(const QGraphicsItem *item, qreal x, qreal y) const;
inline QPointF mapToParent(qreal x, qreal y) const;
inline QPointF mapToScene(qreal x, qreal y) const;
inline QPolygonF mapToItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapToParent(qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapToScene(qreal x, qreal y, qreal w, qreal h) const;
inline QRectF mapRectToItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const;
inline QRectF mapRectToParent(qreal x, qreal y, qreal w, qreal h) const;
inline QRectF mapRectToScene(qreal x, qreal y, qreal w, qreal h) const;
inline QPointF mapFromItem(const QGraphicsItem *item, qreal x, qreal y) const;
inline QPointF mapFromParent(qreal x, qreal y) const;
inline QPointF mapFromScene(qreal x, qreal y) const;
inline QPolygonF mapFromItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapFromParent(qreal x, qreal y, qreal w, qreal h) const;
inline QPolygonF mapFromScene(qreal x, qreal y, qreal w, qreal h) const;
inline QRectF mapRectFromItem(const QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h) const;
inline QRectF mapRectFromParent(qreal x, qreal y, qreal w, qreal h) const;
inline QRectF mapRectFromScene(qreal x, qreal y, qreal w, qreal h) const;

bool isAncestorOf(const QGraphicsItem *child) const;
QGraphicsItem *commonAncestorItem(const QGraphicsItem *other) const;
bool isUnderMouse() const;


QVariant data(int key) const;
void setData(int key, const QVariant &value);

Qt::InputMethodHints inputMethodHints() const;
void setInputMethodHints(Qt::InputMethodHints hints);

enum {
Type = 1,
UserType = 65536
};
virtual int type() const;

void installSceneEventFilter(QGraphicsItem *filterItem);
void removeSceneEventFilter(QGraphicsItem *filterItem);

protected:
void updateMicroFocus();
virtual bool sceneEventFilter(QGraphicsItem *watched, QEvent *event);
virtual bool sceneEvent(QEvent *event);
virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);
virtual void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dropEvent(QGraphicsSceneDragDropEvent *event);
virtual void focusInEvent(QFocusEvent *event);
virtual void focusOutEvent(QFocusEvent *event);
virtual void hoverEnterEvent(QGraphicsSceneHoverEvent *event);
virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);
virtual void keyPressEvent(QKeyEvent *event);
virtual void keyReleaseEvent(QKeyEvent *event);
virtual void mousePressEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);
virtual void wheelEvent(QGraphicsSceneWheelEvent *event);
virtual void inputMethodEvent(QInputMethodEvent *event);
virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

virtual QVariant itemChange(GraphicsItemChange change, const QVariant &value);

enum Extension {
UserExtension = 0x80000000
};
virtual bool supportsExtension(Extension extension) const;
virtual void setExtension(Extension extension, const QVariant &variant);
virtual QVariant extension(const QVariant &variant) const;

protected:
QGraphicsItem(QGraphicsItemPrivate &dd, QGraphicsItem *parent);
QScopedPointer<QGraphicsItemPrivate> d_ptr;

void addToIndex();
void removeFromIndex();
void prepareGeometryChange();

private:
QGraphicsItem(const QGraphicsItem &) ; QGraphicsItem &operator=(const QGraphicsItem &) ;
inline QGraphicsItemPrivate* d_func() { return reinterpret_cast<QGraphicsItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsItemPrivate;
friend class QGraphicsItemGroup;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;
friend class QGraphicsSceneFindItemBspTreeVisitor;
friend class QGraphicsSceneBspTree;
friend class QGraphicsView;
friend class QGraphicsViewPrivate;
friend class QGraphicsObject;
friend class QGraphicsWidget;
friend class QGraphicsWidgetPrivate;
friend class QGraphicsProxyWidgetPrivate;
friend class QGraphicsSceneIndex;
friend class QGraphicsSceneIndexPrivate;
friend class QGraphicsSceneBspTreeIndex;
friend class QGraphicsSceneBspTreeIndexPrivate;
friend class QGraphicsItemEffectSourcePrivate;
friend class QGraphicsTransformPrivate;

# 484 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
friend class QGestureManager;

# 486 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
friend class ::tst_QGraphicsItem;
friend bool qt_closestLeaf(const QGraphicsItem *, const QGraphicsItem *);
friend bool qt_closestItemFirst(const QGraphicsItem *, const QGraphicsItem *);
};

 inline QFlags<QGraphicsItem::GraphicsItemFlags::enum_type> operator|(QGraphicsItem::GraphicsItemFlags::enum_type f1, QGraphicsItem::GraphicsItemFlags::enum_type f2) { return QFlags<QGraphicsItem::GraphicsItemFlags::enum_type>(f1) | f2; }  inline QFlags<QGraphicsItem::GraphicsItemFlags::enum_type> operator|(QGraphicsItem::GraphicsItemFlags::enum_type f1, QFlags<QGraphicsItem::GraphicsItemFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGraphicsItem::GraphicsItemFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
template <> inline const char *qobject_interface_iid<QGraphicsItem *>() { return "org.qt-project.Qt.QGraphicsItem"; } template <> inline QGraphicsItem *qobject_cast<QGraphicsItem *>(QObject *object) { return reinterpret_cast<QGraphicsItem *>((object ? object->qt_metacast("org.qt-project.Qt.QGraphicsItem") : 0)); } template <> inline QGraphicsItem *qobject_cast<QGraphicsItem *>(const QObject *object) { return reinterpret_cast<QGraphicsItem *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QGraphicsItem") : 0)); }

inline void QGraphicsItem::setPos(qreal ax, qreal ay)
{ setPos(QPointF(ax, ay)); }
inline void QGraphicsItem::ensureVisible(qreal ax, qreal ay, qreal w, qreal h, int xmargin, int ymargin)
{ ensureVisible(QRectF(ax, ay, w, h), xmargin, ymargin); }
inline void QGraphicsItem::update(qreal ax, qreal ay, qreal width, qreal height)
{ update(QRectF(ax, ay, width, height)); }
inline bool QGraphicsItem::isObscured(qreal ax, qreal ay, qreal w, qreal h) const
{ return isObscured(QRectF(ax, ay, w, h)); }
inline QPointF QGraphicsItem::mapToItem(const QGraphicsItem *item, qreal ax, qreal ay) const
{ return mapToItem(item, QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapToParent(qreal ax, qreal ay) const
{ return mapToParent(QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapToScene(qreal ax, qreal ay) const
{ return mapToScene(QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapFromItem(const QGraphicsItem *item, qreal ax, qreal ay) const
{ return mapFromItem(item, QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapFromParent(qreal ax, qreal ay) const
{ return mapFromParent(QPointF(ax, ay)); }
inline QPointF QGraphicsItem::mapFromScene(qreal ax, qreal ay) const
{ return mapFromScene(QPointF(ax, ay)); }
inline QPolygonF QGraphicsItem::mapToItem(const QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) const
{ return mapToItem(item, QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapToParent(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapToParent(QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapToScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapToScene(QRectF(ax, ay, w, h)); }
inline QRectF QGraphicsItem::mapRectToItem(const QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) const
{ return mapRectToItem(item, QRectF(ax, ay, w, h)); }
inline QRectF QGraphicsItem::mapRectToParent(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapRectToParent(QRectF(ax, ay, w, h)); }
inline QRectF QGraphicsItem::mapRectToScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapRectToScene(QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapFromItem(const QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromItem(item, QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapFromParent(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromParent(QRectF(ax, ay, w, h)); }
inline QPolygonF QGraphicsItem::mapFromScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromScene(QRectF(ax, ay, w, h)); }
inline QRectF QGraphicsItem::mapRectFromItem(const QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) const
{ return mapRectFromItem(item, QRectF(ax, ay, w, h)); }
inline QRectF QGraphicsItem::mapRectFromParent(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapRectFromParent(QRectF(ax, ay, w, h)); }
inline QRectF QGraphicsItem::mapRectFromScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapRectFromScene(QRectF(ax, ay, w, h)); }


class  QGraphicsObject : public QObject, public QGraphicsItem
{
Q_OBJECT
Q_PROPERTY(QGraphicsObject * parent READ parentObject WRITE setParentItem NOTIFY parentChanged DESIGNABLE false)
Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity NOTIFY opacityChanged FINAL)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled NOTIFY enabledChanged)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY visibleChanged FINAL)
Q_PROPERTY(QPointF pos READ pos WRITE setPos FINAL)
Q_PROPERTY(qreal x READ x WRITE setX NOTIFY xChanged FINAL)
Q_PROPERTY(qreal y READ y WRITE setY NOTIFY yChanged FINAL)
Q_PROPERTY(qreal z READ zValue WRITE setZValue NOTIFY zChanged FINAL)
Q_PROPERTY(qreal rotation READ rotation WRITE setRotation NOTIFY rotationChanged)
Q_PROPERTY(qreal scale READ scale WRITE setScale NOTIFY scaleChanged)
Q_PROPERTY(QPointF transformOriginPoint READ transformOriginPoint WRITE setTransformOriginPoint)

# 555 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
Q_PROPERTY(QGraphicsEffect *effect READ graphicsEffect WRITE setGraphicsEffect)

# 557 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
Q_PRIVATE_PROPERTY(QGraphicsItem::d_func(), QDeclarativeListProperty<QGraphicsObject> children READ childrenList DESIGNABLE false NOTIFY childrenChanged)
Q_PRIVATE_PROPERTY(QGraphicsItem::d_func(), qreal width READ width WRITE setWidth NOTIFY widthChanged RESET resetWidth FINAL)
Q_PRIVATE_PROPERTY(QGraphicsItem::d_func(), qreal height READ height WRITE setHeight NOTIFY heightChanged RESET resetHeight FINAL)
Q_CLASSINFO("DefaultProperty", "children")

public:
explicit QGraphicsObject(QGraphicsItem *parent = 0);
~QGraphicsObject();


# 567 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
const QObjectList &children() const { return QObject::children(); }





# 573 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
void grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags());
void ungrabGesture(Qt::GestureType type);


# 577 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
protected slots:
void updateMicroFocus();

signals:
void parentChanged();
void opacityChanged();
void visibleChanged();
void enabledChanged();
void xChanged();
void yChanged();
void zChanged();
void rotationChanged();
void scaleChanged();
void childrenChanged();
void widthChanged();
void heightChanged();

protected:
QGraphicsObject(QGraphicsItemPrivate &dd, QGraphicsItem *parent);

bool event(QEvent *ev);

private:
friend class QGraphicsItem;
friend class QGraphicsItemPrivate;
};


class QAbstractGraphicsShapeItemPrivate;
class  QAbstractGraphicsShapeItem : public QGraphicsItem
{
public:
explicit QAbstractGraphicsShapeItem(QGraphicsItem *parent = 0);
~QAbstractGraphicsShapeItem();

QPen pen() const;
void setPen(const QPen &pen);

QBrush brush() const;
void setBrush(const QBrush &brush);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

protected:
QAbstractGraphicsShapeItem(QAbstractGraphicsShapeItemPrivate &dd,
QGraphicsItem *parent);

private:
QAbstractGraphicsShapeItem(const QAbstractGraphicsShapeItem &) ; QAbstractGraphicsShapeItem &operator=(const QAbstractGraphicsShapeItem &) ;
inline QAbstractGraphicsShapeItemPrivate* d_func() { return reinterpret_cast<QAbstractGraphicsShapeItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractGraphicsShapeItemPrivate* d_func() const { return reinterpret_cast<const QAbstractGraphicsShapeItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractGraphicsShapeItemPrivate;
};

class QGraphicsPathItemPrivate;
class  QGraphicsPathItem : public QAbstractGraphicsShapeItem
{
public:
explicit QGraphicsPathItem(QGraphicsItem *parent = 0);
explicit QGraphicsPathItem(const QPainterPath &path, QGraphicsItem *parent = 0);
~QGraphicsPathItem();

QPainterPath path() const;
void setPath(const QPainterPath &path);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 2 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsPathItem(const QGraphicsPathItem &) ; QGraphicsPathItem &operator=(const QGraphicsPathItem &) ;
inline QGraphicsPathItemPrivate* d_func() { return reinterpret_cast<QGraphicsPathItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsPathItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsPathItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsPathItemPrivate;
};

class QGraphicsRectItemPrivate;
class  QGraphicsRectItem : public QAbstractGraphicsShapeItem
{
public:
explicit QGraphicsRectItem(QGraphicsItem *parent = 0);
explicit QGraphicsRectItem(const QRectF &rect, QGraphicsItem *parent = 0);
explicit QGraphicsRectItem(qreal x, qreal y, qreal w, qreal h, QGraphicsItem *parent = 0);
~QGraphicsRectItem();

QRectF rect() const;
void setRect(const QRectF &rect);
inline void setRect(qreal x, qreal y, qreal w, qreal h);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 3 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsRectItem(const QGraphicsRectItem &) ; QGraphicsRectItem &operator=(const QGraphicsRectItem &) ;
inline QGraphicsRectItemPrivate* d_func() { return reinterpret_cast<QGraphicsRectItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsRectItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsRectItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsRectItemPrivate;
};

inline void QGraphicsRectItem::setRect(qreal ax, qreal ay, qreal w, qreal h)
{ setRect(QRectF(ax, ay, w, h)); }

class QGraphicsEllipseItemPrivate;
class  QGraphicsEllipseItem : public QAbstractGraphicsShapeItem
{
public:
explicit QGraphicsEllipseItem(QGraphicsItem *parent = 0);
explicit QGraphicsEllipseItem(const QRectF &rect, QGraphicsItem *parent = 0);
explicit QGraphicsEllipseItem(qreal x, qreal y, qreal w, qreal h, QGraphicsItem *parent = 0);
~QGraphicsEllipseItem();

QRectF rect() const;
void setRect(const QRectF &rect);
inline void setRect(qreal x, qreal y, qreal w, qreal h);

int startAngle() const;
void setStartAngle(int angle);

int spanAngle() const;
void setSpanAngle(int angle);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 4 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsEllipseItem(const QGraphicsEllipseItem &) ; QGraphicsEllipseItem &operator=(const QGraphicsEllipseItem &) ;
inline QGraphicsEllipseItemPrivate* d_func() { return reinterpret_cast<QGraphicsEllipseItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsEllipseItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsEllipseItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsEllipseItemPrivate;
};

inline void QGraphicsEllipseItem::setRect(qreal ax, qreal ay, qreal w, qreal h)
{ setRect(QRectF(ax, ay, w, h)); }

class QGraphicsPolygonItemPrivate;
class  QGraphicsPolygonItem : public QAbstractGraphicsShapeItem
{
public:
explicit QGraphicsPolygonItem(QGraphicsItem *parent = 0);
explicit QGraphicsPolygonItem(const QPolygonF &polygon,
QGraphicsItem *parent = 0);
~QGraphicsPolygonItem();

QPolygonF polygon() const;
void setPolygon(const QPolygonF &polygon);

Qt::FillRule fillRule() const;
void setFillRule(Qt::FillRule rule);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 5 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsPolygonItem(const QGraphicsPolygonItem &) ; QGraphicsPolygonItem &operator=(const QGraphicsPolygonItem &) ;
inline QGraphicsPolygonItemPrivate* d_func() { return reinterpret_cast<QGraphicsPolygonItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsPolygonItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsPolygonItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsPolygonItemPrivate;
};

class QGraphicsLineItemPrivate;
class  QGraphicsLineItem : public QGraphicsItem
{
public:
explicit QGraphicsLineItem(QGraphicsItem *parent = 0);
explicit QGraphicsLineItem(const QLineF &line, QGraphicsItem *parent = 0);
explicit QGraphicsLineItem(qreal x1, qreal y1, qreal x2, qreal y2, QGraphicsItem *parent = 0);
~QGraphicsLineItem();

QPen pen() const;
void setPen(const QPen &pen);

QLineF line() const;
void setLine(const QLineF &line);
inline void setLine(qreal x1, qreal y1, qreal x2, qreal y2)
{ setLine(QLineF(x1, y1, x2, y2)); }

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 6 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsLineItem(const QGraphicsLineItem &) ; QGraphicsLineItem &operator=(const QGraphicsLineItem &) ;
inline QGraphicsLineItemPrivate* d_func() { return reinterpret_cast<QGraphicsLineItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsLineItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsLineItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsLineItemPrivate;
};

class QGraphicsPixmapItemPrivate;
class  QGraphicsPixmapItem : public QGraphicsItem
{
public:
enum ShapeMode {
MaskShape,
BoundingRectShape,
HeuristicMaskShape
};

explicit QGraphicsPixmapItem(QGraphicsItem *parent = 0);
explicit QGraphicsPixmapItem(const QPixmap &pixmap, QGraphicsItem *parent = 0);
~QGraphicsPixmapItem();

QPixmap pixmap() const;
void setPixmap(const QPixmap &pixmap);

Qt::TransformationMode transformationMode() const;
void setTransformationMode(Qt::TransformationMode mode);

QPointF offset() const;
void setOffset(const QPointF &offset);
inline void setOffset(qreal x, qreal y);

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 7 };
int type() const;

ShapeMode shapeMode() const;
void setShapeMode(ShapeMode mode);

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsPixmapItem(const QGraphicsPixmapItem &) ; QGraphicsPixmapItem &operator=(const QGraphicsPixmapItem &) ;
inline QGraphicsPixmapItemPrivate* d_func() { return reinterpret_cast<QGraphicsPixmapItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsPixmapItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsPixmapItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsPixmapItemPrivate;
};

inline void QGraphicsPixmapItem::setOffset(qreal ax, qreal ay)
{ setOffset(QPointF(ax, ay)); }

class QGraphicsTextItemPrivate;
class QTextDocument;
class QTextCursor;
class  QGraphicsTextItem : public QGraphicsObject
{
Q_OBJECT



public:
explicit QGraphicsTextItem(QGraphicsItem *parent = 0);
explicit QGraphicsTextItem(const QString &text, QGraphicsItem *parent = 0);
~QGraphicsTextItem();

QString toHtml() const;
void setHtml(const QString &html);

QString toPlainText() const;
void setPlainText(const QString &text);

QFont font() const;
void setFont(const QFont &font);

void setDefaultTextColor(const QColor &c);
QColor defaultTextColor() const;

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 8 };
int type() const;

void setTextWidth(qreal width);
qreal textWidth() const;

void adjustSize();

void setDocument(QTextDocument *document);
QTextDocument *document() const;

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

void setTabChangesFocus(bool b);
bool tabChangesFocus() const;

void setOpenExternalLinks(bool open);
bool openExternalLinks() const;

void setTextCursor(const QTextCursor &cursor);
QTextCursor textCursor() const;

signals:
void linkActivated(const QString &);
void linkHovered(const QString &);

protected:
bool sceneEvent(QEvent *event);
void mousePressEvent(QGraphicsSceneMouseEvent *event);
void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);
void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);
void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
void dropEvent(QGraphicsSceneDragDropEvent *event);
void inputMethodEvent(QInputMethodEvent *event);
void hoverEnterEvent(QGraphicsSceneHoverEvent *event);
void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);

QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsTextItem(const QGraphicsTextItem &) ; QGraphicsTextItem &operator=(const QGraphicsTextItem &) ;



QGraphicsTextItemPrivate *dd;
friend class QGraphicsTextItemPrivate;
};

class QGraphicsSimpleTextItemPrivate;
class  QGraphicsSimpleTextItem : public QAbstractGraphicsShapeItem
{
public:
explicit QGraphicsSimpleTextItem(QGraphicsItem *parent = 0);
explicit QGraphicsSimpleTextItem(const QString &text, QGraphicsItem *parent = 0);
~QGraphicsSimpleTextItem();

void setText(const QString &text);
QString text() const;

void setFont(const QFont &font);
QFont font() const;

QRectF boundingRect() const;
QPainterPath shape() const;
bool contains(const QPointF &point) const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 9 };
int type() const;

protected:
bool supportsExtension(Extension extension) const;
void setExtension(Extension extension, const QVariant &variant);
QVariant extension(const QVariant &variant) const;

private:
QGraphicsSimpleTextItem(const QGraphicsSimpleTextItem &) ; QGraphicsSimpleTextItem &operator=(const QGraphicsSimpleTextItem &) ;
inline QGraphicsSimpleTextItemPrivate* d_func() { return reinterpret_cast<QGraphicsSimpleTextItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSimpleTextItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsSimpleTextItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSimpleTextItemPrivate;
};

class QGraphicsItemGroupPrivate;
class  QGraphicsItemGroup : public QGraphicsItem
{
public:
explicit QGraphicsItemGroup(QGraphicsItem *parent = 0);
~QGraphicsItemGroup();

void addToGroup(QGraphicsItem *item);
void removeFromGroup(QGraphicsItem *item);

QRectF boundingRect() const;
void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

bool isObscuredBy(const QGraphicsItem *item) const;
QPainterPath opaqueArea() const;

enum { Type = 10 };
int type() const;

private:
QGraphicsItemGroup(const QGraphicsItemGroup &) ; QGraphicsItemGroup &operator=(const QGraphicsItemGroup &) ;
inline QGraphicsItemGroupPrivate* d_func() { return reinterpret_cast<QGraphicsItemGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsItemGroupPrivate* d_func() const { return reinterpret_cast<const QGraphicsItemGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsItemGroupPrivate;
};

template <class T> inline T qgraphicsitem_cast(QGraphicsItem *item)
{
return int(static_cast<T>(0)->Type) == int(QGraphicsItem::Type)
|| (item && int(static_cast<T>(0)->Type) == item->type()) ? static_cast<T>(item) : 0;
}

template <class T> inline T qgraphicsitem_cast(const QGraphicsItem *item)
{
return int(static_cast<T>(0)->Type) == int(QGraphicsItem::Type)
|| (item && int(static_cast<T>(0)->Type) == item->type()) ? static_cast<T>(item) : 0;
}


# 1043 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"
 QDebug operator<<(QDebug debug, QGraphicsItem *item);
 QDebug operator<<(QDebug debug, QGraphicsObject *item);
 QDebug operator<<(QDebug debug, QGraphicsItem::GraphicsItemChange change);
 QDebug operator<<(QDebug debug, QGraphicsItem::GraphicsItemFlag flag);
 QDebug operator<<(QDebug debug, QGraphicsItem::GraphicsItemFlags flags);


# 1050 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"


 template <> struct QMetaTypeId< QGraphicsItem * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QGraphicsItem * >("QGraphicsItem *", reinterpret_cast< QGraphicsItem * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 





# 1058 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsanchorlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
























































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"
class QGraphicsLayoutItemPrivate;
class QGraphicsItem;
class  QGraphicsLayoutItem
{
public:
QGraphicsLayoutItem(QGraphicsLayoutItem *parent = 0, bool isLayout = false);
virtual ~QGraphicsLayoutItem();

void setSizePolicy(const QSizePolicy &policy);
void setSizePolicy(QSizePolicy::Policy hPolicy, QSizePolicy::Policy vPolicy, QSizePolicy::ControlType controlType = QSizePolicy::DefaultType);
QSizePolicy sizePolicy() const;

void setMinimumSize(const QSizeF &size);
inline void setMinimumSize(qreal w, qreal h);
QSizeF minimumSize() const;
void setMinimumWidth(qreal width);
inline qreal minimumWidth() const;
void setMinimumHeight(qreal height);
inline qreal minimumHeight() const;

void setPreferredSize(const QSizeF &size);
inline void setPreferredSize(qreal w, qreal h);
QSizeF preferredSize() const;
void setPreferredWidth(qreal width);
inline qreal preferredWidth() const;
void setPreferredHeight(qreal height);
inline qreal preferredHeight() const;

void setMaximumSize(const QSizeF &size);
inline void setMaximumSize(qreal w, qreal h);
QSizeF maximumSize() const;
void setMaximumWidth(qreal width);
inline qreal maximumWidth() const;
void setMaximumHeight(qreal height);
inline qreal maximumHeight() const;

virtual void setGeometry(const QRectF &rect);
QRectF geometry() const;
virtual void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;
QRectF contentsRect() const;

QSizeF effectiveSizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;

virtual void updateGeometry();

QGraphicsLayoutItem *parentLayoutItem() const;
void setParentLayoutItem(QGraphicsLayoutItem *parent);

bool isLayout() const;
QGraphicsItem *graphicsItem() const;
bool ownedByLayout() const;

protected:
void setGraphicsItem(QGraphicsItem *item);
void setOwnedByLayout(bool ownedByLayout);
QGraphicsLayoutItem(QGraphicsLayoutItemPrivate &dd);

virtual QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const = 0;
QScopedPointer<QGraphicsLayoutItemPrivate> d_ptr;

private:
QSizeF *effectiveSizeHints(const QSizeF &constraint) const;
inline QGraphicsLayoutItemPrivate* d_func() { return reinterpret_cast<QGraphicsLayoutItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsLayoutItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsLayoutItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsLayoutItemPrivate;

friend class QGraphicsLayout;
};

template <> inline const char *qobject_interface_iid<QGraphicsLayoutItem *>() { return "org.qt-project.Qt.QGraphicsLayoutItem"; } template <> inline QGraphicsLayoutItem *qobject_cast<QGraphicsLayoutItem *>(QObject *object) { return reinterpret_cast<QGraphicsLayoutItem *>((object ? object->qt_metacast("org.qt-project.Qt.QGraphicsLayoutItem") : 0)); } template <> inline QGraphicsLayoutItem *qobject_cast<QGraphicsLayoutItem *>(const QObject *object) { return reinterpret_cast<QGraphicsLayoutItem *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QGraphicsLayoutItem") : 0)); }

inline void QGraphicsLayoutItem::setMinimumSize(qreal aw, qreal ah)
{ setMinimumSize(QSizeF(aw, ah)); }
inline void QGraphicsLayoutItem::setPreferredSize(qreal aw, qreal ah)
{ setPreferredSize(QSizeF(aw, ah)); }
inline void QGraphicsLayoutItem::setMaximumSize(qreal aw, qreal ah)
{ setMaximumSize(QSizeF(aw, ah)); }

inline qreal QGraphicsLayoutItem::minimumWidth() const
{ return effectiveSizeHint(Qt::MinimumSize).width(); }
inline qreal QGraphicsLayoutItem::minimumHeight() const
{ return effectiveSizeHint(Qt::MinimumSize).height(); }

inline qreal QGraphicsLayoutItem::preferredWidth() const
{ return effectiveSizeHint(Qt::PreferredSize).width(); }
inline qreal QGraphicsLayoutItem::preferredHeight() const
{ return effectiveSizeHint(Qt::PreferredSize).height(); }

inline qreal QGraphicsLayoutItem::maximumWidth() const
{ return effectiveSizeHint(Qt::MaximumSize).width(); }
inline qreal QGraphicsLayoutItem::maximumHeight() const
{ return effectiveSizeHint(Qt::MaximumSize).height(); }



# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"
class QGraphicsLayoutPrivate;
class QGraphicsLayoutItem;
class QGraphicsWidget;

class  QGraphicsLayout : public QGraphicsLayoutItem
{
public:
QGraphicsLayout(QGraphicsLayoutItem *parent = 0);
~QGraphicsLayout();

void setContentsMargins(qreal left, qreal top, qreal right, qreal bottom);
void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;

void activate();
bool isActivated() const;
virtual void invalidate();
virtual void updateGeometry();

virtual void widgetEvent(QEvent *e);

virtual int count() const = 0;
virtual QGraphicsLayoutItem *itemAt(int i) const = 0;
virtual void removeAt(int index) = 0;

static void setInstantInvalidatePropagation(bool enable);
static bool instantInvalidatePropagation();
protected:
QGraphicsLayout(QGraphicsLayoutPrivate &, QGraphicsLayoutItem *);
void addChildLayoutItem(QGraphicsLayoutItem *layoutItem);

private:
QGraphicsLayout(const QGraphicsLayout &) ; QGraphicsLayout &operator=(const QGraphicsLayout &) ;
inline QGraphicsLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsLayoutPrivate;
friend class QGraphicsWidget;
};

template <> inline const char *qobject_interface_iid<QGraphicsLayout *>() { return "org.qt-project.Qt.QGraphicsLayout"; } template <> inline QGraphicsLayout *qobject_cast<QGraphicsLayout *>(QObject *object) { return reinterpret_cast<QGraphicsLayout *>((object ? object->qt_metacast("org.qt-project.Qt.QGraphicsLayout") : 0)); } template <> inline QGraphicsLayout *qobject_cast<QGraphicsLayout *>(const QObject *object) { return reinterpret_cast<QGraphicsLayout *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QGraphicsLayout") : 0)); }



# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsanchorlayout.h"



# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsanchorlayout.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsanchorlayout.h"
class QGraphicsAnchorPrivate;
class QGraphicsAnchorLayout;
class QGraphicsAnchorLayoutPrivate;

class  QGraphicsAnchor : public QObject
{
Q_OBJECT
Q_PROPERTY(qreal spacing READ spacing WRITE setSpacing RESET unsetSpacing)
Q_PROPERTY(QSizePolicy::Policy sizePolicy READ sizePolicy WRITE setSizePolicy)
public:
void setSpacing(qreal spacing);
void unsetSpacing();
qreal spacing() const;
void setSizePolicy(QSizePolicy::Policy policy);
QSizePolicy::Policy sizePolicy() const;
~QGraphicsAnchor();
private:
QGraphicsAnchor(QGraphicsAnchorLayout *parent);

inline QGraphicsAnchorPrivate* d_func() { return reinterpret_cast<QGraphicsAnchorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsAnchorPrivate* d_func() const { return reinterpret_cast<const QGraphicsAnchorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsAnchorPrivate;

friend class QGraphicsAnchorLayoutPrivate;
friend struct AnchorData;
};

class  QGraphicsAnchorLayout : public QGraphicsLayout
{
public:
QGraphicsAnchorLayout(QGraphicsLayoutItem *parent = 0);
virtual ~QGraphicsAnchorLayout();

QGraphicsAnchor *addAnchor(QGraphicsLayoutItem *firstItem, Qt::AnchorPoint firstEdge,
QGraphicsLayoutItem *secondItem, Qt::AnchorPoint secondEdge);
QGraphicsAnchor *anchor(QGraphicsLayoutItem *firstItem, Qt::AnchorPoint firstEdge,
QGraphicsLayoutItem *secondItem, Qt::AnchorPoint secondEdge);

void addCornerAnchors(QGraphicsLayoutItem *firstItem, Qt::Corner firstCorner,
QGraphicsLayoutItem *secondItem, Qt::Corner secondCorner);

void addAnchors(QGraphicsLayoutItem *firstItem,
QGraphicsLayoutItem *secondItem,
Qt::Orientations orientations = Qt::Horizontal | Qt::Vertical);

void setHorizontalSpacing(qreal spacing);
void setVerticalSpacing(qreal spacing);
void setSpacing(qreal spacing);
qreal horizontalSpacing() const;
qreal verticalSpacing() const;

void removeAt(int index);
void setGeometry(const QRectF &rect);
int count() const;
QGraphicsLayoutItem *itemAt(int index) const;

void invalidate();
protected:
QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;

private:
QGraphicsAnchorLayout(const QGraphicsAnchorLayout &) ; QGraphicsAnchorLayout &operator=(const QGraphicsAnchorLayout &) ;
inline QGraphicsAnchorLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsAnchorLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsAnchorLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsAnchorLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsAnchorLayoutPrivate;

friend class QGraphicsAnchor;
};



# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsanchorlayout.h"



# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsgridlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsgridlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsgridlayout.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsgridlayout.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsgridlayout.h"
class QGraphicsGridLayoutPrivate;

class  QGraphicsGridLayout : public QGraphicsLayout
{
public:
QGraphicsGridLayout(QGraphicsLayoutItem *parent = 0);
virtual ~QGraphicsGridLayout();

void addItem(QGraphicsLayoutItem *item, int row, int column, int rowSpan, int columnSpan,
Qt::Alignment alignment = 0);
inline void addItem(QGraphicsLayoutItem *item, int row, int column, Qt::Alignment alignment = 0);

void setHorizontalSpacing(qreal spacing);
qreal horizontalSpacing() const;
void setVerticalSpacing(qreal spacing);
qreal verticalSpacing() const;
void setSpacing(qreal spacing);

void setRowSpacing(int row, qreal spacing);
qreal rowSpacing(int row) const;
void setColumnSpacing(int column, qreal spacing);
qreal columnSpacing(int column) const;

void setRowStretchFactor(int row, int stretch);
int rowStretchFactor(int row) const;
void setColumnStretchFactor(int column, int stretch);
int columnStretchFactor(int column) const;

void setRowMinimumHeight(int row, qreal height);
qreal rowMinimumHeight(int row) const;
void setRowPreferredHeight(int row, qreal height);
qreal rowPreferredHeight(int row) const;
void setRowMaximumHeight(int row, qreal height);
qreal rowMaximumHeight(int row) const;
void setRowFixedHeight(int row, qreal height);

void setColumnMinimumWidth(int column, qreal width);
qreal columnMinimumWidth(int column) const;
void setColumnPreferredWidth(int column, qreal width);
qreal columnPreferredWidth(int column) const;
void setColumnMaximumWidth(int column, qreal width);
qreal columnMaximumWidth(int column) const;
void setColumnFixedWidth(int column, qreal width);

void setRowAlignment(int row, Qt::Alignment alignment);
Qt::Alignment rowAlignment(int row) const;
void setColumnAlignment(int column, Qt::Alignment alignment);
Qt::Alignment columnAlignment(int column) const;

void setAlignment(QGraphicsLayoutItem *item, Qt::Alignment alignment);
Qt::Alignment alignment(QGraphicsLayoutItem *item) const;

int rowCount() const;
int columnCount() const;

QGraphicsLayoutItem *itemAt(int row, int column) const;


int count() const;
QGraphicsLayoutItem *itemAt(int index) const;
void removeAt(int index);
void removeItem(QGraphicsLayoutItem *item);

void invalidate();


void setGeometry(const QRectF &rect);
QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;





private:
QGraphicsGridLayout(const QGraphicsGridLayout &) ; QGraphicsGridLayout &operator=(const QGraphicsGridLayout &) ;
inline QGraphicsGridLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsGridLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsGridLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsGridLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsGridLayoutPrivate;
};

inline void QGraphicsGridLayout::addItem(QGraphicsLayoutItem *aitem, int arow, int acolumn, Qt::Alignment aalignment)
{ addItem(aitem, arow, acolumn, 1, 1, aalignment); }



# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsgridlayout.h"




# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitemanimation.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitemanimation.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitemanimation.h"



class QGraphicsItem;
class QMatrix;
class QPointF;
class QTimeLine;
template <class T1, class T2> struct QPair;

class QGraphicsItemAnimationPrivate;
class  QGraphicsItemAnimation : public QObject
{
Q_OBJECT
public:
QGraphicsItemAnimation(QObject *parent = 0);
virtual ~QGraphicsItemAnimation();

QGraphicsItem *item() const;
void setItem(QGraphicsItem *item);

QTimeLine *timeLine() const;
void setTimeLine(QTimeLine *timeLine);

QPointF posAt(qreal step) const;
QList<QPair<qreal, QPointF> > posList() const;
void setPosAt(qreal step, const QPointF &pos);

QMatrix matrixAt(qreal step) const;

qreal rotationAt(qreal step) const;
QList<QPair<qreal, qreal> > rotationList() const;
void setRotationAt(qreal step, qreal angle);

qreal xTranslationAt(qreal step) const;
qreal yTranslationAt(qreal step) const;
QList<QPair<qreal, QPointF> > translationList() const;
void setTranslationAt(qreal step, qreal dx, qreal dy);

qreal verticalScaleAt(qreal step) const;
qreal horizontalScaleAt(qreal step) const;
QList<QPair<qreal, QPointF> > scaleList() const;
void setScaleAt(qreal step, qreal sx, qreal sy);

qreal verticalShearAt(qreal step) const;
qreal horizontalShearAt(qreal step) const;
QList<QPair<qreal, QPointF> > shearList() const;
void setShearAt(qreal step, qreal sh, qreal sv);

void clear();

public slots:
void setStep(qreal x);
void reset();

protected:
virtual void beforeAnimationStep(qreal step);
virtual void afterAnimationStep(qreal step);

private:
QGraphicsItemAnimation(const QGraphicsItemAnimation &) ; QGraphicsItemAnimation &operator=(const QGraphicsItemAnimation &) ;
QGraphicsItemAnimationPrivate *d;
};





# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"































































































# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"





















































































































































# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayout.h"































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"
class QGraphicsLinearLayoutPrivate;

class  QGraphicsLinearLayout : public QGraphicsLayout
{
public:
QGraphicsLinearLayout(QGraphicsLayoutItem *parent = 0);
QGraphicsLinearLayout(Qt::Orientation orientation, QGraphicsLayoutItem *parent = 0);
virtual ~QGraphicsLinearLayout();

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

inline void addItem(QGraphicsLayoutItem *item) { insertItem(-1, item); }
inline void addStretch(int stretch = 1) { insertStretch(-1, stretch); }

void insertItem(int index, QGraphicsLayoutItem *item);
void insertStretch(int index, int stretch = 1);

void removeItem(QGraphicsLayoutItem *item);
void removeAt(int index);

void setSpacing(qreal spacing);
qreal spacing() const;
void setItemSpacing(int index, qreal spacing);
qreal itemSpacing(int index) const;

void setStretchFactor(QGraphicsLayoutItem *item, int stretch);
int stretchFactor(QGraphicsLayoutItem *item) const;

void setAlignment(QGraphicsLayoutItem *item, Qt::Alignment alignment);
Qt::Alignment alignment(QGraphicsLayoutItem *item) const;

void setGeometry(const QRectF &rect);

int count() const;
QGraphicsLayoutItem *itemAt(int index) const;

void invalidate();
QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;





# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"
void dump(int indent = 0) const;

protected:




# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"
private:
QGraphicsLinearLayout(const QGraphicsLinearLayout &) ; QGraphicsLinearLayout &operator=(const QGraphicsLinearLayout &) ;
inline QGraphicsLinearLayoutPrivate* d_func() { return reinterpret_cast<QGraphicsLinearLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsLinearLayoutPrivate* d_func() const { return reinterpret_cast<const QGraphicsLinearLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsLinearLayoutPrivate;
};



# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslinearlayout.h"




# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicslayoutitem.h"





















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

















































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"



class QFont;
class QFontMetrics;
class QGraphicsLayout;
class QGraphicsSceneMoveEvent;
class QGraphicsWidgetPrivate;
class QGraphicsSceneResizeEvent;
class QStyle;
class QStyleOption;



# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"
class QGraphicsWidgetPrivate;

class  QGraphicsWidget : public QGraphicsObject, public QGraphicsLayoutItem
{
Q_OBJECT

Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(QFont font READ font WRITE setFont)
Q_PROPERTY(Qt::LayoutDirection layoutDirection READ layoutDirection WRITE setLayoutDirection RESET unsetLayoutDirection)
Q_PROPERTY(QSizeF size READ size WRITE resize NOTIFY geometryChanged)
Q_PROPERTY(QSizeF minimumSize READ minimumSize WRITE setMinimumSize)
Q_PROPERTY(QSizeF preferredSize READ preferredSize WRITE setPreferredSize)
Q_PROPERTY(QSizeF maximumSize READ maximumSize WRITE setMaximumSize)
Q_PROPERTY(QSizePolicy sizePolicy READ sizePolicy WRITE setSizePolicy)
Q_PROPERTY(Qt::FocusPolicy focusPolicy READ focusPolicy WRITE setFocusPolicy)
Q_PROPERTY(Qt::WindowFlags windowFlags READ windowFlags WRITE setWindowFlags)
Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle)
Q_PROPERTY(QRectF geometry READ geometry WRITE setGeometry NOTIFY geometryChanged)
Q_PROPERTY(bool autoFillBackground READ autoFillBackground WRITE setAutoFillBackground)
Q_PROPERTY(QGraphicsLayout* layout READ layout WRITE setLayout NOTIFY layoutChanged)
public:
QGraphicsWidget(QGraphicsItem *parent = 0, Qt::WindowFlags wFlags = 0);
~QGraphicsWidget();
QGraphicsLayout *layout() const;
void setLayout(QGraphicsLayout *layout);
void adjustSize();

Qt::LayoutDirection layoutDirection() const;
void setLayoutDirection(Qt::LayoutDirection direction);
void unsetLayoutDirection();

QStyle *style() const;
void setStyle(QStyle *style);

QFont font() const;
void setFont(const QFont &font);

QPalette palette() const;
void setPalette(const QPalette &palette);

bool autoFillBackground() const;
void setAutoFillBackground(bool enabled);

void resize(const QSizeF &size);
inline void resize(qreal w, qreal h) { resize(QSizeF(w, h)); }
QSizeF size() const;

void setGeometry(const QRectF &rect);
inline void setGeometry(qreal x, qreal y, qreal w, qreal h);
inline QRectF rect() const { return QRectF(QPointF(), size()); }

void setContentsMargins(qreal left, qreal top, qreal right, qreal bottom);
void getContentsMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;

void setWindowFrameMargins(qreal left, qreal top, qreal right, qreal bottom);
void getWindowFrameMargins(qreal *left, qreal *top, qreal *right, qreal *bottom) const;
void unsetWindowFrameMargins();
QRectF windowFrameGeometry() const;
QRectF windowFrameRect() const;


Qt::WindowFlags windowFlags() const;
Qt::WindowType windowType() const;
void setWindowFlags(Qt::WindowFlags wFlags);
bool isActiveWindow() const;
void setWindowTitle(const QString &title);
QString windowTitle() const;


Qt::FocusPolicy focusPolicy() const;
void setFocusPolicy(Qt::FocusPolicy policy);
static void setTabOrder(QGraphicsWidget *first, QGraphicsWidget *second);
QGraphicsWidget *focusWidget() const;


# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"
int grabShortcut(const QKeySequence &sequence, Qt::ShortcutContext context = Qt::WindowShortcut);
void releaseShortcut(int id);
void setShortcutEnabled(int id, bool enabled = true);
void setShortcutAutoRepeat(int id, bool enabled = true);



# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"

void addAction(QAction *action);
void addActions(QList<QAction*> actions);
void insertAction(QAction *before, QAction *action);
void insertActions(QAction *before, QList<QAction*> actions);
void removeAction(QAction *action);
QList<QAction*> actions() const;


# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"
void setAttribute(Qt::WidgetAttribute attribute, bool on = true);
bool testAttribute(Qt::WidgetAttribute attribute) const;

enum {
Type = 11
};
int type() const;

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);
virtual void paintWindowFrame(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);
QRectF boundingRect() const;
QPainterPath shape() const;






# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"
const QObjectList &children() const { return QObject::children(); }




# 178 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"
signals:
void geometryChanged();
void layoutChanged();

public slots:
bool close();

protected:
virtual void initStyleOption(QStyleOption *option) const;

QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;
void updateGeometry();


QVariant itemChange(GraphicsItemChange change, const QVariant &value);
virtual QVariant propertyChange(const QString &propertyName, const QVariant &value);


bool sceneEvent(QEvent *event);
virtual bool windowFrameEvent(QEvent *e);
virtual Qt::WindowFrameSection windowFrameSectionAt(const QPointF& pos) const;


bool event(QEvent *event);

virtual void changeEvent(QEvent *event);
virtual void closeEvent(QCloseEvent *event);


void focusInEvent(QFocusEvent *event);
virtual bool focusNextPrevChild(bool next);
void focusOutEvent(QFocusEvent *event);
virtual void hideEvent(QHideEvent *event);

virtual void moveEvent(QGraphicsSceneMoveEvent *event);
virtual void polishEvent();

virtual void resizeEvent(QGraphicsSceneResizeEvent *event);
virtual void showEvent(QShowEvent *event);

virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);
virtual void grabMouseEvent(QEvent *event);
virtual void ungrabMouseEvent(QEvent *event);
virtual void grabKeyboardEvent(QEvent *event);
virtual void ungrabKeyboardEvent(QEvent *event);
QGraphicsWidget(QGraphicsWidgetPrivate &, QGraphicsItem *parent, Qt::WindowFlags wFlags = 0);

private:
QGraphicsWidget(const QGraphicsWidget &) ; QGraphicsWidget &operator=(const QGraphicsWidget &) ;
inline QGraphicsWidgetPrivate* d_func() { return reinterpret_cast<QGraphicsWidgetPrivate *>(QGraphicsItem::d_ptr.data()); } inline const QGraphicsWidgetPrivate* d_func() const { return reinterpret_cast<const QGraphicsWidgetPrivate *>(QGraphicsItem::d_ptr.data()); } friend class QGraphicsWidgetPrivate;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;
friend class QGraphicsView;
friend class QGraphicsItem;
friend class QGraphicsItemPrivate;
friend class QGraphicsLayout;
friend class QWidget;
friend class QApplication;
};

inline void QGraphicsWidget::setGeometry(qreal ax, qreal ay, qreal aw, qreal ah)
{ setGeometry(QRectF(ax, ay, aw, ah)); }



# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"
class QGraphicsProxyWidgetPrivate;

class  QGraphicsProxyWidget : public QGraphicsWidget
{
Q_OBJECT
public:
QGraphicsProxyWidget(QGraphicsItem *parent = 0, Qt::WindowFlags wFlags = 0);
~QGraphicsProxyWidget();

void setWidget(QWidget *widget);
QWidget *widget() const;

QRectF subWidgetRect(const QWidget *widget) const;

void setGeometry(const QRectF &rect);

void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);

enum {
Type = 12
};
int type() const;

QGraphicsProxyWidget *createProxyForChildWidget(QWidget *child);

protected:
QVariant itemChange(GraphicsItemChange change, const QVariant &value);

bool event(QEvent *event);
bool eventFilter(QObject *object, QEvent *event);

void showEvent(QShowEvent *event);
void hideEvent(QHideEvent *event);


# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"
void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);



# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"
void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
void dropEvent(QGraphicsSceneDragDropEvent *event);


# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"
void hoverEnterEvent(QGraphicsSceneHoverEvent *event);
void hoverLeaveEvent(QGraphicsSceneHoverEvent *event);
void hoverMoveEvent(QGraphicsSceneHoverEvent *event);
void grabMouseEvent(QEvent *event);
void ungrabMouseEvent(QEvent *event);

void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
void mousePressEvent(QGraphicsSceneMouseEvent *event);
void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);

# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"
void wheelEvent(QGraphicsSceneWheelEvent *event);


# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);

void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
bool focusNextPrevChild(bool next);

QVariant inputMethodQuery(Qt::InputMethodQuery query) const;
void inputMethodEvent(QInputMethodEvent *event);

QSizeF sizeHint(Qt::SizeHint which, const QSizeF &constraint = QSizeF()) const;
void resizeEvent(QGraphicsSceneResizeEvent *event);

protected slots:
QGraphicsProxyWidget *newProxyWidget(const QWidget *);

private:
QGraphicsProxyWidget(const QGraphicsProxyWidget &) ; QGraphicsProxyWidget &operator=(const QGraphicsProxyWidget &) ;
inline QGraphicsProxyWidgetPrivate* d_func() { return reinterpret_cast<QGraphicsProxyWidgetPrivate *>(QGraphicsItem::d_ptr.data()); } inline const QGraphicsProxyWidgetPrivate* d_func() const { return reinterpret_cast<const QGraphicsProxyWidgetPrivate *>(QGraphicsItem::d_ptr.data()); } friend class QGraphicsProxyWidgetPrivate;


friend class QWidget;
friend class QWidgetPrivate;
friend class QGraphicsItem;
};



# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsproxywidget.h"




# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qbrush.h"


























































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpen.h"












































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"


# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"





# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"
template<typename T> class QList;
class QFocusEvent;
class QFont;
class QFontMetrics;
class QGraphicsEllipseItem;
class QGraphicsItem;
class QGraphicsItemGroup;
class QGraphicsLineItem;
class QGraphicsPathItem;
class QGraphicsPixmapItem;
class QGraphicsPolygonItem;
class QGraphicsProxyWidget;
class QGraphicsRectItem;
class QGraphicsSceneContextMenuEvent;
class QGraphicsSceneDragDropEvent;
class QGraphicsSceneEvent;
class QGraphicsSceneHelpEvent;
class QGraphicsSceneHoverEvent;
class QGraphicsSceneMouseEvent;
class QGraphicsSceneWheelEvent;
class QGraphicsSimpleTextItem;
class QGraphicsTextItem;
class QGraphicsView;
class QGraphicsWidget;
class QGraphicsSceneIndex;
class QHelpEvent;
class QInputMethodEvent;
class QKeyEvent;
class QLineF;
class QPainterPath;
class QPixmap;
class QPointF;
class QPolygonF;
class QRectF;
class QSizeF;
class QStyle;
class QStyleOptionGraphicsItem;

class QGraphicsScenePrivate;
class  QGraphicsScene : public QObject
{
Q_OBJECT
Q_PROPERTY(QBrush backgroundBrush READ backgroundBrush WRITE setBackgroundBrush)
Q_PROPERTY(QBrush foregroundBrush READ foregroundBrush WRITE setForegroundBrush)
Q_PROPERTY(ItemIndexMethod itemIndexMethod READ itemIndexMethod WRITE setItemIndexMethod)
Q_PROPERTY(QRectF sceneRect READ sceneRect WRITE setSceneRect)
Q_PROPERTY(int bspTreeDepth READ bspTreeDepth WRITE setBspTreeDepth)
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(QFont font READ font WRITE setFont)
Q_PROPERTY(bool sortCacheEnabled READ isSortCacheEnabled WRITE setSortCacheEnabled)
Q_PROPERTY(bool stickyFocus READ stickyFocus WRITE setStickyFocus)

public:
enum ItemIndexMethod {
BspTreeIndex,
NoIndex = -1
};

enum SceneLayer {
ItemLayer = 0x1,
BackgroundLayer = 0x2,
ForegroundLayer = 0x4,
AllLayers = 0xffff
};
typedef QFlags<SceneLayer> SceneLayers;

QGraphicsScene(QObject *parent = 0);
QGraphicsScene(const QRectF &sceneRect, QObject *parent = 0);
QGraphicsScene(qreal x, qreal y, qreal width, qreal height, QObject *parent = 0);
virtual ~QGraphicsScene();

QRectF sceneRect() const;
inline qreal width() const { return sceneRect().width(); }
inline qreal height() const { return sceneRect().height(); }
void setSceneRect(const QRectF &rect);
inline void setSceneRect(qreal x, qreal y, qreal w, qreal h)
{ setSceneRect(QRectF(x, y, w, h)); }

void render(QPainter *painter,
const QRectF &target = QRectF(), const QRectF &source = QRectF(),
Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio);

ItemIndexMethod itemIndexMethod() const;
void setItemIndexMethod(ItemIndexMethod method);

bool isSortCacheEnabled() const;
void setSortCacheEnabled(bool enabled);

int bspTreeDepth() const;
void setBspTreeDepth(int depth);

QRectF itemsBoundingRect() const;

QList<QGraphicsItem *> items(Qt::SortOrder order = Qt::DescendingOrder) const;

QList<QGraphicsItem *> items(const QPointF &pos, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, const QTransform &deviceTransform = QTransform()) const;
QList<QGraphicsItem *> items(const QRectF &rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, const QTransform &deviceTransform = QTransform()) const;
QList<QGraphicsItem *> items(const QPolygonF &polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, const QTransform &deviceTransform = QTransform()) const;
QList<QGraphicsItem *> items(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, const QTransform &deviceTransform = QTransform()) const;

QList<QGraphicsItem *> collidingItems(const QGraphicsItem *item, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;






# 166 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"
QGraphicsItem *itemAt(const QPointF &pos, const QTransform &deviceTransform) const;




# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"
inline QList<QGraphicsItem *> items(qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order,
const QTransform &deviceTransform = QTransform()) const
{ return items(QRectF(x, y, w, h), mode, order, deviceTransform); }






# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"
inline QGraphicsItem *itemAt(qreal x, qreal y, const QTransform &deviceTransform) const
{ return itemAt(QPointF(x, y), deviceTransform); }

QList<QGraphicsItem *> selectedItems() const;
QPainterPath selectionArea() const;
void setSelectionArea(const QPainterPath &path, const QTransform &deviceTransform);
void setSelectionArea(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, const QTransform &deviceTransform = QTransform());

QGraphicsItemGroup *createItemGroup(const QList<QGraphicsItem *> &items);
void destroyItemGroup(QGraphicsItemGroup *group);

void addItem(QGraphicsItem *item);
QGraphicsEllipseItem *addEllipse(const QRectF &rect, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsLineItem *addLine(const QLineF &line, const QPen &pen = QPen());
QGraphicsPathItem *addPath(const QPainterPath &path, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsPixmapItem *addPixmap(const QPixmap &pixmap);
QGraphicsPolygonItem *addPolygon(const QPolygonF &polygon, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsRectItem *addRect(const QRectF &rect, const QPen &pen = QPen(), const QBrush &brush = QBrush());
QGraphicsTextItem *addText(const QString &text, const QFont &font = QFont());
QGraphicsSimpleTextItem *addSimpleText(const QString &text, const QFont &font = QFont());
QGraphicsProxyWidget *addWidget(QWidget *widget, Qt::WindowFlags wFlags = 0);
inline QGraphicsEllipseItem *addEllipse(qreal x, qreal y, qreal w, qreal h, const QPen &pen = QPen(), const QBrush &brush = QBrush())
{ return addEllipse(QRectF(x, y, w, h), pen, brush); }
inline QGraphicsLineItem *addLine(qreal x1, qreal y1, qreal x2, qreal y2, const QPen &pen = QPen())
{ return addLine(QLineF(x1, y1, x2, y2), pen); }
inline QGraphicsRectItem *addRect(qreal x, qreal y, qreal w, qreal h, const QPen &pen = QPen(), const QBrush &brush = QBrush())
{ return addRect(QRectF(x, y, w, h), pen, brush); }
void removeItem(QGraphicsItem *item);

QGraphicsItem *focusItem() const;
void setFocusItem(QGraphicsItem *item, Qt::FocusReason focusReason = Qt::OtherFocusReason);
bool hasFocus() const;
void setFocus(Qt::FocusReason focusReason = Qt::OtherFocusReason);
void clearFocus();

void setStickyFocus(bool enabled);
bool stickyFocus() const;

QGraphicsItem *mouseGrabberItem() const;

QBrush backgroundBrush() const;
void setBackgroundBrush(const QBrush &brush);

QBrush foregroundBrush() const;
void setForegroundBrush(const QBrush &brush);

virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

QList <QGraphicsView *> views() const;

inline void update(qreal x, qreal y, qreal w, qreal h)
{ update(QRectF(x, y, w, h)); }
inline void invalidate(qreal x, qreal y, qreal w, qreal h, SceneLayers layers = AllLayers)
{ invalidate(QRectF(x, y, w, h), layers); }

QStyle *style() const;
void setStyle(QStyle *style);

QFont font() const;
void setFont(const QFont &font);

QPalette palette() const;
void setPalette(const QPalette &palette);

bool isActive() const;
QGraphicsItem *activePanel() const;
void setActivePanel(QGraphicsItem *item);
QGraphicsWidget *activeWindow() const;
void setActiveWindow(QGraphicsWidget *widget);

bool sendEvent(QGraphicsItem *item, QEvent *event);

public slots:
void update(const QRectF &rect = QRectF());
void invalidate(const QRectF &rect = QRectF(), SceneLayers layers = AllLayers);
void advance();
void clearSelection();
void clear();

protected:
bool event(QEvent *event);
bool eventFilter(QObject *watched, QEvent *event);
virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent *event);
virtual void dragEnterEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragMoveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent *event);
virtual void dropEvent(QGraphicsSceneDragDropEvent *event);
virtual void focusInEvent(QFocusEvent *event);
virtual void focusOutEvent(QFocusEvent *event);
virtual void helpEvent(QGraphicsSceneHelpEvent *event);
virtual void keyPressEvent(QKeyEvent *event);
virtual void keyReleaseEvent(QKeyEvent *event);
virtual void mousePressEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseMoveEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent *event);
virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event);
virtual void wheelEvent(QGraphicsSceneWheelEvent *event);
virtual void inputMethodEvent(QInputMethodEvent *event);

virtual void drawBackground(QPainter *painter, const QRectF &rect);
virtual void drawForeground(QPainter *painter, const QRectF &rect);
virtual void drawItems(QPainter *painter, int numItems,
QGraphicsItem *items[],
const QStyleOptionGraphicsItem options[],
QWidget *widget = 0);

protected slots:
bool focusNextPrevChild(bool next);

signals:
void changed(const QList<QRectF> &region);
void sceneRectChanged(const QRectF &rect);
void selectionChanged();
void focusItemChanged(QGraphicsItem *newFocus, QGraphicsItem *oldFocus, Qt::FocusReason reason);

private:
inline QGraphicsScenePrivate* d_func() { return reinterpret_cast<QGraphicsScenePrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsScenePrivate* d_func() const { return reinterpret_cast<const QGraphicsScenePrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsScenePrivate;
QGraphicsScene(const QGraphicsScene &) ; QGraphicsScene &operator=(const QGraphicsScene &) ;




friend class QGraphicsItem;
friend class QGraphicsItemPrivate;
friend class QGraphicsObject;
friend class QGraphicsView;
friend class QGraphicsViewPrivate;
friend class QGraphicsWidget;
friend class QGraphicsWidgetPrivate;
friend class QGraphicsEffect;
friend class QGraphicsSceneIndex;
friend class QGraphicsSceneIndexPrivate;
friend class QGraphicsSceneBspTreeIndex;
friend class QGraphicsSceneBspTreeIndexPrivate;
friend class QGraphicsItemEffectSourcePrivate;

# 316 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"
friend class QGesture;

# 318 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"
};

 inline QFlags<QGraphicsScene::SceneLayers::enum_type> operator|(QGraphicsScene::SceneLayers::enum_type f1, QGraphicsScene::SceneLayers::enum_type f2) { return QFlags<QGraphicsScene::SceneLayers::enum_type>(f1) | f2; }  inline QFlags<QGraphicsScene::SceneLayers::enum_type> operator|(QGraphicsScene::SceneLayers::enum_type f1, QFlags<QGraphicsScene::SceneLayers::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGraphicsScene::SceneLayers::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 324 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"



# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreevent.h"






















































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpolygon.h"




















































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qset.h"















































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"





# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"
class QMimeData;
class QPointF;
class QSizeF;
class QWidget;

class QGraphicsSceneEventPrivate;
class  QGraphicsSceneEvent : public QEvent
{
public:
explicit QGraphicsSceneEvent(Type type);
~QGraphicsSceneEvent();

QWidget *widget() const;
void setWidget(QWidget *widget);

protected:
QGraphicsSceneEvent(QGraphicsSceneEventPrivate &dd, Type type = None);
QScopedPointer<QGraphicsSceneEventPrivate> d_ptr;
inline QGraphicsSceneEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneEventPrivate;
private:
QGraphicsSceneEvent(const QGraphicsSceneEvent &) ; QGraphicsSceneEvent &operator=(const QGraphicsSceneEvent &) ;
};

class QGraphicsSceneMouseEventPrivate;
class  QGraphicsSceneMouseEvent : public QGraphicsSceneEvent
{
public:
explicit QGraphicsSceneMouseEvent(Type type = None);
~QGraphicsSceneMouseEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

QPointF buttonDownPos(Qt::MouseButton button) const;
void setButtonDownPos(Qt::MouseButton button, const QPointF &pos);

QPointF buttonDownScenePos(Qt::MouseButton button) const;
void setButtonDownScenePos(Qt::MouseButton button, const QPointF &pos);

QPoint buttonDownScreenPos(Qt::MouseButton button) const;
void setButtonDownScreenPos(Qt::MouseButton button, const QPoint &pos);

QPointF lastPos() const;
void setLastPos(const QPointF &pos);

QPointF lastScenePos() const;
void setLastScenePos(const QPointF &pos);

QPoint lastScreenPos() const;
void setLastScreenPos(const QPoint &pos);

Qt::MouseButtons buttons() const;
void setButtons(Qt::MouseButtons buttons);

Qt::MouseButton button() const;
void setButton(Qt::MouseButton button);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

private:
inline QGraphicsSceneMouseEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneMouseEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneMouseEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneMouseEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneMouseEventPrivate;
QGraphicsSceneMouseEvent(const QGraphicsSceneMouseEvent &) ; QGraphicsSceneMouseEvent &operator=(const QGraphicsSceneMouseEvent &) ;
};

class QGraphicsSceneWheelEventPrivate;
class  QGraphicsSceneWheelEvent : public QGraphicsSceneEvent
{
public:
explicit QGraphicsSceneWheelEvent(Type type = None);
~QGraphicsSceneWheelEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

Qt::MouseButtons buttons() const;
void setButtons(Qt::MouseButtons buttons);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

int delta() const;
void setDelta(int delta);

Qt::Orientation orientation() const;
void setOrientation(Qt::Orientation orientation);

private:
inline QGraphicsSceneWheelEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneWheelEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneWheelEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneWheelEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneWheelEventPrivate;
QGraphicsSceneWheelEvent(const QGraphicsSceneWheelEvent &) ; QGraphicsSceneWheelEvent &operator=(const QGraphicsSceneWheelEvent &) ;
};

class QGraphicsSceneContextMenuEventPrivate;
class  QGraphicsSceneContextMenuEvent : public QGraphicsSceneEvent
{
public:
enum Reason { Mouse, Keyboard, Other };

explicit QGraphicsSceneContextMenuEvent(Type type = None);
~QGraphicsSceneContextMenuEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

Reason reason() const;
void setReason(Reason reason);

private:
inline QGraphicsSceneContextMenuEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneContextMenuEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneContextMenuEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneContextMenuEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneContextMenuEventPrivate;
QGraphicsSceneContextMenuEvent(const QGraphicsSceneContextMenuEvent &) ; QGraphicsSceneContextMenuEvent &operator=(const QGraphicsSceneContextMenuEvent &) ;
};

class QGraphicsSceneHoverEventPrivate;
class  QGraphicsSceneHoverEvent : public QGraphicsSceneEvent
{
public:
explicit QGraphicsSceneHoverEvent(Type type = None);
~QGraphicsSceneHoverEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

QPointF lastPos() const;
void setLastPos(const QPointF &pos);

QPointF lastScenePos() const;
void setLastScenePos(const QPointF &pos);

QPoint lastScreenPos() const;
void setLastScreenPos(const QPoint &pos);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

private:
inline QGraphicsSceneHoverEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneHoverEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneHoverEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneHoverEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneHoverEventPrivate;
QGraphicsSceneHoverEvent(const QGraphicsSceneHoverEvent &) ; QGraphicsSceneHoverEvent &operator=(const QGraphicsSceneHoverEvent &) ;
};

class QGraphicsSceneHelpEventPrivate;
class  QGraphicsSceneHelpEvent : public QGraphicsSceneEvent
{
public:
explicit QGraphicsSceneHelpEvent(Type type = None);
~QGraphicsSceneHelpEvent();

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

private:
inline QGraphicsSceneHelpEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneHelpEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneHelpEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneHelpEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneHelpEventPrivate;
QGraphicsSceneHelpEvent(const QGraphicsSceneHelpEvent &) ; QGraphicsSceneHelpEvent &operator=(const QGraphicsSceneHelpEvent &) ;
};

class QGraphicsSceneDragDropEventPrivate;
class  QGraphicsSceneDragDropEvent : public QGraphicsSceneEvent
{
public:
explicit QGraphicsSceneDragDropEvent(Type type = None);
~QGraphicsSceneDragDropEvent();

QPointF pos() const;
void setPos(const QPointF &pos);

QPointF scenePos() const;
void setScenePos(const QPointF &pos);

QPoint screenPos() const;
void setScreenPos(const QPoint &pos);

Qt::MouseButtons buttons() const;
void setButtons(Qt::MouseButtons buttons);

Qt::KeyboardModifiers modifiers() const;
void setModifiers(Qt::KeyboardModifiers modifiers);

Qt::DropActions possibleActions() const;
void setPossibleActions(Qt::DropActions actions);

Qt::DropAction proposedAction() const;
void setProposedAction(Qt::DropAction action);
void acceptProposedAction();

Qt::DropAction dropAction() const;
void setDropAction(Qt::DropAction action);

QWidget *source() const;
void setSource(QWidget *source);

const QMimeData *mimeData() const;
void setMimeData(const QMimeData *data);

private:
inline QGraphicsSceneDragDropEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneDragDropEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneDragDropEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneDragDropEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneDragDropEventPrivate;
QGraphicsSceneDragDropEvent(const QGraphicsSceneDragDropEvent &) ; QGraphicsSceneDragDropEvent &operator=(const QGraphicsSceneDragDropEvent &) ;
};

class QGraphicsSceneResizeEventPrivate;
class  QGraphicsSceneResizeEvent : public QGraphicsSceneEvent
{
inline QGraphicsSceneResizeEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneResizeEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneResizeEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneResizeEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneResizeEventPrivate;
QGraphicsSceneResizeEvent(const QGraphicsSceneResizeEvent &) ; QGraphicsSceneResizeEvent &operator=(const QGraphicsSceneResizeEvent &) ;
public:
QGraphicsSceneResizeEvent();
~QGraphicsSceneResizeEvent();

QSizeF oldSize() const;
void setOldSize(const QSizeF &size);

QSizeF newSize() const;
void setNewSize(const QSizeF &size);
};

class QGraphicsSceneMoveEventPrivate;
class  QGraphicsSceneMoveEvent : public QGraphicsSceneEvent
{
inline QGraphicsSceneMoveEventPrivate* d_func() { return reinterpret_cast<QGraphicsSceneMoveEventPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsSceneMoveEventPrivate* d_func() const { return reinterpret_cast<const QGraphicsSceneMoveEventPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsSceneMoveEventPrivate;
QGraphicsSceneMoveEvent(const QGraphicsSceneMoveEvent &) ; QGraphicsSceneMoveEvent &operator=(const QGraphicsSceneMoveEvent &) ;
public:
QGraphicsSceneMoveEvent();
~QGraphicsSceneMoveEvent();

QPointF oldPos() const;
void setOldPos(const QPointF &pos);

QPointF newPos() const;
void setNewPos(const QPointF &pos);
};



# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicssceneevent.h"



# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicstransform.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicstransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"






















































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QVector3D"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicstransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtransform.h"


































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QTransform"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicstransform.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QMatrix4x4"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicstransform.h"



# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicstransform.h"



class QGraphicsItem;
class QGraphicsTransformPrivate;

class  QGraphicsTransform : public QObject
{
Q_OBJECT
public:
QGraphicsTransform(QObject *parent = 0);
~QGraphicsTransform();

virtual void applyTo(QMatrix4x4 *matrix) const = 0;

protected slots:
void update();

protected:
QGraphicsTransform(QGraphicsTransformPrivate &p, QObject *parent);

private:
friend class QGraphicsItem;
friend class QGraphicsItemPrivate;
inline QGraphicsTransformPrivate* d_func() { return reinterpret_cast<QGraphicsTransformPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsTransformPrivate* d_func() const { return reinterpret_cast<const QGraphicsTransformPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsTransformPrivate;
};

class QGraphicsScalePrivate;

class  QGraphicsScale : public QGraphicsTransform
{
Q_OBJECT

Q_PROPERTY(QVector3D origin READ origin WRITE setOrigin NOTIFY originChanged)
Q_PROPERTY(qreal xScale READ xScale WRITE setXScale NOTIFY xScaleChanged)
Q_PROPERTY(qreal yScale READ yScale WRITE setYScale NOTIFY yScaleChanged)
Q_PROPERTY(qreal zScale READ zScale WRITE setZScale NOTIFY zScaleChanged)
public:
QGraphicsScale(QObject *parent = 0);
~QGraphicsScale();

QVector3D origin() const;
void setOrigin(const QVector3D &point);

qreal xScale() const;
void setXScale(qreal);

qreal yScale() const;
void setYScale(qreal);

qreal zScale() const;
void setZScale(qreal);

void applyTo(QMatrix4x4 *matrix) const;

signals:
void originChanged();
void xScaleChanged();
void yScaleChanged();
void zScaleChanged();
void scaleChanged();

private:
inline QGraphicsScalePrivate* d_func() { return reinterpret_cast<QGraphicsScalePrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsScalePrivate* d_func() const { return reinterpret_cast<const QGraphicsScalePrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsScalePrivate;
};

class QGraphicsRotationPrivate;

class  QGraphicsRotation : public QGraphicsTransform
{
Q_OBJECT

Q_PROPERTY(QVector3D origin READ origin WRITE setOrigin NOTIFY originChanged)
Q_PROPERTY(qreal angle READ angle WRITE setAngle NOTIFY angleChanged)
Q_PROPERTY(QVector3D axis READ axis WRITE setAxis NOTIFY axisChanged)
public:
QGraphicsRotation(QObject *parent = 0);
~QGraphicsRotation();

QVector3D origin() const;
void setOrigin(const QVector3D &point);

qreal angle() const;
void setAngle(qreal);

QVector3D axis() const;
void setAxis(const QVector3D &axis);
void setAxis(Qt::Axis axis);

void applyTo(QMatrix4x4 *matrix) const;

signals:
void originChanged();
void angleChanged();
void axisChanged();

private:
inline QGraphicsRotationPrivate* d_func() { return reinterpret_cast<QGraphicsRotationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsRotationPrivate* d_func() const { return reinterpret_cast<const QGraphicsRotationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsRotationPrivate;
};






# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollarea.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"
class QMargins;
class QScrollBar;
class QAbstractScrollAreaPrivate;

class  QAbstractScrollArea : public QFrame
{
Q_OBJECT
Q_PROPERTY(Qt::ScrollBarPolicy verticalScrollBarPolicy READ verticalScrollBarPolicy WRITE setVerticalScrollBarPolicy)
Q_PROPERTY(Qt::ScrollBarPolicy horizontalScrollBarPolicy READ horizontalScrollBarPolicy WRITE setHorizontalScrollBarPolicy)

public:
explicit QAbstractScrollArea(QWidget* parent=0);
~QAbstractScrollArea();

Qt::ScrollBarPolicy verticalScrollBarPolicy() const;
void setVerticalScrollBarPolicy(Qt::ScrollBarPolicy);
QScrollBar *verticalScrollBar() const;
void setVerticalScrollBar(QScrollBar *scrollbar);

Qt::ScrollBarPolicy horizontalScrollBarPolicy() const;
void setHorizontalScrollBarPolicy(Qt::ScrollBarPolicy);
QScrollBar *horizontalScrollBar() const;
void setHorizontalScrollBar(QScrollBar *scrollbar);

QWidget *cornerWidget() const;
void setCornerWidget(QWidget *widget);

void addScrollBarWidget(QWidget *widget, Qt::Alignment alignment);
QWidgetList scrollBarWidgets(Qt::Alignment alignment);

QWidget *viewport() const;
void setViewport(QWidget *widget);
QSize maximumViewportSize() const;

QSize minimumSizeHint() const;

QSize sizeHint() const;

virtual void setupViewport(QWidget *viewport);

protected:
QAbstractScrollArea(QAbstractScrollAreaPrivate &dd, QWidget *parent = 0);
void setViewportMargins(int left, int top, int right, int bottom);
void setViewportMargins(const QMargins &margins);

bool eventFilter(QObject *, QEvent *);
bool event(QEvent *);
virtual bool viewportEvent(QEvent *);

void resizeEvent(QResizeEvent *);
void paintEvent(QPaintEvent *);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mouseDoubleClickEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);

# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"
void wheelEvent(QWheelEvent *);


# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"
void contextMenuEvent(QContextMenuEvent *);


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"
void dragEnterEvent(QDragEnterEvent *);
void dragMoveEvent(QDragMoveEvent *);
void dragLeaveEvent(QDragLeaveEvent *);
void dropEvent(QDropEvent *);


# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"
void keyPressEvent(QKeyEvent *);

virtual void scrollContentsBy(int dx, int dy);

virtual QSize viewportSizeHint() const;

private:
inline QAbstractScrollAreaPrivate* d_func() { return reinterpret_cast<QAbstractScrollAreaPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractScrollAreaPrivate* d_func() const { return reinterpret_cast<const QAbstractScrollAreaPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractScrollAreaPrivate;
QAbstractScrollArea(const QAbstractScrollArea &) ; QAbstractScrollArea &operator=(const QAbstractScrollArea &) ;




friend class QStyleSheetStyle;
friend class QWidgetPrivate;
};



# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollarea.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollarea.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollarea.h"
class QScrollAreaPrivate;

class  QScrollArea : public QAbstractScrollArea
{
Q_OBJECT
Q_PROPERTY(bool widgetResizable READ widgetResizable WRITE setWidgetResizable)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)

public:
explicit QScrollArea(QWidget* parent=0);
~QScrollArea();

QWidget *widget() const;
void setWidget(QWidget *widget);
QWidget *takeWidget();

bool widgetResizable() const;
void setWidgetResizable(bool resizable);

QSize sizeHint() const;
bool focusNextPrevChild(bool next);

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment);

void ensureVisible(int x, int y, int xmargin = 50, int ymargin = 50);
void ensureWidgetVisible(QWidget *childWidget, int xmargin = 50, int ymargin = 50);

protected:
QScrollArea(QScrollAreaPrivate &dd, QWidget *parent = 0);
bool event(QEvent *);
bool eventFilter(QObject *, QEvent *);
void resizeEvent(QResizeEvent *);
void scrollContentsBy(int dx, int dy);

private:
inline QScrollAreaPrivate* d_func() { return reinterpret_cast<QScrollAreaPrivate *>(qGetPtrHelper(d_ptr)); } inline const QScrollAreaPrivate* d_func() const { return reinterpret_cast<const QScrollAreaPrivate *>(qGetPtrHelper(d_ptr)); } friend class QScrollAreaPrivate;
QScrollArea(const QScrollArea &) ; QScrollArea &operator=(const QScrollArea &) ;
};



# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollarea.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsscene.h"






































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
class QGraphicsItem;
class QPainterPath;
class QPolygonF;
class QStyleOptionGraphicsItem;

class QGraphicsViewPrivate;
class  QGraphicsView : public QAbstractScrollArea
{
Q_OBJECT

Q_ENUMS(ViewportAnchor DragMode ViewportUpdateMode)
Q_PROPERTY(QBrush backgroundBrush READ backgroundBrush WRITE setBackgroundBrush)
Q_PROPERTY(QBrush foregroundBrush READ foregroundBrush WRITE setForegroundBrush)
Q_PROPERTY(bool interactive READ isInteractive WRITE setInteractive)
Q_PROPERTY(QRectF sceneRect READ sceneRect WRITE setSceneRect)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(QPainter::RenderHints renderHints READ renderHints WRITE setRenderHints)
Q_PROPERTY(DragMode dragMode READ dragMode WRITE setDragMode)
Q_PROPERTY(CacheMode cacheMode READ cacheMode WRITE setCacheMode)
Q_PROPERTY(ViewportAnchor transformationAnchor READ transformationAnchor WRITE setTransformationAnchor)
Q_PROPERTY(ViewportAnchor resizeAnchor READ resizeAnchor WRITE setResizeAnchor)
Q_PROPERTY(ViewportUpdateMode viewportUpdateMode READ viewportUpdateMode WRITE setViewportUpdateMode)

# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
Q_PROPERTY(Qt::ItemSelectionMode rubberBandSelectionMode READ rubberBandSelectionMode WRITE setRubberBandSelectionMode)

# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
Q_PROPERTY(OptimizationFlags optimizationFlags READ optimizationFlags WRITE setOptimizationFlags)

public:
enum ViewportAnchor {
NoAnchor,
AnchorViewCenter,
AnchorUnderMouse
};

enum CacheModeFlag {
CacheNone = 0x0,
CacheBackground = 0x1
};
typedef QFlags<CacheModeFlag> CacheMode;

enum DragMode {
NoDrag,
ScrollHandDrag,
RubberBandDrag
};

enum ViewportUpdateMode {
FullViewportUpdate,
MinimalViewportUpdate,
SmartViewportUpdate,
NoViewportUpdate,
BoundingRectViewportUpdate
};

enum OptimizationFlag {
DontClipPainter = 0x1, 
DontSavePainterState = 0x2,
DontAdjustForAntialiasing = 0x4,
IndirectPainting = 0x8
};
typedef QFlags<OptimizationFlag> OptimizationFlags;

QGraphicsView(QWidget *parent = 0);
QGraphicsView(QGraphicsScene *scene, QWidget *parent = 0);
~QGraphicsView();

QSize sizeHint() const;

QPainter::RenderHints renderHints() const;
void setRenderHint(QPainter::RenderHint hint, bool enabled = true);
void setRenderHints(QPainter::RenderHints hints);

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment alignment);

ViewportAnchor transformationAnchor() const;
void setTransformationAnchor(ViewportAnchor anchor);

ViewportAnchor resizeAnchor() const;
void setResizeAnchor(ViewportAnchor anchor);

ViewportUpdateMode viewportUpdateMode() const;
void setViewportUpdateMode(ViewportUpdateMode mode);

OptimizationFlags optimizationFlags() const;
void setOptimizationFlag(OptimizationFlag flag, bool enabled = true);
void setOptimizationFlags(OptimizationFlags flags);

DragMode dragMode() const;
void setDragMode(DragMode mode);


# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
Qt::ItemSelectionMode rubberBandSelectionMode() const;
void setRubberBandSelectionMode(Qt::ItemSelectionMode mode);
QRect rubberBandRect() const;


# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
CacheMode cacheMode() const;
void setCacheMode(CacheMode mode);
void resetCachedContent();

bool isInteractive() const;
void setInteractive(bool allowed);

QGraphicsScene *scene() const;
void setScene(QGraphicsScene *scene);

QRectF sceneRect() const;
void setSceneRect(const QRectF &rect);
inline void setSceneRect(qreal x, qreal y, qreal w, qreal h);

QMatrix matrix() const;
void setMatrix(const QMatrix &matrix, bool combine = false);
void resetMatrix();
QTransform transform() const;
QTransform viewportTransform() const;
bool isTransformed() const;
void setTransform(const QTransform &matrix, bool combine = false);
void resetTransform();
void rotate(qreal angle);
void scale(qreal sx, qreal sy);
void shear(qreal sh, qreal sv);
void translate(qreal dx, qreal dy);

void centerOn(const QPointF &pos);
inline void centerOn(qreal x, qreal y);
void centerOn(const QGraphicsItem *item);
void ensureVisible(const QRectF &rect, int xmargin = 50, int ymargin = 50);
inline void ensureVisible(qreal x, qreal y, qreal w, qreal h, int xmargin = 50, int ymargin = 50);
void ensureVisible(const QGraphicsItem *item, int xmargin = 50, int ymargin = 50);
void fitInView(const QRectF &rect, Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio);
inline void fitInView(qreal x, qreal y, qreal w, qreal h,
Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio);
void fitInView(const QGraphicsItem *item,
Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio);

void render(QPainter *painter, const QRectF &target = QRectF(), const QRect &source = QRect(),
Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio);

QList<QGraphicsItem *> items() const;
QList<QGraphicsItem *> items(const QPoint &pos) const;
inline QList<QGraphicsItem *> items(int x, int y) const;
QList<QGraphicsItem *> items(const QRect &rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
inline QList<QGraphicsItem *> items(int x, int y, int w, int h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> items(const QPolygon &polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QList<QGraphicsItem *> items(const QPainterPath &path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) const;
QGraphicsItem *itemAt(const QPoint &pos) const;
inline QGraphicsItem *itemAt(int x, int y) const;

QPointF mapToScene(const QPoint &point) const;
QPolygonF mapToScene(const QRect &rect) const;
QPolygonF mapToScene(const QPolygon &polygon) const;
QPainterPath mapToScene(const QPainterPath &path) const;
QPoint mapFromScene(const QPointF &point) const;
QPolygon mapFromScene(const QRectF &rect) const;
QPolygon mapFromScene(const QPolygonF &polygon) const;
QPainterPath mapFromScene(const QPainterPath &path) const;
inline QPointF mapToScene(int x, int y) const;
inline QPolygonF mapToScene(int x, int y, int w, int h) const;
inline QPoint mapFromScene(qreal x, qreal y) const;
inline QPolygon mapFromScene(qreal x, qreal y, qreal w, qreal h) const;

QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

QBrush backgroundBrush() const;
void setBackgroundBrush(const QBrush &brush);

QBrush foregroundBrush() const;
void setForegroundBrush(const QBrush &brush);

public slots:
void updateScene(const QList<QRectF> &rects);
void invalidateScene(const QRectF &rect = QRectF(), QGraphicsScene::SceneLayers layers = QGraphicsScene::AllLayers);
void updateSceneRect(const QRectF &rect);


# 231 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
signals:
void rubberBandChanged(QRect viewportRect, QPointF fromScenePoint, QPointF toScenePoint);


# 235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
protected slots:
void setupViewport(QWidget *widget);

protected:
QGraphicsView(QGraphicsViewPrivate &, QWidget *parent = 0);
bool event(QEvent *event);
bool viewportEvent(QEvent *event);


# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
void contextMenuEvent(QContextMenuEvent *event);

# 246 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
void dragEnterEvent(QDragEnterEvent *event);
void dragLeaveEvent(QDragLeaveEvent *event);
void dragMoveEvent(QDragMoveEvent *event);
void dropEvent(QDropEvent *event);
void focusInEvent(QFocusEvent *event);
bool focusNextPrevChild(bool next);
void focusOutEvent(QFocusEvent *event);
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);
void mouseDoubleClickEvent(QMouseEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);

# 260 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
void wheelEvent(QWheelEvent *event);

# 262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
void paintEvent(QPaintEvent *event);
void resizeEvent(QResizeEvent *event);
void scrollContentsBy(int dx, int dy);
void showEvent(QShowEvent *event);
void inputMethodEvent(QInputMethodEvent *event);

virtual void drawBackground(QPainter *painter, const QRectF &rect);
virtual void drawForeground(QPainter *painter, const QRectF &rect);
virtual void drawItems(QPainter *painter, int numItems,
QGraphicsItem *items[],
const QStyleOptionGraphicsItem options[]);

private:
inline QGraphicsViewPrivate* d_func() { return reinterpret_cast<QGraphicsViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGraphicsViewPrivate* d_func() const { return reinterpret_cast<const QGraphicsViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGraphicsViewPrivate;
QGraphicsView(const QGraphicsView &) ; QGraphicsView &operator=(const QGraphicsView &) ;

# 278 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"



# 281 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"
friend class QGraphicsSceneWidget;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;
friend class QGraphicsItemPrivate;
};

 inline QFlags<QGraphicsView::CacheMode::enum_type> operator|(QGraphicsView::CacheMode::enum_type f1, QGraphicsView::CacheMode::enum_type f2) { return QFlags<QGraphicsView::CacheMode::enum_type>(f1) | f2; }  inline QFlags<QGraphicsView::CacheMode::enum_type> operator|(QGraphicsView::CacheMode::enum_type f1, QFlags<QGraphicsView::CacheMode::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGraphicsView::CacheMode::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QGraphicsView::OptimizationFlags::enum_type> operator|(QGraphicsView::OptimizationFlags::enum_type f1, QGraphicsView::OptimizationFlags::enum_type f2) { return QFlags<QGraphicsView::OptimizationFlags::enum_type>(f1) | f2; }  inline QFlags<QGraphicsView::OptimizationFlags::enum_type> operator|(QGraphicsView::OptimizationFlags::enum_type f1, QFlags<QGraphicsView::OptimizationFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGraphicsView::OptimizationFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

inline void QGraphicsView::setSceneRect(qreal ax, qreal ay, qreal aw, qreal ah)
{ setSceneRect(QRectF(ax, ay, aw, ah)); }
inline void QGraphicsView::centerOn(qreal ax, qreal ay)
{ centerOn(QPointF(ax, ay)); }
inline void QGraphicsView::ensureVisible(qreal ax, qreal ay, qreal aw, qreal ah, int xmargin, int ymargin)
{ ensureVisible(QRectF(ax, ay, aw, ah), xmargin, ymargin); }
inline void QGraphicsView::fitInView(qreal ax, qreal ay, qreal w, qreal h, Qt::AspectRatioMode mode)
{ fitInView(QRectF(ax, ay, w, h), mode); }
inline QList<QGraphicsItem *> QGraphicsView::items(int ax, int ay) const
{ return items(QPoint(ax, ay)); }
inline QList<QGraphicsItem *> QGraphicsView::items(int ax, int ay, int w, int h, Qt::ItemSelectionMode mode) const
{ return items(QRect(ax, ay, w, h), mode); }
inline QGraphicsItem *QGraphicsView::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }
inline QPointF QGraphicsView::mapToScene(int ax, int ay) const
{ return mapToScene(QPoint(ax, ay)); }
inline QPolygonF QGraphicsView::mapToScene(int ax, int ay, int w, int h) const
{ return mapToScene(QRect(ax, ay, w, h)); }
inline QPoint QGraphicsView::mapFromScene(qreal ax, qreal ay) const
{ return mapFromScene(QPointF(ax, ay)); }
inline QPolygon QGraphicsView::mapFromScene(qreal ax, qreal ay, qreal w, qreal h) const
{ return mapFromScene(QRectF(ax, ay, w, h)); }



# 315 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsview.h"



# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"























































































































































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvalidator.h"









































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"
class QLineEdit;

class QAbstractSpinBoxPrivate;
class QStyleOptionSpinBox;

class  QAbstractSpinBox : public QWidget
{
Q_OBJECT

Q_ENUMS(ButtonSymbols)
Q_ENUMS(CorrectionMode)
Q_PROPERTY(bool wrapping READ wrapping WRITE setWrapping)
Q_PROPERTY(bool frame READ hasFrame WRITE setFrame)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(ButtonSymbols buttonSymbols READ buttonSymbols WRITE setButtonSymbols)
Q_PROPERTY(QString specialValueText READ specialValueText WRITE setSpecialValueText)
Q_PROPERTY(QString text READ text)
Q_PROPERTY(bool accelerated READ isAccelerated WRITE setAccelerated)
Q_PROPERTY(CorrectionMode correctionMode READ correctionMode WRITE setCorrectionMode)
Q_PROPERTY(bool acceptableInput READ hasAcceptableInput)
Q_PROPERTY(bool keyboardTracking READ keyboardTracking WRITE setKeyboardTracking)
public:
explicit QAbstractSpinBox(QWidget *parent = 0);
~QAbstractSpinBox();

enum StepEnabledFlag { StepNone = 0x00, StepUpEnabled = 0x01,
StepDownEnabled = 0x02 };
typedef QFlags<StepEnabledFlag> StepEnabled;

enum ButtonSymbols { UpDownArrows, PlusMinus, NoButtons };

ButtonSymbols buttonSymbols() const;
void setButtonSymbols(ButtonSymbols bs);

enum CorrectionMode { CorrectToPreviousValue, CorrectToNearestValue };

void setCorrectionMode(CorrectionMode cm);
CorrectionMode correctionMode() const;

bool hasAcceptableInput() const;
QString text() const;

QString specialValueText() const;
void setSpecialValueText(const QString &txt);

bool wrapping() const;
void setWrapping(bool w);

void setReadOnly(bool r);
bool isReadOnly() const;

void setKeyboardTracking(bool kt);
bool keyboardTracking() const;

void setAlignment(Qt::Alignment flag);
Qt::Alignment alignment() const;

void setFrame(bool);
bool hasFrame() const;

void setAccelerated(bool on);
bool isAccelerated() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;
void interpretText();
bool event(QEvent *event);

QVariant inputMethodQuery(Qt::InputMethodQuery) const;

virtual QValidator::State validate(QString &input, int &pos) const;
virtual void fixup(QString &input) const;

virtual void stepBy(int steps);
public slots:
void stepUp();
void stepDown();
void selectAll();
virtual void clear();
protected:
void resizeEvent(QResizeEvent *event);
void keyPressEvent(QKeyEvent *event);
void keyReleaseEvent(QKeyEvent *event);

# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"
void wheelEvent(QWheelEvent *event);

# 140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"
void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
void contextMenuEvent(QContextMenuEvent *event);
void changeEvent(QEvent *event);
void closeEvent(QCloseEvent *event);
void hideEvent(QHideEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void timerEvent(QTimerEvent *event);
void paintEvent(QPaintEvent *event);
void showEvent(QShowEvent *event);
void initStyleOption(QStyleOptionSpinBox *option) const;

QLineEdit *lineEdit() const;
void setLineEdit(QLineEdit *edit);

virtual StepEnabled stepEnabled() const;
signals:
void editingFinished();
protected:
QAbstractSpinBox(QAbstractSpinBoxPrivate &dd, QWidget *parent = 0);

private:



inline QAbstractSpinBoxPrivate* d_func() { return reinterpret_cast<QAbstractSpinBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractSpinBoxPrivate* d_func() const { return reinterpret_cast<const QAbstractSpinBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractSpinBoxPrivate;
QAbstractSpinBox(const QAbstractSpinBox &) ; QAbstractSpinBox &operator=(const QAbstractSpinBox &) ;
};
 inline QFlags<QAbstractSpinBox::StepEnabled::enum_type> operator|(QAbstractSpinBox::StepEnabled::enum_type f1, QAbstractSpinBox::StepEnabled::enum_type f2) { return QFlags<QAbstractSpinBox::StepEnabled::enum_type>(f1) | f2; }  inline QFlags<QAbstractSpinBox::StepEnabled::enum_type> operator|(QAbstractSpinBox::StepEnabled::enum_type f1, QFlags<QAbstractSpinBox::StepEnabled::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QAbstractSpinBox::StepEnabled::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qslider.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"



class QAbstractSliderPrivate;

class  QAbstractSlider : public QWidget
{
Q_OBJECT

Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(int singleStep READ singleStep WRITE setSingleStep)
Q_PROPERTY(int pageStep READ pageStep WRITE setPageStep)
Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged USER true)
Q_PROPERTY(int sliderPosition READ sliderPosition WRITE setSliderPosition NOTIFY sliderMoved)
Q_PROPERTY(bool tracking READ hasTracking WRITE setTracking)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(bool invertedAppearance READ invertedAppearance WRITE setInvertedAppearance)
Q_PROPERTY(bool invertedControls READ invertedControls WRITE setInvertedControls)
Q_PROPERTY(bool sliderDown READ isSliderDown WRITE setSliderDown DESIGNABLE false)

public:
explicit QAbstractSlider(QWidget *parent=0);
~QAbstractSlider();

Qt::Orientation orientation() const;

void setMinimum(int);
int minimum() const;

void setMaximum(int);
int maximum() const;

void setSingleStep(int);
int singleStep() const;

void setPageStep(int);
int pageStep() const;

void setTracking(bool enable);
bool hasTracking() const;

void setSliderDown(bool);
bool isSliderDown() const;

void setSliderPosition(int);
int sliderPosition() const;

void setInvertedAppearance(bool);
bool invertedAppearance() const;

void setInvertedControls(bool);
bool invertedControls() const;

enum SliderAction {
SliderNoAction,
SliderSingleStepAdd,
SliderSingleStepSub,
SliderPageStepAdd,
SliderPageStepSub,
SliderToMinimum,
SliderToMaximum,
SliderMove
};

int value() const;

void triggerAction(SliderAction action);

public slots:
void setValue(int);
void setOrientation(Qt::Orientation);
void setRange(int min, int max);

signals:
void valueChanged(int value);

void sliderPressed();
void sliderMoved(int position);
void sliderReleased();

void rangeChanged(int min, int max);

void actionTriggered(int action);

protected:
bool event(QEvent *e);

void setRepeatAction(SliderAction action, int thresholdTime = 500, int repeatTime = 50);
SliderAction repeatAction() const;

enum SliderChange {
SliderRangeChange,
SliderOrientationChange,
SliderStepsChange,
SliderValueChange
};
virtual void sliderChange(SliderChange change);

void keyPressEvent(QKeyEvent *ev);
void timerEvent(QTimerEvent *);

# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"
void wheelEvent(QWheelEvent *e);

# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"
void changeEvent(QEvent *e);


protected:
QAbstractSlider(QAbstractSliderPrivate &dd, QWidget *parent=0);

private:
QAbstractSlider(const QAbstractSlider &) ; QAbstractSlider &operator=(const QAbstractSlider &) ;
inline QAbstractSliderPrivate* d_func() { return reinterpret_cast<QAbstractSliderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractSliderPrivate* d_func() const { return reinterpret_cast<const QAbstractSliderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractSliderPrivate;
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qslider.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qslider.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qslider.h"
class QSliderPrivate;
class QStyleOptionSlider;
class  QSlider : public QAbstractSlider
{
Q_OBJECT

Q_ENUMS(TickPosition)
Q_PROPERTY(TickPosition tickPosition READ tickPosition WRITE setTickPosition)
Q_PROPERTY(int tickInterval READ tickInterval WRITE setTickInterval)

public:
enum TickPosition {
NoTicks = 0,
TicksAbove = 1,
TicksLeft = TicksAbove,
TicksBelow = 2,
TicksRight = TicksBelow,
TicksBothSides = 3
};

explicit QSlider(QWidget *parent = 0);
explicit QSlider(Qt::Orientation orientation, QWidget *parent = 0);

~QSlider();

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setTickPosition(TickPosition position);
TickPosition tickPosition() const;

void setTickInterval(int ti);
int tickInterval() const;

bool event(QEvent *event);

protected:
void paintEvent(QPaintEvent *ev);
void mousePressEvent(QMouseEvent *ev);
void mouseReleaseEvent(QMouseEvent *ev);
void mouseMoveEvent(QMouseEvent *ev);
void initStyleOption(QStyleOptionSlider *option) const;


private:
friend  QStyleOptionSlider qt_qsliderStyleOption(QSlider *slider);

QSlider(const QSlider &) ; QSlider &operator=(const QSlider &) ;
inline QSliderPrivate* d_func() { return reinterpret_cast<QSliderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSliderPrivate* d_func() const { return reinterpret_cast<const QSliderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSliderPrivate;
};



# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qslider.h"



# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

















































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
























































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"



class QAction;
class QDebug;
class QTab;
class QFontMetrics;
class QStyleHintReturn;
class QStyleOption;
class QStyleOptionComplex;
class QStylePrivate;

class  QStyle : public QObject
{
Q_OBJECT
inline QStylePrivate* d_func() { return reinterpret_cast<QStylePrivate *>(qGetPtrHelper(d_ptr)); } inline const QStylePrivate* d_func() const { return reinterpret_cast<const QStylePrivate *>(qGetPtrHelper(d_ptr)); } friend class QStylePrivate;

protected:
QStyle(QStylePrivate &dd);

public:
QStyle();
virtual ~QStyle();

virtual void polish(QWidget *);
virtual void unpolish(QWidget *);

virtual void polish(QApplication *);
virtual void unpolish(QApplication *);

virtual void polish(QPalette &);

virtual QRect itemTextRect(const QFontMetrics &fm, const QRect &r,
int flags, bool enabled,
const QString &text) const;

virtual QRect itemPixmapRect(const QRect &r, int flags, const QPixmap &pixmap) const;

virtual void drawItemText(QPainter *painter, const QRect &rect,
int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole) const;

virtual void drawItemPixmap(QPainter *painter, const QRect &rect,
int alignment, const QPixmap &pixmap) const;

virtual QPalette standardPalette() const;

enum StateFlag {
State_None = 0x00000000,
State_Enabled = 0x00000001,
State_Raised = 0x00000002,
State_Sunken = 0x00000004,
State_Off = 0x00000008,
State_NoChange = 0x00000010,
State_On = 0x00000020,
State_DownArrow = 0x00000040,
State_Horizontal = 0x00000080,
State_HasFocus = 0x00000100,
State_Top = 0x00000200,
State_Bottom = 0x00000400,
State_FocusAtBorder = 0x00000800,
State_AutoRaise = 0x00001000,
State_MouseOver = 0x00002000,
State_UpArrow = 0x00004000,
State_Selected = 0x00008000,
State_Active = 0x00010000,
State_Window = 0x00020000,
State_Open = 0x00040000,
State_Children = 0x00080000,
State_Item = 0x00100000,
State_Sibling = 0x00200000,
State_Editing = 0x00400000,
State_KeyboardFocusChange = 0x00800000,



# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"
State_ReadOnly = 0x02000000,
State_Small = 0x04000000,
State_Mini = 0x08000000
};
typedef QFlags<StateFlag> State;


enum PrimitiveElement {
PE_Frame,
PE_FrameDefaultButton,
PE_FrameDockWidget,
PE_FrameFocusRect,
PE_FrameGroupBox,
PE_FrameLineEdit,
PE_FrameMenu,
PE_FrameStatusBar, 
PE_FrameStatusBarItem = PE_FrameStatusBar,
PE_FrameTabWidget,
PE_FrameWindow,
PE_FrameButtonBevel,
PE_FrameButtonTool,
PE_FrameTabBarBase,

PE_PanelButtonCommand,
PE_PanelButtonBevel,
PE_PanelButtonTool,
PE_PanelMenuBar,
PE_PanelToolBar,
PE_PanelLineEdit,

PE_IndicatorArrowDown,
PE_IndicatorArrowLeft,
PE_IndicatorArrowRight,
PE_IndicatorArrowUp,
PE_IndicatorBranch,
PE_IndicatorButtonDropDown,
PE_IndicatorViewItemCheck,
PE_IndicatorItemViewItemCheck = PE_IndicatorViewItemCheck,
PE_IndicatorCheckBox,
PE_IndicatorDockWidgetResizeHandle,
PE_IndicatorHeaderArrow,
PE_IndicatorMenuCheckMark,
PE_IndicatorProgressChunk,
PE_IndicatorRadioButton,
PE_IndicatorSpinDown,
PE_IndicatorSpinMinus,
PE_IndicatorSpinPlus,
PE_IndicatorSpinUp,
PE_IndicatorToolBarHandle,
PE_IndicatorToolBarSeparator,
PE_PanelTipLabel,
PE_IndicatorTabTear,
PE_PanelScrollAreaCorner,

PE_Widget,

PE_IndicatorColumnViewArrow,
PE_IndicatorItemViewItemDrop,

PE_PanelItemViewItem,
PE_PanelItemViewRow, 

PE_PanelStatusBar,

PE_IndicatorTabClose,
PE_PanelMenu,


PE_CustomBase = 0xf000000
};

virtual void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const = 0;
enum ControlElement {
CE_PushButton,
CE_PushButtonBevel,
CE_PushButtonLabel,

CE_CheckBox,
CE_CheckBoxLabel,

CE_RadioButton,
CE_RadioButtonLabel,

CE_TabBarTab,
CE_TabBarTabShape,
CE_TabBarTabLabel,

CE_ProgressBar,
CE_ProgressBarGroove,
CE_ProgressBarContents,
CE_ProgressBarLabel,

CE_MenuItem,
CE_MenuScroller,
CE_MenuVMargin,
CE_MenuHMargin,
CE_MenuTearoff,
CE_MenuEmptyArea,

CE_MenuBarItem,
CE_MenuBarEmptyArea,

CE_ToolButtonLabel,

CE_Header,
CE_HeaderSection,
CE_HeaderLabel,

CE_ToolBoxTab,
CE_SizeGrip,
CE_Splitter,
CE_RubberBand,
CE_DockWidgetTitle,

CE_ScrollBarAddLine,
CE_ScrollBarSubLine,
CE_ScrollBarAddPage,
CE_ScrollBarSubPage,
CE_ScrollBarSlider,
CE_ScrollBarFirst,
CE_ScrollBarLast,

CE_FocusFrame,
CE_ComboBoxLabel,

CE_ToolBar,
CE_ToolBoxTabShape,
CE_ToolBoxTabLabel,
CE_HeaderEmptyArea,

CE_ColumnViewGrip,

CE_ItemViewItem,

CE_ShapedFrame,


CE_CustomBase = 0xf0000000
};

virtual void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const = 0;

enum SubElement {
SE_PushButtonContents,
SE_PushButtonFocusRect,

SE_CheckBoxIndicator,
SE_CheckBoxContents,
SE_CheckBoxFocusRect,
SE_CheckBoxClickRect,

SE_RadioButtonIndicator,
SE_RadioButtonContents,
SE_RadioButtonFocusRect,
SE_RadioButtonClickRect,

SE_ComboBoxFocusRect,

SE_SliderFocusRect,

SE_ProgressBarGroove,
SE_ProgressBarContents,
SE_ProgressBarLabel,

SE_ToolBoxTabContents,

SE_HeaderLabel,
SE_HeaderArrow,

SE_TabWidgetTabBar,
SE_TabWidgetTabPane,
SE_TabWidgetTabContents,
SE_TabWidgetLeftCorner,
SE_TabWidgetRightCorner,

SE_ViewItemCheckIndicator,
SE_ItemViewItemCheckIndicator = SE_ViewItemCheckIndicator,

SE_TabBarTearIndicator,

SE_TreeViewDisclosureItem,

SE_LineEditContents,
SE_FrameContents,

SE_DockWidgetCloseButton,
SE_DockWidgetFloatButton,
SE_DockWidgetTitleBarText,
SE_DockWidgetIcon,

SE_CheckBoxLayoutItem,
SE_ComboBoxLayoutItem,
SE_DateTimeEditLayoutItem,
SE_DialogButtonBoxLayoutItem, 
SE_LabelLayoutItem,
SE_ProgressBarLayoutItem,
SE_PushButtonLayoutItem,
SE_RadioButtonLayoutItem,
SE_SliderLayoutItem,
SE_SpinBoxLayoutItem,
SE_ToolButtonLayoutItem,

SE_FrameLayoutItem,
SE_GroupBoxLayoutItem,
SE_TabWidgetLayoutItem,

SE_ItemViewItemDecoration,
SE_ItemViewItemText,
SE_ItemViewItemFocusRect,

SE_TabBarTabLeftButton,
SE_TabBarTabRightButton,
SE_TabBarTabText,

SE_ShapedFrameContents,

SE_ToolBarHandle,


SE_CustomBase = 0xf0000000
};

virtual QRect subElementRect(SubElement subElement, const QStyleOption *option,
const QWidget *widget = 0) const = 0;


enum ComplexControl {
CC_SpinBox,
CC_ComboBox,
CC_ScrollBar,
CC_Slider,
CC_ToolButton,
CC_TitleBar,
CC_Dial,
CC_GroupBox,
CC_MdiControls,


CC_CustomBase = 0xf0000000
};

enum SubControl {
SC_None = 0x00000000,

SC_ScrollBarAddLine = 0x00000001,
SC_ScrollBarSubLine = 0x00000002,
SC_ScrollBarAddPage = 0x00000004,
SC_ScrollBarSubPage = 0x00000008,
SC_ScrollBarFirst = 0x00000010,
SC_ScrollBarLast = 0x00000020,
SC_ScrollBarSlider = 0x00000040,
SC_ScrollBarGroove = 0x00000080,

SC_SpinBoxUp = 0x00000001,
SC_SpinBoxDown = 0x00000002,
SC_SpinBoxFrame = 0x00000004,
SC_SpinBoxEditField = 0x00000008,

SC_ComboBoxFrame = 0x00000001,
SC_ComboBoxEditField = 0x00000002,
SC_ComboBoxArrow = 0x00000004,
SC_ComboBoxListBoxPopup = 0x00000008,

SC_SliderGroove = 0x00000001,
SC_SliderHandle = 0x00000002,
SC_SliderTickmarks = 0x00000004,

SC_ToolButton = 0x00000001,
SC_ToolButtonMenu = 0x00000002,

SC_TitleBarSysMenu = 0x00000001,
SC_TitleBarMinButton = 0x00000002,
SC_TitleBarMaxButton = 0x00000004,
SC_TitleBarCloseButton = 0x00000008,
SC_TitleBarNormalButton = 0x00000010,
SC_TitleBarShadeButton = 0x00000020,
SC_TitleBarUnshadeButton = 0x00000040,
SC_TitleBarContextHelpButton = 0x00000080,
SC_TitleBarLabel = 0x00000100,

SC_DialGroove = 0x00000001,
SC_DialHandle = 0x00000002,
SC_DialTickmarks = 0x00000004,

SC_GroupBoxCheckBox = 0x00000001,
SC_GroupBoxLabel = 0x00000002,
SC_GroupBoxContents = 0x00000004,
SC_GroupBoxFrame = 0x00000008,

SC_MdiMinButton = 0x00000001,
SC_MdiNormalButton = 0x00000002,
SC_MdiCloseButton = 0x00000004,

SC_CustomBase = 0xf0000000,
SC_All = 0xffffffff
};
typedef QFlags<SubControl> SubControls;


virtual void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p,
const QWidget *widget = 0) const = 0;
virtual SubControl hitTestComplexControl(ComplexControl cc, const QStyleOptionComplex *opt,
const QPoint &pt, const QWidget *widget = 0) const = 0;
virtual QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt,
SubControl sc, const QWidget *widget = 0) const = 0;

enum PixelMetric {
PM_ButtonMargin,
PM_ButtonDefaultIndicator,
PM_MenuButtonIndicator,
PM_ButtonShiftHorizontal,
PM_ButtonShiftVertical,

PM_DefaultFrameWidth,
PM_SpinBoxFrameWidth,
PM_ComboBoxFrameWidth,

PM_MaximumDragDistance,

PM_ScrollBarExtent,
PM_ScrollBarSliderMin,

PM_SliderThickness, 
PM_SliderControlThickness, 
PM_SliderLength, 
PM_SliderTickmarkOffset, 
PM_SliderSpaceAvailable, 

PM_DockWidgetSeparatorExtent,
PM_DockWidgetHandleExtent,
PM_DockWidgetFrameWidth,

PM_TabBarTabOverlap,
PM_TabBarTabHSpace,
PM_TabBarTabVSpace,
PM_TabBarBaseHeight,
PM_TabBarBaseOverlap,

PM_ProgressBarChunkWidth,

PM_SplitterWidth,
PM_TitleBarHeight,

PM_MenuScrollerHeight,
PM_MenuHMargin,
PM_MenuVMargin,
PM_MenuPanelWidth,
PM_MenuTearoffHeight,
PM_MenuDesktopFrameWidth,

PM_MenuBarPanelWidth,
PM_MenuBarItemSpacing,
PM_MenuBarVMargin,
PM_MenuBarHMargin,

PM_IndicatorWidth,
PM_IndicatorHeight,
PM_ExclusiveIndicatorWidth,
PM_ExclusiveIndicatorHeight,

PM_DialogButtonsSeparator,
PM_DialogButtonsButtonWidth,
PM_DialogButtonsButtonHeight,

PM_MdiSubWindowFrameWidth,
PM_MDIFrameWidth = PM_MdiSubWindowFrameWidth, 
PM_MdiSubWindowMinimizedWidth,
PM_MDIMinimizedWidth = PM_MdiSubWindowMinimizedWidth, 

PM_HeaderMargin,
PM_HeaderMarkSize,
PM_HeaderGripMargin,
PM_TabBarTabShiftHorizontal,
PM_TabBarTabShiftVertical,
PM_TabBarScrollButtonWidth,

PM_ToolBarFrameWidth,
PM_ToolBarHandleExtent,
PM_ToolBarItemSpacing,
PM_ToolBarItemMargin,
PM_ToolBarSeparatorExtent,
PM_ToolBarExtensionExtent,

PM_SpinBoxSliderHeight,

PM_DefaultTopLevelMargin,
PM_DefaultChildMargin,
PM_DefaultLayoutSpacing,

PM_ToolBarIconSize,
PM_ListViewIconSize,
PM_IconViewIconSize,
PM_SmallIconSize,
PM_LargeIconSize,

PM_FocusFrameVMargin,
PM_FocusFrameHMargin,

PM_ToolTipLabelFrameWidth,
PM_CheckBoxLabelSpacing,
PM_TabBarIconSize,
PM_SizeGripSize,
PM_DockWidgetTitleMargin,
PM_MessageBoxIconSize,
PM_ButtonIconSize,

PM_DockWidgetTitleBarButtonMargin,

PM_RadioButtonLabelSpacing,
PM_LayoutLeftMargin,
PM_LayoutTopMargin,
PM_LayoutRightMargin,
PM_LayoutBottomMargin,
PM_LayoutHorizontalSpacing,
PM_LayoutVerticalSpacing,
PM_TabBar_ScrollButtonOverlap,

PM_TextCursorWidth,

PM_TabCloseIndicatorWidth,
PM_TabCloseIndicatorHeight,

PM_ScrollView_ScrollBarSpacing,
PM_ScrollView_ScrollBarOverlap,
PM_SubMenuOverlap,


PM_CustomBase = 0xf0000000
};

virtual int pixelMetric(PixelMetric metric, const QStyleOption *option = 0,
const QWidget *widget = 0) const = 0;

enum ContentsType {
CT_PushButton,
CT_CheckBox,
CT_RadioButton,
CT_ToolButton,
CT_ComboBox,
CT_Splitter,
CT_ProgressBar,
CT_MenuItem,
CT_MenuBarItem,
CT_MenuBar,
CT_Menu,
CT_TabBarTab,
CT_Slider,
CT_ScrollBar,
CT_LineEdit,
CT_SpinBox,
CT_SizeGrip,
CT_TabWidget,
CT_DialogButtons,
CT_HeaderSection,
CT_GroupBox,
CT_MdiControls,
CT_ItemViewItem,

CT_CustomBase = 0xf0000000
};

virtual QSize sizeFromContents(ContentsType ct, const QStyleOption *opt,
const QSize &contentsSize, const QWidget *w = 0) const = 0;

enum RequestSoftwareInputPanel {
RSIP_OnMouseClickAndAlreadyFocused,
RSIP_OnMouseClick
};

enum StyleHint {
SH_EtchDisabledText,
SH_DitherDisabledText,
SH_ScrollBar_MiddleClickAbsolutePosition,
SH_ScrollBar_ScrollWhenPointerLeavesControl,
SH_TabBar_SelectMouseType,
SH_TabBar_Alignment,
SH_Header_ArrowAlignment,
SH_Slider_SnapToValue,
SH_Slider_SloppyKeyEvents,
SH_ProgressDialog_CenterCancelButton,
SH_ProgressDialog_TextLabelAlignment,
SH_PrintDialog_RightAlignButtons,
SH_MainWindow_SpaceBelowMenuBar,
SH_FontDialog_SelectAssociatedText,
SH_Menu_AllowActiveAndDisabled,
SH_Menu_SpaceActivatesItem,
SH_Menu_SubMenuPopupDelay,
SH_ScrollView_FrameOnlyAroundContents,
SH_MenuBar_AltKeyNavigation,
SH_ComboBox_ListMouseTracking,
SH_Menu_MouseTracking,
SH_MenuBar_MouseTracking,
SH_ItemView_ChangeHighlightOnFocus,
SH_Widget_ShareActivation,
SH_Workspace_FillSpaceOnMaximize,
SH_ComboBox_Popup,
SH_TitleBar_NoBorder,
SH_Slider_StopMouseOverSlider,
SH_ScrollBar_StopMouseOverSlider = SH_Slider_StopMouseOverSlider, 
SH_BlinkCursorWhenTextSelected,
SH_RichText_FullWidthSelection,
SH_Menu_Scrollable,
SH_GroupBox_TextLabelVerticalAlignment,
SH_GroupBox_TextLabelColor,
SH_Menu_SloppySubMenus,
SH_Table_GridLineColor,
SH_LineEdit_PasswordCharacter,
SH_DialogButtons_DefaultButton,
SH_ToolBox_SelectedPageTitleBold,
SH_TabBar_PreferNoArrows,
SH_ScrollBar_LeftClickAbsolutePosition,
SH_ListViewExpand_SelectMouseType,
SH_UnderlineShortcut,
SH_SpinBox_AnimateButton,
SH_SpinBox_KeyPressAutoRepeatRate,
SH_SpinBox_ClickAutoRepeatRate,
SH_Menu_FillScreenWithScroll,
SH_ToolTipLabel_Opacity,
SH_DrawMenuBarSeparator,
SH_TitleBar_ModifyNotification,
SH_Button_FocusPolicy,
SH_MessageBox_UseBorderForButtonSpacing,
SH_TitleBar_AutoRaise,
SH_ToolButton_PopupDelay,
SH_FocusFrame_Mask,
SH_RubberBand_Mask,
SH_WindowFrame_Mask,
SH_SpinControls_DisableOnBounds,
SH_Dial_BackgroundRole,
SH_ComboBox_LayoutDirection,
SH_ItemView_EllipsisLocation,
SH_ItemView_ShowDecorationSelected,
SH_ItemView_ActivateItemOnSingleClick,
SH_ScrollBar_ContextMenu,
SH_ScrollBar_RollBetweenButtons,
SH_Slider_AbsoluteSetButtons,
SH_Slider_PageSetButtons,
SH_Menu_KeyboardSearch,
SH_TabBar_ElideMode,
SH_DialogButtonLayout,
SH_ComboBox_PopupFrameStyle,
SH_MessageBox_TextInteractionFlags,
SH_DialogButtonBox_ButtonsHaveIcons,
SH_SpellCheckUnderlineStyle,
SH_MessageBox_CenterButtons,
SH_Menu_SelectionWrap,
SH_ItemView_MovementWithoutUpdatingSelection,
SH_ToolTip_Mask,
SH_FocusFrame_AboveWidget,
SH_TextControl_FocusIndicatorTextCharFormat,
SH_WizardStyle,
SH_ItemView_ArrowKeysNavigateIntoChildren,
SH_Menu_Mask,
SH_Menu_FlashTriggeredItem,
SH_Menu_FadeOutOnHide,
SH_SpinBox_ClickAutoRepeatThreshold,
SH_ItemView_PaintAlternatingRowColorsForEmptyArea,
SH_FormLayoutWrapPolicy,
SH_TabWidget_DefaultTabPosition,
SH_ToolBar_Movable,
SH_FormLayoutFieldGrowthPolicy,
SH_FormLayoutFormAlignment,
SH_FormLayoutLabelAlignment,
SH_ItemView_DrawDelegateFrame,
SH_TabBar_CloseButtonPosition,
SH_DockWidget_ButtonsHaveFrame,
SH_ToolButtonStyle,
SH_RequestSoftwareInputPanel,
SH_ScrollBar_Transient,
SH_Menu_SupportsSections,


SH_CustomBase = 0xf0000000
};

virtual int styleHint(StyleHint stylehint, const QStyleOption *opt = 0,
const QWidget *widget = 0, QStyleHintReturn* returnData = 0) const = 0;

enum StandardPixmap {
SP_TitleBarMenuButton,
SP_TitleBarMinButton,
SP_TitleBarMaxButton,
SP_TitleBarCloseButton,
SP_TitleBarNormalButton,
SP_TitleBarShadeButton,
SP_TitleBarUnshadeButton,
SP_TitleBarContextHelpButton,
SP_DockWidgetCloseButton,
SP_MessageBoxInformation,
SP_MessageBoxWarning,
SP_MessageBoxCritical,
SP_MessageBoxQuestion,
SP_DesktopIcon,
SP_TrashIcon,
SP_ComputerIcon,
SP_DriveFDIcon,
SP_DriveHDIcon,
SP_DriveCDIcon,
SP_DriveDVDIcon,
SP_DriveNetIcon,
SP_DirOpenIcon,
SP_DirClosedIcon,
SP_DirLinkIcon,
SP_DirLinkOpenIcon,
SP_FileIcon,
SP_FileLinkIcon,
SP_ToolBarHorizontalExtensionButton,
SP_ToolBarVerticalExtensionButton,
SP_FileDialogStart,
SP_FileDialogEnd,
SP_FileDialogToParent,
SP_FileDialogNewFolder,
SP_FileDialogDetailedView,
SP_FileDialogInfoView,
SP_FileDialogContentsView,
SP_FileDialogListView,
SP_FileDialogBack,
SP_DirIcon,
SP_DialogOkButton,
SP_DialogCancelButton,
SP_DialogHelpButton,
SP_DialogOpenButton,
SP_DialogSaveButton,
SP_DialogCloseButton,
SP_DialogApplyButton,
SP_DialogResetButton,
SP_DialogDiscardButton,
SP_DialogYesButton,
SP_DialogNoButton,
SP_ArrowUp,
SP_ArrowDown,
SP_ArrowLeft,
SP_ArrowRight,
SP_ArrowBack,
SP_ArrowForward,
SP_DirHomeIcon,
SP_CommandLink,
SP_VistaShield,
SP_BrowserReload,
SP_BrowserStop,
SP_MediaPlay,
SP_MediaStop,
SP_MediaPause,
SP_MediaSkipForward,
SP_MediaSkipBackward,
SP_MediaSeekForward,
SP_MediaSeekBackward,
SP_MediaVolume,
SP_MediaVolumeMuted,

SP_CustomBase = 0xf0000000
};

virtual QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt = 0,
const QWidget *widget = 0) const = 0;

virtual QIcon standardIcon(StandardPixmap standardIcon, const QStyleOption *option = 0,
const QWidget *widget = 0) const = 0;

virtual QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap,
const QStyleOption *opt) const = 0;

static QRect visualRect(Qt::LayoutDirection direction, const QRect &boundingRect,
const QRect &logicalRect);
static QPoint visualPos(Qt::LayoutDirection direction, const QRect &boundingRect,
const QPoint &logicalPos);
static int sliderPositionFromValue(int min, int max, int val, int space,
bool upsideDown = false);
static int sliderValueFromPosition(int min, int max, int pos, int space,
bool upsideDown = false);
static Qt::Alignment visualAlignment(Qt::LayoutDirection direction, Qt::Alignment alignment);
static QRect alignedRect(Qt::LayoutDirection direction, Qt::Alignment alignment,
const QSize &size, const QRect &rectangle);

virtual int layoutSpacing(QSizePolicy::ControlType control1,
QSizePolicy::ControlType control2, Qt::Orientation orientation,
const QStyleOption *option = 0, const QWidget *widget = 0) const = 0;
int combinedLayoutSpacing(QSizePolicy::ControlTypes controls1,
QSizePolicy::ControlTypes controls2, Qt::Orientation orientation,
QStyleOption *option = 0, QWidget *widget = 0) const;

const QStyle * proxy() const;

private:
QStyle(const QStyle &) ; QStyle &operator=(const QStyle &) ;
friend class QWidget;
friend class QWidgetPrivate;
friend class QApplication;
friend class QProxyStyle;
friend class QProxyStylePrivate;
void setProxy(QStyle *style);
};

 inline QFlags<QStyle::State::enum_type> operator|(QStyle::State::enum_type f1, QStyle::State::enum_type f2) { return QFlags<QStyle::State::enum_type>(f1) | f2; }  inline QFlags<QStyle::State::enum_type> operator|(QStyle::State::enum_type f1, QFlags<QStyle::State::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyle::State::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QStyle::SubControls::enum_type> operator|(QStyle::SubControls::enum_type f1, QStyle::SubControls::enum_type f2) { return QFlags<QStyle::SubControls::enum_type>(f1) | f2; }  inline QFlags<QStyle::SubControls::enum_type> operator|(QStyle::SubControls::enum_type f1, QFlags<QStyle::SubControls::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyle::SubControls::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 828 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"
 QDebug operator<<(QDebug debug, QStyle::State state);


# 831 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
class QIcon;
class QTabBarPrivate;
class QStyleOptionTab;

class  QTabBar: public QWidget
{
Q_OBJECT

Q_ENUMS(Shape)
Q_PROPERTY(Shape shape READ shape WRITE setShape)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)
Q_PROPERTY(bool drawBase READ drawBase WRITE setDrawBase)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::TextElideMode elideMode READ elideMode WRITE setElideMode)
Q_PROPERTY(bool usesScrollButtons READ usesScrollButtons WRITE setUsesScrollButtons)
Q_PROPERTY(bool tabsClosable READ tabsClosable WRITE setTabsClosable)
Q_PROPERTY(SelectionBehavior selectionBehaviorOnRemove READ selectionBehaviorOnRemove WRITE setSelectionBehaviorOnRemove)
Q_PROPERTY(bool expanding READ expanding WRITE setExpanding)
Q_PROPERTY(bool movable READ isMovable WRITE setMovable)
Q_PROPERTY(bool documentMode READ documentMode WRITE setDocumentMode)

public:
explicit QTabBar(QWidget* parent=0);
~QTabBar();

enum Shape { RoundedNorth, RoundedSouth, RoundedWest, RoundedEast,
TriangularNorth, TriangularSouth, TriangularWest, TriangularEast
};

enum ButtonPosition {
LeftSide,
RightSide
};

enum SelectionBehavior {
SelectLeftTab,
SelectRightTab,
SelectPreviousTab
};

Shape shape() const;
void setShape(Shape shape);

int addTab(const QString &text);
int addTab(const QIcon &icon, const QString &text);

int insertTab(int index, const QString &text);
int insertTab(int index, const QIcon&icon, const QString &text);

void removeTab(int index);
void moveTab(int from, int to);

bool isTabEnabled(int index) const;
void setTabEnabled(int index, bool);

QString tabText(int index) const;
void setTabText(int index, const QString &text);

QColor tabTextColor(int index) const;
void setTabTextColor(int index, const QColor &color);

QIcon tabIcon(int index) const;
void setTabIcon(int index, const QIcon &icon);

Qt::TextElideMode elideMode() const;
void setElideMode(Qt::TextElideMode);


# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
void setTabToolTip(int index, const QString &tip);
QString tabToolTip(int index) const;



# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
void setTabWhatsThis(int index, const QString &text);
QString tabWhatsThis(int index) const;


# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
void setTabData(int index, const QVariant &data);
QVariant tabData(int index) const;

QRect tabRect(int index) const;
int tabAt(const QPoint &pos) const;

int currentIndex() const;
int count() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setDrawBase(bool drawTheBase);
bool drawBase() const;

QSize iconSize() const;
void setIconSize(const QSize &size);

bool usesScrollButtons() const;
void setUsesScrollButtons(bool useButtons);

bool tabsClosable() const;
void setTabsClosable(bool closable);

void setTabButton(int index, ButtonPosition position, QWidget *widget);
QWidget *tabButton(int index, ButtonPosition position) const;

SelectionBehavior selectionBehaviorOnRemove() const;
void setSelectionBehaviorOnRemove(SelectionBehavior behavior);

bool expanding() const;
void setExpanding(bool enabled);

bool isMovable() const;
void setMovable(bool movable);

bool documentMode() const;
void setDocumentMode(bool set);

public slots:
void setCurrentIndex(int index);

signals:
void currentChanged(int index);
void tabCloseRequested(int index);
void tabMoved(int from, int to);

protected:
virtual QSize tabSizeHint(int index) const;
virtual QSize minimumTabSizeHint(int index) const;
virtual void tabInserted(int index);
virtual void tabRemoved(int index);
virtual void tabLayoutChange();

bool event(QEvent *);
void resizeEvent(QResizeEvent *);
void showEvent(QShowEvent *);
void hideEvent(QHideEvent *);
void paintEvent(QPaintEvent *);
void mousePressEvent (QMouseEvent *);
void mouseMoveEvent (QMouseEvent *);
void mouseReleaseEvent (QMouseEvent *);

# 193 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
void wheelEvent(QWheelEvent *event);

# 195 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
void keyPressEvent(QKeyEvent *);
void changeEvent(QEvent *);
void initStyleOption(QStyleOptionTab *option, int tabIndex) const;


# 200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
friend class QAccessibleTabBar;

# 202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"
private:
QTabBar(const QTabBar &) ; QTabBar &operator=(const QTabBar &) ;
inline QTabBarPrivate* d_func() { return reinterpret_cast<QTabBarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTabBarPrivate* d_func() const { return reinterpret_cast<const QTabBarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTabBarPrivate;


};



# 211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"



# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"
class QTabBar;
class QTabWidgetPrivate;
class QStyleOptionTabWidgetFrame;

class  QTabWidget : public QWidget
{
Q_OBJECT
Q_ENUMS(TabPosition TabShape)
Q_PROPERTY(TabPosition tabPosition READ tabPosition WRITE setTabPosition)
Q_PROPERTY(TabShape tabShape READ tabShape WRITE setTabShape)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::TextElideMode elideMode READ elideMode WRITE setElideMode)
Q_PROPERTY(bool usesScrollButtons READ usesScrollButtons WRITE setUsesScrollButtons)
Q_PROPERTY(bool documentMode READ documentMode WRITE setDocumentMode)
Q_PROPERTY(bool tabsClosable READ tabsClosable WRITE setTabsClosable)
Q_PROPERTY(bool movable READ isMovable WRITE setMovable)

public:
explicit QTabWidget(QWidget *parent = 0);
~QTabWidget();

int addTab(QWidget *widget, const QString &);
int addTab(QWidget *widget, const QIcon& icon, const QString &label);

int insertTab(int index, QWidget *widget, const QString &);
int insertTab(int index, QWidget *widget, const QIcon& icon, const QString &label);

void removeTab(int index);

bool isTabEnabled(int index) const;
void setTabEnabled(int index, bool);

QString tabText(int index) const;
void setTabText(int index, const QString &);

QIcon tabIcon(int index) const;
void setTabIcon(int index, const QIcon & icon);


# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"
void setTabToolTip(int index, const QString & tip);
QString tabToolTip(int index) const;



# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"
void setTabWhatsThis(int index, const QString &text);
QString tabWhatsThis(int index) const;


# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"
int currentIndex() const;
QWidget *currentWidget() const;
QWidget *widget(int index) const;
int indexOf(QWidget *widget) const;
int count() const;

enum TabPosition { North, South, West, East };
TabPosition tabPosition() const;
void setTabPosition(TabPosition);

bool tabsClosable() const;
void setTabsClosable(bool closeable);

bool isMovable() const;
void setMovable(bool movable);

enum TabShape { Rounded, Triangular };
TabShape tabShape() const;
void setTabShape(TabShape s);

QSize sizeHint() const;
QSize minimumSizeHint() const;
int heightForWidth(int width) const;
bool hasHeightForWidth() const;

void setCornerWidget(QWidget * w, Qt::Corner corner = Qt::TopRightCorner);
QWidget * cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const;

Qt::TextElideMode elideMode() const;
void setElideMode(Qt::TextElideMode);

QSize iconSize() const;
void setIconSize(const QSize &size);

bool usesScrollButtons() const;
void setUsesScrollButtons(bool useButtons);

bool documentMode() const;
void setDocumentMode(bool set);

void clear();

QTabBar* tabBar() const;

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *widget);

signals:
void currentChanged(int index);
void tabCloseRequested(int index);

protected:
virtual void tabInserted(int index);
virtual void tabRemoved(int index);

void showEvent(QShowEvent *);
void resizeEvent(QResizeEvent *);
void keyPressEvent(QKeyEvent *);
void paintEvent(QPaintEvent *);
void setTabBar(QTabBar *);
void changeEvent(QEvent *);
bool event(QEvent *);
void initStyleOption(QStyleOptionTabWidgetFrame *option) const;


private:
inline QTabWidgetPrivate* d_func() { return reinterpret_cast<QTabWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTabWidgetPrivate* d_func() const { return reinterpret_cast<const QTabWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTabWidgetPrivate;
QTabWidget(const QTabWidget &) ; QTabWidget &operator=(const QTabWidget &) ;



void setUpLayout(bool = false);
};



# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"



# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qrubberband.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qrubberband.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qrubberband.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qrubberband.h"
class QRubberBandPrivate;
class QStyleOptionRubberBand;

class  QRubberBand : public QWidget
{
Q_OBJECT

public:
enum Shape { Line, Rectangle };
explicit QRubberBand(Shape, QWidget * =0);
~QRubberBand();

Shape shape() const;

void setGeometry(const QRect &r);

inline void setGeometry(int x, int y, int w, int h);
inline void move(int x, int y);
inline void move(const QPoint &p)
{ move(p.x(), p.y()); }
inline void resize(int w, int h)
{ setGeometry(geometry().x(), geometry().y(), w, h); }
inline void resize(const QSize &s)
{ resize(s.width(), s.height()); }

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void changeEvent(QEvent *);
void showEvent(QShowEvent *);
void resizeEvent(QResizeEvent *);
void moveEvent(QMoveEvent *);
void initStyleOption(QStyleOptionRubberBand *option) const;

private:
inline QRubberBandPrivate* d_func() { return reinterpret_cast<QRubberBandPrivate *>(qGetPtrHelper(d_ptr)); } inline const QRubberBandPrivate* d_func() const { return reinterpret_cast<const QRubberBandPrivate *>(qGetPtrHelper(d_ptr)); } friend class QRubberBandPrivate;
};

inline void QRubberBand::setGeometry(int ax, int ay, int aw, int ah)
{ setGeometry(QRect(ax, ay, aw, ah)); }
inline void QRubberBand::move(int ax, int ay)
{ setGeometry(ax, ay, width(), height()); }



# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qrubberband.h"



# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"



# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"



class QDebug;

class  QStyleOption
{
public:
enum OptionType {
SO_Default, SO_FocusRect, SO_Button, SO_Tab, SO_MenuItem,
SO_Frame, SO_ProgressBar, SO_ToolBox, SO_Header,
SO_DockWidget, SO_ViewItem, SO_TabWidgetFrame,
SO_TabBarBase, SO_RubberBand, SO_ToolBar, SO_GraphicsItem,

SO_Complex = 0xf0000, SO_Slider, SO_SpinBox, SO_ToolButton, SO_ComboBox,
SO_TitleBar, SO_GroupBox, SO_SizeGrip,

SO_CustomBase = 0xf00,
SO_ComplexCustomBase = 0xf000000
};

enum StyleOptionType { Type = SO_Default };
enum StyleOptionVersion { Version = 1 };

int version;
int type;
QStyle::State state;
Qt::LayoutDirection direction;
QRect rect;
QFontMetrics fontMetrics;
QPalette palette;
QObject *styleObject;

QStyleOption(int version = QStyleOption::Version, int type = SO_Default);
QStyleOption(const QStyleOption &other);
~QStyleOption();

void init(const QWidget *w);
inline void initFrom(const QWidget *w) { init(w); }
QStyleOption &operator=(const QStyleOption &other);
};

class  QStyleOptionFocusRect : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_FocusRect };
enum StyleOptionVersion { Version = 1 };

QColor backgroundColor;

QStyleOptionFocusRect();
QStyleOptionFocusRect(const QStyleOptionFocusRect &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionFocusRect(int version);
};

class  QStyleOptionFrame : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Frame };
enum StyleOptionVersion { Version = 3 };

int lineWidth;
int midLineWidth;
enum FrameFeature {
None = 0x00,
Flat = 0x01,
Rounded = 0x02
};
typedef QFlags<FrameFeature> FrameFeatures;
FrameFeatures features;
QFrame::Shape frameShape;

QStyleOptionFrame();
QStyleOptionFrame(const QStyleOptionFrame &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionFrame(int version);
};

 inline QFlags<QStyleOptionFrame::FrameFeatures::enum_type> operator|(QStyleOptionFrame::FrameFeatures::enum_type f1, QStyleOptionFrame::FrameFeatures::enum_type f2) { return QFlags<QStyleOptionFrame::FrameFeatures::enum_type>(f1) | f2; }  inline QFlags<QStyleOptionFrame::FrameFeatures::enum_type> operator|(QStyleOptionFrame::FrameFeatures::enum_type f1, QFlags<QStyleOptionFrame::FrameFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyleOptionFrame::FrameFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

typedef QStyleOptionFrame QStyleOptionFrameV2;
typedef QStyleOptionFrame QStyleOptionFrameV3;


# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionTabWidgetFrame : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_TabWidgetFrame };
enum StyleOptionVersion { Version = 2 };

int lineWidth;
int midLineWidth;
QTabBar::Shape shape;
QSize tabBarSize;
QSize rightCornerWidgetSize;
QSize leftCornerWidgetSize;
QRect tabBarRect;
QRect selectedTabRect;

QStyleOptionTabWidgetFrame();
inline QStyleOptionTabWidgetFrame(const QStyleOptionTabWidgetFrame &other)
: QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionTabWidgetFrame(int version);
};

typedef QStyleOptionTabWidgetFrame QStyleOptionTabWidgetFrameV2;




# 174 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionTabBarBase : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_TabBarBase };
enum StyleOptionVersion { Version = 2 };

QTabBar::Shape shape;
QRect tabBarRect;
QRect selectedTabRect;
bool documentMode;

QStyleOptionTabBarBase();
QStyleOptionTabBarBase(const QStyleOptionTabBarBase &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionTabBarBase(int version);
};

typedef QStyleOptionTabBarBase QStyleOptionTabBarBaseV2;


# 195 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionHeader : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Header };
enum StyleOptionVersion { Version = 1 };

enum SectionPosition { Beginning, Middle, End, OnlyOneSection };
enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected,
NextAndPreviousAreSelected };
enum SortIndicator { None, SortUp, SortDown };

int section;
QString text;
Qt::Alignment textAlignment;
QIcon icon;
Qt::Alignment iconAlignment;
SectionPosition position;
SelectedPosition selectedPosition;
SortIndicator sortIndicator;
Qt::Orientation orientation;

QStyleOptionHeader();
QStyleOptionHeader(const QStyleOptionHeader &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionHeader(int version);
};

class  QStyleOptionButton : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Button };
enum StyleOptionVersion { Version = 1 };

enum ButtonFeature { None = 0x00, Flat = 0x01, HasMenu = 0x02, DefaultButton = 0x04,
AutoDefaultButton = 0x08, CommandLinkButton = 0x10 };
typedef QFlags<ButtonFeature> ButtonFeatures;

ButtonFeatures features;
QString text;
QIcon icon;
QSize iconSize;

QStyleOptionButton();
QStyleOptionButton(const QStyleOptionButton &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionButton(int version);
};

 inline QFlags<QStyleOptionButton::ButtonFeatures::enum_type> operator|(QStyleOptionButton::ButtonFeatures::enum_type f1, QStyleOptionButton::ButtonFeatures::enum_type f2) { return QFlags<QStyleOptionButton::ButtonFeatures::enum_type>(f1) | f2; }  inline QFlags<QStyleOptionButton::ButtonFeatures::enum_type> operator|(QStyleOptionButton::ButtonFeatures::enum_type f1, QFlags<QStyleOptionButton::ButtonFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyleOptionButton::ButtonFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 248 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionTab : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Tab };
enum StyleOptionVersion { Version = 3 };

enum TabPosition { Beginning, Middle, End, OnlyOneTab };
enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected };
enum CornerWidget { NoCornerWidgets = 0x00, LeftCornerWidget = 0x01,
RightCornerWidget = 0x02 };
enum TabFeature { None = 0x00, HasFrame = 0x01 };
typedef QFlags<CornerWidget> CornerWidgets;
typedef QFlags<TabFeature> TabFeatures;

QTabBar::Shape shape;
QString text;
QIcon icon;
int row;
TabPosition position;
SelectedPosition selectedPosition;
CornerWidgets cornerWidgets;
QSize iconSize;
bool documentMode;
QSize leftButtonSize;
QSize rightButtonSize;
TabFeatures features;

QStyleOptionTab();
QStyleOptionTab(const QStyleOptionTab &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionTab(int version);
};

 inline QFlags<QStyleOptionTab::CornerWidgets::enum_type> operator|(QStyleOptionTab::CornerWidgets::enum_type f1, QStyleOptionTab::CornerWidgets::enum_type f2) { return QFlags<QStyleOptionTab::CornerWidgets::enum_type>(f1) | f2; }  inline QFlags<QStyleOptionTab::CornerWidgets::enum_type> operator|(QStyleOptionTab::CornerWidgets::enum_type f1, QFlags<QStyleOptionTab::CornerWidgets::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyleOptionTab::CornerWidgets::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

typedef QStyleOptionTab QStyleOptionTabV2;
typedef QStyleOptionTab QStyleOptionTabV3;





# 291 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionToolBar : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ToolBar };
enum StyleOptionVersion { Version = 1 };
enum ToolBarPosition { Beginning, Middle, End, OnlyOne };
enum ToolBarFeature { None = 0x0, Movable = 0x1 };
typedef QFlags<ToolBarFeature> ToolBarFeatures;
ToolBarPosition positionOfLine; 
ToolBarPosition positionWithinLine; 
Qt::ToolBarArea toolBarArea; 
ToolBarFeatures features;
int lineWidth;
int midLineWidth;
QStyleOptionToolBar();
QStyleOptionToolBar(const QStyleOptionToolBar &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionToolBar(int version);
};

 inline QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type> operator|(QStyleOptionToolBar::ToolBarFeatures::enum_type f1, QStyleOptionToolBar::ToolBarFeatures::enum_type f2) { return QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type>(f1) | f2; }  inline QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type> operator|(QStyleOptionToolBar::ToolBarFeatures::enum_type f1, QFlags<QStyleOptionToolBar::ToolBarFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyleOptionToolBar::ToolBarFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 316 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionProgressBar : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ProgressBar };
enum StyleOptionVersion { Version = 2 };

int minimum;
int maximum;
int progress;
QString text;
Qt::Alignment textAlignment;
bool textVisible;
Qt::Orientation orientation;
bool invertedAppearance;
bool bottomToTop;

QStyleOptionProgressBar();
QStyleOptionProgressBar(const QStyleOptionProgressBar &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionProgressBar(int version);
};

typedef QStyleOptionProgressBar QStyleOptionProgressBarV2;

class  QStyleOptionMenuItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_MenuItem };
enum StyleOptionVersion { Version = 1 };

enum MenuItemType { Normal, DefaultItem, Separator, SubMenu, Scroller, TearOff, Margin,
EmptyArea };
enum CheckType { NotCheckable, Exclusive, NonExclusive };

MenuItemType menuItemType;
CheckType checkType;
bool checked;
bool menuHasCheckableItems;
QRect menuRect;
QString text;
QIcon icon;
int maxIconWidth;
int tabWidth;
QFont font;

QStyleOptionMenuItem();
QStyleOptionMenuItem(const QStyleOptionMenuItem &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionMenuItem(int version);
};

class  QStyleOptionDockWidget : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_DockWidget };
enum StyleOptionVersion { Version = 2 };

QString title;
bool closable;
bool movable;
bool floatable;
bool verticalTitleBar;

QStyleOptionDockWidget();
QStyleOptionDockWidget(const QStyleOptionDockWidget &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionDockWidget(int version);
};

typedef QStyleOptionDockWidget QStyleOptionDockWidgetV2;



# 392 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionViewItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ViewItem };
enum StyleOptionVersion { Version = 4 };

enum Position { Left, Right, Top, Bottom };

Qt::Alignment displayAlignment;
Qt::Alignment decorationAlignment;
Qt::TextElideMode textElideMode;
Position decorationPosition;
QSize decorationSize;
QFont font;
bool showDecorationSelected;

enum ViewItemFeature {
None = 0x00,
WrapText = 0x01,
Alternate = 0x02,
HasCheckIndicator = 0x04,
HasDisplay = 0x08,
HasDecoration = 0x10
};
typedef QFlags<ViewItemFeature> ViewItemFeatures;

ViewItemFeatures features;

QLocale locale;
const QWidget *widget;

enum ViewItemPosition { Invalid, Beginning, Middle, End, OnlyOne };

QModelIndex index;
Qt::CheckState checkState;
QIcon icon;
QString text;
ViewItemPosition viewItemPosition;
QBrush backgroundBrush;

QStyleOptionViewItem();
QStyleOptionViewItem(const QStyleOptionViewItem &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionViewItem(int version);
};

 inline QFlags<QStyleOptionViewItem::ViewItemFeatures::enum_type> operator|(QStyleOptionViewItem::ViewItemFeatures::enum_type f1, QStyleOptionViewItem::ViewItemFeatures::enum_type f2) { return QFlags<QStyleOptionViewItem::ViewItemFeatures::enum_type>(f1) | f2; }  inline QFlags<QStyleOptionViewItem::ViewItemFeatures::enum_type> operator|(QStyleOptionViewItem::ViewItemFeatures::enum_type f1, QFlags<QStyleOptionViewItem::ViewItemFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyleOptionViewItem::ViewItemFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

typedef QStyleOptionViewItem QStyleOptionViewItemV2;
typedef QStyleOptionViewItem QStyleOptionViewItemV3;
typedef QStyleOptionViewItem QStyleOptionViewItemV4;



# 447 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionToolBox : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_ToolBox };
enum StyleOptionVersion { Version = 2 };

QString text;
QIcon icon;

enum TabPosition { Beginning, Middle, End, OnlyOneTab };
enum SelectedPosition { NotAdjacent, NextIsSelected, PreviousIsSelected };

TabPosition position;
SelectedPosition selectedPosition;

QStyleOptionToolBox();
QStyleOptionToolBox(const QStyleOptionToolBox &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionToolBox(int version);
};

typedef QStyleOptionToolBox QStyleOptionToolBoxV2;


# 472 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionRubberBand : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_RubberBand };
enum StyleOptionVersion { Version = 1 };

QRubberBand::Shape shape;
bool opaque;

QStyleOptionRubberBand();
QStyleOptionRubberBand(const QStyleOptionRubberBand &other) : QStyleOption(Version, Type) { *this = other; }

protected:
QStyleOptionRubberBand(int version);
};


# 489 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"

class  QStyleOptionComplex : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_Complex };
enum StyleOptionVersion { Version = 1 };

QStyle::SubControls subControls;
QStyle::SubControls activeSubControls;

QStyleOptionComplex(int version = QStyleOptionComplex::Version, int type = SO_Complex);
QStyleOptionComplex(const QStyleOptionComplex &other) : QStyleOption(Version, Type) { *this = other; }
};


# 504 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionSlider : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_Slider };
enum StyleOptionVersion { Version = 1 };

Qt::Orientation orientation;
int minimum;
int maximum;
QSlider::TickPosition tickPosition;
int tickInterval;
bool upsideDown;
int sliderPosition;
int sliderValue;
int singleStep;
int pageStep;
qreal notchTarget;
bool dialWrapping;

QStyleOptionSlider();
QStyleOptionSlider(const QStyleOptionSlider &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionSlider(int version);
};



# 532 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionSpinBox : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_SpinBox };
enum StyleOptionVersion { Version = 1 };

QAbstractSpinBox::ButtonSymbols buttonSymbols;
QAbstractSpinBox::StepEnabled stepEnabled;
bool frame;

QStyleOptionSpinBox();
QStyleOptionSpinBox(const QStyleOptionSpinBox &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionSpinBox(int version);
};


# 550 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
class  QStyleOptionToolButton : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_ToolButton };
enum StyleOptionVersion { Version = 1 };

enum ToolButtonFeature { None = 0x00, Arrow = 0x01, Menu = 0x04, MenuButtonPopup = Menu, PopupDelay = 0x08,
HasMenu = 0x10 };
typedef QFlags<ToolButtonFeature> ToolButtonFeatures;

ToolButtonFeatures features;
QIcon icon;
QSize iconSize;
QString text;
Qt::ArrowType arrowType;
Qt::ToolButtonStyle toolButtonStyle;
QPoint pos;
QFont font;

QStyleOptionToolButton();
QStyleOptionToolButton(const QStyleOptionToolButton &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionToolButton(int version);
};

 inline QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type> operator|(QStyleOptionToolButton::ToolButtonFeatures::enum_type f1, QStyleOptionToolButton::ToolButtonFeatures::enum_type f2) { return QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type>(f1) | f2; }  inline QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type> operator|(QStyleOptionToolButton::ToolButtonFeatures::enum_type f1, QFlags<QStyleOptionToolButton::ToolButtonFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QStyleOptionToolButton::ToolButtonFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class  QStyleOptionComboBox : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_ComboBox };
enum StyleOptionVersion { Version = 1 };

bool editable;
QRect popupRect;
bool frame;
QString currentText;
QIcon currentIcon;
QSize iconSize;

QStyleOptionComboBox();
QStyleOptionComboBox(const QStyleOptionComboBox &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionComboBox(int version);
};

class  QStyleOptionTitleBar : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_TitleBar };
enum StyleOptionVersion { Version = 1 };

QString text;
QIcon icon;
int titleBarState;
Qt::WindowFlags titleBarFlags;

QStyleOptionTitleBar();
QStyleOptionTitleBar(const QStyleOptionTitleBar &other) : QStyleOptionComplex(Version, Type) { *this = other; }

protected:
QStyleOptionTitleBar(int version);
};

class  QStyleOptionGroupBox : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_GroupBox };
enum StyleOptionVersion { Version = 1 };

QStyleOptionFrameV2::FrameFeatures features;
QString text;
Qt::Alignment textAlignment;
QColor textColor;
int lineWidth;
int midLineWidth;

QStyleOptionGroupBox();
QStyleOptionGroupBox(const QStyleOptionGroupBox &other) : QStyleOptionComplex(Version, Type) { *this = other; }
protected:
QStyleOptionGroupBox(int version);
};

class  QStyleOptionSizeGrip : public QStyleOptionComplex
{
public:
enum StyleOptionType { Type = SO_SizeGrip };
enum StyleOptionVersion { Version = 1 };

Qt::Corner corner;

QStyleOptionSizeGrip();
QStyleOptionSizeGrip(const QStyleOptionSizeGrip &other) : QStyleOptionComplex(Version, Type) { *this = other; }
protected:
QStyleOptionSizeGrip(int version);
};

class  QStyleOptionGraphicsItem : public QStyleOption
{
public:
enum StyleOptionType { Type = SO_GraphicsItem };
enum StyleOptionVersion { Version = 1 };

QRectF exposedRect;
QMatrix matrix;
qreal levelOfDetail;

QStyleOptionGraphicsItem();
QStyleOptionGraphicsItem(const QStyleOptionGraphicsItem &other) : QStyleOption(Version, Type) { *this = other; }
static qreal levelOfDetailFromTransform(const QTransform &worldTransform);
protected:
QStyleOptionGraphicsItem(int version);
};

template <typename T>
T qstyleoption_cast(const QStyleOption *opt)
{
if (opt && opt->version >= static_cast<T>(0)->Version && (opt->type == static_cast<T>(0)->Type
|| int(static_cast<T>(0)->Type) == QStyleOption::SO_Default
|| (int(static_cast<T>(0)->Type) == QStyleOption::SO_Complex
&& opt->type > QStyleOption::SO_Complex)))
return static_cast<T>(opt);
return 0;
}

template <typename T>
T qstyleoption_cast(QStyleOption *opt)
{
if (opt && opt->version >= static_cast<T>(0)->Version && (opt->type == static_cast<T>(0)->Type
|| int(static_cast<T>(0)->Type) == QStyleOption::SO_Default
|| (int(static_cast<T>(0)->Type) == QStyleOption::SO_Complex
&& opt->type > QStyleOption::SO_Complex)))
return static_cast<T>(opt);
return 0;
}


class  QStyleHintReturn {
public:
enum HintReturnType {
SH_Default=0xf000, SH_Mask, SH_Variant
};

enum StyleOptionType { Type = SH_Default };
enum StyleOptionVersion { Version = 1 };

QStyleHintReturn(int version = QStyleOption::Version, int type = SH_Default);
~QStyleHintReturn();

int version;
int type;
};

class  QStyleHintReturnMask : public QStyleHintReturn {
public:
enum StyleOptionType { Type = SH_Mask };
enum StyleOptionVersion { Version = 1 };

QStyleHintReturnMask();
~QStyleHintReturnMask();

QRegion region;
};

class  QStyleHintReturnVariant : public QStyleHintReturn {
public:
enum StyleOptionType { Type = SH_Variant };
enum StyleOptionVersion { Version = 1 };

QStyleHintReturnVariant();
~QStyleHintReturnVariant();

QVariant variant;
};

template <typename T>
T qstyleoption_cast(const QStyleHintReturn *hint)
{
if (hint && hint->version <= static_cast<T>(0)->Version &&
(hint->type == static_cast<T>(0)->Type || int(static_cast<T>(0)->Type) == QStyleHintReturn::SH_Default))
return static_cast<T>(hint);
return 0;
}

template <typename T>
T qstyleoption_cast(QStyleHintReturn *hint)
{
if (hint && hint->version <= static_cast<T>(0)->Version &&
(hint->type == static_cast<T>(0)->Type || int(static_cast<T>(0)->Type) == QStyleHintReturn::SH_Default))
return static_cast<T>(hint);
return 0;
}


# 746 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
 QDebug operator<<(QDebug debug, const QStyleOption::OptionType &optionType);
 QDebug operator<<(QDebug debug, const QStyleOption &option);


# 750 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"
class QPainter;
class QModelIndex;
class QAbstractItemModel;
class QAbstractItemView;
class QHelpEvent;

class  QAbstractItemDelegate : public QObject
{
Q_OBJECT

public:

enum EndEditHint {
NoHint,
EditNextItem,
EditPreviousItem,
SubmitModelCache,
RevertModelCache
};

explicit QAbstractItemDelegate(QObject *parent = 0);
virtual ~QAbstractItemDelegate();


virtual void paint(QPainter *painter,
const QStyleOptionViewItem &option,
const QModelIndex &index) const = 0;

virtual QSize sizeHint(const QStyleOptionViewItem &option,
const QModelIndex &index) const = 0;


virtual QWidget *createEditor(QWidget *parent,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;

virtual void destroyEditor(QWidget *editor, const QModelIndex &index) const;

virtual void setEditorData(QWidget *editor, const QModelIndex &index) const;

virtual void setModelData(QWidget *editor,
QAbstractItemModel *model,
const QModelIndex &index) const;

virtual void updateEditorGeometry(QWidget *editor,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;


virtual bool editorEvent(QEvent *event,
QAbstractItemModel *model,
const QStyleOptionViewItem &option,
const QModelIndex &index);

static QString elidedText(const QFontMetrics &fontMetrics, int width,
Qt::TextElideMode mode, const QString &text);

virtual bool helpEvent(QHelpEvent *event,
QAbstractItemView *view,
const QStyleOptionViewItem &option,
const QModelIndex &index);

virtual QVector<int> paintingRoles() const;

signals:
void commitData(QWidget *editor);
void closeEditor(QWidget *editor, QAbstractItemDelegate::EndEditHint hint = NoHint);
void sizeHintChanged(const QModelIndex &);

protected:
QAbstractItemDelegate(QObjectPrivate &, QObject *parent = 0);
private:
QAbstractItemDelegate(const QAbstractItemDelegate &) ; QAbstractItemDelegate &operator=(const QAbstractItemDelegate &) ;
};



# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"



# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"













































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"






























































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"




































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
class QMenu;
class QDrag;
class QEvent;
class QAbstractItemViewPrivate;

class  QAbstractItemView : public QAbstractScrollArea
{
Q_OBJECT
Q_ENUMS(SelectionMode SelectionBehavior ScrollHint ScrollMode DragDropMode)

Q_PROPERTY(bool autoScroll READ hasAutoScroll WRITE setAutoScroll)
Q_PROPERTY(int autoScrollMargin READ autoScrollMargin WRITE setAutoScrollMargin)
Q_PROPERTY(EditTriggers editTriggers READ editTriggers WRITE setEditTriggers)
Q_PROPERTY(bool tabKeyNavigation READ tabKeyNavigation WRITE setTabKeyNavigation)

# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
Q_PROPERTY(bool showDropIndicator READ showDropIndicator WRITE setDropIndicatorShown)
Q_PROPERTY(bool dragEnabled READ dragEnabled WRITE setDragEnabled)
Q_PROPERTY(bool dragDropOverwriteMode READ dragDropOverwriteMode WRITE setDragDropOverwriteMode)
Q_PROPERTY(DragDropMode dragDropMode READ dragDropMode WRITE setDragDropMode)
Q_PROPERTY(Qt::DropAction defaultDropAction READ defaultDropAction WRITE setDefaultDropAction)

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
Q_PROPERTY(bool alternatingRowColors READ alternatingRowColors WRITE setAlternatingRowColors)
Q_PROPERTY(SelectionMode selectionMode READ selectionMode WRITE setSelectionMode)
Q_PROPERTY(SelectionBehavior selectionBehavior READ selectionBehavior WRITE setSelectionBehavior)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::TextElideMode textElideMode READ textElideMode WRITE setTextElideMode)
Q_PROPERTY(ScrollMode verticalScrollMode READ verticalScrollMode WRITE setVerticalScrollMode)
Q_PROPERTY(ScrollMode horizontalScrollMode READ horizontalScrollMode WRITE setHorizontalScrollMode)

public:
enum SelectionMode {
NoSelection,
SingleSelection,
MultiSelection,
ExtendedSelection,
ContiguousSelection
};

enum SelectionBehavior {
SelectItems,
SelectRows,
SelectColumns
};

enum ScrollHint {
EnsureVisible,
PositionAtTop,
PositionAtBottom,
PositionAtCenter
};

enum EditTrigger {
NoEditTriggers = 0,
CurrentChanged = 1,
DoubleClicked = 2,
SelectedClicked = 4,
EditKeyPressed = 8,
AnyKeyPressed = 16,
AllEditTriggers = 31
};

typedef QFlags<EditTrigger> EditTriggers;

enum ScrollMode {
ScrollPerItem,
ScrollPerPixel
};

explicit QAbstractItemView(QWidget *parent = 0);
~QAbstractItemView();

virtual void setModel(QAbstractItemModel *model);
QAbstractItemModel *model() const;

virtual void setSelectionModel(QItemSelectionModel *selectionModel);
QItemSelectionModel *selectionModel() const;

void setItemDelegate(QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegate() const;

void setSelectionMode(QAbstractItemView::SelectionMode mode);
QAbstractItemView::SelectionMode selectionMode() const;

void setSelectionBehavior(QAbstractItemView::SelectionBehavior behavior);
QAbstractItemView::SelectionBehavior selectionBehavior() const;

QModelIndex currentIndex() const;
QModelIndex rootIndex() const;

void setEditTriggers(EditTriggers triggers);
EditTriggers editTriggers() const;

void setVerticalScrollMode(ScrollMode mode);
ScrollMode verticalScrollMode() const;

void setHorizontalScrollMode(ScrollMode mode);
ScrollMode horizontalScrollMode() const;

void setAutoScroll(bool enable);
bool hasAutoScroll() const;

void setAutoScrollMargin(int margin);
int autoScrollMargin() const;

void setTabKeyNavigation(bool enable);
bool tabKeyNavigation() const;


# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
void setDropIndicatorShown(bool enable);
bool showDropIndicator() const;

void setDragEnabled(bool enable);
bool dragEnabled() const;

void setDragDropOverwriteMode(bool overwrite);
bool dragDropOverwriteMode() const;

enum DragDropMode {
NoDragDrop,
DragOnly,
DropOnly,
DragDrop,
InternalMove
};

void setDragDropMode(DragDropMode behavior);
DragDropMode dragDropMode() const;

void setDefaultDropAction(Qt::DropAction dropAction);
Qt::DropAction defaultDropAction() const;


# 187 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
void setAlternatingRowColors(bool enable);
bool alternatingRowColors() const;

void setIconSize(const QSize &size);
QSize iconSize() const;

void setTextElideMode(Qt::TextElideMode mode);
Qt::TextElideMode textElideMode() const;

virtual void keyboardSearch(const QString &search);

virtual QRect visualRect(const QModelIndex &index) const = 0;
virtual void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible) = 0;
virtual QModelIndex indexAt(const QPoint &point) const = 0;

QSize sizeHintForIndex(const QModelIndex &index) const;
virtual int sizeHintForRow(int row) const;
virtual int sizeHintForColumn(int column) const;

void openPersistentEditor(const QModelIndex &index);
void closePersistentEditor(const QModelIndex &index);

void setIndexWidget(const QModelIndex &index, QWidget *widget);
QWidget *indexWidget(const QModelIndex &index) const;

void setItemDelegateForRow(int row, QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegateForRow(int row) const;

void setItemDelegateForColumn(int column, QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegateForColumn(int column) const;

QAbstractItemDelegate *itemDelegate(const QModelIndex &index) const;

virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;


# 223 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
inline void update() { QAbstractScrollArea::update(); }




# 228 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
public slots:
virtual void reset();
virtual void setRootIndex(const QModelIndex &index);
virtual void doItemsLayout();
virtual void selectAll();
void edit(const QModelIndex &index);
void clearSelection();
void setCurrentIndex(const QModelIndex &index);
void scrollToTop();
void scrollToBottom();
void update(const QModelIndex &index);

protected slots:
virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>());
virtual void rowsInserted(const QModelIndex &parent, int start, int end);
virtual void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);
virtual void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
virtual void currentChanged(const QModelIndex &current, const QModelIndex &previous);
virtual void updateEditorData();
virtual void updateEditorGeometries();
virtual void updateGeometries();
virtual void verticalScrollbarAction(int action);
virtual void horizontalScrollbarAction(int action);
virtual void verticalScrollbarValueChanged(int value);
virtual void horizontalScrollbarValueChanged(int value);
virtual void closeEditor(QWidget *editor, QAbstractItemDelegate::EndEditHint hint);
virtual void commitData(QWidget *editor);
virtual void editorDestroyed(QObject *editor);

signals:
void pressed(const QModelIndex &index);
void clicked(const QModelIndex &index);
void doubleClicked(const QModelIndex &index);

void activated(const QModelIndex &index);
void entered(const QModelIndex &index);
void viewportEntered();

protected:
QAbstractItemView(QAbstractItemViewPrivate &, QWidget *parent = 0);

void setHorizontalStepsPerItem(int steps);
int horizontalStepsPerItem() const;
void setVerticalStepsPerItem(int steps);
int verticalStepsPerItem() const;

enum CursorAction { MoveUp, MoveDown, MoveLeft, MoveRight,
MoveHome, MoveEnd, MovePageUp, MovePageDown,
MoveNext, MovePrevious };
virtual QModelIndex moveCursor(CursorAction cursorAction,
Qt::KeyboardModifiers modifiers) = 0;

virtual int horizontalOffset() const = 0;
virtual int verticalOffset() const = 0;

virtual bool isIndexHidden(const QModelIndex &index) const = 0;

virtual void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command) = 0;
virtual QRegion visualRegionForSelection(const QItemSelection &selection) const = 0;
virtual QModelIndexList selectedIndexes() const;

virtual bool edit(const QModelIndex &index, EditTrigger trigger, QEvent *event);

virtual QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex &index,
const QEvent *event = 0) const;


# 295 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
virtual void startDrag(Qt::DropActions supportedActions);


# 298 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
virtual QStyleOptionViewItem viewOptions() const;

enum State {
NoState,
DraggingState,
DragSelectingState,
EditingState,
ExpandingState,
CollapsingState,
AnimatingState
};

State state() const;
void setState(State state);

void scheduleDelayedItemsLayout();
void executeDelayedItemsLayout();

void setDirtyRegion(const QRegion &region);
void scrollDirtyRegion(int dx, int dy);
QPoint dirtyRegionOffset() const;

void startAutoScroll();
void stopAutoScroll();
void doAutoScroll();

bool focusNextPrevChild(bool next);
bool event(QEvent *event);
bool viewportEvent(QEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void mouseDoubleClickEvent(QMouseEvent *event);

# 332 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
void dragEnterEvent(QDragEnterEvent *event);
void dragMoveEvent(QDragMoveEvent *event);
void dragLeaveEvent(QDragLeaveEvent *event);
void dropEvent(QDropEvent *event);

# 337 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
void focusInEvent(QFocusEvent *event);
void focusOutEvent(QFocusEvent *event);
void keyPressEvent(QKeyEvent *event);
void resizeEvent(QResizeEvent *event);
void timerEvent(QTimerEvent *event);
void inputMethodEvent(QInputMethodEvent *event);


# 345 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
enum DropIndicatorPosition { OnItem, AboveItem, BelowItem, OnViewport };
DropIndicatorPosition dropIndicatorPosition() const;


# 349 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
private:
inline QAbstractItemViewPrivate* d_func() { return reinterpret_cast<QAbstractItemViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractItemViewPrivate* d_func() const { return reinterpret_cast<const QAbstractItemViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractItemViewPrivate;
QAbstractItemView(const QAbstractItemView &) ; QAbstractItemView &operator=(const QAbstractItemView &) ;











# 363 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"



# 366 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"
friend class QTreeViewPrivate; 
friend class QListModeViewBase;
friend class QListViewPrivate;
};

 inline QFlags<QAbstractItemView::EditTriggers::enum_type> operator|(QAbstractItemView::EditTriggers::enum_type f1, QAbstractItemView::EditTriggers::enum_type f2) { return QFlags<QAbstractItemView::EditTriggers::enum_type>(f1) | f2; }  inline QFlags<QAbstractItemView::EditTriggers::enum_type> operator|(QAbstractItemView::EditTriggers::enum_type f1, QFlags<QAbstractItemView::EditTriggers::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QAbstractItemView::EditTriggers::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 375 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"



# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolumnview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

























































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolumnview.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolumnview.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolumnview.h"
class QColumnViewPrivate;

class  QColumnView : public QAbstractItemView {

Q_OBJECT
Q_PROPERTY(bool resizeGripsVisible READ resizeGripsVisible WRITE setResizeGripsVisible)

signals:
void updatePreviewWidget(const QModelIndex &index);

public:
explicit QColumnView(QWidget *parent = 0);
~QColumnView();


QModelIndex indexAt(const QPoint &point) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QSize sizeHint() const;
QRect visualRect(const QModelIndex &index) const;
void setModel(QAbstractItemModel *model);
void setSelectionModel(QItemSelectionModel * selectionModel);
void setRootIndex(const QModelIndex &index);
void selectAll();


void setResizeGripsVisible(bool visible);
bool resizeGripsVisible() const;

QWidget *previewWidget() const;
void setPreviewWidget(QWidget *widget);

void setColumnWidths(const QList<int> &list);
QList<int> columnWidths() const;

protected:
QColumnView(QColumnViewPrivate &dd, QWidget *parent = 0);


bool isIndexHidden(const QModelIndex &index) const;
QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
void resizeEvent(QResizeEvent *event);
void setSelection(const QRect & rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
int horizontalOffset() const;
int verticalOffset() const;
void rowsInserted(const QModelIndex &parent, int start, int end);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);


void scrollContentsBy(int dx, int dy);
virtual QAbstractItemView* createColumn(const QModelIndex &rootIndex);
void initializeColumn(QAbstractItemView *column) const;

private:
inline QColumnViewPrivate* d_func() { return reinterpret_cast<QColumnViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QColumnViewPrivate* d_func() const { return reinterpret_cast<const QColumnViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QColumnViewPrivate;
QColumnView(const QColumnView &) ; QColumnView &operator=(const QColumnView &) ;



};



# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolumnview.h"




# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatawidgetmapper.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatawidgetmapper.h"




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatawidgetmapper.h"



class QAbstractItemDelegate;
class QAbstractItemModel;
class QModelIndex;
class QDataWidgetMapperPrivate;

class  QDataWidgetMapper: public QObject
{
Q_OBJECT

Q_ENUMS(SubmitPolicy)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentIndexChanged)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(SubmitPolicy submitPolicy READ submitPolicy WRITE setSubmitPolicy)

public:
explicit QDataWidgetMapper(QObject *parent = 0);
~QDataWidgetMapper();

void setModel(QAbstractItemModel *model);
QAbstractItemModel *model() const;

void setItemDelegate(QAbstractItemDelegate *delegate);
QAbstractItemDelegate *itemDelegate() const;

void setRootIndex(const QModelIndex &index);
QModelIndex rootIndex() const;

void setOrientation(Qt::Orientation aOrientation);
Qt::Orientation orientation() const;

enum SubmitPolicy { AutoSubmit, ManualSubmit };
void setSubmitPolicy(SubmitPolicy policy);
SubmitPolicy submitPolicy() const;

void addMapping(QWidget *widget, int section);
void addMapping(QWidget *widget, int section, const QByteArray &propertyName);
void removeMapping(QWidget *widget);
int mappedSection(QWidget *widget) const;
QByteArray mappedPropertyName(QWidget *widget) const;
QWidget *mappedWidgetAt(int section) const;
void clearMapping();

int currentIndex() const;

public slots:
void revert();
bool submit();

void toFirst();
void toLast();
void toNext();
void toPrevious();
virtual void setCurrentIndex(int index);
void setCurrentModelIndex(const QModelIndex &index);

signals:
void currentIndexChanged(int index);

private:
inline QDataWidgetMapperPrivate* d_func() { return reinterpret_cast<QDataWidgetMapperPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDataWidgetMapperPrivate* d_func() const { return reinterpret_cast<const QDataWidgetMapperPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDataWidgetMapperPrivate;
QDataWidgetMapper(const QDataWidgetMapper &) ; QDataWidgetMapper &operator=(const QDataWidgetMapper &) ;




};






# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdir.h"













































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfileinfo.h"
































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"
class QFileIconProviderPrivate;

class  QFileIconProvider
{
public:
QFileIconProvider();
virtual ~QFileIconProvider();
enum IconType { Computer, Desktop, Trashcan, Network, Drive, Folder, File };
virtual QIcon icon(IconType type) const;
virtual QIcon icon(const QFileInfo &info) const;
virtual QString type(const QFileInfo &info) const;

private:
inline QFileIconProviderPrivate* d_func() { return reinterpret_cast<QFileIconProviderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFileIconProviderPrivate* d_func() const { return reinterpret_cast<const QFileIconProviderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFileIconProviderPrivate;
QScopedPointer<QFileIconProviderPrivate> d_ptr;
QFileIconProvider(const QFileIconProvider &) ; QFileIconProvider &operator=(const QFileIconProvider &) ;
};



# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"
class QDirModelPrivate;

class  QDirModel : public QAbstractItemModel
{
Q_OBJECT
Q_PROPERTY(bool resolveSymlinks READ resolveSymlinks WRITE setResolveSymlinks)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(bool lazyChildCount READ lazyChildCount WRITE setLazyChildCount)

public:
enum Roles {
FileIconRole = Qt::DecorationRole,
FilePathRole = Qt::UserRole + 1,
FileNameRole
};

QDirModel(const QStringList &nameFilters, QDir::Filters filters,
QDir::SortFlags sort, QObject *parent = 0);
explicit QDirModel(QObject *parent = 0);
~QDirModel();

QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
QModelIndex parent(const QModelIndex &child) const;

int rowCount(const QModelIndex &parent = QModelIndex()) const;
int columnCount(const QModelIndex &parent = QModelIndex()) const;

QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);

QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;

bool hasChildren(const QModelIndex &index = QModelIndex()) const;
Qt::ItemFlags flags(const QModelIndex &index) const;

void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);

QStringList mimeTypes() const;
QMimeData *mimeData(const QModelIndexList &indexes) const;
bool dropMimeData(const QMimeData *data, Qt::DropAction action,
int row, int column, const QModelIndex &parent);
Qt::DropActions supportedDropActions() const;



void setIconProvider(QFileIconProvider *provider);
QFileIconProvider *iconProvider() const;

void setNameFilters(const QStringList &filters);
QStringList nameFilters() const;

void setFilter(QDir::Filters filters);
QDir::Filters filter() const;

void setSorting(QDir::SortFlags sort);
QDir::SortFlags sorting() const;

void setResolveSymlinks(bool enable);
bool resolveSymlinks() const;

void setReadOnly(bool enable);
bool isReadOnly() const;

void setLazyChildCount(bool enable);
bool lazyChildCount() const;

QModelIndex index(const QString &path, int column = 0) const;

bool isDir(const QModelIndex &index) const;
QModelIndex mkdir(const QModelIndex &parent, const QString &name);
bool rmdir(const QModelIndex &index);
bool remove(const QModelIndex &index);

QString filePath(const QModelIndex &index) const;
QString fileName(const QModelIndex &index) const;
QIcon fileIcon(const QModelIndex &index) const;
QFileInfo fileInfo(const QModelIndex &index) const;


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"
inline QObject *parent() const { return QObject::parent(); }




# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"
public slots:
void refresh(const QModelIndex &parent = QModelIndex());

protected:
QDirModel(QDirModelPrivate &, QObject *parent = 0);
friend class QFileDialogPrivate;

private:
inline QDirModelPrivate* d_func() { return reinterpret_cast<QDirModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDirModelPrivate* d_func() const { return reinterpret_cast<const QDirModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDirModelPrivate;
QDirModel(const QDirModel &) ; QDirModel &operator=(const QDirModel &) ;

};



# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdirmodel.h"



# 32 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfileiconprovider.h"













































































# 33 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

























































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"
class QHeaderViewPrivate;
class QStyleOptionHeader;

class  QHeaderView : public QAbstractItemView
{
Q_OBJECT
Q_PROPERTY(bool showSortIndicator READ isSortIndicatorShown WRITE setSortIndicatorShown)
Q_PROPERTY(bool highlightSections READ highlightSections WRITE setHighlightSections)
Q_PROPERTY(bool stretchLastSection READ stretchLastSection WRITE setStretchLastSection)
Q_PROPERTY(bool cascadingSectionResizes READ cascadingSectionResizes WRITE setCascadingSectionResizes)
Q_PROPERTY(int defaultSectionSize READ defaultSectionSize WRITE setDefaultSectionSize)
Q_PROPERTY(int minimumSectionSize READ minimumSectionSize WRITE setMinimumSectionSize)
Q_PROPERTY(Qt::Alignment defaultAlignment READ defaultAlignment WRITE setDefaultAlignment)
Q_ENUMS(ResizeMode)

public:

enum ResizeMode
{
Interactive,
Stretch,
Fixed,
ResizeToContents,
Custom = Fixed
};

explicit QHeaderView(Qt::Orientation orientation, QWidget *parent = 0);
virtual ~QHeaderView();

void setModel(QAbstractItemModel *model);

Qt::Orientation orientation() const;
int offset() const;
int length() const;
QSize sizeHint() const;
int sectionSizeHint(int logicalIndex) const;

int visualIndexAt(int position) const;
int logicalIndexAt(int position) const;

inline int logicalIndexAt(int x, int y) const;
inline int logicalIndexAt(const QPoint &pos) const;

int sectionSize(int logicalIndex) const;
int sectionPosition(int logicalIndex) const;
int sectionViewportPosition(int logicalIndex) const;

void moveSection(int from, int to);
void swapSections(int first, int second);
void resizeSection(int logicalIndex, int size);
void resizeSections(QHeaderView::ResizeMode mode);

bool isSectionHidden(int logicalIndex) const;
void setSectionHidden(int logicalIndex, bool hide);
int hiddenSectionCount() const;

inline void hideSection(int logicalIndex);
inline void showSection(int logicalIndex);

int count() const;
int visualIndex(int logicalIndex) const;
int logicalIndex(int visualIndex) const;

void setSectionsMovable(bool movable);
bool sectionsMovable() const;





# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"
void setSectionsClickable(bool clickable);
bool sectionsClickable() const;





# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"
void setHighlightSections(bool highlight);
bool highlightSections() const;

ResizeMode sectionResizeMode(int logicalIndex) const;
void setSectionResizeMode(ResizeMode mode);
void setSectionResizeMode(int logicalIndex, ResizeMode mode);









# 144 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"
int stretchSectionCount() const;

void setSortIndicatorShown(bool show);
bool isSortIndicatorShown() const;

void setSortIndicator(int logicalIndex, Qt::SortOrder order);
int sortIndicatorSection() const;
Qt::SortOrder sortIndicatorOrder() const;

bool stretchLastSection() const;
void setStretchLastSection(bool stretch);

bool cascadingSectionResizes() const;
void setCascadingSectionResizes(bool enable);

int defaultSectionSize() const;
void setDefaultSectionSize(int size);

int minimumSectionSize() const;
void setMinimumSectionSize(int size);

Qt::Alignment defaultAlignment() const;
void setDefaultAlignment(Qt::Alignment alignment);

void doItemsLayout();
bool sectionsMoved() const;
bool sectionsHidden() const;


# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"
QByteArray saveState() const;
bool restoreState(const QByteArray &state);


# 177 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"
void reset();

public slots:
void setOffset(int offset);
void setOffsetToSectionPosition(int visualIndex);
void setOffsetToLastSection();
void headerDataChanged(Qt::Orientation orientation, int logicalFirst, int logicalLast);

signals:
void sectionMoved(int logicalIndex, int oldVisualIndex, int newVisualIndex);
void sectionResized(int logicalIndex, int oldSize, int newSize);
void sectionPressed(int logicalIndex);
void sectionClicked(int logicalIndex);
void sectionEntered(int logicalIndex);
void sectionDoubleClicked(int logicalIndex);
void sectionCountChanged(int oldCount, int newCount);
void sectionHandleDoubleClicked(int logicalIndex);
void geometriesChanged();
void sortIndicatorChanged(int logicalIndex, Qt::SortOrder order);

protected slots:
void updateSection(int logicalIndex);
void resizeSections();
void sectionsInserted(const QModelIndex &parent, int logicalFirst, int logicalLast);
void sectionsAboutToBeRemoved(const QModelIndex &parent, int logicalFirst, int logicalLast);

protected:
QHeaderView(QHeaderViewPrivate &dd, Qt::Orientation orientation, QWidget *parent = 0);
void initialize();

void initializeSections();
void initializeSections(int start, int end);
void currentChanged(const QModelIndex &current, const QModelIndex &old);

bool event(QEvent *e);
void paintEvent(QPaintEvent *e);
void mousePressEvent(QMouseEvent *e);
void mouseMoveEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);
void mouseDoubleClickEvent(QMouseEvent *e);
bool viewportEvent(QEvent *e);

virtual void paintSection(QPainter *painter, const QRect &rect, int logicalIndex) const;
virtual QSize sectionSizeFromContents(int logicalIndex) const;

int horizontalOffset() const;
int verticalOffset() const;
void updateGeometries();
void scrollContentsBy(int dx, int dy);

void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>());
void rowsInserted(const QModelIndex &parent, int start, int end);

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint);

QModelIndex indexAt(const QPoint &p) const;
bool isIndexHidden(const QModelIndex &index) const;

QModelIndex moveCursor(CursorAction, Qt::KeyboardModifiers);
void setSelection(const QRect& rect, QItemSelectionModel::SelectionFlags flags);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
void initStyleOption(QStyleOptionHeader *option) const;

friend class QTableView;
friend class QTreeView;

private:


inline QHeaderViewPrivate* d_func() { return reinterpret_cast<QHeaderViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QHeaderViewPrivate* d_func() const { return reinterpret_cast<const QHeaderViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QHeaderViewPrivate;
QHeaderView(const QHeaderView &) ; QHeaderView &operator=(const QHeaderView &) ;
};

inline int QHeaderView::logicalIndexAt(int ax, int ay) const
{ return orientation() == Qt::Horizontal ? logicalIndexAt(ax) : logicalIndexAt(ay); }
inline int QHeaderView::logicalIndexAt(const QPoint &apos) const
{ return logicalIndexAt(apos.x(), apos.y()); }
inline void QHeaderView::hideSection(int alogicalIndex)
{ setSectionHidden(alogicalIndex, true); }
inline void QHeaderView::showSection(int alogicalIndex)
{ setSectionHidden(alogicalIndex, false); }



# 262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qheaderview.h"



# 34 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"




































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"
class QItemDelegatePrivate;
class QItemEditorFactory;

class  QItemDelegate : public QAbstractItemDelegate
{
Q_OBJECT
Q_PROPERTY(bool clipping READ hasClipping WRITE setClipping)

public:
explicit QItemDelegate(QObject *parent = 0);
~QItemDelegate();

bool hasClipping() const;
void setClipping(bool clip);


void paint(QPainter *painter,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;
QSize sizeHint(const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QWidget *createEditor(QWidget *parent,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;

void setEditorData(QWidget *editor, const QModelIndex &index) const;
void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const;

void updateEditorGeometry(QWidget *editor,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QItemEditorFactory *itemEditorFactory() const;
void setItemEditorFactory(QItemEditorFactory *factory);

protected:
virtual void drawDisplay(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect, const QString &text) const;
virtual void drawDecoration(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect, const QPixmap &pixmap) const;
virtual void drawFocus(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect) const;
virtual void drawCheck(QPainter *painter, const QStyleOptionViewItem &option,
const QRect &rect, Qt::CheckState state) const;
void drawBackground(QPainter *painter, const QStyleOptionViewItem &option,
const QModelIndex &index) const;

void doLayout(const QStyleOptionViewItem &option,
QRect *checkRect, QRect *iconRect, QRect *textRect, bool hint) const;

QRect rect(const QStyleOptionViewItem &option, const QModelIndex &index, int role) const;

bool eventFilter(QObject *object, QEvent *event);
bool editorEvent(QEvent *event, QAbstractItemModel *model,
const QStyleOptionViewItem &option, const QModelIndex &index);

QStyleOptionViewItem setOptions(const QModelIndex &index,
const QStyleOptionViewItem &option) const;

QPixmap decoration(const QStyleOptionViewItem &option, const QVariant &variant) const;
QPixmap *selected(const QPixmap &pixmap, const QPalette &palette, bool enabled) const;

QRect doCheck(const QStyleOptionViewItem &option, const QRect &bounding,
const QVariant &variant) const;
QRect textRectangle(QPainter *painter, const QRect &rect,
const QFont &font, const QString &text) const;

private:
inline QItemDelegatePrivate* d_func() { return reinterpret_cast<QItemDelegatePrivate *>(qGetPtrHelper(d_ptr)); } inline const QItemDelegatePrivate* d_func() const { return reinterpret_cast<const QItemDelegatePrivate *>(qGetPtrHelper(d_ptr)); } friend class QItemDelegatePrivate;
QItemDelegate(const QItemDelegate &) ; QItemDelegate &operator=(const QItemDelegate &) ;


};



# 134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemdelegate.h"



# 35 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"



















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"
class QWidget;

class  QItemEditorCreatorBase
{
public:
virtual ~QItemEditorCreatorBase();

virtual QWidget *createWidget(QWidget *parent) const = 0;
virtual QByteArray valuePropertyName() const = 0;
};

template <class T>
class QItemEditorCreator : public QItemEditorCreatorBase
{
public:
inline explicit QItemEditorCreator(const QByteArray &valuePropertyName);
inline QWidget *createWidget(QWidget *parent) const { return new T(parent); }
inline QByteArray valuePropertyName() const { return propertyName; }

private:
QByteArray propertyName;
};

template <class T>
class QStandardItemEditorCreator: public QItemEditorCreatorBase
{
public:
inline QStandardItemEditorCreator()
: propertyName(T::staticMetaObject.userProperty().name())
{}
inline QWidget *createWidget(QWidget *parent) const { return new T(parent); }
inline QByteArray valuePropertyName() const { return propertyName; }

private:
QByteArray propertyName;
};


template <class T>
inline QItemEditorCreator<T>::QItemEditorCreator(const QByteArray &avaluePropertyName)
: propertyName(avaluePropertyName) {}

class  QItemEditorFactory
{
public:
inline QItemEditorFactory() {}
virtual ~QItemEditorFactory();

virtual QWidget *createEditor(int userType, QWidget *parent) const;
virtual QByteArray valuePropertyName(int userType) const;

void registerEditor(int userType, QItemEditorCreatorBase *creator);

static const QItemEditorFactory *defaultFactory();
static void setDefaultFactory(QItemEditorFactory *factory);

private:
QHash<int, QItemEditorCreatorBase *> creatorMap;
};



# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qitemeditorfactory.h"



# 36 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

























































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"
class QListViewPrivate;

class  QListView : public QAbstractItemView
{
Q_OBJECT
Q_ENUMS(Movement Flow ResizeMode LayoutMode ViewMode)
Q_PROPERTY(Movement movement READ movement WRITE setMovement)
Q_PROPERTY(Flow flow READ flow WRITE setFlow)
Q_PROPERTY(bool isWrapping READ isWrapping WRITE setWrapping)
Q_PROPERTY(ResizeMode resizeMode READ resizeMode WRITE setResizeMode)
Q_PROPERTY(LayoutMode layoutMode READ layoutMode WRITE setLayoutMode)
Q_PROPERTY(int spacing READ spacing WRITE setSpacing)
Q_PROPERTY(QSize gridSize READ gridSize WRITE setGridSize)
Q_PROPERTY(ViewMode viewMode READ viewMode WRITE setViewMode)
Q_PROPERTY(int modelColumn READ modelColumn WRITE setModelColumn)
Q_PROPERTY(bool uniformItemSizes READ uniformItemSizes WRITE setUniformItemSizes)
Q_PROPERTY(int batchSize READ batchSize WRITE setBatchSize)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(bool selectionRectVisible READ isSelectionRectVisible WRITE setSelectionRectVisible)

public:
enum Movement { Static, Free, Snap };
enum Flow { LeftToRight, TopToBottom };
enum ResizeMode { Fixed, Adjust };
enum LayoutMode { SinglePass, Batched };
enum ViewMode { ListMode, IconMode };

explicit QListView(QWidget *parent = 0);
~QListView();

void setMovement(Movement movement);
Movement movement() const;

void setFlow(Flow flow);
Flow flow() const;

void setWrapping(bool enable);
bool isWrapping() const;

void setResizeMode(ResizeMode mode);
ResizeMode resizeMode() const;

void setLayoutMode(LayoutMode mode);
LayoutMode layoutMode() const;

void setSpacing(int space);
int spacing() const;

void setBatchSize(int batchSize);
int batchSize() const;

void setGridSize(const QSize &size);
QSize gridSize() const;

void setViewMode(ViewMode mode);
ViewMode viewMode() const;

void clearPropertyFlags();

bool isRowHidden(int row) const;
void setRowHidden(int row, bool hide);

void setModelColumn(int column);
int modelColumn() const;

void setUniformItemSizes(bool enable);
bool uniformItemSizes() const;

void setWordWrap(bool on);
bool wordWrap() const;

void setSelectionRectVisible(bool show);
bool isSelectionRectVisible() const;

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QModelIndex indexAt(const QPoint &p) const;

void doItemsLayout();
void reset();
void setRootIndex(const QModelIndex &index);

signals:
void indexesMoved(const QModelIndexList &indexes);

protected:
QListView(QListViewPrivate &, QWidget *parent = 0);

bool event(QEvent *e);

void scrollContentsBy(int dx, int dy);

void resizeContents(int width, int height);
QSize contentsSize() const;

void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>());
void rowsInserted(const QModelIndex &parent, int start, int end);
void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);

void mouseMoveEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);

void timerEvent(QTimerEvent *e);
void resizeEvent(QResizeEvent *e);

# 157 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"
void dragMoveEvent(QDragMoveEvent *e);
void dragLeaveEvent(QDragLeaveEvent *e);
void dropEvent(QDropEvent *e);
void startDrag(Qt::DropActions supportedActions);


# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"
QStyleOptionViewItem viewOptions() const;
void paintEvent(QPaintEvent *e);

int horizontalOffset() const;
int verticalOffset() const;
QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
QRect rectForIndex(const QModelIndex &index) const;
void setPositionForIndex(const QPoint &position, const QModelIndex &index);

void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
QModelIndexList selectedIndexes() const;

void updateGeometries();

bool isIndexHidden(const QModelIndex &index) const;

void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);

private:
int visualIndex(const QModelIndex &index) const;

inline QListViewPrivate* d_func() { return reinterpret_cast<QListViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QListViewPrivate* d_func() const { return reinterpret_cast<const QListViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QListViewPrivate;
QListView(const QListView &) ; QListView &operator=(const QListView &) ;
};



# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"



# 37 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"


































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qitemselectionmodel.h"






























































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
class QListWidget;
class QListModel;
class QWidgetItemData;
class QListWidgetItemPrivate;

class  QListWidgetItem
{
friend class QListModel;
friend class QListWidget;
public:
enum ItemType { Type = 0, UserType = 1000 };
explicit QListWidgetItem(QListWidget *view = 0, int type = Type);
explicit QListWidgetItem(const QString &text, QListWidget *view = 0, int type = Type);
explicit QListWidgetItem(const QIcon &icon, const QString &text,
QListWidget *view = 0, int type = Type);
QListWidgetItem(const QListWidgetItem &other);
virtual ~QListWidgetItem();

virtual QListWidgetItem *clone() const;

inline QListWidget *listWidget() const { return view; }

inline void setSelected(bool select);
inline bool isSelected() const;

inline void setHidden(bool hide);
inline bool isHidden() const;

inline Qt::ItemFlags flags() const { return itemFlags; }
void setFlags(Qt::ItemFlags flags);

inline QString text() const
{ return data(Qt::DisplayRole).toString(); }
inline void setText(const QString &text);

inline QIcon icon() const
{ return qvariant_cast<QIcon>(data(Qt::DecorationRole)); }
inline void setIcon(const QIcon &icon);

inline QString statusTip() const
{ return data(Qt::StatusTipRole).toString(); }
inline void setStatusTip(const QString &statusTip);


# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
inline QString toolTip() const
{ return data(Qt::ToolTipRole).toString(); }
inline void setToolTip(const QString &toolTip);



# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
inline QString whatsThis() const
{ return data(Qt::WhatsThisRole).toString(); }
inline void setWhatsThis(const QString &whatsThis);


# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
inline QFont font() const
{ return qvariant_cast<QFont>(data(Qt::FontRole)); }
inline void setFont(const QFont &font);

inline int textAlignment() const
{ return data(Qt::TextAlignmentRole).toInt(); }
inline void setTextAlignment(int alignment)
{ setData(Qt::TextAlignmentRole, alignment); }

inline QColor backgroundColor() const
{ return qvariant_cast<QColor>(data(Qt::BackgroundColorRole)); }
virtual void setBackgroundColor(const QColor &color)
{ setData(Qt::BackgroundColorRole, color); }

inline QBrush background() const
{ return qvariant_cast<QBrush>(data(Qt::BackgroundRole)); }
inline void setBackground(const QBrush &brush)
{ setData(Qt::BackgroundRole, brush); }

inline QColor textColor() const
{ return qvariant_cast<QColor>(data(Qt::TextColorRole)); }
inline void setTextColor(const QColor &color)
{ setData(Qt::TextColorRole, color); }

inline QBrush foreground() const
{ return qvariant_cast<QBrush>(data(Qt::ForegroundRole)); }
inline void setForeground(const QBrush &brush)
{ setData(Qt::ForegroundRole, brush); }

inline Qt::CheckState checkState() const
{ return static_cast<Qt::CheckState>(data(Qt::CheckStateRole).toInt()); }
inline void setCheckState(Qt::CheckState state)
{ setData(Qt::CheckStateRole, static_cast<int>(state)); }

inline QSize sizeHint() const
{ return qvariant_cast<QSize>(data(Qt::SizeHintRole)); }
inline void setSizeHint(const QSize &size)
{ setData(Qt::SizeHintRole, size); }

virtual QVariant data(int role) const;
virtual void setData(int role, const QVariant &value);

virtual bool operator<(const QListWidgetItem &other) const;


# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
QListWidgetItem &operator=(const QListWidgetItem &other);

inline int type() const { return rtti; }

private:
int rtti;
QVector<void *> dummy;
QListWidget *view;
QListWidgetItemPrivate *d;
Qt::ItemFlags itemFlags;
};

inline void QListWidgetItem::setText(const QString &atext)
{ setData(Qt::DisplayRole, atext); }

inline void QListWidgetItem::setIcon(const QIcon &aicon)
{ setData(Qt::DecorationRole, aicon); }

inline void QListWidgetItem::setStatusTip(const QString &astatusTip)
{ setData(Qt::StatusTipRole, astatusTip); }


# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
inline void QListWidgetItem::setToolTip(const QString &atoolTip)
{ setData(Qt::ToolTipRole, atoolTip); }



# 185 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
inline void QListWidgetItem::setWhatsThis(const QString &awhatsThis)
{ setData(Qt::WhatsThisRole, awhatsThis); }


# 189 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
inline void QListWidgetItem::setFont(const QFont &afont)
{ setData(Qt::FontRole, afont); }


# 193 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
 QDataStream &operator<<(QDataStream &out, const QListWidgetItem &item);
 QDataStream &operator>>(QDataStream &in, QListWidgetItem &item);


# 197 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
class QListWidgetPrivate;

class  QListWidget : public QListView
{
Q_OBJECT
Q_PROPERTY(int count READ count)
Q_PROPERTY(int currentRow READ currentRow WRITE setCurrentRow NOTIFY currentRowChanged USER true)
Q_PROPERTY(bool sortingEnabled READ isSortingEnabled WRITE setSortingEnabled)

friend class QListWidgetItem;
friend class QListModel;
public:
explicit QListWidget(QWidget *parent = 0);
~QListWidget();

QListWidgetItem *item(int row) const;
int row(const QListWidgetItem *item) const;
void insertItem(int row, QListWidgetItem *item);
void insertItem(int row, const QString &label);
void insertItems(int row, const QStringList &labels);
inline void addItem(const QString &label) { insertItem(count(), label); }
inline void addItem(QListWidgetItem *item);
inline void addItems(const QStringList &labels) { insertItems(count(), labels); }
QListWidgetItem *takeItem(int row);
int count() const;

QListWidgetItem *currentItem() const;
void setCurrentItem(QListWidgetItem *item);
void setCurrentItem(QListWidgetItem *item, QItemSelectionModel::SelectionFlags command);

int currentRow() const;
void setCurrentRow(int row);
void setCurrentRow(int row, QItemSelectionModel::SelectionFlags command);

QListWidgetItem *itemAt(const QPoint &p) const;
inline QListWidgetItem *itemAt(int x, int y) const;
QRect visualItemRect(const QListWidgetItem *item) const;

void sortItems(Qt::SortOrder order = Qt::AscendingOrder);
void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void editItem(QListWidgetItem *item);
void openPersistentEditor(QListWidgetItem *item);
void closePersistentEditor(QListWidgetItem *item);

QWidget *itemWidget(QListWidgetItem *item) const;
void setItemWidget(QListWidgetItem *item, QWidget *widget);
inline void removeItemWidget(QListWidgetItem *item);

bool isItemSelected(const QListWidgetItem *item) const;
void setItemSelected(const QListWidgetItem *item, bool select);
QList<QListWidgetItem*> selectedItems() const;
QList<QListWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags) const;

bool isItemHidden(const QListWidgetItem *item) const;
void setItemHidden(const QListWidgetItem *item, bool hide);
void dropEvent(QDropEvent *event);

public slots:
void scrollToItem(const QListWidgetItem *item, QAbstractItemView::ScrollHint hint = EnsureVisible);
void clear();

signals:
void itemPressed(QListWidgetItem *item);
void itemClicked(QListWidgetItem *item);
void itemDoubleClicked(QListWidgetItem *item);
void itemActivated(QListWidgetItem *item);
void itemEntered(QListWidgetItem *item);
void itemChanged(QListWidgetItem *item);

void currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous);
void currentTextChanged(const QString &currentText);
void currentRowChanged(int currentRow);

void itemSelectionChanged();

protected:
bool event(QEvent *e);
virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QList<QListWidgetItem*> items) const;

# 279 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
virtual bool dropMimeData(int index, const QMimeData *data, Qt::DropAction action);
virtual Qt::DropActions supportedDropActions() const;

# 282 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"
QList<QListWidgetItem*> items(const QMimeData *data) const;

QModelIndex indexFromItem(QListWidgetItem *item) const;
QListWidgetItem *itemFromIndex(const QModelIndex &index) const;

private:
void setModel(QAbstractItemModel *model);
Qt::SortOrder sortOrder() const;

inline QListWidgetPrivate* d_func() { return reinterpret_cast<QListWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QListWidgetPrivate* d_func() const { return reinterpret_cast<const QListWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QListWidgetPrivate;
QListWidget(const QListWidget &) ; QListWidget &operator=(const QListWidget &) ;










};

inline void QListWidget::removeItemWidget(QListWidgetItem *aItem)
{ setItemWidget(aItem, 0); }

inline void QListWidget::addItem(QListWidgetItem *aitem)
{ insertItem(count(), aitem); }

inline QListWidgetItem *QListWidget::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }

inline void QListWidgetItem::setSelected(bool aselect)
{ if (view) view->setItemSelected(this, aselect); }

inline bool QListWidgetItem::isSelected() const
{ return (view ? view->isItemSelected(this) : false); }

inline void QListWidgetItem::setHidden(bool ahide)
{ if (view) view->setItemHidden(this, ahide); }

inline bool QListWidgetItem::isHidden() const
{ return (view ? view->isItemHidden(this) : false); }



# 328 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistwidget.h"



# 38 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"




































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"
class QStyledItemDelegatePrivate;
class QItemEditorFactory;

class  QStyledItemDelegate : public QAbstractItemDelegate
{
Q_OBJECT

public:
explicit QStyledItemDelegate(QObject *parent = 0);
~QStyledItemDelegate();


void paint(QPainter *painter,
const QStyleOptionViewItem &option, const QModelIndex &index) const;
QSize sizeHint(const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QWidget *createEditor(QWidget *parent,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;

void setEditorData(QWidget *editor, const QModelIndex &index) const;
void setModelData(QWidget *editor,
QAbstractItemModel *model,
const QModelIndex &index) const;

void updateEditorGeometry(QWidget *editor,
const QStyleOptionViewItem &option,
const QModelIndex &index) const;


QItemEditorFactory *itemEditorFactory() const;
void setItemEditorFactory(QItemEditorFactory *factory);

virtual QString displayText(const QVariant &value, const QLocale &locale) const;

protected:
virtual void initStyleOption(QStyleOptionViewItem *option,
const QModelIndex &index) const;

bool eventFilter(QObject *object, QEvent *event);
bool editorEvent(QEvent *event, QAbstractItemModel *model,
const QStyleOptionViewItem &option, const QModelIndex &index);

private:
inline QStyledItemDelegatePrivate* d_func() { return reinterpret_cast<QStyledItemDelegatePrivate *>(qGetPtrHelper(d_ptr)); } inline const QStyledItemDelegatePrivate* d_func() const { return reinterpret_cast<const QStyledItemDelegatePrivate *>(qGetPtrHelper(d_ptr)); } friend class QStyledItemDelegatePrivate;
QStyledItemDelegate(const QStyledItemDelegate &) ; QStyledItemDelegate &operator=(const QStyledItemDelegate &) ;


};



# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleditemdelegate.h"



# 39 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtableview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

























































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtableview.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtableview.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtableview.h"
class QHeaderView;
class QTableViewPrivate;

class  QTableView : public QAbstractItemView
{
Q_OBJECT
Q_PROPERTY(bool showGrid READ showGrid WRITE setShowGrid)
Q_PROPERTY(Qt::PenStyle gridStyle READ gridStyle WRITE setGridStyle)
Q_PROPERTY(bool sortingEnabled READ isSortingEnabled WRITE setSortingEnabled)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(bool cornerButtonEnabled READ isCornerButtonEnabled WRITE setCornerButtonEnabled)

public:
explicit QTableView(QWidget *parent = 0);
~QTableView();

void setModel(QAbstractItemModel *model);
void setRootIndex(const QModelIndex &index);
void setSelectionModel(QItemSelectionModel *selectionModel);
void doItemsLayout();

QHeaderView *horizontalHeader() const;
QHeaderView *verticalHeader() const;
void setHorizontalHeader(QHeaderView *header);
void setVerticalHeader(QHeaderView *header);

int rowViewportPosition(int row) const;
int rowAt(int y) const;

void setRowHeight(int row, int height);
int rowHeight(int row) const;

int columnViewportPosition(int column) const;
int columnAt(int x) const;

void setColumnWidth(int column, int width);
int columnWidth(int column) const;

bool isRowHidden(int row) const;
void setRowHidden(int row, bool hide);

bool isColumnHidden(int column) const;
void setColumnHidden(int column, bool hide);

void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

bool showGrid() const;

Qt::PenStyle gridStyle() const;
void setGridStyle(Qt::PenStyle style);

void setWordWrap(bool on);
bool wordWrap() const;

void setCornerButtonEnabled(bool enable);
bool isCornerButtonEnabled() const;

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QModelIndex indexAt(const QPoint &p) const;

void setSpan(int row, int column, int rowSpan, int columnSpan);
int rowSpan(int row, int column) const;
int columnSpan(int row, int column) const;
void clearSpans();

void sortByColumn(int column, Qt::SortOrder order);

public slots:
void selectRow(int row);
void selectColumn(int column);
void hideRow(int row);
void hideColumn(int column);
void showRow(int row);
void showColumn(int column);
void resizeRowToContents(int row);
void resizeRowsToContents();
void resizeColumnToContents(int column);
void resizeColumnsToContents();
void sortByColumn(int column);
void setShowGrid(bool show);

protected slots:
void rowMoved(int row, int oldIndex, int newIndex);
void columnMoved(int column, int oldIndex, int newIndex);
void rowResized(int row, int oldHeight, int newHeight);
void columnResized(int column, int oldWidth, int newWidth);
void rowCountChanged(int oldCount, int newCount);
void columnCountChanged(int oldCount, int newCount);

protected:
QTableView(QTableViewPrivate &, QWidget *parent);
void scrollContentsBy(int dx, int dy);

QStyleOptionViewItem viewOptions() const;
void paintEvent(QPaintEvent *e);

void timerEvent(QTimerEvent *event);

int horizontalOffset() const;
int verticalOffset() const;
QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);

void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
QModelIndexList selectedIndexes() const;

void updateGeometries();

int sizeHintForRow(int row) const;
int sizeHintForColumn(int column) const;

void verticalScrollbarAction(int action);
void horizontalScrollbarAction(int action);

bool isIndexHidden(const QModelIndex &index) const;

void selectionChanged(const QItemSelection &selected,
const QItemSelection &deselected);
void currentChanged(const QModelIndex &current,
const QModelIndex &previous);

private:
friend class QAccessibleItemView;
int visualIndex(const QModelIndex &index) const;

inline QTableViewPrivate* d_func() { return reinterpret_cast<QTableViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTableViewPrivate* d_func() const { return reinterpret_cast<const QTableViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTableViewPrivate;
QTableView(const QTableView &) ; QTableView &operator=(const QTableView &) ;






};



# 191 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtableview.h"



# 40 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtableview.h"

































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"







# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
class  QTableWidgetSelectionRange
{
public:
QTableWidgetSelectionRange();
QTableWidgetSelectionRange(int top, int left, int bottom, int right);
QTableWidgetSelectionRange(const QTableWidgetSelectionRange &other);
~QTableWidgetSelectionRange();

inline int topRow() const { return top; }
inline int bottomRow() const { return bottom; }
inline int leftColumn() const { return left; }
inline int rightColumn() const { return right; }
inline int rowCount() const { return bottom - top + 1; }
inline int columnCount() const { return right - left + 1; }

private:
int top, left, bottom, right;
};

class QTableWidget;
class QTableModel;
class QWidgetItemData;
class QTableWidgetItemPrivate;

class  QTableWidgetItem
{
friend class QTableWidget;
friend class QTableModel;
public:
enum ItemType { Type = 0, UserType = 1000 };
explicit QTableWidgetItem(int type = Type);
explicit QTableWidgetItem(const QString &text, int type = Type);
explicit QTableWidgetItem(const QIcon &icon, const QString &text, int type = Type);
QTableWidgetItem(const QTableWidgetItem &other);
virtual ~QTableWidgetItem();

virtual QTableWidgetItem *clone() const;

inline QTableWidget *tableWidget() const { return view; }

inline int row() const;
inline int column() const;

inline void setSelected(bool select);
inline bool isSelected() const;

inline Qt::ItemFlags flags() const { return itemFlags; }
void setFlags(Qt::ItemFlags flags);

inline QString text() const
{ return data(Qt::DisplayRole).toString(); }
inline void setText(const QString &text);

inline QIcon icon() const
{ return qvariant_cast<QIcon>(data(Qt::DecorationRole)); }
inline void setIcon(const QIcon &icon);

inline QString statusTip() const
{ return data(Qt::StatusTipRole).toString(); }
inline void setStatusTip(const QString &statusTip);


# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
inline QString toolTip() const
{ return data(Qt::ToolTipRole).toString(); }
inline void setToolTip(const QString &toolTip);



# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
inline QString whatsThis() const
{ return data(Qt::WhatsThisRole).toString(); }
inline void setWhatsThis(const QString &whatsThis);


# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
inline QFont font() const
{ return qvariant_cast<QFont>(data(Qt::FontRole)); }
inline void setFont(const QFont &font);

inline int textAlignment() const
{ return data(Qt::TextAlignmentRole).toInt(); }
inline void setTextAlignment(int alignment)
{ setData(Qt::TextAlignmentRole, alignment); }

inline QColor backgroundColor() const
{ return qvariant_cast<QColor>(data(Qt::BackgroundColorRole)); }
inline void setBackgroundColor(const QColor &color)
{ setData(Qt::BackgroundColorRole, color); }

inline QBrush background() const
{ return qvariant_cast<QBrush>(data(Qt::BackgroundRole)); }
inline void setBackground(const QBrush &brush)
{ setData(Qt::BackgroundRole, brush); }

inline QColor textColor() const
{ return qvariant_cast<QColor>(data(Qt::TextColorRole)); }
inline void setTextColor(const QColor &color)
{ setData(Qt::TextColorRole, color); }

inline QBrush foreground() const
{ return qvariant_cast<QBrush>(data(Qt::ForegroundRole)); }
inline void setForeground(const QBrush &brush)
{ setData(Qt::ForegroundRole, brush); }

inline Qt::CheckState checkState() const
{ return static_cast<Qt::CheckState>(data(Qt::CheckStateRole).toInt()); }
inline void setCheckState(Qt::CheckState state)
{ setData(Qt::CheckStateRole, state); }

inline QSize sizeHint() const
{ return qvariant_cast<QSize>(data(Qt::SizeHintRole)); }
inline void setSizeHint(const QSize &size)
{ setData(Qt::SizeHintRole, size); }

virtual QVariant data(int role) const;
virtual void setData(int role, const QVariant &value);

virtual bool operator<(const QTableWidgetItem &other) const;


# 173 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 176 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
QTableWidgetItem &operator=(const QTableWidgetItem &other);

inline int type() const { return rtti; }

private:
int rtti;
QVector<QWidgetItemData> values;
QTableWidget *view;
QTableWidgetItemPrivate *d;
Qt::ItemFlags itemFlags;
};

inline void QTableWidgetItem::setText(const QString &atext)
{ setData(Qt::DisplayRole, atext); }

inline void QTableWidgetItem::setIcon(const QIcon &aicon)
{ setData(Qt::DecorationRole, aicon); }

inline void QTableWidgetItem::setStatusTip(const QString &astatusTip)
{ setData(Qt::StatusTipRole, astatusTip); }


# 198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
inline void QTableWidgetItem::setToolTip(const QString &atoolTip)
{ setData(Qt::ToolTipRole, atoolTip); }



# 203 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
inline void QTableWidgetItem::setWhatsThis(const QString &awhatsThis)
{ setData(Qt::WhatsThisRole, awhatsThis); }


# 207 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
inline void QTableWidgetItem::setFont(const QFont &afont)
{ setData(Qt::FontRole, afont); }


# 211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
 QDataStream &operator>>(QDataStream &in, QTableWidgetItem &item);
 QDataStream &operator<<(QDataStream &out, const QTableWidgetItem &item);


# 215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"
class QTableWidgetPrivate;

class  QTableWidget : public QTableView
{
Q_OBJECT
Q_PROPERTY(int rowCount READ rowCount WRITE setRowCount)
Q_PROPERTY(int columnCount READ columnCount WRITE setColumnCount)

friend class QTableModel;
public:
explicit QTableWidget(QWidget *parent = 0);
QTableWidget(int rows, int columns, QWidget *parent = 0);
~QTableWidget();

void setRowCount(int rows);
int rowCount() const;

void setColumnCount(int columns);
int columnCount() const;

int row(const QTableWidgetItem *item) const;
int column(const QTableWidgetItem *item) const;

QTableWidgetItem *item(int row, int column) const;
void setItem(int row, int column, QTableWidgetItem *item);
QTableWidgetItem *takeItem(int row, int column);

QTableWidgetItem *verticalHeaderItem(int row) const;
void setVerticalHeaderItem(int row, QTableWidgetItem *item);
QTableWidgetItem *takeVerticalHeaderItem(int row);

QTableWidgetItem *horizontalHeaderItem(int column) const;
void setHorizontalHeaderItem(int column, QTableWidgetItem *item);
QTableWidgetItem *takeHorizontalHeaderItem(int column);
void setVerticalHeaderLabels(const QStringList &labels);
void setHorizontalHeaderLabels(const QStringList &labels);

int currentRow() const;
int currentColumn() const;
QTableWidgetItem *currentItem() const;
void setCurrentItem(QTableWidgetItem *item);
void setCurrentItem(QTableWidgetItem *item, QItemSelectionModel::SelectionFlags command);
void setCurrentCell(int row, int column);
void setCurrentCell(int row, int column, QItemSelectionModel::SelectionFlags command);

void sortItems(int column, Qt::SortOrder order = Qt::AscendingOrder);
void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void editItem(QTableWidgetItem *item);
void openPersistentEditor(QTableWidgetItem *item);
void closePersistentEditor(QTableWidgetItem *item);

QWidget *cellWidget(int row, int column) const;
void setCellWidget(int row, int column, QWidget *widget);
inline void removeCellWidget(int row, int column);

bool isItemSelected(const QTableWidgetItem *item) const;
void setItemSelected(const QTableWidgetItem *item, bool select);
void setRangeSelected(const QTableWidgetSelectionRange &range, bool select);

QList<QTableWidgetSelectionRange> selectedRanges() const;
QList<QTableWidgetItem*> selectedItems() const;
QList<QTableWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags) const;

int visualRow(int logicalRow) const;
int visualColumn(int logicalColumn) const;

QTableWidgetItem *itemAt(const QPoint &p) const;
inline QTableWidgetItem *itemAt(int x, int y) const;
QRect visualItemRect(const QTableWidgetItem *item) const;

const QTableWidgetItem *itemPrototype() const;
void setItemPrototype(const QTableWidgetItem *item);

public slots:
void scrollToItem(const QTableWidgetItem *item, QAbstractItemView::ScrollHint hint = EnsureVisible);
void insertRow(int row);
void insertColumn(int column);
void removeRow(int row);
void removeColumn(int column);
void clear();
void clearContents();

signals:
void itemPressed(QTableWidgetItem *item);
void itemClicked(QTableWidgetItem *item);
void itemDoubleClicked(QTableWidgetItem *item);

void itemActivated(QTableWidgetItem *item);
void itemEntered(QTableWidgetItem *item);
void itemChanged(QTableWidgetItem *item);

void currentItemChanged(QTableWidgetItem *current, QTableWidgetItem *previous);
void itemSelectionChanged();

void cellPressed(int row, int column);
void cellClicked(int row, int column);
void cellDoubleClicked(int row, int column);

void cellActivated(int row, int column);
void cellEntered(int row, int column);
void cellChanged(int row, int column);

void currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn);

protected:
bool event(QEvent *e);
virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QList<QTableWidgetItem*> items) const;
virtual bool dropMimeData(int row, int column, const QMimeData *data, Qt::DropAction action);
virtual Qt::DropActions supportedDropActions() const;
QList<QTableWidgetItem*> items(const QMimeData *data) const;

QModelIndex indexFromItem(QTableWidgetItem *item) const;
QTableWidgetItem *itemFromIndex(const QModelIndex &index) const;
void dropEvent(QDropEvent *event);

private:
void setModel(QAbstractItemModel *model);

inline QTableWidgetPrivate* d_func() { return reinterpret_cast<QTableWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTableWidgetPrivate* d_func() const { return reinterpret_cast<const QTableWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTableWidgetPrivate;
QTableWidget(const QTableWidget &) ; QTableWidget &operator=(const QTableWidget &) ;










};

inline void QTableWidget::removeCellWidget(int arow, int acolumn)
{ setCellWidget(arow, acolumn, 0); }

inline QTableWidgetItem *QTableWidget::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }

inline int QTableWidgetItem::row() const
{ return (view ? view->row(this) : -1); }

inline int QTableWidgetItem::column() const
{ return (view ? view->column(this) : -1); }

inline void QTableWidgetItem::setSelected(bool aselect)
{ if (view) view->setItemSelected(this, aselect); }

inline bool QTableWidgetItem::isSelected() const
{ return (view ? view->isItemSelected(this) : false); }



# 370 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtablewidget.h"



# 41 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemview.h"

























































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"
class QTreeViewPrivate;
class QHeaderView;

class  QTreeView : public QAbstractItemView
{
Q_OBJECT
Q_PROPERTY(int autoExpandDelay READ autoExpandDelay WRITE setAutoExpandDelay)
Q_PROPERTY(int indentation READ indentation WRITE setIndentation)
Q_PROPERTY(bool rootIsDecorated READ rootIsDecorated WRITE setRootIsDecorated)
Q_PROPERTY(bool uniformRowHeights READ uniformRowHeights WRITE setUniformRowHeights)
Q_PROPERTY(bool itemsExpandable READ itemsExpandable WRITE setItemsExpandable)
Q_PROPERTY(bool sortingEnabled READ isSortingEnabled WRITE setSortingEnabled)
Q_PROPERTY(bool animated READ isAnimated WRITE setAnimated)
Q_PROPERTY(bool allColumnsShowFocus READ allColumnsShowFocus WRITE setAllColumnsShowFocus)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(bool headerHidden READ isHeaderHidden WRITE setHeaderHidden)
Q_PROPERTY(bool expandsOnDoubleClick READ expandsOnDoubleClick WRITE setExpandsOnDoubleClick)

public:
explicit QTreeView(QWidget *parent = 0);
~QTreeView();

void setModel(QAbstractItemModel *model);
void setRootIndex(const QModelIndex &index);
void setSelectionModel(QItemSelectionModel *selectionModel);

QHeaderView *header() const;
void setHeader(QHeaderView *header);

int autoExpandDelay() const;
void setAutoExpandDelay(int delay);

int indentation() const;
void setIndentation(int i);

bool rootIsDecorated() const;
void setRootIsDecorated(bool show);

bool uniformRowHeights() const;
void setUniformRowHeights(bool uniform);

bool itemsExpandable() const;
void setItemsExpandable(bool enable);

bool expandsOnDoubleClick() const;
void setExpandsOnDoubleClick(bool enable);

int columnViewportPosition(int column) const;
int columnWidth(int column) const;
void setColumnWidth(int column, int width);
int columnAt(int x) const;

bool isColumnHidden(int column) const;
void setColumnHidden(int column, bool hide);

bool isHeaderHidden() const;
void setHeaderHidden(bool hide);

bool isRowHidden(int row, const QModelIndex &parent) const;
void setRowHidden(int row, const QModelIndex &parent, bool hide);

bool isFirstColumnSpanned(int row, const QModelIndex &parent) const;
void setFirstColumnSpanned(int row, const QModelIndex &parent, bool span);

bool isExpanded(const QModelIndex &index) const;
void setExpanded(const QModelIndex &index, bool expand);

void setSortingEnabled(bool enable);
bool isSortingEnabled() const;

void setAnimated(bool enable);
bool isAnimated() const;

void setAllColumnsShowFocus(bool enable);
bool allColumnsShowFocus() const;

void setWordWrap(bool on);
bool wordWrap() const;

void keyboardSearch(const QString &search);

QRect visualRect(const QModelIndex &index) const;
void scrollTo(const QModelIndex &index, ScrollHint hint = EnsureVisible);
QModelIndex indexAt(const QPoint &p) const;
QModelIndex indexAbove(const QModelIndex &index) const;
QModelIndex indexBelow(const QModelIndex &index) const;

void doItemsLayout();
void reset();

void sortByColumn(int column, Qt::SortOrder order);

void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles = QVector<int>());
void selectAll();

signals:
void expanded(const QModelIndex &index);
void collapsed(const QModelIndex &index);

public slots:
void hideColumn(int column);
void showColumn(int column);
void expand(const QModelIndex &index);
void collapse(const QModelIndex &index);
void resizeColumnToContents(int column);
void sortByColumn(int column);
void expandAll();
void collapseAll();
void expandToDepth(int depth);

protected slots:
void columnResized(int column, int oldSize, int newSize);
void columnCountChanged(int oldCount, int newCount);
void columnMoved();
void reexpand();
void rowsRemoved(const QModelIndex &parent, int first, int last);

protected:
QTreeView(QTreeViewPrivate &dd, QWidget *parent = 0);
void scrollContentsBy(int dx, int dy);
void rowsInserted(const QModelIndex &parent, int start, int end);
void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);

QModelIndex moveCursor(CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
int horizontalOffset() const;
int verticalOffset() const;

void setSelection(const QRect &rect, QItemSelectionModel::SelectionFlags command);
QRegion visualRegionForSelection(const QItemSelection &selection) const;
QModelIndexList selectedIndexes() const;

void timerEvent(QTimerEvent *event);
void paintEvent(QPaintEvent *event);

void drawTree(QPainter *painter, const QRegion &region) const;
virtual void drawRow(QPainter *painter,
const QStyleOptionViewItem &options,
const QModelIndex &index) const;
virtual void drawBranches(QPainter *painter,
const QRect &rect,
const QModelIndex &index) const;

void mousePressEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void mouseDoubleClickEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void keyPressEvent(QKeyEvent *event);

# 200 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"
void dragMoveEvent(QDragMoveEvent *event);

# 202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"
bool viewportEvent(QEvent *event);

void updateGeometries();

int sizeHintForColumn(int column) const;
int indexRowSizeHint(const QModelIndex &index) const;
int rowHeight(const QModelIndex &index) const;

void horizontalScrollbarAction(int action);

bool isIndexHidden(const QModelIndex &index) const;
void selectionChanged(const QItemSelection &selected,
const QItemSelection &deselected);
void currentChanged(const QModelIndex &current, const QModelIndex &previous);

private:
friend class QAccessibleTable;
friend class QAccessibleTree;
friend class QAccessibleTableCell;
int visualIndex(const QModelIndex &index) const;

inline QTreeViewPrivate* d_func() { return reinterpret_cast<QTreeViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTreeViewPrivate* d_func() const { return reinterpret_cast<const QTreeViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTreeViewPrivate;
QTreeView(const QTreeView &) ; QTreeView &operator=(const QTreeView &) ;

# 226 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"


# 228 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"


};



# 234 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"



# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreeview.h"












































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidgetitemiterator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidgetitemiterator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidgetitemiterator.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidgetitemiterator.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidgetitemiterator.h"
class QTreeWidget;
class QTreeWidgetItem;
class QTreeModel;

class QTreeWidgetItemIteratorPrivate;
class  QTreeWidgetItemIterator
{
friend class QTreeModel;

public:
enum IteratorFlag {
All = 0x00000000,
Hidden = 0x00000001,
NotHidden = 0x00000002,
Selected = 0x00000004,
Unselected = 0x00000008,
Selectable = 0x00000010,
NotSelectable = 0x00000020,
DragEnabled = 0x00000040,
DragDisabled = 0x00000080,
DropEnabled = 0x00000100,
DropDisabled = 0x00000200,
HasChildren = 0x00000400,
NoChildren = 0x00000800,
Checked = 0x00001000,
NotChecked = 0x00002000,
Enabled = 0x00004000,
Disabled = 0x00008000,
Editable = 0x00010000,
NotEditable = 0x00020000,
UserFlag = 0x01000000 
};
typedef QFlags<IteratorFlag> IteratorFlags;

QTreeWidgetItemIterator(const QTreeWidgetItemIterator &it);
explicit QTreeWidgetItemIterator(QTreeWidget *widget, IteratorFlags flags = All);
explicit QTreeWidgetItemIterator(QTreeWidgetItem *item, IteratorFlags flags = All);
~QTreeWidgetItemIterator();

QTreeWidgetItemIterator &operator=(const QTreeWidgetItemIterator &it);

QTreeWidgetItemIterator &operator++();
inline const QTreeWidgetItemIterator operator++(int);
inline QTreeWidgetItemIterator &operator+=(int n);

QTreeWidgetItemIterator &operator--();
inline const QTreeWidgetItemIterator operator--(int);
inline QTreeWidgetItemIterator &operator-=(int n);

inline QTreeWidgetItem *operator*() const;

private:
bool matchesFlags(const QTreeWidgetItem *item) const;
QScopedPointer<QTreeWidgetItemIteratorPrivate> d_ptr;
QTreeWidgetItem *current;
IteratorFlags flags;
inline QTreeWidgetItemIteratorPrivate* d_func() { return reinterpret_cast<QTreeWidgetItemIteratorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTreeWidgetItemIteratorPrivate* d_func() const { return reinterpret_cast<const QTreeWidgetItemIteratorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTreeWidgetItemIteratorPrivate;
};

inline const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator++(int)
{
QTreeWidgetItemIterator it = *this;
++(*this);
return it;
}

inline const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator--(int)
{
QTreeWidgetItemIterator it = *this;
--(*this);
return it;
}

inline QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator+=(int n)
{
if (n < 0)
return (*this) -= (-n);
while (current && n--)
++(*this);
return *this;
}

inline QTreeWidgetItemIterator &QTreeWidgetItemIterator::operator-=(int n)
{
if (n < 0)
return (*this) += (-n);
while (current && n--)
--(*this);
return *this;
}

inline QTreeWidgetItem *QTreeWidgetItemIterator::operator*() const
{
return current;
}

 inline QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type> operator|(QTreeWidgetItemIterator::IteratorFlags::enum_type f1, QTreeWidgetItemIterator::IteratorFlags::enum_type f2) { return QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type>(f1) | f2; }  inline QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type> operator|(QTreeWidgetItemIterator::IteratorFlags::enum_type f1, QFlags<QTreeWidgetItemIterator::IteratorFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTreeWidgetItemIterator::IteratorFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }





# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"





# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
class QTreeWidget;
class QTreeModel;
class QWidgetItemData;
class QTreeWidgetItemPrivate;

class  QTreeWidgetItem
{
friend class QTreeModel;
friend class QTreeWidget;
friend class QTreeWidgetPrivate;
friend class QTreeWidgetItemIterator;
friend class QTreeWidgetItemPrivate;
public:
enum ItemType { Type = 0, UserType = 1000 };
explicit QTreeWidgetItem(int type = Type);
explicit QTreeWidgetItem(const QStringList &strings, int type = Type);
explicit QTreeWidgetItem(QTreeWidget *view, int type = Type);
QTreeWidgetItem(QTreeWidget *view, const QStringList &strings, int type = Type);
QTreeWidgetItem(QTreeWidget *view, QTreeWidgetItem *after, int type = Type);
explicit QTreeWidgetItem(QTreeWidgetItem *parent, int type = Type);
QTreeWidgetItem(QTreeWidgetItem *parent, const QStringList &strings, int type = Type);
QTreeWidgetItem(QTreeWidgetItem *parent, QTreeWidgetItem *after, int type = Type);
QTreeWidgetItem(const QTreeWidgetItem &other);
virtual ~QTreeWidgetItem();

virtual QTreeWidgetItem *clone() const;

inline QTreeWidget *treeWidget() const { return view; }

inline void setSelected(bool select);
inline bool isSelected() const;

inline void setHidden(bool hide);
inline bool isHidden() const;

inline void setExpanded(bool expand);
inline bool isExpanded() const;

inline void setFirstColumnSpanned(bool span);
inline bool isFirstColumnSpanned() const;

inline void setDisabled(bool disabled);
inline bool isDisabled() const;

enum ChildIndicatorPolicy { ShowIndicator, DontShowIndicator, DontShowIndicatorWhenChildless };
void setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy policy);
QTreeWidgetItem::ChildIndicatorPolicy childIndicatorPolicy() const;

Qt::ItemFlags flags() const;
void setFlags(Qt::ItemFlags flags);

inline QString text(int column) const
{ return data(column, Qt::DisplayRole).toString(); }
inline void setText(int column, const QString &text);

inline QIcon icon(int column) const
{ return qvariant_cast<QIcon>(data(column, Qt::DecorationRole)); }
inline void setIcon(int column, const QIcon &icon);

inline QString statusTip(int column) const
{ return data(column, Qt::StatusTipRole).toString(); }
inline void setStatusTip(int column, const QString &statusTip);


# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline QString toolTip(int column) const
{ return data(column, Qt::ToolTipRole).toString(); }
inline void setToolTip(int column, const QString &toolTip);



# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline QString whatsThis(int column) const
{ return data(column, Qt::WhatsThisRole).toString(); }
inline void setWhatsThis(int column, const QString &whatsThis);


# 130 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline QFont font(int column) const
{ return qvariant_cast<QFont>(data(column, Qt::FontRole)); }
inline void setFont(int column, const QFont &font);

inline int textAlignment(int column) const
{ return data(column, Qt::TextAlignmentRole).toInt(); }
inline void setTextAlignment(int column, int alignment)
{ setData(column, Qt::TextAlignmentRole, alignment); }

inline QColor backgroundColor(int column) const
{ return qvariant_cast<QColor>(data(column, Qt::BackgroundColorRole)); }
inline void setBackgroundColor(int column, const QColor &color)
{ setData(column, Qt::BackgroundColorRole, color); }

inline QBrush background(int column) const
{ return qvariant_cast<QBrush>(data(column, Qt::BackgroundRole)); }
inline void setBackground(int column, const QBrush &brush)
{ setData(column, Qt::BackgroundRole, brush); }

inline QColor textColor(int column) const
{ return qvariant_cast<QColor>(data(column, Qt::TextColorRole)); }
inline void setTextColor(int column, const QColor &color)
{ setData(column, Qt::TextColorRole, color); }

inline QBrush foreground(int column) const
{ return qvariant_cast<QBrush>(data(column, Qt::ForegroundRole)); }
inline void setForeground(int column, const QBrush &brush)
{ setData(column, Qt::ForegroundRole, brush); }

inline Qt::CheckState checkState(int column) const
{ return static_cast<Qt::CheckState>(data(column, Qt::CheckStateRole).toInt()); }
inline void setCheckState(int column, Qt::CheckState state)
{ setData(column, Qt::CheckStateRole, state); }

inline QSize sizeHint(int column) const
{ return qvariant_cast<QSize>(data(column, Qt::SizeHintRole)); }
inline void setSizeHint(int column, const QSize &size)
{ setData(column, Qt::SizeHintRole, size); }

virtual QVariant data(int column, int role) const;
virtual void setData(int column, int role, const QVariant &value);

virtual bool operator<(const QTreeWidgetItem &other) const;


# 175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
virtual void read(QDataStream &in);
virtual void write(QDataStream &out) const;

# 178 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
QTreeWidgetItem &operator=(const QTreeWidgetItem &other);

inline QTreeWidgetItem *parent() const { return par; }
inline QTreeWidgetItem *child(int index) const {
if (index < 0 || index >= children.size())
return 0;
executePendingSort();
return children.at(index);
}
inline int childCount() const { return children.count(); }
inline int columnCount() const { return values.count(); }
inline int indexOfChild(QTreeWidgetItem *child) const;

void addChild(QTreeWidgetItem *child);
void insertChild(int index, QTreeWidgetItem *child);
void removeChild(QTreeWidgetItem *child);
QTreeWidgetItem *takeChild(int index);

void addChildren(const QList<QTreeWidgetItem*> &children);
void insertChildren(int index, const QList<QTreeWidgetItem*> &children);
QList<QTreeWidgetItem*> takeChildren();

inline int type() const { return rtti; }
inline void sortChildren(int column, Qt::SortOrder order)
{ sortChildren(column, order, false); }

protected:
void emitDataChanged();

private:
void sortChildren(int column, Qt::SortOrder order, bool climb);
QVariant childrenCheckState(int column) const;
void itemChanged();
void executePendingSort() const;

int rtti;

QVector< QVector<QWidgetItemData> > values;
QTreeWidget *view;
QTreeWidgetItemPrivate *d;
QTreeWidgetItem *par;
QList<QTreeWidgetItem*> children;
Qt::ItemFlags itemFlags;
};

inline void QTreeWidgetItem::setText(int column, const QString &atext)
{ setData(column, Qt::DisplayRole, atext); }

inline void QTreeWidgetItem::setIcon(int column, const QIcon &aicon)
{ setData(column, Qt::DecorationRole, aicon); }


# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline void QTreeWidgetItem::setStatusTip(int column, const QString &astatusTip)
{ setData(column, Qt::StatusTipRole, astatusTip); }



# 235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline void QTreeWidgetItem::setToolTip(int column, const QString &atoolTip)
{ setData(column, Qt::ToolTipRole, atoolTip); }



# 240 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline void QTreeWidgetItem::setWhatsThis(int column, const QString &awhatsThis)
{ setData(column, Qt::WhatsThisRole, awhatsThis); }


# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
inline void QTreeWidgetItem::setFont(int column, const QFont &afont)
{ setData(column, Qt::FontRole, afont); }

inline int QTreeWidgetItem::indexOfChild(QTreeWidgetItem *achild) const
{ executePendingSort(); return children.indexOf(achild); }


# 251 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
 QDataStream &operator<<(QDataStream &out, const QTreeWidgetItem &item);
 QDataStream &operator>>(QDataStream &in, QTreeWidgetItem &item);


# 255 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"
class QTreeWidgetPrivate;

class  QTreeWidget : public QTreeView
{
Q_OBJECT
Q_PROPERTY(int columnCount READ columnCount WRITE setColumnCount)
Q_PROPERTY(int topLevelItemCount READ topLevelItemCount)

friend class QTreeModel;
friend class QTreeWidgetItem;
public:
explicit QTreeWidget(QWidget *parent = 0);
~QTreeWidget();

int columnCount() const;
void setColumnCount(int columns);

QTreeWidgetItem *invisibleRootItem() const;
QTreeWidgetItem *topLevelItem(int index) const;
int topLevelItemCount() const;
void insertTopLevelItem(int index, QTreeWidgetItem *item);
void addTopLevelItem(QTreeWidgetItem *item);
QTreeWidgetItem *takeTopLevelItem(int index);
int indexOfTopLevelItem(QTreeWidgetItem *item) const;

void insertTopLevelItems(int index, const QList<QTreeWidgetItem*> &items);
void addTopLevelItems(const QList<QTreeWidgetItem*> &items);

QTreeWidgetItem *headerItem() const;
void setHeaderItem(QTreeWidgetItem *item);
void setHeaderLabels(const QStringList &labels);
inline void setHeaderLabel(const QString &label);

QTreeWidgetItem *currentItem() const;
int currentColumn() const;
void setCurrentItem(QTreeWidgetItem *item);
void setCurrentItem(QTreeWidgetItem *item, int column);
void setCurrentItem(QTreeWidgetItem *item, int column, QItemSelectionModel::SelectionFlags command);

QTreeWidgetItem *itemAt(const QPoint &p) const;
inline QTreeWidgetItem *itemAt(int x, int y) const;
QRect visualItemRect(const QTreeWidgetItem *item) const;

int sortColumn() const;
void sortItems(int column, Qt::SortOrder order);

void editItem(QTreeWidgetItem *item, int column = 0);
void openPersistentEditor(QTreeWidgetItem *item, int column = 0);
void closePersistentEditor(QTreeWidgetItem *item, int column = 0);

QWidget *itemWidget(QTreeWidgetItem *item, int column) const;
void setItemWidget(QTreeWidgetItem *item, int column, QWidget *widget);
inline void removeItemWidget(QTreeWidgetItem *item, int column);

bool isItemSelected(const QTreeWidgetItem *item) const;
void setItemSelected(const QTreeWidgetItem *item, bool select);
QList<QTreeWidgetItem*> selectedItems() const;
QList<QTreeWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags,
int column = 0) const;

bool isItemHidden(const QTreeWidgetItem *item) const;
void setItemHidden(const QTreeWidgetItem *item, bool hide);

bool isItemExpanded(const QTreeWidgetItem *item) const;
void setItemExpanded(const QTreeWidgetItem *item, bool expand);

bool isFirstItemColumnSpanned(const QTreeWidgetItem *item) const;
void setFirstItemColumnSpanned(const QTreeWidgetItem *item, bool span);

QTreeWidgetItem *itemAbove(const QTreeWidgetItem *item) const;
QTreeWidgetItem *itemBelow(const QTreeWidgetItem *item) const;

void setSelectionModel(QItemSelectionModel *selectionModel);

public slots:
void scrollToItem(const QTreeWidgetItem *item,
QAbstractItemView::ScrollHint hint = EnsureVisible);
void expandItem(const QTreeWidgetItem *item);
void collapseItem(const QTreeWidgetItem *item);
void clear();

signals:
void itemPressed(QTreeWidgetItem *item, int column);
void itemClicked(QTreeWidgetItem *item, int column);
void itemDoubleClicked(QTreeWidgetItem *item, int column);
void itemActivated(QTreeWidgetItem *item, int column);
void itemEntered(QTreeWidgetItem *item, int column);
void itemChanged(QTreeWidgetItem *item, int column);
void itemExpanded(QTreeWidgetItem *item);
void itemCollapsed(QTreeWidgetItem *item);
void currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous);
void itemSelectionChanged();

protected:
bool event(QEvent *e);
virtual QStringList mimeTypes() const;
virtual QMimeData *mimeData(const QList<QTreeWidgetItem*> items) const;
virtual bool dropMimeData(QTreeWidgetItem *parent, int index,
const QMimeData *data, Qt::DropAction action);
virtual Qt::DropActions supportedDropActions() const;
QList<QTreeWidgetItem*> items(const QMimeData *data) const;

QModelIndex indexFromItem(QTreeWidgetItem *item, int column = 0) const;
QTreeWidgetItem *itemFromIndex(const QModelIndex &index) const;
void dropEvent(QDropEvent *event);

private:
void setModel(QAbstractItemModel *model);

inline QTreeWidgetPrivate* d_func() { return reinterpret_cast<QTreeWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTreeWidgetPrivate* d_func() const { return reinterpret_cast<const QTreeWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTreeWidgetPrivate;
QTreeWidget(const QTreeWidget &) ; QTreeWidget &operator=(const QTreeWidget &) ;













};

inline void QTreeWidget::removeItemWidget(QTreeWidgetItem *item, int column)
{ setItemWidget(item, column, 0); }

inline QTreeWidgetItem *QTreeWidget::itemAt(int ax, int ay) const
{ return itemAt(QPoint(ax, ay)); }

inline void QTreeWidget::setHeaderLabel(const QString &alabel)
{ setHeaderLabels(QStringList(alabel)); }

inline void QTreeWidgetItem::setSelected(bool aselect)
{ if (view) view->setItemSelected(this, aselect); }

inline bool QTreeWidgetItem::isSelected() const
{ return (view ? view->isItemSelected(this) : false); }

inline void QTreeWidgetItem::setHidden(bool ahide)
{ if (view) view->setItemHidden(this, ahide); }

inline bool QTreeWidgetItem::isHidden() const
{ return (view ? view->isItemHidden(this) : false); }

inline void QTreeWidgetItem::setExpanded(bool aexpand)
{ if (view) view->setItemExpanded(this, aexpand); }

inline bool QTreeWidgetItem::isExpanded() const
{ return (view ? view->isItemExpanded(this) : false); }

inline void QTreeWidgetItem::setFirstColumnSpanned(bool aspan)
{ if (view) view->setFirstItemColumnSpanned(this, aspan); }

inline bool QTreeWidgetItem::isFirstColumnSpanned() const
{ return (view ? view->isFirstItemColumnSpanned(this) : false); }

inline void QTreeWidgetItem::setDisabled(bool disabled)
{ setFlags(disabled ? (flags() & ~Qt::ItemIsEnabled) : flags() | Qt::ItemIsEnabled); }

inline bool QTreeWidgetItem::isDisabled() const
{ return !(flags() & Qt::ItemIsEnabled); }



# 422 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidget.h"



# 43 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtreewidgetitemiterator.h"


























































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"










































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"





# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
class QMenu;
class QActionGroup;
class QActionPrivate;
class QGraphicsWidget;

class  QAction : public QObject
{
Q_OBJECT
inline QActionPrivate* d_func() { return reinterpret_cast<QActionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QActionPrivate* d_func() const { return reinterpret_cast<const QActionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QActionPrivate;

Q_ENUMS(MenuRole)
Q_ENUMS(Priority)
Q_PROPERTY(bool checkable READ isCheckable WRITE setCheckable NOTIFY changed)
Q_PROPERTY(bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled NOTIFY changed)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon NOTIFY changed)
Q_PROPERTY(QString text READ text WRITE setText NOTIFY changed)
Q_PROPERTY(QString iconText READ iconText WRITE setIconText NOTIFY changed)
Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip NOTIFY changed)
Q_PROPERTY(QString statusTip READ statusTip WRITE setStatusTip NOTIFY changed)
Q_PROPERTY(QString whatsThis READ whatsThis WRITE setWhatsThis NOTIFY changed)
Q_PROPERTY(QFont font READ font WRITE setFont NOTIFY changed)

# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
Q_PROPERTY(QKeySequence shortcut READ shortcut WRITE setShortcut NOTIFY changed)
Q_PROPERTY(Qt::ShortcutContext shortcutContext READ shortcutContext WRITE setShortcutContext NOTIFY changed)
Q_PROPERTY(bool autoRepeat READ autoRepeat WRITE setAutoRepeat NOTIFY changed)

# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY changed)
Q_PROPERTY(MenuRole menuRole READ menuRole WRITE setMenuRole NOTIFY changed)
Q_PROPERTY(bool iconVisibleInMenu READ isIconVisibleInMenu WRITE setIconVisibleInMenu NOTIFY changed)
Q_PROPERTY(Priority priority READ priority WRITE setPriority)

public:

enum MenuRole { NoRole = 0, TextHeuristicRole, ApplicationSpecificRole, AboutQtRole,
AboutRole, PreferencesRole, QuitRole };
enum Priority { LowPriority = 0,
NormalPriority = 128,
HighPriority = 256};
explicit QAction(QObject* parent);
QAction(const QString &text, QObject* parent);
QAction(const QIcon &icon, const QString &text, QObject* parent);

~QAction();

void setActionGroup(QActionGroup *group);
QActionGroup *actionGroup() const;
void setIcon(const QIcon &icon);
QIcon icon() const;

void setText(const QString &text);
QString text() const;

void setIconText(const QString &text);
QString iconText() const;

void setToolTip(const QString &tip);
QString toolTip() const;

void setStatusTip(const QString &statusTip);
QString statusTip() const;

void setWhatsThis(const QString &what);
QString whatsThis() const;

void setPriority(Priority priority);
Priority priority() const;


# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
QMenu *menu() const;
void setMenu(QMenu *menu);


# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
void setSeparator(bool b);
bool isSeparator() const;


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
void setShortcut(const QKeySequence &shortcut);
QKeySequence shortcut() const;

void setShortcuts(const QList<QKeySequence> &shortcuts);
void setShortcuts(QKeySequence::StandardKey);
QList<QKeySequence> shortcuts() const;

void setShortcutContext(Qt::ShortcutContext context);
Qt::ShortcutContext shortcutContext() const;

void setAutoRepeat(bool);
bool autoRepeat() const;


# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
void setFont(const QFont &font);
QFont font() const;

void setCheckable(bool);
bool isCheckable() const;

QVariant data() const;
void setData(const QVariant &var);

bool isChecked() const;

bool isEnabled() const;

bool isVisible() const;

enum ActionEvent { Trigger, Hover };
void activate(ActionEvent event);
bool showStatusText(QWidget *widget=0);

void setMenuRole(MenuRole menuRole);
MenuRole menuRole() const;

void setIconVisibleInMenu(bool visible);
bool isIconVisibleInMenu() const;


QWidget *parentWidget() const;

QList<QWidget *> associatedWidgets() const;

# 177 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
QList<QGraphicsWidget *> associatedGraphicsWidgets() const; 


# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
protected:
bool event(QEvent *);
QAction(QActionPrivate &dd, QObject *parent);

public slots:
void trigger() { activate(Trigger); }
void hover() { activate(Hover); }
void setChecked(bool);
void toggle();
void setEnabled(bool);
inline void setDisabled(bool b) { setEnabled(!b); }
void setVisible(bool);

signals:
void changed();
void triggered(bool checked = false);
void hovered();
void toggled(bool);

private:
QAction(const QAction &) ; QAction &operator=(const QAction &) ;

friend class QGraphicsWidget;
friend class QWidget;
friend class QActionGroup;
friend class QMenu;
friend class QMenuPrivate;
friend class QMenuBar;
friend class QToolButton;



# 212 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"
};


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qactiongroup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"






























































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qactiongroup.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qactiongroup.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qactiongroup.h"
class QActionGroupPrivate;

class  QActionGroup : public QObject
{
Q_OBJECT
inline QActionGroupPrivate* d_func() { return reinterpret_cast<QActionGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QActionGroupPrivate* d_func() const { return reinterpret_cast<const QActionGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QActionGroupPrivate;

Q_PROPERTY(bool exclusive READ isExclusive WRITE setExclusive)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible)

public:
explicit QActionGroup(QObject* parent);
~QActionGroup();

QAction *addAction(QAction* a);
QAction *addAction(const QString &text);
QAction *addAction(const QIcon &icon, const QString &text);
void removeAction(QAction *a);
QList<QAction*> actions() const;

QAction *checkedAction() const;
bool isExclusive() const;
bool isEnabled() const;
bool isVisible() const;


public slots:
void setEnabled(bool);
inline void setDisabled(bool b) { setEnabled(!b); }
void setVisible(bool);
void setExclusive(bool);

signals:
void triggered(QAction *);
void hovered(QAction *);

private:
QActionGroup(const QActionGroup &) ; QActionGroup &operator=(const QActionGroup &) ;



};



# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qactiongroup.h"



# 215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"

# 216 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"




# 220 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qactiongroup.h"




































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qcoreapplication.h"









































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpalette.h"

















































































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qguiapplication.h"




























































































































































































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"


# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"



class QDesktopWidget;
class QStyle;
class QEventLoop;
class QIcon;
template <typename T> class QList;
class QLocale;
class QPlatformNativeInterface;

class QApplication;
class QApplicationPrivate;





# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
class  QApplication : public QGuiApplication
{
Q_OBJECT
Q_PROPERTY(QIcon windowIcon READ windowIcon WRITE setWindowIcon)
Q_PROPERTY(int cursorFlashTime READ cursorFlashTime WRITE setCursorFlashTime)
Q_PROPERTY(int doubleClickInterval READ doubleClickInterval WRITE setDoubleClickInterval)
Q_PROPERTY(int keyboardInputInterval READ keyboardInputInterval WRITE setKeyboardInputInterval)

# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
Q_PROPERTY(int wheelScrollLines READ wheelScrollLines WRITE setWheelScrollLines)

# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
Q_PROPERTY(QSize globalStrut READ globalStrut WRITE setGlobalStrut)
Q_PROPERTY(int startDragTime READ startDragTime WRITE setStartDragTime)
Q_PROPERTY(int startDragDistance READ startDragDistance WRITE setStartDragDistance)

# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
Q_PROPERTY(QString styleSheet READ styleSheet WRITE setStyleSheet)




# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
Q_PROPERTY(bool autoSipEnabled READ autoSipEnabled WRITE setAutoSipEnabled)

public:



# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
QApplication(int &argc, char **argv, int = ApplicationFlags);

# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
virtual ~QApplication();

static QStyle *style();
static void setStyle(QStyle*);
static QStyle *setStyle(const QString&);
enum ColorSpec { NormalColor=0, CustomColor=1, ManyColor=2 };
static int colorSpec();
static void setColorSpec(int);





# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
static QPalette palette() { return QGuiApplication::palette(); }



# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
static QPalette palette(const QWidget *);
static QPalette palette(const char *className);
static void setPalette(const QPalette &, const char* className = 0);
static QFont font();
static QFont font(const QWidget*);
static QFont font(const char *className);
static void setFont(const QFont &, const char* className = 0);
static QFontMetrics fontMetrics();

static void setWindowIcon(const QIcon &icon);
static QIcon windowIcon();



static QWidgetList allWidgets();
static QWidgetList topLevelWidgets();

static QDesktopWidget *desktop();

static QWidget *activePopupWidget();
static QWidget *activeModalWidget();
static QWidget *focusWidget();

static QWidget *activeWindow();
static void setActiveWindow(QWidget* act);

static QWidget *widgetAt(const QPoint &p);
static inline QWidget *widgetAt(int x, int y) { return widgetAt(QPoint(x, y)); }
static QWidget *topLevelAt(const QPoint &p);
static inline QWidget *topLevelAt(int x, int y) { return topLevelAt(QPoint(x, y)); }




# 154 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
static void beep();
static void alert(QWidget *widget, int duration = 0);

static void setCursorFlashTime(int);
static int cursorFlashTime();

static void setDoubleClickInterval(int);
static int doubleClickInterval();

static void setKeyboardInputInterval(int);
static int keyboardInputInterval();


# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
static void setWheelScrollLines(int);
static int wheelScrollLines();

# 170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
static void setGlobalStrut(const QSize &);
static QSize globalStrut();

static void setStartDragTime(int ms);
static int startDragTime();
static void setStartDragDistance(int l);
static int startDragDistance();

static bool isEffectEnabled(Qt::UIEffect);
static void setEffectEnabled(Qt::UIEffect, bool enable = true);








# 188 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
static int exec();
bool notify(QObject *, QEvent *);








# 198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
signals:
void focusChanged(QWidget *old, QWidget *now);

public:
QString styleSheet() const;
public slots:

# 205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
void setStyleSheet(const QString& sheet);





# 211 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
void setAutoSipEnabled(const bool enabled);
bool autoSipEnabled() const;
static void closeAllWindows();
static void aboutQt();

protected:
bool event(QEvent *);
bool compressEvent(QEvent *, QObject *receiver, QPostEventList *);

private:
QApplication(const QApplication &) ; QApplication &operator=(const QApplication &) ;
inline QApplicationPrivate* d_func() { return reinterpret_cast<QApplicationPrivate *>(qGetPtrHelper(d_ptr)); } inline const QApplicationPrivate* d_func() const { return reinterpret_cast<const QApplicationPrivate *>(qGetPtrHelper(d_ptr)); } friend class QApplicationPrivate;

friend class QGraphicsWidget;
friend class QGraphicsItem;
friend class QGraphicsScene;
friend class QGraphicsScenePrivate;
friend class QWidget;
friend class QWidgetPrivate;
friend class QWidgetWindow;
friend class QETWidget;
friend class QTranslator;
friend class QWidgetAnimator;

# 235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
friend class QShortcut;
friend class QLineEdit;
friend class QWidgetTextControl;

# 239 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
friend class QAction;


# 242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
friend class QGestureManager;

# 244 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qapplication.h"
};




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qboxlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayoutitem.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
























































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayoutitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayoutitem.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayoutitem.h"



static const  int QLAYOUTSIZE_MAX = INT_MAX/256/16;

class QLayout;
class QLayoutItem;
class QSpacerItem;
class QWidget;
class QSize;

class  QLayoutItem
{
public:
inline explicit QLayoutItem(Qt::Alignment alignment = 0);
virtual ~QLayoutItem();
virtual QSize sizeHint() const = 0;
virtual QSize minimumSize() const = 0;
virtual QSize maximumSize() const = 0;
virtual Qt::Orientations expandingDirections() const = 0;
virtual void setGeometry(const QRect&) = 0;
virtual QRect geometry() const = 0;
virtual bool isEmpty() const = 0;
virtual bool hasHeightForWidth() const;
virtual int heightForWidth(int) const;
virtual int minimumHeightForWidth(int) const;
virtual void invalidate();

virtual QWidget *widget();
virtual QLayout *layout();
virtual QSpacerItem *spacerItem();

Qt::Alignment alignment() const { return align; }
void setAlignment(Qt::Alignment a);
virtual QSizePolicy::ControlTypes controlTypes() const;

protected:
Qt::Alignment align;
};

inline QLayoutItem::QLayoutItem(Qt::Alignment aalignment)
: align(aalignment) { }

class  QSpacerItem : public QLayoutItem
{
public:
QSpacerItem(int w, int h,
QSizePolicy::Policy hData = QSizePolicy::Minimum,
QSizePolicy::Policy vData = QSizePolicy::Minimum)
: width(w), height(h), sizeP(hData, vData) { }
~QSpacerItem();

void changeSize(int w, int h,
QSizePolicy::Policy hData = QSizePolicy::Minimum,
QSizePolicy::Policy vData = QSizePolicy::Minimum);
QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;
Qt::Orientations expandingDirections() const;
bool isEmpty() const;
void setGeometry(const QRect&);
QRect geometry() const;
QSpacerItem *spacerItem();

private:
int width;
int height;
QSizePolicy sizeP;
QRect rect;
};

class  QWidgetItem : public QLayoutItem
{
QWidgetItem(const QWidgetItem &) ; QWidgetItem &operator=(const QWidgetItem &) ;

public:
explicit QWidgetItem(QWidget *w) : wid(w) { }
~QWidgetItem();

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;
Qt::Orientations expandingDirections() const;
bool isEmpty() const;
void setGeometry(const QRect&);
QRect geometry() const;
virtual QWidget *widget();

bool hasHeightForWidth() const;
int heightForWidth(int) const;
QSizePolicy::ControlTypes controlTypes() const;
protected:
QWidget *wid;
};

class  QWidgetItemV2 : public QWidgetItem
{
public:
explicit QWidgetItemV2(QWidget *widget);
~QWidgetItemV2();

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;
int heightForWidth(int width) const;

private:
enum { Dirty = -123, HfwCacheMaxSize = 3 };

inline bool useSizeCache() const;
void updateCacheIfNecessary() const;
inline void invalidateSizeCache() {
q_cachedMinimumSize.setWidth(Dirty);
q_hfwCacheSize = 0;
}

mutable QSize q_cachedMinimumSize;
mutable QSize q_cachedSizeHint;
mutable QSize q_cachedMaximumSize;
mutable QSize q_cachedHfws[HfwCacheMaxSize];
mutable short q_firstCachedHfw;
mutable short q_hfwCacheSize;
void *d;

friend class QWidgetPrivate;

QWidgetItemV2(const QWidgetItemV2 &) ; QWidgetItemV2 &operator=(const QWidgetItemV2 &) ;
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
























































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
















































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"




# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"



class QLayout;
class QSize;


class QLayoutPrivate;

class  QLayout : public QObject, public QLayoutItem
{
Q_OBJECT
inline QLayoutPrivate* d_func() { return reinterpret_cast<QLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLayoutPrivate* d_func() const { return reinterpret_cast<const QLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLayoutPrivate;

Q_ENUMS(SizeConstraint)
Q_PROPERTY(int margin READ margin WRITE setMargin)
Q_PROPERTY(int spacing READ spacing WRITE setSpacing)
Q_PROPERTY(SizeConstraint sizeConstraint READ sizeConstraint WRITE setSizeConstraint)
public:
enum SizeConstraint {
SetDefaultConstraint,
SetNoConstraint,
SetMinimumSize,
SetFixedSize,
SetMaximumSize,
SetMinAndMaxSize
};

QLayout(QWidget *parent);
QLayout();
~QLayout();

int margin() const;
int spacing() const;

void setMargin(int);
void setSpacing(int);

void setContentsMargins(int left, int top, int right, int bottom);
void setContentsMargins(const QMargins &margins);
void getContentsMargins(int *left, int *top, int *right, int *bottom) const;
QMargins contentsMargins() const;
QRect contentsRect() const;

bool setAlignment(QWidget *w, Qt::Alignment alignment);
bool setAlignment(QLayout *l, Qt::Alignment alignment);

# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"
inline void setAlignment(Qt::Alignment alignment) { QLayoutItem::setAlignment(alignment); }




# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"
void setSizeConstraint(SizeConstraint);
SizeConstraint sizeConstraint() const;
void setMenuBar(QWidget *w);
QWidget *menuBar() const;

QWidget *parentWidget() const;

void invalidate();
QRect geometry() const;
bool activate();
void update();

void addWidget(QWidget *w);
virtual void addItem(QLayoutItem *) = 0;

void removeWidget(QWidget *w);
void removeItem(QLayoutItem *);

Qt::Orientations expandingDirections() const;
QSize minimumSize() const;
QSize maximumSize() const;
virtual void setGeometry(const QRect&);
virtual QLayoutItem *itemAt(int index) const = 0;
virtual QLayoutItem *takeAt(int index) = 0;
virtual int indexOf(QWidget *) const;
virtual int count() const = 0;
bool isEmpty() const;
QSizePolicy::ControlTypes controlTypes() const;

int totalHeightForWidth(int w) const;
QSize totalMinimumSize() const;
QSize totalMaximumSize() const;
QSize totalSizeHint() const;
QLayout *layout();

void setEnabled(bool);
bool isEnabled() const;


static QSize closestAcceptableSize(const QWidget *w, const QSize &s);

protected:
void widgetEvent(QEvent *);
void childEvent(QChildEvent *e);
void addChildLayout(QLayout *l);
void addChildWidget(QWidget *w);
bool adoptLayout(QLayout *layout);

QRect alignmentRect(const QRect&) const;
protected:
QLayout(QLayoutPrivate &d, QLayout*, QWidget*);

private:
QLayout(const QLayout &) ; QLayout &operator=(const QLayout &) ;

static void activateRecursiveHelper(QLayoutItem *item);

friend class QApplicationPrivate;
friend class QWidget;

};




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qboxlayout.h"














































































































































# 170 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgridlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"













































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgridlayout.h"







# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgridlayout.h"



class QGridLayoutPrivate;

class  QGridLayout : public QLayout
{
Q_OBJECT
inline QGridLayoutPrivate* d_func() { return reinterpret_cast<QGridLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGridLayoutPrivate* d_func() const { return reinterpret_cast<const QGridLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGridLayoutPrivate;



public:
explicit QGridLayout(QWidget *parent);
QGridLayout();

~QGridLayout();

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;

void setHorizontalSpacing(int spacing);
int horizontalSpacing() const;
void setVerticalSpacing(int spacing);
int verticalSpacing() const;
void setSpacing(int spacing);
int spacing() const;

void setRowStretch(int row, int stretch);
void setColumnStretch(int column, int stretch);
int rowStretch(int row) const;
int columnStretch(int column) const;

void setRowMinimumHeight(int row, int minSize);
void setColumnMinimumWidth(int column, int minSize);
int rowMinimumHeight(int row) const;
int columnMinimumWidth(int column) const;

int columnCount() const;
int rowCount() const;

QRect cellRect(int row, int column) const;

bool hasHeightForWidth() const;
int heightForWidth(int) const;
int minimumHeightForWidth(int) const;

Qt::Orientations expandingDirections() const;
void invalidate();

inline void addWidget(QWidget *w) { QLayout::addWidget(w); }
void addWidget(QWidget *, int row, int column, Qt::Alignment = 0);
void addWidget(QWidget *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0);
void addLayout(QLayout *, int row, int column, Qt::Alignment = 0);
void addLayout(QLayout *, int row, int column, int rowSpan, int columnSpan, Qt::Alignment = 0);

void setOriginCorner(Qt::Corner);
Qt::Corner originCorner() const;

QLayoutItem *itemAt(int index) const;
QLayoutItem *itemAtPosition(int row, int column) const;
QLayoutItem *takeAt(int index);
int count() const;
void setGeometry(const QRect&);

void addItem(QLayoutItem *item, int row, int column, int rowSpan = 1, int columnSpan = 1, Qt::Alignment = 0);

void setDefaultPositioning(int n, Qt::Orientation orient);
void getItemPosition(int idx, int *row, int *column, int *rowSpan, int *columnSpan) const;

protected:
void addItem(QLayoutItem *);

private:
QGridLayout(const QGridLayout &) ; QGridLayout &operator=(const QGridLayout &) ;

};




# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qboxlayout.h"







# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qboxlayout.h"



class QBoxLayoutPrivate;

class  QBoxLayout : public QLayout
{
Q_OBJECT
inline QBoxLayoutPrivate* d_func() { return reinterpret_cast<QBoxLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QBoxLayoutPrivate* d_func() const { return reinterpret_cast<const QBoxLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QBoxLayoutPrivate;
public:
enum Direction { LeftToRight, RightToLeft, TopToBottom, BottomToTop,
Down = TopToBottom, Up = BottomToTop };

explicit QBoxLayout(Direction, QWidget *parent = 0);

~QBoxLayout();

Direction direction() const;
void setDirection(Direction);

void addSpacing(int size);
void addStretch(int stretch = 0);
void addSpacerItem(QSpacerItem *spacerItem);
void addWidget(QWidget *, int stretch = 0, Qt::Alignment alignment = 0);
void addLayout(QLayout *layout, int stretch = 0);
void addStrut(int);
void addItem(QLayoutItem *);

void insertSpacing(int index, int size);
void insertStretch(int index, int stretch = 0);
void insertSpacerItem(int index, QSpacerItem *spacerItem);
void insertWidget(int index, QWidget *widget, int stretch = 0, Qt::Alignment alignment = 0);
void insertLayout(int index, QLayout *layout, int stretch = 0);
void insertItem(int index, QLayoutItem *);

int spacing() const;
void setSpacing(int spacing);

bool setStretchFactor(QWidget *w, int stretch);
bool setStretchFactor(QLayout *l, int stretch);
void setStretch(int index, int stretch);
int stretch(int index) const;

QSize sizeHint() const;
QSize minimumSize() const;
QSize maximumSize() const;

bool hasHeightForWidth() const;
int heightForWidth(int) const;
int minimumHeightForWidth(int) const;

Qt::Orientations expandingDirections() const;
void invalidate();
QLayoutItem *itemAt(int) const;
QLayoutItem *takeAt(int);
int count() const;
void setGeometry(const QRect&);

private:
QBoxLayout(const QBoxLayout &) ; QBoxLayout &operator=(const QBoxLayout &) ;
};

class  QHBoxLayout : public QBoxLayout
{
Q_OBJECT
public:
QHBoxLayout();
explicit QHBoxLayout(QWidget *parent);
~QHBoxLayout();


private:
QHBoxLayout(const QHBoxLayout &) ; QHBoxLayout &operator=(const QHBoxLayout &) ;
};

class  QVBoxLayout : public QBoxLayout
{
Q_OBJECT
public:
QVBoxLayout();
explicit QVBoxLayout(QWidget *parent);
~QVBoxLayout();


private:
QVBoxLayout(const QVBoxLayout &) ; QVBoxLayout &operator=(const QVBoxLayout &) ;
};




# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdesktopwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdesktopwidget.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdesktopwidget.h"



class QApplication;
class QDesktopWidgetPrivate;

class  QDesktopWidget : public QWidget
{
Q_OBJECT
Q_PROPERTY(bool virtualDesktop READ isVirtualDesktop)
Q_PROPERTY(int screenCount READ screenCount NOTIFY screenCountChanged)
Q_PROPERTY(int primaryScreen READ primaryScreen)
public:
QDesktopWidget();
~QDesktopWidget();

bool isVirtualDesktop() const;

int numScreens() const;
int screenCount() const;
int primaryScreen() const;

int screenNumber(const QWidget *widget = 0) const;
int screenNumber(const QPoint &) const;

QWidget *screen(int screen = -1);

const QRect screenGeometry(int screen = -1) const;
const QRect screenGeometry(const QWidget *widget) const;
const QRect screenGeometry(const QPoint &point) const
{ return screenGeometry(screenNumber(point)); }

const QRect availableGeometry(int screen = -1) const;
const QRect availableGeometry(const QWidget *widget) const;
const QRect availableGeometry(const QPoint &point) const
{ return availableGeometry(screenNumber(point)); }

signals:
void resized(int);
void workAreaResized(int);
void screenCountChanged(int);

protected:
void resizeEvent(QResizeEvent *e);

private:
QDesktopWidget(const QDesktopWidget &) ; QDesktopWidget &operator=(const QDesktopWidget &) ;
inline QDesktopWidgetPrivate* d_func() { return reinterpret_cast<QDesktopWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDesktopWidgetPrivate* d_func() const { return reinterpret_cast<const QDesktopWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDesktopWidgetPrivate;

friend class QApplication;
friend class QApplicationPrivate;
};

inline int QDesktopWidget::screenCount() const
{ return numScreens(); }




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qformlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"













































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QLayout"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qformlayout.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qformlayout.h"



class QFormLayoutPrivate;

class  QFormLayout : public QLayout
{
Q_OBJECT
Q_ENUMS(FieldGrowthPolicy RowWrapPolicy ItemRole)
inline QFormLayoutPrivate* d_func() { return reinterpret_cast<QFormLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFormLayoutPrivate* d_func() const { return reinterpret_cast<const QFormLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFormLayoutPrivate;
Q_PROPERTY(FieldGrowthPolicy fieldGrowthPolicy READ fieldGrowthPolicy WRITE setFieldGrowthPolicy RESET resetFieldGrowthPolicy)
Q_PROPERTY(RowWrapPolicy rowWrapPolicy READ rowWrapPolicy WRITE setRowWrapPolicy RESET resetRowWrapPolicy)
Q_PROPERTY(Qt::Alignment labelAlignment READ labelAlignment WRITE setLabelAlignment RESET resetLabelAlignment)
Q_PROPERTY(Qt::Alignment formAlignment READ formAlignment WRITE setFormAlignment RESET resetFormAlignment)
Q_PROPERTY(int horizontalSpacing READ horizontalSpacing WRITE setHorizontalSpacing)
Q_PROPERTY(int verticalSpacing READ verticalSpacing WRITE setVerticalSpacing)

public:
enum FieldGrowthPolicy {
FieldsStayAtSizeHint,
ExpandingFieldsGrow,
AllNonFixedFieldsGrow
};

enum RowWrapPolicy {
DontWrapRows,
WrapLongRows,
WrapAllRows
};

enum ItemRole {
LabelRole = 0,
FieldRole = 1,
SpanningRole = 2
};

explicit QFormLayout(QWidget *parent = 0);
~QFormLayout();

void setFieldGrowthPolicy(FieldGrowthPolicy policy);
FieldGrowthPolicy fieldGrowthPolicy() const;
void setRowWrapPolicy(RowWrapPolicy policy);
RowWrapPolicy rowWrapPolicy() const;
void setLabelAlignment(Qt::Alignment alignment);
Qt::Alignment labelAlignment() const;
void setFormAlignment(Qt::Alignment alignment);
Qt::Alignment formAlignment() const;

void setHorizontalSpacing(int spacing);
int horizontalSpacing() const;
void setVerticalSpacing(int spacing);
int verticalSpacing() const;

int spacing() const;
void setSpacing(int);

void addRow(QWidget *label, QWidget *field);
void addRow(QWidget *label, QLayout *field);
void addRow(const QString &labelText, QWidget *field);
void addRow(const QString &labelText, QLayout *field);
void addRow(QWidget *widget);
void addRow(QLayout *layout);

void insertRow(int row, QWidget *label, QWidget *field);
void insertRow(int row, QWidget *label, QLayout *field);
void insertRow(int row, const QString &labelText, QWidget *field);
void insertRow(int row, const QString &labelText, QLayout *field);
void insertRow(int row, QWidget *widget);
void insertRow(int row, QLayout *layout);

void setItem(int row, ItemRole role, QLayoutItem *item);
void setWidget(int row, ItemRole role, QWidget *widget);
void setLayout(int row, ItemRole role, QLayout *layout);

QLayoutItem *itemAt(int row, ItemRole role) const;
void getItemPosition(int index, int *rowPtr, ItemRole *rolePtr) const;
void getWidgetPosition(QWidget *widget, int *rowPtr, ItemRole *rolePtr) const;
void getLayoutPosition(QLayout *layout, int *rowPtr, ItemRole *rolePtr) const;
QWidget *labelForField(QWidget *field) const;
QWidget *labelForField(QLayout *field) const;


void addItem(QLayoutItem *item);
QLayoutItem *itemAt(int index) const;
QLayoutItem *takeAt(int index);

void setGeometry(const QRect &rect);
QSize minimumSize() const;
QSize sizeHint() const;
void invalidate();

bool hasHeightForWidth() const;
int heightForWidth(int width) const;
Qt::Orientations expandingDirections() const;
int count() const;

int rowCount() const;





# 149 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qformlayout.h"
private:
void resetFieldGrowthPolicy();
void resetRowWrapPolicy();
void resetLabelAlignment();
void resetFormAlignment();
};




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"













































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"




# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"
 template <> struct QMetaTypeId< Qt::GestureState > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< Qt::GestureState >("Qt::GestureState", reinterpret_cast< Qt::GestureState *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< Qt::GestureType > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< Qt::GestureType >("Qt::GestureType", reinterpret_cast< Qt::GestureType *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 




class QGesturePrivate;
class  QGesture : public QObject
{
Q_OBJECT
inline QGesturePrivate* d_func() { return reinterpret_cast<QGesturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QGesturePrivate* d_func() const { return reinterpret_cast<const QGesturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QGesturePrivate;

Q_PROPERTY(Qt::GestureState state READ state)
Q_PROPERTY(Qt::GestureType gestureType READ gestureType)
Q_PROPERTY(QGesture::GestureCancelPolicy gestureCancelPolicy READ gestureCancelPolicy WRITE setGestureCancelPolicy)
Q_PROPERTY(QPointF hotSpot READ hotSpot WRITE setHotSpot RESET unsetHotSpot)
Q_PROPERTY(bool hasHotSpot READ hasHotSpot)

public:
explicit QGesture(QObject *parent = 0);
~QGesture();

Qt::GestureType gestureType() const;

Qt::GestureState state() const;

QPointF hotSpot() const;
void setHotSpot(const QPointF &value);
bool hasHotSpot() const;
void unsetHotSpot();

enum GestureCancelPolicy {
CancelNone = 0,
CancelAllInContext
};

void setGestureCancelPolicy(GestureCancelPolicy policy);
GestureCancelPolicy gestureCancelPolicy() const;

protected:
QGesture(QGesturePrivate &dd, QObject *parent);

private:
friend class QGestureEvent;
friend class QGestureRecognizer;
friend class QGestureManager;
friend class QGraphicsScenePrivate;
};

class QPanGesturePrivate;
class  QPanGesture : public QGesture
{
Q_OBJECT
inline QPanGesturePrivate* d_func() { return reinterpret_cast<QPanGesturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QPanGesturePrivate* d_func() const { return reinterpret_cast<const QPanGesturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QPanGesturePrivate;

Q_PROPERTY(QPointF lastOffset READ lastOffset WRITE setLastOffset)
Q_PROPERTY(QPointF offset READ offset WRITE setOffset)
Q_PROPERTY(QPointF delta READ delta STORED false)
Q_PROPERTY(qreal acceleration READ acceleration WRITE setAcceleration)
Q_PRIVATE_PROPERTY(QPanGesture::d_func(), qreal horizontalVelocity READ horizontalVelocity WRITE setHorizontalVelocity)
Q_PRIVATE_PROPERTY(QPanGesture::d_func(), qreal verticalVelocity READ verticalVelocity WRITE setVerticalVelocity)

public:
explicit QPanGesture(QObject *parent = 0);
~QPanGesture();

QPointF lastOffset() const;
QPointF offset() const;
QPointF delta() const;
qreal acceleration() const;

void setLastOffset(const QPointF &value);
void setOffset(const QPointF &value);
void setAcceleration(qreal value);

friend class QPanGestureRecognizer;
friend class QWinNativePanGestureRecognizer;
};

class QPinchGesturePrivate;
class  QPinchGesture : public QGesture
{
Q_OBJECT
inline QPinchGesturePrivate* d_func() { return reinterpret_cast<QPinchGesturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QPinchGesturePrivate* d_func() const { return reinterpret_cast<const QPinchGesturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QPinchGesturePrivate;


public:
enum ChangeFlag {
ScaleFactorChanged = 0x1,
RotationAngleChanged = 0x2,
CenterPointChanged = 0x4
};
typedef QFlags<ChangeFlag> ChangeFlags;

Q_PROPERTY(ChangeFlags totalChangeFlags READ totalChangeFlags WRITE setTotalChangeFlags)
Q_PROPERTY(ChangeFlags changeFlags READ changeFlags WRITE setChangeFlags)

Q_PROPERTY(qreal totalScaleFactor READ totalScaleFactor WRITE setTotalScaleFactor)
Q_PROPERTY(qreal lastScaleFactor READ lastScaleFactor WRITE setLastScaleFactor)
Q_PROPERTY(qreal scaleFactor READ scaleFactor WRITE setScaleFactor)

Q_PROPERTY(qreal totalRotationAngle READ totalRotationAngle WRITE setTotalRotationAngle)
Q_PROPERTY(qreal lastRotationAngle READ lastRotationAngle WRITE setLastRotationAngle)
Q_PROPERTY(qreal rotationAngle READ rotationAngle WRITE setRotationAngle)

Q_PROPERTY(QPointF startCenterPoint READ startCenterPoint WRITE setStartCenterPoint)
Q_PROPERTY(QPointF lastCenterPoint READ lastCenterPoint WRITE setLastCenterPoint)
Q_PROPERTY(QPointF centerPoint READ centerPoint WRITE setCenterPoint)

public:
explicit QPinchGesture(QObject *parent = 0);
~QPinchGesture();

ChangeFlags totalChangeFlags() const;
void setTotalChangeFlags(ChangeFlags value);

ChangeFlags changeFlags() const;
void setChangeFlags(ChangeFlags value);

QPointF startCenterPoint() const;
QPointF lastCenterPoint() const;
QPointF centerPoint() const;
void setStartCenterPoint(const QPointF &value);
void setLastCenterPoint(const QPointF &value);
void setCenterPoint(const QPointF &value);

qreal totalScaleFactor() const;
qreal lastScaleFactor() const;
qreal scaleFactor() const;
void setTotalScaleFactor(qreal value);
void setLastScaleFactor(qreal value);
void setScaleFactor(qreal value);

qreal totalRotationAngle() const;
qreal lastRotationAngle() const;
qreal rotationAngle() const;
void setTotalRotationAngle(qreal value);
void setLastRotationAngle(qreal value);
void setRotationAngle(qreal value);

friend class QPinchGestureRecognizer;
};

 inline QFlags<QPinchGesture::ChangeFlags::enum_type> operator|(QPinchGesture::ChangeFlags::enum_type f1, QPinchGesture::ChangeFlags::enum_type f2) { return QFlags<QPinchGesture::ChangeFlags::enum_type>(f1) | f2; }  inline QFlags<QPinchGesture::ChangeFlags::enum_type> operator|(QPinchGesture::ChangeFlags::enum_type f1, QFlags<QPinchGesture::ChangeFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QPinchGesture::ChangeFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



 template <> struct QMetaTypeId< QPinchGesture::ChangeFlags > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QPinchGesture::ChangeFlags >("QPinchGesture::ChangeFlags", reinterpret_cast< QPinchGesture::ChangeFlags *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



class QSwipeGesturePrivate;
class  QSwipeGesture : public QGesture
{
Q_OBJECT
inline QSwipeGesturePrivate* d_func() { return reinterpret_cast<QSwipeGesturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QSwipeGesturePrivate* d_func() const { return reinterpret_cast<const QSwipeGesturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QSwipeGesturePrivate;
Q_ENUMS(SwipeDirection)

Q_PROPERTY(SwipeDirection horizontalDirection READ horizontalDirection STORED false)
Q_PROPERTY(SwipeDirection verticalDirection READ verticalDirection STORED false)
Q_PROPERTY(qreal swipeAngle READ swipeAngle WRITE setSwipeAngle)
Q_PRIVATE_PROPERTY(QSwipeGesture::d_func(), qreal velocity READ velocity WRITE setVelocity)

public:
enum SwipeDirection { NoDirection, Left, Right, Up, Down };

explicit QSwipeGesture(QObject *parent = 0);
~QSwipeGesture();

SwipeDirection horizontalDirection() const;
SwipeDirection verticalDirection() const;

qreal swipeAngle() const;
void setSwipeAngle(qreal value);

friend class QSwipeGestureRecognizer;
};

class QTapGesturePrivate;
class  QTapGesture : public QGesture
{
Q_OBJECT
inline QTapGesturePrivate* d_func() { return reinterpret_cast<QTapGesturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QTapGesturePrivate* d_func() const { return reinterpret_cast<const QTapGesturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QTapGesturePrivate;

Q_PROPERTY(QPointF position READ position WRITE setPosition)

public:
explicit QTapGesture(QObject *parent = 0);
~QTapGesture();

QPointF position() const;
void setPosition(const QPointF &pos);

friend class QTapGestureRecognizer;
};

class QTapAndHoldGesturePrivate;
class  QTapAndHoldGesture : public QGesture
{
Q_OBJECT
inline QTapAndHoldGesturePrivate* d_func() { return reinterpret_cast<QTapAndHoldGesturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QTapAndHoldGesturePrivate* d_func() const { return reinterpret_cast<const QTapAndHoldGesturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QTapAndHoldGesturePrivate;

Q_PROPERTY(QPointF position READ position WRITE setPosition)

public:
explicit QTapAndHoldGesture(QObject *parent = 0);
~QTapAndHoldGesture();

QPointF position() const;
void setPosition(const QPointF &pos);

static void setTimeout(int msecs);
static int timeout();

friend class QTapAndHoldGestureRecognizer;
};

class QGesture;
class QGestureEventPrivate;
class  QGestureEvent : public QEvent
{
public:
explicit QGestureEvent(const QList<QGesture *> &gestures);
~QGestureEvent();

QList<QGesture *> gestures() const;
QGesture *gesture(Qt::GestureType type) const;

QList<QGesture *> activeGestures() const;
QList<QGesture *> canceledGestures() const;


# 287 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"
inline void setAccepted(bool accepted) { QEvent::setAccepted(accepted); }
inline bool isAccepted() const { return QEvent::isAccepted(); }

inline void accept() { QEvent::accept(); }
inline void ignore() { QEvent::ignore(); }







# 299 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"
void setAccepted(QGesture *, bool);
void accept(QGesture *);
void ignore(QGesture *);
bool isAccepted(QGesture *) const;

void setAccepted(Qt::GestureType, bool);
void accept(Qt::GestureType);
void ignore(Qt::GestureType);
bool isAccepted(Qt::GestureType) const;

void setWidget(QWidget *widget);
QWidget *widget() const;


# 313 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"
QPointF mapToGraphicsScene(const QPointF &gesturePoint) const;


# 316 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesture.h"
private:
QList<QGesture *> m_gestures;
QWidget *m_widget;
QMap<Qt::GestureType, bool> m_accepted;
QMap<Qt::GestureType, QWidget *> m_targetWidgets;

friend class QApplication;
friend class QGestureManager;
};



 template <> struct QMetaTypeId< QGesture::GestureCancelPolicy > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QGesture::GestureCancelPolicy >("QGesture::GestureCancelPolicy", reinterpret_cast< QGesture::GestureCancelPolicy *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesturerecognizer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesturerecognizer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesturerecognizer.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgesturerecognizer.h"



class QObject;
class QEvent;
class QGesture;
class  QGestureRecognizer
{
public:
enum ResultFlag
{
Ignore = 0x0001,

MayBeGesture = 0x0002,
TriggerGesture = 0x0004,
FinishGesture = 0x0008,
CancelGesture = 0x0010,

ResultState_Mask = 0x00ff,

ConsumeEventHint = 0x0100,




ResultHint_Mask = 0xff00
};
typedef QFlags<ResultFlag> Result;

QGestureRecognizer();
virtual ~QGestureRecognizer();

virtual QGesture *create(QObject *target);
virtual Result recognize(QGesture *state, QObject *watched,
QEvent *event) = 0;
virtual void reset(QGesture *state);

static Qt::GestureType registerRecognizer(QGestureRecognizer *recognizer);
static void unregisterRecognizer(Qt::GestureType type);
};

 inline QFlags<QGestureRecognizer::Result::enum_type> operator|(QGestureRecognizer::Result::enum_type f1, QGestureRecognizer::Result::enum_type f2) { return QFlags<QGestureRecognizer::Result::enum_type>(f1) | f2; }  inline QFlags<QGestureRecognizer::Result::enum_type> operator|(QGestureRecognizer::Result::enum_type f1, QFlags<QGestureRecognizer::Result::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGestureRecognizer::Result::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }






# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgridlayout.h"





































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"













































































































































































# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayoutitem.h"





















































































































































































# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qshortcut.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qshortcut.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"










































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qshortcut.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qshortcut.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qshortcut.h"
class QShortcutPrivate;
class  QShortcut : public QObject
{
Q_OBJECT
inline QShortcutPrivate* d_func() { return reinterpret_cast<QShortcutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QShortcutPrivate* d_func() const { return reinterpret_cast<const QShortcutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QShortcutPrivate;
Q_PROPERTY(QKeySequence key READ key WRITE setKey)
Q_PROPERTY(QString whatsThis READ whatsThis WRITE setWhatsThis)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled)
Q_PROPERTY(bool autoRepeat READ autoRepeat WRITE setAutoRepeat)
Q_PROPERTY(Qt::ShortcutContext context READ context WRITE setContext)
public:
explicit QShortcut(QWidget *parent);
QShortcut(const QKeySequence& key, QWidget *parent,
const char *member = 0, const char *ambiguousMember = 0,
Qt::ShortcutContext context = Qt::WindowShortcut);
~QShortcut();

void setKey(const QKeySequence& key);
QKeySequence key() const;

void setEnabled(bool enable);
bool isEnabled() const;

void setContext(Qt::ShortcutContext context);
Qt::ShortcutContext context() const;

void setWhatsThis(const QString &text);
QString whatsThis() const;

void setAutoRepeat(bool on);
bool autoRepeat() const;

int id() const;

inline QWidget *parentWidget() const
{ return static_cast<QWidget *>(QObject::parent()); }

signals:
void activated();
void activatedAmbiguously();

protected:
bool event(QEvent *e);
};



# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qshortcut.h"



# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
























































































































































































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedlayout.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlayout.h"













































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedlayout.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedlayout.h"



class QStackedLayoutPrivate;

class  QStackedLayout : public QLayout
{
Q_OBJECT
inline QStackedLayoutPrivate* d_func() { return reinterpret_cast<QStackedLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QStackedLayoutPrivate* d_func() const { return reinterpret_cast<const QStackedLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QStackedLayoutPrivate;
Q_ENUMS(StackingMode)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(StackingMode stackingMode READ stackingMode WRITE setStackingMode)


public:
enum StackingMode {
StackOne,
StackAll
};

QStackedLayout();
explicit QStackedLayout(QWidget *parent);
explicit QStackedLayout(QLayout *parentLayout);
~QStackedLayout();

int addWidget(QWidget *w);
int insertWidget(int index, QWidget *w);

QWidget *currentWidget() const;
int currentIndex() const;

# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedlayout.h"
inline QWidget *widget() { return QLayout::widget(); }



# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedlayout.h"
QWidget *widget(int) const;
int count() const;

StackingMode stackingMode() const;
void setStackingMode(StackingMode stackingMode);


void addItem(QLayoutItem *item);
QSize sizeHint() const;
QSize minimumSize() const;
QLayoutItem *itemAt(int) const;
QLayoutItem *takeAt(int);
void setGeometry(const QRect &rect);
bool hasHeightForWidth() const;
int heightForWidth(int width) const;

signals:
void widgetRemoved(int index);
void currentChanged(int index);

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *w);

private:
QStackedLayout(const QStackedLayout &) ; QStackedLayout &operator=(const QStackedLayout &) ;
};




# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtooltip.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtooltip.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtooltip.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtooltip.h"
class  QToolTip
{
QToolTip() ;
public:
static void showText(const QPoint &pos, const QString &text, QWidget *w = 0);
static void showText(const QPoint &pos, const QString &text, QWidget *w, const QRect &rect);
static inline void hideText() { showText(QPoint(), QString()); }

static bool isVisible();
static QString text();

static QPalette palette();
static void setPalette(const QPalette &);
static QFont font();
static void setFont(const QFont &);
};



# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtooltip.h"



# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwhatsthis.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwhatsthis.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcursor.h"































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwhatsthis.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwhatsthis.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwhatsthis.h"
class QAction;

class  QWhatsThis
{
QWhatsThis() ;

public:
static void enterWhatsThisMode();
static bool inWhatsThisMode();
static void leaveWhatsThisMode();

static void showText(const QPoint &pos, const QString &text, QWidget *w = 0);
static void hideText();

static QAction *createAction(QObject *parent = 0);

};



# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwhatsthis.h"



# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidgetaction.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"






























































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidgetaction.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidgetaction.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidgetaction.h"
class QWidgetActionPrivate;

class  QWidgetAction : public QAction
{
Q_OBJECT
inline QWidgetActionPrivate* d_func() { return reinterpret_cast<QWidgetActionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QWidgetActionPrivate* d_func() const { return reinterpret_cast<const QWidgetActionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QWidgetActionPrivate;

public:
explicit QWidgetAction(QObject *parent);
virtual ~QWidgetAction();

void setDefaultWidget(QWidget *w);
QWidget *defaultWidget() const;

QWidget *requestWidget(QWidget *parent);
void releaseWidget(QWidget *widget);

protected:
virtual bool event(QEvent *);
virtual bool eventFilter(QObject *, QEvent *);
virtual QWidget *createWidget(QWidget *parent);
virtual void deleteWidget(QWidget *widget);
QList<QWidget *> createdWidgets() const;

private:
QWidgetAction(const QWidgetAction &) ; QWidgetAction &operator=(const QWidgetAction &) ;

friend class QToolBar;
};



# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidgetaction.h"



# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qkeyeventtransition.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"


























































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qkeyeventtransition.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qkeyeventtransition.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qkeyeventtransition.h"
class QKeyEventTransitionPrivate;
class  QKeyEventTransition : public QEventTransition
{
Q_OBJECT
Q_PROPERTY(int key READ key WRITE setKey)
Q_PROPERTY(Qt::KeyboardModifiers modifierMask READ modifierMask WRITE setModifierMask)
public:
QKeyEventTransition(QState *sourceState = 0);
QKeyEventTransition(QObject *object, QEvent::Type type, int key,
QState *sourceState = 0);
~QKeyEventTransition();

int key() const;
void setKey(int key);

Qt::KeyboardModifiers modifierMask() const;
void setModifierMask(Qt::KeyboardModifiers modifiers);

protected:
void onTransition(QEvent *event);
bool eventTest(QEvent *event);

private:
QKeyEventTransition(const QKeyEventTransition &) ; QKeyEventTransition &operator=(const QKeyEventTransition &) ;
inline QKeyEventTransitionPrivate* d_func() { return reinterpret_cast<QKeyEventTransitionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QKeyEventTransitionPrivate* d_func() const { return reinterpret_cast<const QKeyEventTransitionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QKeyEventTransitionPrivate;
};



# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qkeyeventtransition.h"



# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmouseeventtransition.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qeventtransition.h"


























































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmouseeventtransition.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmouseeventtransition.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmouseeventtransition.h"
class QMouseEventTransitionPrivate;
class QPainterPath;
class  QMouseEventTransition : public QEventTransition
{
Q_OBJECT
Q_PROPERTY(Qt::MouseButton button READ button WRITE setButton)
Q_PROPERTY(Qt::KeyboardModifiers modifierMask READ modifierMask WRITE setModifierMask)
public:
QMouseEventTransition(QState *sourceState = 0);
QMouseEventTransition(QObject *object, QEvent::Type type,
Qt::MouseButton button, QState *sourceState = 0);
~QMouseEventTransition();

Qt::MouseButton button() const;
void setButton(Qt::MouseButton button);

Qt::KeyboardModifiers modifierMask() const;
void setModifierMask(Qt::KeyboardModifiers modifiers);

QPainterPath hitTestPath() const;
void setHitTestPath(const QPainterPath &path);

protected:
void onTransition(QEvent *event);
bool eventTest(QEvent *event);

private:
QMouseEventTransition(const QMouseEventTransition &) ; QMouseEventTransition &operator=(const QMouseEventTransition &) ;
inline QMouseEventTransitionPrivate* d_func() { return reinterpret_cast<QMouseEventTransitionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMouseEventTransitionPrivate* d_func() const { return reinterpret_cast<const QMouseEventTransitionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMouseEventTransitionPrivate;
};



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmouseeventtransition.h"



# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommonstyle.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommonstyle.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommonstyle.h"


class QCommonStylePrivate;

class  QCommonStyle: public QStyle
{
Q_OBJECT

public:
QCommonStyle();
~QCommonStyle();

void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p,
const QWidget *w = 0) const;
QRect subElementRect(SubElement r, const QStyleOption *opt, const QWidget *widget = 0) const;
void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p,
const QWidget *w = 0) const;
SubControl hitTestComplexControl(ComplexControl cc, const QStyleOptionComplex *opt,
const QPoint &pt, const QWidget *w = 0) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc,
const QWidget *w = 0) const;
QSize sizeFromContents(ContentsType ct, const QStyleOption *opt,
const QSize &contentsSize, const QWidget *widget = 0) const;

int pixelMetric(PixelMetric m, const QStyleOption *opt = 0, const QWidget *widget = 0) const;

int styleHint(StyleHint sh, const QStyleOption *opt = 0, const QWidget *w = 0,
QStyleHintReturn *shret = 0) const;

QIcon standardIcon(StandardPixmap standardIcon, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;
QPixmap standardPixmap(StandardPixmap sp, const QStyleOption *opt = 0,
const QWidget *widget = 0) const;

QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap,
const QStyleOption *opt) const;
int layoutSpacing(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2,
Qt::Orientation orientation, const QStyleOption *option = 0,
const QWidget *widget = 0) const;

void polish(QPalette &);
void polish(QApplication *app);
void polish(QWidget *widget);
void unpolish(QWidget *widget);
void unpolish(QApplication *application);

protected:
QCommonStyle(QCommonStylePrivate &dd);

private:
inline QCommonStylePrivate* d_func() { return reinterpret_cast<QCommonStylePrivate *>(qGetPtrHelper(d_ptr)); } inline const QCommonStylePrivate* d_func() const { return reinterpret_cast<const QCommonStylePrivate *>(qGetPtrHelper(d_ptr)); } friend class QCommonStylePrivate;
QCommonStyle(const QCommonStyle &) ; QCommonStyle &operator=(const QCommonStyle &) ;

};




# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmargins.h"
















































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"



class QPainter;
class QPalette;
class QPoint;
class QColor;
class QBrush;
class QRect;





 void qDrawShadeLine(QPainter *p, int x1, int y1, int x2, int y2,
const QPalette &pal, bool sunken = true,
int lineWidth = 1, int midLineWidth = 0);

 void qDrawShadeLine(QPainter *p, const QPoint &p1, const QPoint &p2,
const QPalette &pal, bool sunken = true,
int lineWidth = 1, int midLineWidth = 0);

 void qDrawShadeRect(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, int midLineWidth = 0,
const QBrush *fill = 0);

 void qDrawShadeRect(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, int midLineWidth = 0,
const QBrush *fill = 0);

 void qDrawShadePanel(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, const QBrush *fill = 0);

 void qDrawShadePanel(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
int lineWidth = 1, const QBrush *fill = 0);

 void qDrawWinButton(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawWinButton(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawWinPanel(QPainter *p, int x, int y, int w, int h,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawWinPanel(QPainter *p, const QRect &r,
const QPalette &pal, bool sunken = false,
const QBrush *fill = 0);

 void qDrawPlainRect(QPainter *p, int x, int y, int w, int h, const QColor &,
int lineWidth = 1, const QBrush *fill = 0);

 void qDrawPlainRect(QPainter *p, const QRect &r, const QColor &,
int lineWidth = 1, const QBrush *fill = 0);



struct QTileRules
{
inline QTileRules(Qt::TileRule horizontalRule, Qt::TileRule verticalRule)
: horizontal(horizontalRule), vertical(verticalRule) {}
inline QTileRules(Qt::TileRule rule = Qt::StretchTile)
: horizontal(rule), vertical(rule) {}
Qt::TileRule horizontal;
Qt::TileRule vertical;
};


# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"

namespace QDrawBorderPixmap
{
enum DrawingHint
{
OpaqueTopLeft = 0x0001,
OpaqueTop = 0x0002,
OpaqueTopRight = 0x0004,
OpaqueLeft = 0x0008,
OpaqueCenter = 0x0010,
OpaqueRight = 0x0020,
OpaqueBottomLeft = 0x0040,
OpaqueBottom = 0x0080,
OpaqueBottomRight = 0x0100,
OpaqueCorners = OpaqueTopLeft | OpaqueTopRight | OpaqueBottomLeft | OpaqueBottomRight,
OpaqueEdges = OpaqueTop | OpaqueLeft | OpaqueRight | OpaqueBottom,
OpaqueFrame = OpaqueCorners | OpaqueEdges,
OpaqueAll = OpaqueCenter | OpaqueFrame
};

typedef QFlags<DrawingHint> DrawingHints;
}


# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"
 void qDrawBorderPixmap(QPainter *painter,
const QRect &targetRect,
const QMargins &targetMargins,
const QPixmap &pixmap,
const QRect &sourceRect,
const QMargins &sourceMargins,
const QTileRules &rules = QTileRules()

# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"
, QDrawBorderPixmap::DrawingHints hints = 0

# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdrawutil.h"
);

inline void qDrawBorderPixmap(QPainter *painter,
const QRect &target,
const QMargins &margins,
const QPixmap &pixmap)
{
qDrawBorderPixmap(painter, target, margins, pixmap, pixmap.rect(), margins);
}




# 66 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qproxystyle.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommonstyle.h"










































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QCommonStyle"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qproxystyle.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qproxystyle.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qproxystyle.h"
class QProxyStylePrivate;
class  QProxyStyle : public QCommonStyle
{
Q_OBJECT

public:
QProxyStyle(QStyle *style = 0);
QProxyStyle(const QString &key);
~QProxyStyle();

QStyle *baseStyle() const;
void setBaseStyle(QStyle *style);

void drawPrimitive(PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget = 0) const;
void drawControl(ControlElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget = 0) const;
void drawComplexControl(ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget = 0) const;
void drawItemText(QPainter *painter, const QRect &rect, int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole) const;
virtual void drawItemPixmap(QPainter *painter, const QRect &rect, int alignment, const QPixmap &pixmap) const;

QSize sizeFromContents(ContentsType type, const QStyleOption *option, const QSize &size, const QWidget *widget) const;

QRect subElementRect(SubElement element, const QStyleOption *option, const QWidget *widget) const;
QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget) const;
QRect itemTextRect(const QFontMetrics &fm, const QRect &r, int flags, bool enabled, const QString &text) const;
QRect itemPixmapRect(const QRect &r, int flags, const QPixmap &pixmap) const;

SubControl hitTestComplexControl(ComplexControl control, const QStyleOptionComplex *option, const QPoint &pos, const QWidget *widget = 0) const;
int styleHint(StyleHint hint, const QStyleOption *option = 0, const QWidget *widget = 0, QStyleHintReturn *returnData = 0) const;
int pixelMetric(PixelMetric metric, const QStyleOption *option = 0, const QWidget *widget = 0) const;
int layoutSpacing(QSizePolicy::ControlType control1, QSizePolicy::ControlType control2,
Qt::Orientation orientation, const QStyleOption *option = 0, const QWidget *widget = 0) const;

QIcon standardIcon(StandardPixmap standardIcon, const QStyleOption *option = 0, const QWidget *widget = 0) const;
QPixmap standardPixmap(StandardPixmap standardPixmap, const QStyleOption *opt, const QWidget *widget = 0) const;
QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap, const QStyleOption *opt) const;
QPalette standardPalette() const;

void polish(QWidget *widget);
void polish(QPalette &pal);
void polish(QApplication *app);

void unpolish(QWidget *widget);
void unpolish(QApplication *app);

protected:
bool event(QEvent *e);

private:
QProxyStyle(const QProxyStyle &) ; QProxyStyle &operator=(const QProxyStyle &) ;
inline QProxyStylePrivate* d_func() { return reinterpret_cast<QProxyStylePrivate *>(qGetPtrHelper(d_ptr)); } inline const QProxyStylePrivate* d_func() const { return reinterpret_cast<const QProxyStylePrivate *>(qGetPtrHelper(d_ptr)); } friend class QProxyStylePrivate;
};



# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qproxystyle.h"



# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































# 68 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylefactory.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylefactory.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylefactory.h"



class QStyle;

class  QStyleFactory
{
public:
static QStringList keys();
static QStyle *create(const QString&);
};




# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleoption.h"
















































































































































































































































































































































































































































































































































































































































































































































































# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylepainter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylepainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyle.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylepainter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylepainter.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstylepainter.h"



class QStylePainter : public QPainter
{
public:
inline QStylePainter() : QPainter(), widget(0), wstyle(0) {}
inline explicit QStylePainter(QWidget *w) { begin(w, w); }
inline QStylePainter(QPaintDevice *pd, QWidget *w) { begin(pd, w); }
inline bool begin(QWidget *w) { return begin(w, w); }
inline bool begin(QPaintDevice *pd, QWidget *w) {
qt_noop();
widget = w;
wstyle = w->style();
return QPainter::begin(pd);
};
inline void drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption &opt);
inline void drawControl(QStyle::ControlElement ce, const QStyleOption &opt);
inline void drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex &opt);
inline void drawItemText(const QRect &r, int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole = QPalette::NoRole);
inline void drawItemPixmap(const QRect &r, int flags, const QPixmap &pixmap);
inline QStyle *style() const { return wstyle; }

private:
QWidget *widget;
QStyle *wstyle;
QStylePainter(const QStylePainter &) ; QStylePainter &operator=(const QStylePainter &) ;
};

void QStylePainter::drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption &opt)
{
wstyle->drawPrimitive(pe, &opt, this, widget);
}

void QStylePainter::drawControl(QStyle::ControlElement ce, const QStyleOption &opt)
{
wstyle->drawControl(ce, &opt, this, widget);
}

void QStylePainter::drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex &opt)
{
wstyle->drawComplexControl(cc, &opt, this, widget);
}

void QStylePainter::drawItemText(const QRect &r, int flags, const QPalette &pal, bool enabled,
const QString &text, QPalette::ColorRole textRole)
{
wstyle->drawItemText(this, r, flags, pal, enabled, text, textRole);
}

void QStylePainter::drawItemPixmap(const QRect &r, int flags, const QPixmap &pixmap)
{
wstyle->drawItemPixmap(this, r, flags, pixmap);
}




# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfactoryinterface.h"






























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleplugin.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleplugin.h"



class QStyle;



# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstyleplugin.h"
class  QStylePlugin : public QObject
{
Q_OBJECT
public:
explicit QStylePlugin(QObject *parent = 0);
~QStylePlugin();

virtual QStyle *create(const QString &key) = 0;
};




# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolormap.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qatomic.h"








































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolormap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qrgb.h"




















































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolormap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolormap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindowdefs.h"

























































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolormap.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcolormap.h"



class QColor;
class QColormapPrivate;

class  QColormap
{
public:
enum Mode { Direct, Indexed, Gray };

static void initialize();
static void cleanup();

static QColormap instance(int screen = -1);

QColormap(const QColormap &colormap);
~QColormap();

QColormap &operator=(const QColormap &colormap);

Mode mode() const;

int depth() const;
int size() const;

uint pixel(const QColor &color) const;
const QColor colorAt(uint pixel) const;

const QVector<QColor> colormap() const;

private:
QColormap();
QColormapPrivate *d;
};




# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"





# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"
class QCompleterPrivate;
class QAbstractItemView;
class QAbstractProxyModel;
class QWidget;

class  QCompleter : public QObject
{
Q_OBJECT
Q_PROPERTY(QString completionPrefix READ completionPrefix WRITE setCompletionPrefix)
Q_PROPERTY(ModelSorting modelSorting READ modelSorting WRITE setModelSorting)
Q_PROPERTY(CompletionMode completionMode READ completionMode WRITE setCompletionMode)
Q_PROPERTY(int completionColumn READ completionColumn WRITE setCompletionColumn)
Q_PROPERTY(int completionRole READ completionRole WRITE setCompletionRole)
Q_PROPERTY(int maxVisibleItems READ maxVisibleItems WRITE setMaxVisibleItems)
Q_PROPERTY(Qt::CaseSensitivity caseSensitivity READ caseSensitivity WRITE setCaseSensitivity)
Q_PROPERTY(bool wrapAround READ wrapAround WRITE setWrapAround)

public:
enum CompletionMode {
PopupCompletion,
UnfilteredPopupCompletion,
InlineCompletion
};

enum ModelSorting {
UnsortedModel = 0,
CaseSensitivelySortedModel,
CaseInsensitivelySortedModel
};

QCompleter(QObject *parent = 0);
QCompleter(QAbstractItemModel *model, QObject *parent = 0);

# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"
QCompleter(const QStringList& completions, QObject *parent = 0);

# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"
~QCompleter();

void setWidget(QWidget *widget);
QWidget *widget() const;

void setModel(QAbstractItemModel *c);
QAbstractItemModel *model() const;

void setCompletionMode(CompletionMode mode);
CompletionMode completionMode() const;

QAbstractItemView *popup() const;
void setPopup(QAbstractItemView *popup);

void setCaseSensitivity(Qt::CaseSensitivity caseSensitivity);
Qt::CaseSensitivity caseSensitivity() const;

void setModelSorting(ModelSorting sorting);
ModelSorting modelSorting() const;

void setCompletionColumn(int column);
int completionColumn() const;

void setCompletionRole(int role);
int completionRole() const;

bool wrapAround() const;

int maxVisibleItems() const;
void setMaxVisibleItems(int maxItems);

int completionCount() const;
bool setCurrentRow(int row);
int currentRow() const;

QModelIndex currentIndex() const;
QString currentCompletion() const;

QAbstractItemModel *completionModel() const;

QString completionPrefix() const;

public slots:
void setCompletionPrefix(const QString &prefix);
void complete(const QRect& rect = QRect());
void setWrapAround(bool wrap);

public:
virtual QString pathFromIndex(const QModelIndex &index) const;
virtual QStringList splitPath(const QString &path) const;

protected:
bool eventFilter(QObject *o, QEvent *e);
bool event(QEvent *);

signals:
void activated(const QString &text);
void activated(const QModelIndex &index);
void highlighted(const QString &text);
void highlighted(const QModelIndex &index);

private:
QCompleter(const QCompleter &) ; QCompleter &operator=(const QCompleter &) ;
inline QCompleterPrivate* d_func() { return reinterpret_cast<QCompleterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QCompleterPrivate* d_func() const { return reinterpret_cast<const QCompleterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QCompleterPrivate;





};



# 164 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcompleter.h"



# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpoint.h"








































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QPointF"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollerproperties.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollerproperties.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMetaType"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollerproperties.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVariant"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollerproperties.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollerproperties.h"



class QScroller;
class QScrollerPrivate;
class QScrollerPropertiesPrivate;

class  QScrollerProperties
{
public:
QScrollerProperties();
QScrollerProperties(const QScrollerProperties &sp);
QScrollerProperties &operator=(const QScrollerProperties &sp);
virtual ~QScrollerProperties();

bool operator==(const QScrollerProperties &sp) const;
bool operator!=(const QScrollerProperties &sp) const;

static void setDefaultScrollerProperties(const QScrollerProperties &sp);
static void unsetDefaultScrollerProperties();

enum OvershootPolicy
{
OvershootWhenScrollable,
OvershootAlwaysOff,
OvershootAlwaysOn
};

enum FrameRates {
Standard,
Fps60,
Fps30,
Fps20
};

enum ScrollMetric
{
MousePressEventDelay, 
DragStartDistance, 
DragVelocitySmoothingFactor, 
AxisLockThreshold, 

ScrollingCurve, 
DecelerationFactor, 

MinimumVelocity, 
MaximumVelocity, 
MaximumClickThroughVelocity, 

AcceleratingFlickMaximumTime, 
AcceleratingFlickSpeedupFactor, 

SnapPositionRatio, 
SnapTime, 

OvershootDragResistanceFactor, 
OvershootDragDistanceFactor, 
OvershootScrollDistanceFactor, 
OvershootScrollTime, 

HorizontalOvershootPolicy, 
VerticalOvershootPolicy, 
FrameRate, 

ScrollMetricCount
};

QVariant scrollMetric(ScrollMetric metric) const;
void setScrollMetric(ScrollMetric metric, const QVariant &value);

protected:
QScopedPointer<QScrollerPropertiesPrivate> d;

private:
QScrollerProperties(QScrollerPropertiesPrivate &dd);

friend class QScrollerPropertiesPrivate;
friend class QScroller;
friend class QScrollerPrivate;
};



 template <> struct QMetaTypeId< QScrollerProperties::OvershootPolicy > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QScrollerProperties::OvershootPolicy >("QScrollerProperties::OvershootPolicy", reinterpret_cast< QScrollerProperties::OvershootPolicy *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QScrollerProperties::FrameRates > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QScrollerProperties::FrameRates >("QScrollerProperties::FrameRates", reinterpret_cast< QScrollerProperties::FrameRates *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QScrollerProperties"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"



class QWidget;
class QScrollerPrivate;
class QScrollerProperties;

# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"
class QFlickGestureRecognizer;
class QMouseFlickGestureRecognizer;


# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"
class  QScroller : public QObject
{
Q_OBJECT
Q_PROPERTY(State state READ state NOTIFY stateChanged)
Q_PROPERTY(QScrollerProperties scrollerProperties READ scrollerProperties WRITE setScrollerProperties NOTIFY scrollerPropertiesChanged)
Q_ENUMS(State)

public:
enum State
{
Inactive,
Pressed,
Dragging,
Scrolling
};

enum ScrollerGestureType
{
TouchGesture,
LeftMouseButtonGesture,
RightMouseButtonGesture,
MiddleMouseButtonGesture
};

enum Input
{
InputPress = 1,
InputMove,
InputRelease
};

static bool hasScroller(QObject *target);

static QScroller *scroller(QObject *target);
static const QScroller *scroller(const QObject *target);


# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"
static Qt::GestureType grabGesture(QObject *target, ScrollerGestureType gestureType = TouchGesture);
static Qt::GestureType grabbedGesture(QObject *target);
static void ungrabGesture(QObject *target);


# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"
static QList<QScroller *> activeScrollers();

QObject *target() const;

State state() const;

bool handleInput(Input input, const QPointF &position, qint64 timestamp = 0);

void stop();
QPointF velocity() const;
QPointF finalPosition() const;
QPointF pixelPerMeter() const;

QScrollerProperties scrollerProperties() const;

void setSnapPositionsX( const QList<qreal> &positions );
void setSnapPositionsX( qreal first, qreal interval );
void setSnapPositionsY( const QList<qreal> &positions );
void setSnapPositionsY( qreal first, qreal interval );

public slots:
void setScrollerProperties(const QScrollerProperties &prop);
void scrollTo(const QPointF &pos);
void scrollTo(const QPointF &pos, int scrollTime);
void ensureVisible(const QRectF &rect, qreal xmargin, qreal ymargin);
void ensureVisible(const QRectF &rect, qreal xmargin, qreal ymargin, int scrollTime);
void resendPrepareEvent();

signals:
void stateChanged(QScroller::State newstate);
void scrollerPropertiesChanged(const QScrollerProperties &);

private:
QScrollerPrivate *d_ptr;

QScroller(QObject *target);
virtual ~QScroller();

QScroller(const QScroller &) ; QScroller &operator=(const QScroller &) ;
inline QScrollerPrivate* d_func() { return reinterpret_cast<QScrollerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QScrollerPrivate* d_func() const { return reinterpret_cast<const QScrollerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QScrollerPrivate;


# 144 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"
friend class QFlickGestureRecognizer;

# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscroller.h"
};




# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollerproperties.h"







































































































































# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsystemtrayicon.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsystemtrayicon.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsystemtrayicon.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsystemtrayicon.h"



class QSystemTrayIconPrivate;

class QMenu;
class QEvent;
class QWheelEvent;
class QMouseEvent;
class QPoint;

class  QSystemTrayIcon : public QObject
{
Q_OBJECT
Q_PROPERTY(QString toolTip READ toolTip WRITE setToolTip)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible DESIGNABLE false)

public:
QSystemTrayIcon(QObject *parent = 0);
QSystemTrayIcon(const QIcon &icon, QObject *parent = 0);
~QSystemTrayIcon();

enum ActivationReason {
Unknown,
Context,
DoubleClick,
Trigger,
MiddleClick
};


# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsystemtrayicon.h"
void setContextMenu(QMenu *menu);
QMenu *contextMenu() const;


# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsystemtrayicon.h"
QIcon icon() const;
void setIcon(const QIcon &icon);

QString toolTip() const;
void setToolTip(const QString &tip);

static bool isSystemTrayAvailable();
static bool supportsMessages();

enum MessageIcon { NoIcon, Information, Warning, Critical };
void showMessage(const QString &title, const QString &msg,
MessageIcon icon = Information, int msecs = 10000);

QRect geometry() const;
bool isVisible() const;

public slots:
void setVisible(bool visible);
inline void show() { setVisible(true); }
inline void hide() { setVisible(false); }

signals:
void activated(QSystemTrayIcon::ActivationReason reason);
void messageClicked();

protected:
bool event(QEvent *event);

private:
QSystemTrayIcon(const QSystemTrayIcon &) ; QSystemTrayIcon &operator=(const QSystemTrayIcon &) ;
inline QSystemTrayIconPrivate* d_func() { return reinterpret_cast<QSystemTrayIconPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSystemTrayIconPrivate* d_func() const { return reinterpret_cast<const QSystemTrayIconPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSystemTrayIconPrivate;



friend class QSystemTrayIconSys;
friend class QBalloonTip;
};





# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"


class QUndoGroupPrivate;
class QUndoStack;
class QAction;




# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"
class  QUndoGroup : public QObject
{
Q_OBJECT
inline QUndoGroupPrivate* d_func() { return reinterpret_cast<QUndoGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QUndoGroupPrivate* d_func() const { return reinterpret_cast<const QUndoGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QUndoGroupPrivate;

public:
explicit QUndoGroup(QObject *parent = 0);
~QUndoGroup();

void addStack(QUndoStack *stack);
void removeStack(QUndoStack *stack);
QList<QUndoStack*> stacks() const;
QUndoStack *activeStack() const;


# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"
QAction *createUndoAction(QObject *parent,
const QString &prefix = QString()) const;
QAction *createRedoAction(QObject *parent,
const QString &prefix = QString()) const;

# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"
bool canUndo() const;
bool canRedo() const;
QString undoText() const;
QString redoText() const;
bool isClean() const;

public slots:
void undo();
void redo();
void setActiveStack(QUndoStack *stack);

signals:
void activeStackChanged(QUndoStack *stack);
void indexChanged(int idx);
void cleanChanged(bool clean);
void canUndoChanged(bool canUndo);
void canRedoChanged(bool canRedo);
void undoTextChanged(const QString &undoText);
void redoTextChanged(const QString &redoText);

private:
QUndoGroup(const QUndoGroup &) ; QUndoGroup &operator=(const QUndoGroup &) ;
};



# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundogroup.h"



# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"



class QAction;
class QUndoCommandPrivate;
class QUndoStackPrivate;



# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"
class  QUndoCommand
{
QUndoCommandPrivate *d;

public:
explicit QUndoCommand(QUndoCommand *parent = 0);
explicit QUndoCommand(const QString &text, QUndoCommand *parent = 0);
virtual ~QUndoCommand();

virtual void undo();
virtual void redo();

QString text() const;
QString actionText() const;
void setText(const QString &text);

virtual int id() const;
virtual bool mergeWith(const QUndoCommand *other);

int childCount() const;
const QUndoCommand *child(int index) const;

private:
QUndoCommand(const QUndoCommand &) ; QUndoCommand &operator=(const QUndoCommand &) ;
friend class QUndoStack;
};





# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"
class  QUndoStack : public QObject
{
Q_OBJECT
inline QUndoStackPrivate* d_func() { return reinterpret_cast<QUndoStackPrivate *>(qGetPtrHelper(d_ptr)); } inline const QUndoStackPrivate* d_func() const { return reinterpret_cast<const QUndoStackPrivate *>(qGetPtrHelper(d_ptr)); } friend class QUndoStackPrivate;
Q_PROPERTY(bool active READ isActive WRITE setActive)
Q_PROPERTY(int undoLimit READ undoLimit WRITE setUndoLimit)

public:
explicit QUndoStack(QObject *parent = 0);
~QUndoStack();
void clear();

void push(QUndoCommand *cmd);

bool canUndo() const;
bool canRedo() const;
QString undoText() const;
QString redoText() const;

int count() const;
int index() const;
QString text(int idx) const;


# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"
QAction *createUndoAction(QObject *parent,
const QString &prefix = QString()) const;
QAction *createRedoAction(QObject *parent,
const QString &prefix = QString()) const;


# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"
bool isActive() const;
bool isClean() const;
int cleanIndex() const;

void beginMacro(const QString &text);
void endMacro();

void setUndoLimit(int limit);
int undoLimit() const;

const QUndoCommand *command(int index) const;

public slots:
void setClean();
void setIndex(int idx);
void undo();
void redo();
void setActive(bool active = true);

signals:
void indexChanged(int idx);
void cleanChanged(bool clean);
void canUndoChanged(bool canUndo);
void canRedoChanged(bool canRedo);
void undoTextChanged(const QString &undoText);
void redoTextChanged(const QString &redoText);

private:
QUndoStack(const QUndoStack &) ; QUndoStack &operator=(const QUndoStack &) ;
friend class QUndoGroup;
};



# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundostack.h"



# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlistview.h"


































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"


class QUndoViewPrivate;
class QUndoStack;
class QUndoGroup;
class QIcon;


class  QUndoView : public QListView
{
Q_OBJECT
inline QUndoViewPrivate* d_func() { return reinterpret_cast<QUndoViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QUndoViewPrivate* d_func() const { return reinterpret_cast<const QUndoViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QUndoViewPrivate;
Q_PROPERTY(QString emptyLabel READ emptyLabel WRITE setEmptyLabel)
Q_PROPERTY(QIcon cleanIcon READ cleanIcon WRITE setCleanIcon)

public:
explicit QUndoView(QWidget *parent = 0);
explicit QUndoView(QUndoStack *stack, QWidget *parent = 0);

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"
explicit QUndoView(QUndoGroup *group, QWidget *parent = 0);

# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"
~QUndoView();

QUndoStack *stack() const;

# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"
QUndoGroup *group() const;


# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"
void setEmptyLabel(const QString &label);
QString emptyLabel() const;

void setCleanIcon(const QIcon &icon);
QIcon cleanIcon() const;

public slots:
void setStack(QUndoStack *stack);

# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"
void setGroup(QUndoGroup *group);


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qundoview.h"
private:
QUndoView(const QUndoView &) ; QUndoView &operator=(const QUndoView &) ;
};





# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qkeysequence.h"










































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"



class QButtonGroup;
class QAbstractButtonPrivate;

class  QAbstractButton : public QWidget
{
Q_OBJECT

Q_PROPERTY(QString text READ text WRITE setText)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"
Q_PROPERTY(QKeySequence shortcut READ shortcut WRITE setShortcut)

# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"
Q_PROPERTY(bool checkable READ isCheckable WRITE setCheckable)
Q_PROPERTY(bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled USER true)
Q_PROPERTY(bool autoRepeat READ autoRepeat WRITE setAutoRepeat)
Q_PROPERTY(bool autoExclusive READ autoExclusive WRITE setAutoExclusive)
Q_PROPERTY(int autoRepeatDelay READ autoRepeatDelay WRITE setAutoRepeatDelay)
Q_PROPERTY(int autoRepeatInterval READ autoRepeatInterval WRITE setAutoRepeatInterval)
Q_PROPERTY(bool down READ isDown WRITE setDown DESIGNABLE false)

public:
explicit QAbstractButton(QWidget* parent=0);
~QAbstractButton();

void setText(const QString &text);
QString text() const;

void setIcon(const QIcon &icon);
QIcon icon() const;

QSize iconSize() const;


# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"
void setShortcut(const QKeySequence &key);
QKeySequence shortcut() const;


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"
void setCheckable(bool);
bool isCheckable() const;

bool isChecked() const;

void setDown(bool);
bool isDown() const;

void setAutoRepeat(bool);
bool autoRepeat() const;

void setAutoRepeatDelay(int);
int autoRepeatDelay() const;

void setAutoRepeatInterval(int);
int autoRepeatInterval() const;

void setAutoExclusive(bool);
bool autoExclusive() const;


# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"
QButtonGroup *group() const;


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"
public slots:
void setIconSize(const QSize &size);
void animateClick(int msec = 100);
void click();
void toggle();
void setChecked(bool);

signals:
void pressed();
void released();
void clicked(bool checked = false);
void toggled(bool checked);

protected:
virtual void paintEvent(QPaintEvent *e) = 0;
virtual bool hitButton(const QPoint &pos) const;
virtual void checkStateSet();
virtual void nextCheckState();

bool event(QEvent *e);
void keyPressEvent(QKeyEvent *e);
void keyReleaseEvent(QKeyEvent *e);
void mousePressEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);
void mouseMoveEvent(QMouseEvent *e);
void focusInEvent(QFocusEvent *e);
void focusOutEvent(QFocusEvent *e);
void changeEvent(QEvent *e);
void timerEvent(QTimerEvent *e);


protected:
QAbstractButton(QAbstractButtonPrivate &dd, QWidget* parent = 0);

private:
inline QAbstractButtonPrivate* d_func() { return reinterpret_cast<QAbstractButtonPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractButtonPrivate* d_func() const { return reinterpret_cast<const QAbstractButtonPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractButtonPrivate;
QAbstractButton(const QAbstractButton &) ; QAbstractButton &operator=(const QAbstractButton &) ;
friend class QButtonGroup;
};




# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"













































































































































# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"




































































































































































# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"
















































































































































































# 84 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qbuttongroup.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qbuttongroup.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qbuttongroup.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qbuttongroup.h"
class QAbstractButton;
class QAbstractButtonPrivate;
class QButtonGroupPrivate;

class  QButtonGroup : public QObject
{
Q_OBJECT

Q_PROPERTY(bool exclusive READ exclusive WRITE setExclusive)
public:
explicit QButtonGroup(QObject *parent = 0);
~QButtonGroup();

void setExclusive(bool);
bool exclusive() const;

void addButton(QAbstractButton *, int id = -1);
void removeButton(QAbstractButton *);

QList<QAbstractButton*> buttons() const;

QAbstractButton * checkedButton() const;


QAbstractButton *button(int id) const;
void setId(QAbstractButton *button, int id);
int id(QAbstractButton *button) const;
int checkedId() const;

signals:
void buttonClicked(QAbstractButton *);
void buttonClicked(int);
void buttonPressed(QAbstractButton *);
void buttonPressed(int);
void buttonReleased(QAbstractButton *);
void buttonReleased(int);


private:
QButtonGroup(const QButtonGroup &) ; QButtonGroup &operator=(const QButtonGroup &) ;
inline QButtonGroupPrivate* d_func() { return reinterpret_cast<QButtonGroupPrivate *>(qGetPtrHelper(d_ptr)); } inline const QButtonGroupPrivate* d_func() const { return reinterpret_cast<const QButtonGroupPrivate *>(qGetPtrHelper(d_ptr)); } friend class QButtonGroupPrivate;
friend class QAbstractButton;
friend class QAbstractButtonPrivate;
};



# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qbuttongroup.h"



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcalendarwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcalendarwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"













































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcalendarwidget.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcalendarwidget.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcalendarwidget.h"
class QDate;
class QTextCharFormat;
class QCalendarWidgetPrivate;

class  QCalendarWidget : public QWidget
{
Q_OBJECT
Q_ENUMS(Qt::DayOfWeek)
Q_ENUMS(HorizontalHeaderFormat)
Q_ENUMS(VerticalHeaderFormat)
Q_ENUMS(SelectionMode)
Q_PROPERTY(QDate selectedDate READ selectedDate WRITE setSelectedDate)
Q_PROPERTY(QDate minimumDate READ minimumDate WRITE setMinimumDate)
Q_PROPERTY(QDate maximumDate READ maximumDate WRITE setMaximumDate)
Q_PROPERTY(Qt::DayOfWeek firstDayOfWeek READ firstDayOfWeek WRITE setFirstDayOfWeek)
Q_PROPERTY(bool gridVisible READ isGridVisible WRITE setGridVisible)
Q_PROPERTY(SelectionMode selectionMode READ selectionMode WRITE setSelectionMode)
Q_PROPERTY(HorizontalHeaderFormat horizontalHeaderFormat READ horizontalHeaderFormat WRITE setHorizontalHeaderFormat)
Q_PROPERTY(VerticalHeaderFormat verticalHeaderFormat READ verticalHeaderFormat WRITE setVerticalHeaderFormat)
Q_PROPERTY(bool navigationBarVisible READ isNavigationBarVisible WRITE setNavigationBarVisible)
Q_PROPERTY(bool dateEditEnabled READ isDateEditEnabled WRITE setDateEditEnabled)
Q_PROPERTY(int dateEditAcceptDelay READ dateEditAcceptDelay WRITE setDateEditAcceptDelay)

public:
enum HorizontalHeaderFormat {
NoHorizontalHeader,
SingleLetterDayNames,
ShortDayNames,
LongDayNames
};

enum VerticalHeaderFormat {
NoVerticalHeader,
ISOWeekNumbers
};

enum SelectionMode {
NoSelection,
SingleSelection
};

explicit QCalendarWidget(QWidget *parent = 0);
~QCalendarWidget();

virtual QSize sizeHint() const;
virtual QSize minimumSizeHint() const;

QDate selectedDate() const;

int yearShown() const;
int monthShown() const;

QDate minimumDate() const;
void setMinimumDate(const QDate &date);

QDate maximumDate() const;
void setMaximumDate(const QDate &date);

Qt::DayOfWeek firstDayOfWeek() const;
void setFirstDayOfWeek(Qt::DayOfWeek dayOfWeek);

bool isNavigationBarVisible() const;
bool isGridVisible() const;

SelectionMode selectionMode() const;
void setSelectionMode(SelectionMode mode);

HorizontalHeaderFormat horizontalHeaderFormat() const;
void setHorizontalHeaderFormat(HorizontalHeaderFormat format);

VerticalHeaderFormat verticalHeaderFormat() const;
void setVerticalHeaderFormat(VerticalHeaderFormat format);

QTextCharFormat headerTextFormat() const;
void setHeaderTextFormat(const QTextCharFormat &format);

QTextCharFormat weekdayTextFormat(Qt::DayOfWeek dayOfWeek) const;
void setWeekdayTextFormat(Qt::DayOfWeek dayOfWeek, const QTextCharFormat &format);

QMap<QDate, QTextCharFormat> dateTextFormat() const;
QTextCharFormat dateTextFormat(const QDate &date) const;
void setDateTextFormat(const QDate &date, const QTextCharFormat &format);

bool isDateEditEnabled() const;
void setDateEditEnabled(bool enable);

int dateEditAcceptDelay() const;
void setDateEditAcceptDelay(int delay);

protected:
bool event(QEvent *event);
bool eventFilter(QObject *watched, QEvent *event);
void mousePressEvent(QMouseEvent *event);
void resizeEvent(QResizeEvent * event);
void keyPressEvent(QKeyEvent * event);

virtual void paintCell(QPainter *painter, const QRect &rect, const QDate &date) const;
void updateCell(const QDate &date);
void updateCells();

public slots:
void setSelectedDate(const QDate &date);
void setDateRange(const QDate &min, const QDate &max);
void setCurrentPage(int year, int month);
void setGridVisible(bool show);
void setNavigationBarVisible(bool visible);
void showNextMonth();
void showPreviousMonth();
void showNextYear();
void showPreviousYear();
void showSelectedDate();
void showToday();

signals:
void selectionChanged();
void clicked(const QDate &date);
void activated(const QDate &date);
void currentPageChanged(int year, int month);

private:
inline QCalendarWidgetPrivate* d_func() { return reinterpret_cast<QCalendarWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QCalendarWidgetPrivate* d_func() const { return reinterpret_cast<const QCalendarWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QCalendarWidgetPrivate;
QCalendarWidget(const QCalendarWidget &) ; QCalendarWidget &operator=(const QCalendarWidget &) ;











};



# 190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcalendarwidget.h"




# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcheckbox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"




























































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcheckbox.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcheckbox.h"



class QCheckBoxPrivate;
class QStyleOptionButton;

class  QCheckBox : public QAbstractButton
{
Q_OBJECT

Q_PROPERTY(bool tristate READ isTristate WRITE setTristate)

public:
explicit QCheckBox(QWidget *parent=0);
explicit QCheckBox(const QString &text, QWidget *parent=0);
~QCheckBox();

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setTristate(bool y = true);
bool isTristate() const;

Qt::CheckState checkState() const;
void setCheckState(Qt::CheckState state);

signals:
void stateChanged(int);

protected:
bool event(QEvent *e);
bool hitButton(const QPoint &pos) const;
void checkStateSet();
void nextCheckState();
void paintEvent(QPaintEvent *);
void mouseMoveEvent(QMouseEvent *);
void initStyleOption(QStyleOptionButton *option) const;


private:
inline QCheckBoxPrivate* d_func() { return reinterpret_cast<QCheckBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QCheckBoxPrivate* d_func() const { return reinterpret_cast<const QCheckBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QCheckBoxPrivate;
QCheckBox(const QCheckBox &) ; QCheckBox &operator=(const QCheckBox &) ;
};




# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractitemdelegate.h"




































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qabstractitemmodel.h"




































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"




# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
class QAbstractItemView;
class QLineEdit;
class QComboBoxPrivate;
class QCompleter;

class  QComboBox : public QWidget
{
Q_OBJECT

Q_ENUMS(InsertPolicy)
Q_ENUMS(SizeAdjustPolicy)
Q_PROPERTY(bool editable READ isEditable WRITE setEditable)
Q_PROPERTY(int count READ count)
Q_PROPERTY(QString currentText READ currentText WRITE setCurrentText NOTIFY currentTextChanged USER true)
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentIndexChanged)
Q_PROPERTY(int maxVisibleItems READ maxVisibleItems WRITE setMaxVisibleItems)
Q_PROPERTY(int maxCount READ maxCount WRITE setMaxCount)
Q_PROPERTY(InsertPolicy insertPolicy READ insertPolicy WRITE setInsertPolicy)
Q_PROPERTY(SizeAdjustPolicy sizeAdjustPolicy READ sizeAdjustPolicy WRITE setSizeAdjustPolicy)
Q_PROPERTY(int minimumContentsLength READ minimumContentsLength WRITE setMinimumContentsLength)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)


# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
Q_PROPERTY(bool autoCompletion READ autoCompletion WRITE setAutoCompletion DESIGNABLE false)
Q_PROPERTY(Qt::CaseSensitivity autoCompletionCaseSensitivity READ autoCompletionCaseSensitivity WRITE setAutoCompletionCaseSensitivity DESIGNABLE false)


# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
Q_PROPERTY(bool duplicatesEnabled READ duplicatesEnabled WRITE setDuplicatesEnabled)
Q_PROPERTY(bool frame READ hasFrame WRITE setFrame)
Q_PROPERTY(int modelColumn READ modelColumn WRITE setModelColumn)

public:
explicit QComboBox(QWidget *parent = 0);
~QComboBox();

int maxVisibleItems() const;
void setMaxVisibleItems(int maxItems);

int count() const;
void setMaxCount(int max);
int maxCount() const;


# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
bool autoCompletion() const;
void setAutoCompletion(bool enable);

Qt::CaseSensitivity autoCompletionCaseSensitivity() const;
void setAutoCompletionCaseSensitivity(Qt::CaseSensitivity sensitivity);


# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
bool duplicatesEnabled() const;
void setDuplicatesEnabled(bool enable);

void setFrame(bool);
bool hasFrame() const;

inline int findText(const QString &text,
Qt::MatchFlags flags = static_cast<Qt::MatchFlags>(Qt::MatchExactly|Qt::MatchCaseSensitive)) const
{ return findData(text, Qt::DisplayRole, flags); }
int findData(const QVariant &data, int role = Qt::UserRole,
Qt::MatchFlags flags = static_cast<Qt::MatchFlags>(Qt::MatchExactly|Qt::MatchCaseSensitive)) const;

enum InsertPolicy {
NoInsert,
InsertAtTop,
InsertAtCurrent,
InsertAtBottom,
InsertAfterCurrent,
InsertBeforeCurrent,
InsertAlphabetically
};

InsertPolicy insertPolicy() const;
void setInsertPolicy(InsertPolicy policy);

enum SizeAdjustPolicy {
AdjustToContents,
AdjustToContentsOnFirstShow,
AdjustToMinimumContentsLength, 
AdjustToMinimumContentsLengthWithIcon
};

SizeAdjustPolicy sizeAdjustPolicy() const;
void setSizeAdjustPolicy(SizeAdjustPolicy policy);
int minimumContentsLength() const;
void setMinimumContentsLength(int characters);
QSize iconSize() const;
void setIconSize(const QSize &size);

bool isEditable() const;
void setEditable(bool editable);
void setLineEdit(QLineEdit *edit);
QLineEdit *lineEdit() const;

# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
void setValidator(const QValidator *v);
const QValidator *validator() const;



# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
void setCompleter(QCompleter *c);
QCompleter *completer() const;


# 157 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
QAbstractItemDelegate *itemDelegate() const;
void setItemDelegate(QAbstractItemDelegate *delegate);

QAbstractItemModel *model() const;
void setModel(QAbstractItemModel *model);

QModelIndex rootModelIndex() const;
void setRootModelIndex(const QModelIndex &index);

int modelColumn() const;
void setModelColumn(int visibleColumn);

int currentIndex() const;

QString currentText() const;

QString itemText(int index) const;
QIcon itemIcon(int index) const;
QVariant itemData(int index, int role = Qt::UserRole) const;

inline void addItem(const QString &text, const QVariant &userData = QVariant());
inline void addItem(const QIcon &icon, const QString &text,
const QVariant &userData = QVariant());
inline void addItems(const QStringList &texts)
{ insertItems(count(), texts); }

inline void insertItem(int index, const QString &text, const QVariant &userData = QVariant());
void insertItem(int index, const QIcon &icon, const QString &text,
const QVariant &userData = QVariant());
void insertItems(int index, const QStringList &texts);
void insertSeparator(int index);

void removeItem(int index);

void setItemText(int index, const QString &text);
void setItemIcon(int index, const QIcon &icon);
void setItemData(int index, const QVariant &value, int role = Qt::UserRole);

QAbstractItemView *view() const;
void setView(QAbstractItemView *itemView);

QSize sizeHint() const;
QSize minimumSizeHint() const;

virtual void showPopup();
virtual void hidePopup();

bool event(QEvent *event);
QVariant inputMethodQuery(Qt::InputMethodQuery) const;

public slots:
void clear();
void clearEditText();
void setEditText(const QString &text);
void setCurrentIndex(int index);
void setCurrentText(const QString &text);

signals:
void editTextChanged(const QString &);
void activated(int index);
void activated(const QString &);
void highlighted(int index);
void highlighted(const QString &);
void currentIndexChanged(int index);
void currentIndexChanged(const QString &);
void currentTextChanged(const QString &);

protected:
void focusInEvent(QFocusEvent *e);
void focusOutEvent(QFocusEvent *e);
void changeEvent(QEvent *e);
void resizeEvent(QResizeEvent *e);
void paintEvent(QPaintEvent *e);
void showEvent(QShowEvent *e);
void hideEvent(QHideEvent *e);
void mousePressEvent(QMouseEvent *e);
void mouseReleaseEvent(QMouseEvent *e);
void keyPressEvent(QKeyEvent *e);
void keyReleaseEvent(QKeyEvent *e);

# 237 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
void wheelEvent(QWheelEvent *e);

# 239 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
void contextMenuEvent(QContextMenuEvent *e);
void inputMethodEvent(QInputMethodEvent *);
void initStyleOption(QStyleOptionComboBox *option) const;


protected:
QComboBox(QComboBoxPrivate &, QWidget *);

private:
inline QComboBoxPrivate* d_func() { return reinterpret_cast<QComboBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QComboBoxPrivate* d_func() const { return reinterpret_cast<const QComboBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QComboBoxPrivate;
QComboBox(const QComboBox &) ; QComboBox &operator=(const QComboBox &) ;















# 265 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"
};

inline void QComboBox::addItem(const QString &atext, const QVariant &auserData)
{ insertItem(count(), atext, auserData); }
inline void QComboBox::addItem(const QIcon &aicon, const QString &atext,
const QVariant &auserData)
{ insertItem(count(), aicon, atext, auserData); }

inline void QComboBox::insertItem(int aindex, const QString &atext,
const QVariant &auserData)
{ insertItem(aindex, QIcon(), atext, auserData); }



# 279 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"



# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommandlinkbutton.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"




























































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"



class QPushButtonPrivate;
class QMenu;
class QStyleOptionButton;

class  QPushButton : public QAbstractButton
{
Q_OBJECT

Q_PROPERTY(bool autoDefault READ autoDefault WRITE setAutoDefault)
Q_PROPERTY(bool default READ isDefault WRITE setDefault)
Q_PROPERTY(bool flat READ isFlat WRITE setFlat)

public:
explicit QPushButton(QWidget *parent=0);
explicit QPushButton(const QString &text, QWidget *parent=0);
QPushButton(const QIcon& icon, const QString &text, QWidget *parent=0);
~QPushButton();

QSize sizeHint() const;
QSize minimumSizeHint() const;

bool autoDefault() const;
void setAutoDefault(bool);
bool isDefault() const;
void setDefault(bool);


# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"
void setMenu(QMenu* menu);
QMenu* menu() const;


# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"
void setFlat(bool);
bool isFlat() const;

public slots:

# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"
void showMenu();


# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"
protected:
bool event(QEvent *e);



# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"
void paintEvent(QPaintEvent *);
void keyPressEvent(QKeyEvent *);
void focusInEvent(QFocusEvent *);
void focusOutEvent(QFocusEvent *);
void initStyleOption(QStyleOptionButton *option) const;
QPushButton(QPushButtonPrivate &dd, QWidget* parent = 0);

public:

private:
QPushButton(const QPushButton &) ; QPushButton &operator=(const QPushButton &) ;
inline QPushButtonPrivate* d_func() { return reinterpret_cast<QPushButtonPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPushButtonPrivate* d_func() const { return reinterpret_cast<const QPushButtonPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPushButtonPrivate;

# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommandlinkbutton.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcommandlinkbutton.h"



class QCommandLinkButtonPrivate;

class  QCommandLinkButton: public QPushButton
{
Q_OBJECT

Q_PROPERTY(QString description READ description WRITE setDescription)
Q_PROPERTY(bool flat READ isFlat WRITE setFlat DESIGNABLE false)

public:
explicit QCommandLinkButton(QWidget *parent=0);
explicit QCommandLinkButton(const QString &text, QWidget *parent=0);
explicit QCommandLinkButton(const QString &text, const QString &description, QWidget *parent=0);
~QCommandLinkButton();

QString description() const;
void setDescription(const QString &description);

protected:
QSize sizeHint() const;
int heightForWidth(int) const;
QSize minimumSizeHint() const;
bool event(QEvent *e);
void paintEvent(QPaintEvent *);

private:
QCommandLinkButton(const QCommandLinkButton &) ; QCommandLinkButton &operator=(const QCommandLinkButton &) ;
inline QCommandLinkButtonPrivate* d_func() { return reinterpret_cast<QCommandLinkButtonPrivate *>(qGetPtrHelper(d_ptr)); } inline const QCommandLinkButtonPrivate* d_func() const { return reinterpret_cast<const QCommandLinkButtonPrivate *>(qGetPtrHelper(d_ptr)); } friend class QCommandLinkButtonPrivate;
};




# 89 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"













































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"
















































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"
class QDateTimeEditPrivate;
class QStyleOptionSpinBox;
class QCalendarWidget;

class  QDateTimeEdit : public QAbstractSpinBox
{
Q_OBJECT

Q_ENUMS(Section)

Q_PROPERTY(QDateTime dateTime READ dateTime WRITE setDateTime NOTIFY dateTimeChanged USER true)
Q_PROPERTY(QDate date READ date WRITE setDate NOTIFY dateChanged)
Q_PROPERTY(QTime time READ time WRITE setTime NOTIFY timeChanged)
Q_PROPERTY(QDateTime maximumDateTime READ maximumDateTime WRITE setMaximumDateTime RESET clearMaximumDateTime)
Q_PROPERTY(QDateTime minimumDateTime READ minimumDateTime WRITE setMinimumDateTime RESET clearMinimumDateTime)
Q_PROPERTY(QDate maximumDate READ maximumDate WRITE setMaximumDate RESET clearMaximumDate)
Q_PROPERTY(QDate minimumDate READ minimumDate WRITE setMinimumDate RESET clearMinimumDate)
Q_PROPERTY(QTime maximumTime READ maximumTime WRITE setMaximumTime RESET clearMaximumTime)
Q_PROPERTY(QTime minimumTime READ minimumTime WRITE setMinimumTime RESET clearMinimumTime)
Q_PROPERTY(Section currentSection READ currentSection WRITE setCurrentSection)
Q_PROPERTY(Sections displayedSections READ displayedSections)
Q_PROPERTY(QString displayFormat READ displayFormat WRITE setDisplayFormat)
Q_PROPERTY(bool calendarPopup READ calendarPopup WRITE setCalendarPopup)
Q_PROPERTY(int currentSectionIndex READ currentSectionIndex WRITE setCurrentSectionIndex)
Q_PROPERTY(int sectionCount READ sectionCount)
Q_PROPERTY(Qt::TimeSpec timeSpec READ timeSpec WRITE setTimeSpec)
public:
enum Section {
NoSection = 0x0000,
AmPmSection = 0x0001,
MSecSection = 0x0002,
SecondSection = 0x0004,
MinuteSection = 0x0008,
HourSection = 0x0010,
DaySection = 0x0100,
MonthSection = 0x0200,
YearSection = 0x0400,
TimeSections_Mask = AmPmSection|MSecSection|SecondSection|MinuteSection|HourSection,
DateSections_Mask = DaySection|MonthSection|YearSection
};

typedef QFlags<Section> Sections;

explicit QDateTimeEdit(QWidget *parent = 0);
explicit QDateTimeEdit(const QDateTime &dt, QWidget *parent = 0);
explicit QDateTimeEdit(const QDate &d, QWidget *parent = 0);
explicit QDateTimeEdit(const QTime &t, QWidget *parent = 0);
~QDateTimeEdit();

QDateTime dateTime() const;
QDate date() const;
QTime time() const;

QDateTime minimumDateTime() const;
void clearMinimumDateTime();
void setMinimumDateTime(const QDateTime &dt);

QDateTime maximumDateTime() const;
void clearMaximumDateTime();
void setMaximumDateTime(const QDateTime &dt);

void setDateTimeRange(const QDateTime &min, const QDateTime &max);

QDate minimumDate() const;
void setMinimumDate(const QDate &min);
void clearMinimumDate();

QDate maximumDate() const;
void setMaximumDate(const QDate &max);
void clearMaximumDate();

void setDateRange(const QDate &min, const QDate &max);

QTime minimumTime() const;
void setMinimumTime(const QTime &min);
void clearMinimumTime();

QTime maximumTime() const;
void setMaximumTime(const QTime &max);
void clearMaximumTime();

void setTimeRange(const QTime &min, const QTime &max);

Sections displayedSections() const;
Section currentSection() const;
Section sectionAt(int index) const;
void setCurrentSection(Section section);

int currentSectionIndex() const;
void setCurrentSectionIndex(int index);

QCalendarWidget *calendarWidget() const;
void setCalendarWidget(QCalendarWidget *calendarWidget);

int sectionCount() const;

void setSelectedSection(Section section);

QString sectionText(Section section) const;

QString displayFormat() const;
void setDisplayFormat(const QString &format);

bool calendarPopup() const;
void setCalendarPopup(bool enable);

Qt::TimeSpec timeSpec() const;
void setTimeSpec(Qt::TimeSpec spec);

QSize sizeHint() const;

virtual void clear();
virtual void stepBy(int steps);

bool event(QEvent *event);
signals:
void dateTimeChanged(const QDateTime &dateTime);
void timeChanged(const QTime &time);
void dateChanged(const QDate &date);

public slots:
void setDateTime(const QDateTime &dateTime);
void setDate(const QDate &date);
void setTime(const QTime &time);

protected:
virtual void keyPressEvent(QKeyEvent *event);

# 182 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"
virtual void wheelEvent(QWheelEvent *event);

# 184 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"
virtual void focusInEvent(QFocusEvent *event);
virtual bool focusNextPrevChild(bool next);
virtual QValidator::State validate(QString &input, int &pos) const;
virtual void fixup(QString &input) const;

virtual QDateTime dateTimeFromText(const QString &text) const;
virtual QString textFromDateTime(const QDateTime &dt) const;
virtual StepEnabled stepEnabled() const;
virtual void mousePressEvent(QMouseEvent *event);
virtual void paintEvent(QPaintEvent *event);
void initStyleOption(QStyleOptionSpinBox *option) const;

QDateTimeEdit(const QVariant &val, QVariant::Type parserType, QWidget *parent = 0);
private:
inline QDateTimeEditPrivate* d_func() { return reinterpret_cast<QDateTimeEditPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDateTimeEditPrivate* d_func() const { return reinterpret_cast<const QDateTimeEditPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDateTimeEditPrivate;
QDateTimeEdit(const QDateTimeEdit &) ; QDateTimeEdit &operator=(const QDateTimeEdit &) ;


};

class  QTimeEdit : public QDateTimeEdit
{
Q_OBJECT
Q_PROPERTY(QTime time READ time WRITE setTime NOTIFY userTimeChanged USER true)
public:
explicit QTimeEdit(QWidget *parent = 0);
explicit QTimeEdit(const QTime &time, QWidget *parent = 0);
~QTimeEdit();

signals:
void userTimeChanged(const QTime &time);
};

class  QDateEdit : public QDateTimeEdit
{
Q_OBJECT
Q_PROPERTY(QDate date READ date WRITE setDate NOTIFY userDateChanged USER true)
public:
explicit QDateEdit(QWidget *parent = 0);
explicit QDateEdit(const QDate &date, QWidget *parent = 0);
~QDateEdit();

signals:
void userDateChanged(const QDate &date);
};

 inline QFlags<QDateTimeEdit::Sections::enum_type> operator|(QDateTimeEdit::Sections::enum_type f1, QDateTimeEdit::Sections::enum_type f2) { return QFlags<QDateTimeEdit::Sections::enum_type>(f1) | f2; }  inline QFlags<QDateTimeEdit::Sections::enum_type> operator|(QDateTimeEdit::Sections::enum_type f1, QFlags<QDateTimeEdit::Sections::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QDateTimeEdit::Sections::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 234 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdatetimeedit.h"



# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdial.h"













































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"




































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdial.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdial.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdial.h"
class QDialPrivate;
class QStyleOptionSlider;

class  QDial: public QAbstractSlider
{
Q_OBJECT

Q_PROPERTY(bool wrapping READ wrapping WRITE setWrapping)
Q_PROPERTY(int notchSize READ notchSize)
Q_PROPERTY(qreal notchTarget READ notchTarget WRITE setNotchTarget)
Q_PROPERTY(bool notchesVisible READ notchesVisible WRITE setNotchesVisible)
public:
explicit QDial(QWidget *parent = 0);

~QDial();

bool wrapping() const;

int notchSize() const;

void setNotchTarget(double target);
qreal notchTarget() const;
bool notchesVisible() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;

public slots:
void setNotchesVisible(bool visible);
void setWrapping(bool on);

protected:
bool event(QEvent *e);
void resizeEvent(QResizeEvent *re);
void paintEvent(QPaintEvent *pe);

void mousePressEvent(QMouseEvent *me);
void mouseReleaseEvent(QMouseEvent *me);
void mouseMoveEvent(QMouseEvent *me);

void sliderChange(SliderChange change);
void initStyleOption(QStyleOptionSlider *option) const;


private:
inline QDialPrivate* d_func() { return reinterpret_cast<QDialPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDialPrivate* d_func() const { return reinterpret_cast<const QDialPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDialPrivate;
QDial(const QDial &) ; QDial &operator=(const QDial &) ;
};



# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdial.h"



# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialogbuttonbox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialogbuttonbox.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialogbuttonbox.h"



class QAbstractButton;
class QPushButton;
class QDialogButtonBoxPrivate;

class  QDialogButtonBox : public QWidget
{
Q_OBJECT

Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(StandardButtons standardButtons READ standardButtons WRITE setStandardButtons)
Q_PROPERTY(bool centerButtons READ centerButtons WRITE setCenterButtons)

public:
enum ButtonRole {

InvalidRole = -1,
AcceptRole,
RejectRole,
DestructiveRole,
ActionRole,
HelpRole,
YesRole,
NoRole,
ResetRole,
ApplyRole,

NRoles
};

enum StandardButton {

NoButton = 0x00000000,
Ok = 0x00000400,
Save = 0x00000800,
SaveAll = 0x00001000,
Open = 0x00002000,
Yes = 0x00004000,
YesToAll = 0x00008000,
No = 0x00010000,
NoToAll = 0x00020000,
Abort = 0x00040000,
Retry = 0x00080000,
Ignore = 0x00100000,
Close = 0x00200000,
Cancel = 0x00400000,
Discard = 0x00800000,
Help = 0x01000000,
Apply = 0x02000000,
Reset = 0x04000000,
RestoreDefaults = 0x08000000,


# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialogbuttonbox.h"
FirstButton = Ok,
LastButton = RestoreDefaults

# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialogbuttonbox.h"
};

typedef QFlags<StandardButton> StandardButtons;

enum ButtonLayout {
WinLayout,
MacLayout,
KdeLayout,
GnomeLayout
};

QDialogButtonBox(QWidget *parent = 0);
QDialogButtonBox(Qt::Orientation orientation, QWidget *parent = 0);
QDialogButtonBox(StandardButtons buttons, Qt::Orientation orientation = Qt::Horizontal,
QWidget *parent = 0);
~QDialogButtonBox();

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

void addButton(QAbstractButton *button, ButtonRole role);
QPushButton *addButton(const QString &text, ButtonRole role);
QPushButton *addButton(StandardButton button);
void removeButton(QAbstractButton *button);
void clear();

QList<QAbstractButton *> buttons() const;
ButtonRole buttonRole(QAbstractButton *button) const;

void setStandardButtons(StandardButtons buttons);
StandardButtons standardButtons() const;
StandardButton standardButton(QAbstractButton *button) const;
QPushButton *button(StandardButton which) const;

void setCenterButtons(bool center);
bool centerButtons() const;

signals:
void clicked(QAbstractButton *button);
void accepted();
void helpRequested();
void rejected();

protected:
void changeEvent(QEvent *event);
bool event(QEvent *event);

private:
QDialogButtonBox(const QDialogButtonBox &) ; QDialogButtonBox &operator=(const QDialogButtonBox &) ;
inline QDialogButtonBoxPrivate* d_func() { return reinterpret_cast<QDialogButtonBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDialogButtonBoxPrivate* d_func() const { return reinterpret_cast<const QDialogButtonBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDialogButtonBoxPrivate;


};

 inline QFlags<QDialogButtonBox::StandardButtons::enum_type> operator|(QDialogButtonBox::StandardButtons::enum_type f1, QDialogButtonBox::StandardButtons::enum_type f2) { return QFlags<QDialogButtonBox::StandardButtons::enum_type>(f1) | f2; }  inline QFlags<QDialogButtonBox::StandardButtons::enum_type> operator|(QDialogButtonBox::StandardButtons::enum_type f1, QFlags<QDialogButtonBox::StandardButtons::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QDialogButtonBox::StandardButtons::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 92 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"
class QDockAreaLayout;
class QDockWidgetPrivate;
class QMainWindow;
class QStyleOptionDockWidget;

class  QDockWidget : public QWidget
{
Q_OBJECT


Q_PROPERTY(bool floating READ isFloating WRITE setFloating)
Q_PROPERTY(DockWidgetFeatures features READ features WRITE setFeatures NOTIFY featuresChanged)
Q_PROPERTY(Qt::DockWidgetAreas allowedAreas READ allowedAreas
WRITE setAllowedAreas NOTIFY allowedAreasChanged)
Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle DESIGNABLE true)

public:
explicit QDockWidget(const QString &title, QWidget *parent = 0, Qt::WindowFlags flags = 0);
explicit QDockWidget(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QDockWidget();

QWidget *widget() const;
void setWidget(QWidget *widget);

enum DockWidgetFeature {
DockWidgetClosable = 0x01,
DockWidgetMovable = 0x02,
DockWidgetFloatable = 0x04,
DockWidgetVerticalTitleBar = 0x08,

DockWidgetFeatureMask = 0x0f,
AllDockWidgetFeatures = DockWidgetClosable|DockWidgetMovable|DockWidgetFloatable, 
NoDockWidgetFeatures = 0x00,

Reserved = 0xff
};
typedef QFlags<DockWidgetFeature> DockWidgetFeatures;

void setFeatures(DockWidgetFeatures features);
DockWidgetFeatures features() const;

void setFloating(bool floating);
inline bool isFloating() const { return isWindow(); }

void setAllowedAreas(Qt::DockWidgetAreas areas);
Qt::DockWidgetAreas allowedAreas() const;

void setTitleBarWidget(QWidget *widget);
QWidget *titleBarWidget() const;

inline bool isAreaAllowed(Qt::DockWidgetArea area) const
{ return (allowedAreas() & area) == area; }


# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"
QAction *toggleViewAction() const;


# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"
signals:
void featuresChanged(QDockWidget::DockWidgetFeatures features);
void topLevelChanged(bool topLevel);
void allowedAreasChanged(Qt::DockWidgetAreas allowedAreas);
void visibilityChanged(bool visible);
void dockLocationChanged(Qt::DockWidgetArea area);

protected:
void changeEvent(QEvent *event);
void closeEvent(QCloseEvent *event);
void paintEvent(QPaintEvent *event);
bool event(QEvent *event);
void initStyleOption(QStyleOptionDockWidget *option) const;

private:
inline QDockWidgetPrivate* d_func() { return reinterpret_cast<QDockWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDockWidgetPrivate* d_func() const { return reinterpret_cast<const QDockWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDockWidgetPrivate;
QDockWidget(const QDockWidget &) ; QDockWidget &operator=(const QDockWidget &) ;


friend class QDockAreaLayout;
friend class QDockWidgetItem;
friend class QMainWindowLayout;
friend class QDockWidgetLayout;
friend class QDockAreaLayoutInfo;
};

 inline QFlags<QDockWidget::DockWidgetFeatures::enum_type> operator|(QDockWidget::DockWidgetFeatures::enum_type f1, QDockWidget::DockWidgetFeatures::enum_type f2) { return QFlags<QDockWidget::DockWidgetFeatures::enum_type>(f1) | f2; }  inline QFlags<QDockWidget::DockWidgetFeatures::enum_type> operator|(QDockWidget::DockWidgetFeatures::enum_type f1, QFlags<QDockWidget::DockWidgetFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QDockWidget::DockWidgetFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdockwidget.h"



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfocusframe.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfocusframe.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfocusframe.h"



class QFocusFramePrivate;
class QStyleOption;

class  QFocusFrame : public QWidget
{
Q_OBJECT
public:
QFocusFrame(QWidget *parent=0);
~QFocusFrame();

void setWidget(QWidget *widget);
QWidget *widget() const;

protected:
bool event(QEvent *e);

bool eventFilter(QObject *, QEvent *);
void paintEvent(QPaintEvent *);
void initStyleOption(QStyleOption *option) const;

private:
inline QFocusFramePrivate* d_func() { return reinterpret_cast<QFocusFramePrivate *>(qGetPtrHelper(d_ptr)); } inline const QFocusFramePrivate* d_func() const { return reinterpret_cast<const QFocusFramePrivate *>(qGetPtrHelper(d_ptr)); } friend class QFocusFramePrivate;
QFocusFrame(const QFocusFrame &) ; QFocusFrame &operator=(const QFocusFrame &) ;
};




# 94 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontcombobox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qcombobox.h"

























































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontcombobox.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfontdatabase.h"







































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontcombobox.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qfontcombobox.h"



class QFontComboBoxPrivate;

class  QFontComboBox : public QComboBox
{
Q_OBJECT

Q_PROPERTY(QFontDatabase::WritingSystem writingSystem READ writingSystem WRITE setWritingSystem)
Q_PROPERTY(FontFilters fontFilters READ fontFilters WRITE setFontFilters)
Q_PROPERTY(QFont currentFont READ currentFont WRITE setCurrentFont NOTIFY currentFontChanged)

public:
explicit QFontComboBox(QWidget *parent = 0);
~QFontComboBox();

void setWritingSystem(QFontDatabase::WritingSystem);
QFontDatabase::WritingSystem writingSystem() const;

enum FontFilter {
AllFonts = 0,
ScalableFonts = 0x1,
NonScalableFonts = 0x2,
MonospacedFonts = 0x4,
ProportionalFonts = 0x8
};
typedef QFlags<FontFilter> FontFilters;

void setFontFilters(FontFilters filters);
FontFilters fontFilters() const;

QFont currentFont() const;
QSize sizeHint() const;

public slots:
void setCurrentFont(const QFont &f);

signals:
void currentFontChanged(const QFont &f);

protected:
bool event(QEvent *e);

private:
QFontComboBox(const QFontComboBox &) ; QFontComboBox &operator=(const QFontComboBox &) ;
inline QFontComboBoxPrivate* d_func() { return reinterpret_cast<QFontComboBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QFontComboBoxPrivate* d_func() const { return reinterpret_cast<const QFontComboBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QFontComboBoxPrivate;


};

 inline QFlags<QFontComboBox::FontFilters::enum_type> operator|(QFontComboBox::FontFilters::enum_type f1, QFontComboBox::FontFilters::enum_type f2) { return QFlags<QFontComboBox::FontFilters::enum_type>(f1) | f2; }  inline QFlags<QFontComboBox::FontFilters::enum_type> operator|(QFontComboBox::FontFilters::enum_type f1, QFlags<QFontComboBox::FontFilters::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QFontComboBox::FontFilters::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }





# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 96 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgroupbox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgroupbox.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgroupbox.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgroupbox.h"
class QGroupBoxPrivate;
class QStyleOptionGroupBox;
class  QGroupBox : public QWidget
{
Q_OBJECT

Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool flat READ isFlat WRITE setFlat)
Q_PROPERTY(bool checkable READ isCheckable WRITE setCheckable)
Q_PROPERTY(bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled USER true)
public:
explicit QGroupBox(QWidget* parent=0);
explicit QGroupBox(const QString &title, QWidget* parent=0);
~QGroupBox();

QString title() const;
void setTitle(const QString &title);

Qt::Alignment alignment() const;
void setAlignment(int alignment);

QSize minimumSizeHint() const;

bool isFlat() const;
void setFlat(bool flat);
bool isCheckable() const;
void setCheckable(bool checkable);
bool isChecked() const;

public slots:
void setChecked(bool checked);

signals:
void clicked(bool checked = false);
void toggled(bool);

protected:
bool event(QEvent *event);
void childEvent(QChildEvent *event);
void resizeEvent(QResizeEvent *event);
void paintEvent(QPaintEvent *event);
void focusInEvent(QFocusEvent *event);
void changeEvent(QEvent *event);
void mousePressEvent(QMouseEvent *event);
void mouseMoveEvent(QMouseEvent *event);
void mouseReleaseEvent(QMouseEvent *event);
void initStyleOption(QStyleOptionGroupBox *option) const;


private:
QGroupBox(const QGroupBox &) ; QGroupBox &operator=(const QGroupBox &) ;
inline QGroupBoxPrivate* d_func() { return reinterpret_cast<QGroupBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGroupBoxPrivate* d_func() const { return reinterpret_cast<const QGroupBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGroupBoxPrivate;

};



# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgroupbox.h"



# 97 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"



class QLabelPrivate;

class  QLabel : public QFrame
{
Q_OBJECT
Q_PROPERTY(QString text READ text WRITE setText)
Q_PROPERTY(Qt::TextFormat textFormat READ textFormat WRITE setTextFormat)
Q_PROPERTY(QPixmap pixmap READ pixmap WRITE setPixmap)
Q_PROPERTY(bool scaledContents READ hasScaledContents WRITE setScaledContents)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
Q_PROPERTY(int margin READ margin WRITE setMargin)
Q_PROPERTY(int indent READ indent WRITE setIndent)
Q_PROPERTY(bool openExternalLinks READ openExternalLinks WRITE setOpenExternalLinks)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)
Q_PROPERTY(bool hasSelectedText READ hasSelectedText)
Q_PROPERTY(QString selectedText READ selectedText)

public:
explicit QLabel(QWidget *parent=0, Qt::WindowFlags f=0);
explicit QLabel(const QString &text, QWidget *parent=0, Qt::WindowFlags f=0);
~QLabel();

QString text() const;
const QPixmap *pixmap() const;

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
const QPicture *picture() const;


# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
QMovie *movie() const;


# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
Qt::TextFormat textFormat() const;
void setTextFormat(Qt::TextFormat);

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment);

void setWordWrap(bool on);
bool wordWrap() const;

int indent() const;
void setIndent(int);

int margin() const;
void setMargin(int);

bool hasScaledContents() const;
void setScaledContents(bool);
QSize sizeHint() const;
QSize minimumSizeHint() const;

# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
void setBuddy(QWidget *);
QWidget *buddy() const;

# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
int heightForWidth(int) const;

bool openExternalLinks() const;
void setOpenExternalLinks(bool open);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

void setSelection(int, int);
bool hasSelectedText() const;
QString selectedText() const;
int selectionStart() const;

public slots:
void setText(const QString &);
void setPixmap(const QPixmap &);

# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
void setPicture(const QPicture &);


# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
void setMovie(QMovie *movie);

# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"
void setNum(int);
void setNum(double);
void clear();

signals:
void linkActivated(const QString& link);
void linkHovered(const QString& link);

protected:
bool event(QEvent *e);
void keyPressEvent(QKeyEvent *ev);
void paintEvent(QPaintEvent *);
void changeEvent(QEvent *);
void mousePressEvent(QMouseEvent *ev);
void mouseMoveEvent(QMouseEvent *ev);
void mouseReleaseEvent(QMouseEvent *ev);
void contextMenuEvent(QContextMenuEvent *ev);
void focusInEvent(QFocusEvent *ev);
void focusOutEvent(QFocusEvent *ev);
bool focusNextPrevChild(bool next);


private:
QLabel(const QLabel &) ; QLabel &operator=(const QLabel &) ;
inline QLabelPrivate* d_func() { return reinterpret_cast<QLabelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLabelPrivate* d_func() const { return reinterpret_cast<const QLabelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLabelPrivate;

# 153 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"



# 156 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlabel.h"


friend class QTipLabel;
friend class QMessageBoxPrivate;
friend class QBalloonTip;
};




# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlcdnumber.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlcdnumber.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbitarray.h"

















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlcdnumber.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlcdnumber.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlcdnumber.h"
class QLCDNumberPrivate;
class  QLCDNumber : public QFrame 
{
Q_OBJECT
Q_ENUMS(Mode SegmentStyle)
Q_PROPERTY(bool smallDecimalPoint READ smallDecimalPoint WRITE setSmallDecimalPoint)
Q_PROPERTY(int digitCount READ digitCount WRITE setDigitCount)
Q_PROPERTY(Mode mode READ mode WRITE setMode)
Q_PROPERTY(SegmentStyle segmentStyle READ segmentStyle WRITE setSegmentStyle)
Q_PROPERTY(double value READ value WRITE display)
Q_PROPERTY(int intValue READ intValue WRITE display)

public:
explicit QLCDNumber(QWidget* parent = 0);
explicit QLCDNumber(uint numDigits, QWidget* parent = 0);
~QLCDNumber();

enum Mode {
Hex, Dec, Oct, Bin
};
enum SegmentStyle {
Outline, Filled, Flat
};

bool smallDecimalPoint() const;
int digitCount() const;
void setDigitCount(int nDigits);

bool checkOverflow(double num) const;
bool checkOverflow(int num) const;

Mode mode() const;
void setMode(Mode);

SegmentStyle segmentStyle() const;
void setSegmentStyle(SegmentStyle);

double value() const;
int intValue() const;

QSize sizeHint() const;

public slots:
void display(const QString &str);
void display(int num);
void display(double num);
void setHexMode();
void setDecMode();
void setOctMode();
void setBinMode();
void setSmallDecimalPoint(bool);

signals:
void overflow();

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);

public:

private:
QLCDNumber(const QLCDNumber &) ; QLCDNumber &operator=(const QLCDNumber &) ;
inline QLCDNumberPrivate* d_func() { return reinterpret_cast<QLCDNumberPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLCDNumberPrivate* d_func() const { return reinterpret_cast<const QLCDNumberPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLCDNumberPrivate;
};



# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlcdnumber.h"



# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qlineedit.h"

























































































































































































































































# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"






















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
class QDockWidget;
class QMainWindowPrivate;
class QMenuBar;
class QStatusBar;
class QToolBar;
class QMenu;

class  QMainWindow : public QWidget
{
Q_OBJECT

Q_ENUMS(DockOption)

Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)
Q_PROPERTY(Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle)

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
Q_PROPERTY(bool animated READ isAnimated WRITE setAnimated)

# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
Q_PROPERTY(bool documentMode READ documentMode WRITE setDocumentMode)


# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
Q_PROPERTY(QTabWidget::TabShape tabShape READ tabShape WRITE setTabShape)

# 76 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
Q_PROPERTY(bool dockNestingEnabled READ isDockNestingEnabled WRITE setDockNestingEnabled)

# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
Q_PROPERTY(DockOptions dockOptions READ dockOptions WRITE setDockOptions)

# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
Q_PROPERTY(bool unifiedTitleAndToolBarOnMac READ unifiedTitleAndToolBarOnMac WRITE setUnifiedTitleAndToolBarOnMac)


# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
public:
enum DockOption {
AnimatedDocks = 0x01,
AllowNestedDocks = 0x02,
AllowTabbedDocks = 0x04,
ForceTabbedDocks = 0x08, 
VerticalTabs = 0x10 
};
typedef QFlags<DockOption> DockOptions;

explicit QMainWindow(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QMainWindow();

QSize iconSize() const;
void setIconSize(const QSize &iconSize);

Qt::ToolButtonStyle toolButtonStyle() const;
void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);


# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
bool isAnimated() const;
bool isDockNestingEnabled() const;



# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
bool documentMode() const;
void setDocumentMode(bool enabled);



# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
QTabWidget::TabShape tabShape() const;
void setTabShape(QTabWidget::TabShape tabShape);
QTabWidget::TabPosition tabPosition(Qt::DockWidgetArea area) const;
void setTabPosition(Qt::DockWidgetAreas areas, QTabWidget::TabPosition tabPosition);


# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
void setDockOptions(DockOptions options);
DockOptions dockOptions() const;

bool isSeparator(const QPoint &pos) const;


# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
QMenuBar *menuBar() const;
void setMenuBar(QMenuBar *menubar);

QWidget *menuWidget() const;
void setMenuWidget(QWidget *menubar);



# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
QStatusBar *statusBar() const;
void setStatusBar(QStatusBar *statusbar);


# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
QWidget *centralWidget() const;
void setCentralWidget(QWidget *widget);


# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
void setCorner(Qt::Corner corner, Qt::DockWidgetArea area);
Qt::DockWidgetArea corner(Qt::Corner corner) const;



# 146 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
void addToolBarBreak(Qt::ToolBarArea area = Qt::TopToolBarArea);
void insertToolBarBreak(QToolBar *before);

void addToolBar(Qt::ToolBarArea area, QToolBar *toolbar);
void addToolBar(QToolBar *toolbar);
QToolBar *addToolBar(const QString &title);
void insertToolBar(QToolBar *before, QToolBar *toolbar);
void removeToolBar(QToolBar *toolbar);
void removeToolBarBreak(QToolBar *before);

void setUnifiedTitleAndToolBarOnMac(bool set);
bool unifiedTitleAndToolBarOnMac() const;

Qt::ToolBarArea toolBarArea(QToolBar *toolbar) const;
bool toolBarBreak(QToolBar *toolbar) const;


# 163 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget);
void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget,
Qt::Orientation orientation);
void splitDockWidget(QDockWidget *after, QDockWidget *dockwidget,
Qt::Orientation orientation);
void tabifyDockWidget(QDockWidget *first, QDockWidget *second);
QList<QDockWidget*> tabifiedDockWidgets(QDockWidget *dockwidget) const;
void removeDockWidget(QDockWidget *dockwidget);
bool restoreDockWidget(QDockWidget *dockwidget);

Qt::DockWidgetArea dockWidgetArea(QDockWidget *dockwidget) const;


# 176 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
QByteArray saveState(int version = 0) const;
bool restoreState(const QByteArray &state, int version = 0);


# 180 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
virtual QMenu *createPopupMenu();




# 185 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
public slots:
void setAnimated(bool enabled);
void setDockNestingEnabled(bool enabled);


# 190 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
signals:
void iconSizeChanged(const QSize &iconSize);
void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);

protected:

# 196 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
void contextMenuEvent(QContextMenuEvent *event);

# 198 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"
bool event(QEvent *event);

private:
inline QMainWindowPrivate* d_func() { return reinterpret_cast<QMainWindowPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMainWindowPrivate* d_func() const { return reinterpret_cast<const QMainWindowPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMainWindowPrivate;
QMainWindow(const QMainWindow &) ; QMainWindow &operator=(const QMainWindow &) ;
};

 inline QFlags<QMainWindow::DockOptions::enum_type> operator|(QMainWindow::DockOptions::enum_type f1, QMainWindow::DockOptions::enum_type f2) { return QFlags<QMainWindow::DockOptions::enum_type>(f1) | f2; }  inline QFlags<QMainWindow::DockOptions::enum_type> operator|(QMainWindow::DockOptions::enum_type f1, QFlags<QMainWindow::DockOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QMainWindow::DockOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmainwindow.h"



# 101 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"













































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"






















































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
class QMdiSubWindow;

class QMdiAreaPrivate;
class  QMdiArea : public QAbstractScrollArea
{
Q_OBJECT
Q_ENUMS(ViewMode)
Q_PROPERTY(QBrush background READ background WRITE setBackground)
Q_PROPERTY(WindowOrder activationOrder READ activationOrder WRITE setActivationOrder)
Q_PROPERTY(ViewMode viewMode READ viewMode WRITE setViewMode)

# 64 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
Q_PROPERTY(bool documentMode READ documentMode WRITE setDocumentMode)
Q_PROPERTY(bool tabsClosable READ tabsClosable WRITE setTabsClosable)
Q_PROPERTY(bool tabsMovable READ tabsMovable WRITE setTabsMovable)


# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
Q_PROPERTY(QTabWidget::TabShape tabShape READ tabShape WRITE setTabShape)
Q_PROPERTY(QTabWidget::TabPosition tabPosition READ tabPosition WRITE setTabPosition)

# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
Q_ENUMS(WindowOrder)
public:
enum AreaOption {
DontMaximizeSubWindowOnActivation = 0x1
};
typedef QFlags<AreaOption> AreaOptions;

enum WindowOrder {
CreationOrder,
StackingOrder,
ActivationHistoryOrder
};

enum ViewMode {
SubWindowView,
TabbedView
};

QMdiArea(QWidget *parent = 0);
~QMdiArea();

QSize sizeHint() const;
QSize minimumSizeHint() const;

QMdiSubWindow *currentSubWindow() const;
QMdiSubWindow *activeSubWindow() const;
QList<QMdiSubWindow *> subWindowList(WindowOrder order = CreationOrder) const;

QMdiSubWindow *addSubWindow(QWidget *widget, Qt::WindowFlags flags = 0);
void removeSubWindow(QWidget *widget);

QBrush background() const;
void setBackground(const QBrush &background);

WindowOrder activationOrder() const;
void setActivationOrder(WindowOrder order);

void setOption(AreaOption option, bool on = true);
bool testOption(AreaOption opton) const;

void setViewMode(ViewMode mode);
ViewMode viewMode() const;


# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
bool documentMode() const;
void setDocumentMode(bool enabled);

void setTabsClosable(bool closable);
bool tabsClosable() const;

void setTabsMovable(bool movable);
bool tabsMovable() const;


# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
void setTabShape(QTabWidget::TabShape shape);
QTabWidget::TabShape tabShape() const;

void setTabPosition(QTabWidget::TabPosition position);
QTabWidget::TabPosition tabPosition() const;


# 133 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdiarea.h"
signals:
void subWindowActivated(QMdiSubWindow *);

public slots:
void setActiveSubWindow(QMdiSubWindow *window);
void tileSubWindows();
void cascadeSubWindows();
void closeActiveSubWindow();
void closeAllSubWindows();
void activateNextSubWindow();
void activatePreviousSubWindow();

protected slots:
void setupViewport(QWidget *viewport);

protected:
bool event(QEvent *event);
bool eventFilter(QObject *object, QEvent *event);
void paintEvent(QPaintEvent *paintEvent);
void childEvent(QChildEvent *childEvent);
void resizeEvent(QResizeEvent *resizeEvent);
void timerEvent(QTimerEvent *timerEvent);
void showEvent(QShowEvent *showEvent);
bool viewportEvent(QEvent *event);
void scrollContentsBy(int dx, int dy);

private:
QMdiArea(const QMdiArea &) ; QMdiArea &operator=(const QMdiArea &) ;
inline QMdiAreaPrivate* d_func() { return reinterpret_cast<QMdiAreaPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMdiAreaPrivate* d_func() const { return reinterpret_cast<const QMdiAreaPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMdiAreaPrivate;





};

 inline QFlags<QMdiArea::AreaOptions::enum_type> operator|(QMdiArea::AreaOptions::enum_type f1, QMdiArea::AreaOptions::enum_type f2) { return QFlags<QMdiArea::AreaOptions::enum_type>(f1) | f2; }  inline QFlags<QMdiArea::AreaOptions::enum_type> operator|(QMdiArea::AreaOptions::enum_type f1, QFlags<QMdiArea::AreaOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QMdiArea::AreaOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }





# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
class QMenu;
class QMdiArea;

namespace QMdi { class ControlContainer; }
class QMdiSubWindowPrivate;
class  QMdiSubWindow : public QWidget
{
Q_OBJECT
Q_PROPERTY(int keyboardSingleStep READ keyboardSingleStep WRITE setKeyboardSingleStep)
Q_PROPERTY(int keyboardPageStep READ keyboardPageStep WRITE setKeyboardPageStep)
public:
enum SubWindowOption {
AllowOutsideAreaHorizontally = 0x1, 
AllowOutsideAreaVertically = 0x2, 
RubberBandResize = 0x4,
RubberBandMove = 0x8
};
typedef QFlags<SubWindowOption> SubWindowOptions;

QMdiSubWindow(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QMdiSubWindow();

QSize sizeHint() const;
QSize minimumSizeHint() const;

void setWidget(QWidget *widget);
QWidget *widget() const;

QWidget *maximizedButtonsWidget() const; 
QWidget *maximizedSystemMenuIconWidget() const; 

bool isShaded() const;

void setOption(SubWindowOption option, bool on = true);
bool testOption(SubWindowOption) const;

void setKeyboardSingleStep(int step);
int keyboardSingleStep() const;

void setKeyboardPageStep(int step);
int keyboardPageStep() const;


# 95 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
void setSystemMenu(QMenu *systemMenu);
QMenu *systemMenu() const;


# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
QMdiArea *mdiArea() const;

signals:
void windowStateChanged(Qt::WindowStates oldState, Qt::WindowStates newState);
void aboutToActivate();

public slots:

# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
void showSystemMenu();

# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
void showShaded();

protected:
bool eventFilter(QObject *object, QEvent *event);
bool event(QEvent *event);
void showEvent(QShowEvent *showEvent);
void hideEvent(QHideEvent *hideEvent);
void changeEvent(QEvent *changeEvent);
void closeEvent(QCloseEvent *closeEvent);
void leaveEvent(QEvent *leaveEvent);
void resizeEvent(QResizeEvent *resizeEvent);
void timerEvent(QTimerEvent *timerEvent);
void moveEvent(QMoveEvent *moveEvent);
void paintEvent(QPaintEvent *paintEvent);
void mousePressEvent(QMouseEvent *mouseEvent);
void mouseDoubleClickEvent(QMouseEvent *mouseEvent);
void mouseReleaseEvent(QMouseEvent *mouseEvent);
void mouseMoveEvent(QMouseEvent *mouseEvent);
void keyPressEvent(QKeyEvent *keyEvent);

# 129 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
void contextMenuEvent(QContextMenuEvent *contextMenuEvent);

# 131 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
void focusInEvent(QFocusEvent *focusInEvent);
void focusOutEvent(QFocusEvent *focusOutEvent);
void childEvent(QChildEvent *childEvent);

private:
QMdiSubWindow(const QMdiSubWindow &) ; QMdiSubWindow &operator=(const QMdiSubWindow &) ;
inline QMdiSubWindowPrivate* d_func() { return reinterpret_cast<QMdiSubWindowPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMdiSubWindowPrivate* d_func() const { return reinterpret_cast<const QMdiSubWindowPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMdiSubWindowPrivate;



friend class QMdiAreaPrivate;

# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
friend class QMdiAreaTabBar;

# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmdisubwindow.h"
friend class QMdi::ControlContainer;
};

 inline QFlags<QMdiSubWindow::SubWindowOptions::enum_type> operator|(QMdiSubWindow::SubWindowOptions::enum_type f1, QMdiSubWindow::SubWindowOptions::enum_type f2) { return QFlags<QMdiSubWindow::SubWindowOptions::enum_type>(f1) | f2; }  inline QFlags<QMdiSubWindow::SubWindowOptions::enum_type> operator|(QMdiSubWindow::SubWindowOptions::enum_type f1, QFlags<QMdiSubWindow::SubWindowOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QMdiSubWindow::SubWindowOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }






# 103 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qaction.h"






























































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"






# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"





# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
class QMenuPrivate;
class QStyleOptionMenuItem;
class QPlatformMenu;

class  QMenu : public QWidget
{
private:
Q_OBJECT
inline QMenuPrivate* d_func() { return reinterpret_cast<QMenuPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMenuPrivate* d_func() const { return reinterpret_cast<const QMenuPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMenuPrivate;

Q_PROPERTY(bool tearOffEnabled READ isTearOffEnabled WRITE setTearOffEnabled)
Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(QIcon icon READ icon WRITE setIcon)
Q_PROPERTY(bool separatorsCollapsible READ separatorsCollapsible WRITE setSeparatorsCollapsible)
Q_PROPERTY(bool toolTipsVisible READ toolTipsVisible WRITE setToolTipsVisible)

public:
explicit QMenu(QWidget *parent = 0);
explicit QMenu(const QString &title, QWidget *parent = 0);
~QMenu();


# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
inline void addAction(QAction *action) { QWidget::addAction(action); }



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
QAction *addAction(const QString &text);
QAction *addAction(const QIcon &icon, const QString &text);
QAction *addAction(const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);
QAction *addAction(const QIcon &icon, const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);

QAction *addMenu(QMenu *menu);
QMenu *addMenu(const QString &title);
QMenu *addMenu(const QIcon &icon, const QString &title);

QAction *addSeparator();

QAction *addSection(const QString &text);
QAction *addSection(const QIcon &icon, const QString &text);

QAction *insertMenu(QAction *before, QMenu *menu);
QAction *insertSeparator(QAction *before);
QAction *insertSection(QAction *before, const QString &text);
QAction *insertSection(QAction *before, const QIcon &icon, const QString &text);

bool isEmpty() const;
void clear();

void setTearOffEnabled(bool);
bool isTearOffEnabled() const;

bool isTearOffMenuVisible() const;
void hideTearOffMenu();

void setDefaultAction(QAction *);
QAction *defaultAction() const;

void setActiveAction(QAction *act);
QAction *activeAction() const;

void popup(const QPoint &pos, QAction *at=0);
QAction *exec();
QAction *exec(const QPoint &pos, QAction *at=0);

static QAction *exec(QList<QAction*> actions, const QPoint &pos, QAction *at=0, QWidget *parent=0);

QSize sizeHint() const;

QRect actionGeometry(QAction *) const;
QAction *actionAt(const QPoint &) const;

QAction *menuAction() const;

QString title() const;
void setTitle(const QString &title);

QIcon icon() const;
void setIcon(const QIcon &icon);

void setNoReplayFor(QWidget *widget);
QPlatformMenu *platformMenu();





# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
bool separatorsCollapsible() const;
void setSeparatorsCollapsible(bool collapse);

bool toolTipsVisible() const;
void setToolTipsVisible(bool visible);

signals:
void aboutToShow();
void aboutToHide();
void triggered(QAction *action);
void hovered(QAction *action);

protected:
int columnCount() const;

void changeEvent(QEvent *);
void keyPressEvent(QKeyEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);

# 166 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
void wheelEvent(QWheelEvent *);

# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
void enterEvent(QEvent *);
void leaveEvent(QEvent *);
void hideEvent(QHideEvent *);
void paintEvent(QPaintEvent *);
void actionEvent(QActionEvent *);
void timerEvent(QTimerEvent *);
bool event(QEvent *);
bool focusNextPrevChild(bool next);
void initStyleOption(QStyleOptionMenuItem *option, const QAction *action) const;





# 182 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"
private slots:
void internalSetSloppyAction();
void internalDelayedPopup();

private:




protected:
QMenu(QMenuPrivate &dd, QWidget* parent = 0);

private:
QMenu(const QMenu &) ; QMenu &operator=(const QMenu &) ;

friend class QMenuBar;
friend class QMenuBarPrivate;
friend class QTornOffMenu;
friend class QComboBox;
friend class QAction;
friend class QToolButtonPrivate;
friend void qt_mac_emit_menuSignals(QMenu *menu, bool show);
friend void qt_mac_menu_emit_hovered(QMenu *menu, QAction *action);
};



# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"



# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenu.h"



















































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"
class QMenuBarPrivate;
class QStyleOptionMenuItem;
class QWindowsStyle;
class QPlatformMenuBar;

class  QMenuBar : public QWidget
{
Q_OBJECT

Q_PROPERTY(bool defaultUp READ isDefaultUp WRITE setDefaultUp)
Q_PROPERTY(bool nativeMenuBar READ isNativeMenuBar WRITE setNativeMenuBar)

public:
explicit QMenuBar(QWidget *parent = 0);
~QMenuBar();


# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"
void addAction(QAction *action) { QWidget::addAction(action); }



# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"
QAction *addAction(const QString &text);
QAction *addAction(const QString &text, const QObject *receiver, const char* member);

QAction *addMenu(QMenu *menu);
QMenu *addMenu(const QString &title);
QMenu *addMenu(const QIcon &icon, const QString &title);


QAction *addSeparator();
QAction *insertSeparator(QAction *before);

QAction *insertMenu(QAction *before, QMenu *menu);

void clear();

QAction *activeAction() const;
void setActiveAction(QAction *action);

void setDefaultUp(bool);
bool isDefaultUp() const;

QSize sizeHint() const;
QSize minimumSizeHint() const;
int heightForWidth(int) const;

QRect actionGeometry(QAction *) const;
QAction *actionAt(const QPoint &) const;

void setCornerWidget(QWidget *w, Qt::Corner corner = Qt::TopRightCorner);
QWidget *cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const;









# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"
bool isNativeMenuBar() const;
void setNativeMenuBar(bool nativeMenuBar);
QPlatformMenuBar *platformMenuBar();
public slots:
virtual void setVisible(bool visible);

signals:
void triggered(QAction *action);
void hovered(QAction *action);

protected:
void changeEvent(QEvent *);
void keyPressEvent(QKeyEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void leaveEvent(QEvent *);
void paintEvent(QPaintEvent *);
void resizeEvent(QResizeEvent *);
void actionEvent(QActionEvent *);
void focusOutEvent(QFocusEvent *);
void focusInEvent(QFocusEvent *);
void timerEvent(QTimerEvent *);
bool eventFilter(QObject *, QEvent *);
bool event(QEvent *);
void initStyleOption(QStyleOptionMenuItem *option, const QAction *action) const;

private:
inline QMenuBarPrivate* d_func() { return reinterpret_cast<QMenuBarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMenuBarPrivate* d_func() const { return reinterpret_cast<const QMenuBarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMenuBarPrivate;
QMenuBar(const QMenuBar &) ; QMenuBar &operator=(const QMenuBar &) ;









# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"
friend class QMenu;
friend class QMenuPrivate;
friend class QWindowsStyle;
};



# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qmenubar.h"



# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"













































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"









































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"






























































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
















































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"





# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"



class QStyleSheet;
class QTextDocument;
class QMenu;
class QTextEditPrivate;
class QMimeData;
class QPagedPaintDevice;

class  QTextEdit : public QAbstractScrollArea
{
Q_OBJECT
inline QTextEditPrivate* d_func() { return reinterpret_cast<QTextEditPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextEditPrivate* d_func() const { return reinterpret_cast<const QTextEditPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextEditPrivate;

Q_ENUMS(LineWrapMode)
Q_PROPERTY(AutoFormatting autoFormatting READ autoFormatting WRITE setAutoFormatting)
Q_PROPERTY(bool tabChangesFocus READ tabChangesFocus WRITE setTabChangesFocus)
Q_PROPERTY(QString documentTitle READ documentTitle WRITE setDocumentTitle)
Q_PROPERTY(bool undoRedoEnabled READ isUndoRedoEnabled WRITE setUndoRedoEnabled)
Q_PROPERTY(LineWrapMode lineWrapMode READ lineWrapMode WRITE setLineWrapMode)

Q_PROPERTY(int lineWrapColumnOrWidth READ lineWrapColumnOrWidth WRITE setLineWrapColumnOrWidth)
Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)

# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
Q_PROPERTY(QString html READ toHtml WRITE setHtml NOTIFY textChanged USER true)

# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
Q_PROPERTY(QString plainText READ toPlainText WRITE setPlainText DESIGNABLE false)
Q_PROPERTY(bool overwriteMode READ overwriteMode WRITE setOverwriteMode)
Q_PROPERTY(int tabStopWidth READ tabStopWidth WRITE setTabStopWidth)
Q_PROPERTY(bool acceptRichText READ acceptRichText WRITE setAcceptRichText)
Q_PROPERTY(int cursorWidth READ cursorWidth WRITE setCursorWidth)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)
Q_PROPERTY(QTextDocument *document READ document WRITE setDocument DESIGNABLE false)
public:
enum LineWrapMode {
NoWrap,
WidgetWidth,
FixedPixelWidth,
FixedColumnWidth
};

enum AutoFormattingFlag {
AutoNone = 0,
AutoBulletList = 0x00000001,
AutoAll = 0xffffffff
};

typedef QFlags<AutoFormattingFlag> AutoFormatting;

explicit QTextEdit(QWidget *parent = 0);
explicit QTextEdit(const QString &text, QWidget *parent = 0);
virtual ~QTextEdit();

void setDocument(QTextDocument *document);
QTextDocument *document() const;

void setTextCursor(const QTextCursor &cursor);
QTextCursor textCursor() const;

bool isReadOnly() const;
void setReadOnly(bool ro);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

qreal fontPointSize() const;
QString fontFamily() const;
int fontWeight() const;
bool fontUnderline() const;
bool fontItalic() const;
QColor textColor() const;
QColor textBackgroundColor() const;
QFont currentFont() const;
Qt::Alignment alignment() const;

void mergeCurrentCharFormat(const QTextCharFormat &modifier);

void setCurrentCharFormat(const QTextCharFormat &format);
QTextCharFormat currentCharFormat() const;

AutoFormatting autoFormatting() const;
void setAutoFormatting(AutoFormatting features);

bool tabChangesFocus() const;
void setTabChangesFocus(bool b);

inline void setDocumentTitle(const QString &title)
{ document()->setMetaInformation(QTextDocument::DocumentTitle, title); }
inline QString documentTitle() const
{ return document()->metaInformation(QTextDocument::DocumentTitle); }

inline bool isUndoRedoEnabled() const
{ return document()->isUndoRedoEnabled(); }
inline void setUndoRedoEnabled(bool enable)
{ document()->setUndoRedoEnabled(enable); }

LineWrapMode lineWrapMode() const;
void setLineWrapMode(LineWrapMode mode);

int lineWrapColumnOrWidth() const;
void setLineWrapColumnOrWidth(int w);

QTextOption::WrapMode wordWrapMode() const;
void setWordWrapMode(QTextOption::WrapMode policy);

bool find(const QString &exp, QTextDocument::FindFlags options = 0);

QString toPlainText() const;

# 164 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
QString toHtml() const;


# 167 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void ensureCursorVisible();

Q_INVOKABLE virtual QVariant loadResource(int type, const QUrl &name);

# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
QMenu *createStandardContextMenu();
QMenu *createStandardContextMenu(const QPoint &position);


# 175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
QTextCursor cursorForPosition(const QPoint &pos) const;
QRect cursorRect(const QTextCursor &cursor) const;
QRect cursorRect() const;

QString anchorAt(const QPoint& pos) const;

bool overwriteMode() const;
void setOverwriteMode(bool overwrite);

int tabStopWidth() const;
void setTabStopWidth(int width);

int cursorWidth() const;
void setCursorWidth(int width);

bool acceptRichText() const;
void setAcceptRichText(bool accept);

struct ExtraSelection
{
QTextCursor cursor;
QTextCharFormat format;
};
void setExtraSelections(const QList<ExtraSelection> &selections);
QList<ExtraSelection> extraSelections() const;

void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);

bool canPaste() const;

void print(QPagedPaintDevice *printer) const;

QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

public slots:
void setFontPointSize(qreal s);
void setFontFamily(const QString &fontFamily);
void setFontWeight(int w);
void setFontUnderline(bool b);
void setFontItalic(bool b);
void setTextColor(const QColor &c);
void setTextBackgroundColor(const QColor &c);
void setCurrentFont(const QFont &f);
void setAlignment(Qt::Alignment a);

void setPlainText(const QString &text);

# 222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void setHtml(const QString &text);

# 224 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void setText(const QString &text);


# 227 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void cut();
void copy();
void paste();


# 232 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void undo();
void redo();

void clear();
void selectAll();

void insertPlainText(const QString &text);

# 240 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void insertHtml(const QString &text);


# 243 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
void append(const QString &text);

void scrollToAnchor(const QString &name);

void zoomIn(int range = 1);
void zoomOut(int range = 1);

signals:
void textChanged();
void undoAvailable(bool b);
void redoAvailable(bool b);
void currentCharFormatChanged(const QTextCharFormat &format);
void copyAvailable(bool b);
void selectionChanged();
void cursorPositionChanged();

protected:
virtual bool event(QEvent *e);
virtual void timerEvent(QTimerEvent *e);
virtual void keyPressEvent(QKeyEvent *e);
virtual void keyReleaseEvent(QKeyEvent *e);
virtual void resizeEvent(QResizeEvent *e);
virtual void paintEvent(QPaintEvent *e);
virtual void mousePressEvent(QMouseEvent *e);
virtual void mouseMoveEvent(QMouseEvent *e);
virtual void mouseReleaseEvent(QMouseEvent *e);
virtual void mouseDoubleClickEvent(QMouseEvent *e);
virtual bool focusNextPrevChild(bool next);

# 272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
virtual void contextMenuEvent(QContextMenuEvent *e);


# 275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
virtual void dragEnterEvent(QDragEnterEvent *e);
virtual void dragLeaveEvent(QDragLeaveEvent *e);
virtual void dragMoveEvent(QDragMoveEvent *e);
virtual void dropEvent(QDropEvent *e);

# 280 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
virtual void focusInEvent(QFocusEvent *e);
virtual void focusOutEvent(QFocusEvent *e);
virtual void showEvent(QShowEvent *);
virtual void changeEvent(QEvent *e);

# 285 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
virtual void wheelEvent(QWheelEvent *e);


# 288 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"
virtual QMimeData *createMimeDataFromSelection() const;
virtual bool canInsertFromMimeData(const QMimeData *source) const;
virtual void insertFromMimeData(const QMimeData *source);

virtual void inputMethodEvent(QInputMethodEvent *);

QTextEdit(QTextEditPrivate &dd, QWidget *parent);

virtual void scrollContentsBy(int dx, int dy);
virtual void doSetTextCursor(const QTextCursor &cursor);

private:
QTextEdit(const QTextEdit &) ; QTextEdit &operator=(const QTextEdit &) ;





friend class QTextEditControl;
friend class QTextDocument;
friend class QWidgetTextControl;
};

 inline QFlags<QTextEdit::AutoFormatting::enum_type> operator|(QTextEdit::AutoFormatting::enum_type f1, QTextEdit::AutoFormatting::enum_type f2) { return QFlags<QTextEdit::AutoFormatting::enum_type>(f1) | f2; }  inline QFlags<QTextEdit::AutoFormatting::enum_type> operator|(QTextEdit::AutoFormatting::enum_type f1, QFlags<QTextEdit::AutoFormatting::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QTextEdit::AutoFormatting::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }






# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractscrollarea.h"













































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"









































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextoption.h"






























































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextcursor.h"
















































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextformat.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qabstracttextdocumentlayout.h"

















































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"




# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"



class QStyleSheet;
class QTextDocument;
class QMenu;
class QPlainTextEditPrivate;
class QMimeData;
class QPagedPaintDevice;

class  QPlainTextEdit : public QAbstractScrollArea
{
Q_OBJECT
inline QPlainTextEditPrivate* d_func() { return reinterpret_cast<QPlainTextEditPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPlainTextEditPrivate* d_func() const { return reinterpret_cast<const QPlainTextEditPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPlainTextEditPrivate;
Q_ENUMS(LineWrapMode)
Q_PROPERTY(bool tabChangesFocus READ tabChangesFocus WRITE setTabChangesFocus)
Q_PROPERTY(QString documentTitle READ documentTitle WRITE setDocumentTitle)
Q_PROPERTY(bool undoRedoEnabled READ isUndoRedoEnabled WRITE setUndoRedoEnabled)
Q_PROPERTY(LineWrapMode lineWrapMode READ lineWrapMode WRITE setLineWrapMode)

Q_PROPERTY(bool readOnly READ isReadOnly WRITE setReadOnly)
Q_PROPERTY(QString plainText READ toPlainText WRITE setPlainText NOTIFY textChanged USER true)
Q_PROPERTY(bool overwriteMode READ overwriteMode WRITE setOverwriteMode)
Q_PROPERTY(int tabStopWidth READ tabStopWidth WRITE setTabStopWidth)
Q_PROPERTY(int cursorWidth READ cursorWidth WRITE setCursorWidth)
Q_PROPERTY(Qt::TextInteractionFlags textInteractionFlags READ textInteractionFlags WRITE setTextInteractionFlags)
Q_PROPERTY(int blockCount READ blockCount)
Q_PROPERTY(int maximumBlockCount READ maximumBlockCount WRITE setMaximumBlockCount)
Q_PROPERTY(bool backgroundVisible READ backgroundVisible WRITE setBackgroundVisible)
Q_PROPERTY(bool centerOnScroll READ centerOnScroll WRITE setCenterOnScroll)
public:
enum LineWrapMode {
NoWrap,
WidgetWidth
};

explicit QPlainTextEdit(QWidget *parent = 0);
explicit QPlainTextEdit(const QString &text, QWidget *parent = 0);
virtual ~QPlainTextEdit();

void setDocument(QTextDocument *document);
QTextDocument *document() const;

void setTextCursor(const QTextCursor &cursor);
QTextCursor textCursor() const;

bool isReadOnly() const;
void setReadOnly(bool ro);

void setTextInteractionFlags(Qt::TextInteractionFlags flags);
Qt::TextInteractionFlags textInteractionFlags() const;

void mergeCurrentCharFormat(const QTextCharFormat &modifier);
void setCurrentCharFormat(const QTextCharFormat &format);
QTextCharFormat currentCharFormat() const;

bool tabChangesFocus() const;
void setTabChangesFocus(bool b);

inline void setDocumentTitle(const QString &title)
{ document()->setMetaInformation(QTextDocument::DocumentTitle, title); }
inline QString documentTitle() const
{ return document()->metaInformation(QTextDocument::DocumentTitle); }

inline bool isUndoRedoEnabled() const
{ return document()->isUndoRedoEnabled(); }
inline void setUndoRedoEnabled(bool enable)
{ document()->setUndoRedoEnabled(enable); }

inline void setMaximumBlockCount(int maximum)
{ document()->setMaximumBlockCount(maximum); }
inline int maximumBlockCount() const
{ return document()->maximumBlockCount(); }


LineWrapMode lineWrapMode() const;
void setLineWrapMode(LineWrapMode mode);

QTextOption::WrapMode wordWrapMode() const;
void setWordWrapMode(QTextOption::WrapMode policy);

void setBackgroundVisible(bool visible);
bool backgroundVisible() const;

void setCenterOnScroll(bool enabled);
bool centerOnScroll() const;

bool find(const QString &exp, QTextDocument::FindFlags options = 0);

inline QString toPlainText() const
{ return document()->toPlainText(); }

void ensureCursorVisible();

virtual QVariant loadResource(int type, const QUrl &name);

# 152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
QMenu *createStandardContextMenu();


# 155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
QTextCursor cursorForPosition(const QPoint &pos) const;
QRect cursorRect(const QTextCursor &cursor) const;
QRect cursorRect() const;

QString anchorAt(const QPoint &pos) const;

bool overwriteMode() const;
void setOverwriteMode(bool overwrite);

int tabStopWidth() const;
void setTabStopWidth(int width);

int cursorWidth() const;
void setCursorWidth(int width);

void setExtraSelections(const QList<QTextEdit::ExtraSelection> &selections);
QList<QTextEdit::ExtraSelection> extraSelections() const;

void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);

bool canPaste() const;

void print(QPagedPaintDevice *printer) const;

int blockCount() const;
QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

public slots:

void setPlainText(const QString &text);


# 187 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
void cut();
void copy();
void paste();


# 192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
void undo();
void redo();

void clear();
void selectAll();

void insertPlainText(const QString &text);

void appendPlainText(const QString &text);
void appendHtml(const QString &html);

void centerCursor();

void zoomIn(int range = 1);
void zoomOut(int range = 1);

signals:
void textChanged();
void undoAvailable(bool b);
void redoAvailable(bool b);
void copyAvailable(bool b);
void selectionChanged();
void cursorPositionChanged();

void updateRequest(const QRect &rect, int dy);
void blockCountChanged(int newBlockCount);
void modificationChanged(bool);

protected:
virtual bool event(QEvent *e);
virtual void timerEvent(QTimerEvent *e);
virtual void keyPressEvent(QKeyEvent *e);
virtual void keyReleaseEvent(QKeyEvent *e);
virtual void resizeEvent(QResizeEvent *e);
virtual void paintEvent(QPaintEvent *e);
virtual void mousePressEvent(QMouseEvent *e);
virtual void mouseMoveEvent(QMouseEvent *e);
virtual void mouseReleaseEvent(QMouseEvent *e);
virtual void mouseDoubleClickEvent(QMouseEvent *e);
virtual bool focusNextPrevChild(bool next);

# 233 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
virtual void contextMenuEvent(QContextMenuEvent *e);


# 236 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
virtual void dragEnterEvent(QDragEnterEvent *e);
virtual void dragLeaveEvent(QDragLeaveEvent *e);
virtual void dragMoveEvent(QDragMoveEvent *e);
virtual void dropEvent(QDropEvent *e);

# 241 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
virtual void focusInEvent(QFocusEvent *e);
virtual void focusOutEvent(QFocusEvent *e);
virtual void showEvent(QShowEvent *);
virtual void changeEvent(QEvent *e);

# 246 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
virtual void wheelEvent(QWheelEvent *e);


# 249 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qplaintextedit.h"
virtual QMimeData *createMimeDataFromSelection() const;
virtual bool canInsertFromMimeData(const QMimeData *source) const;
virtual void insertFromMimeData(const QMimeData *source);

virtual void inputMethodEvent(QInputMethodEvent *);

QPlainTextEdit(QPlainTextEditPrivate &dd, QWidget *parent);

virtual void scrollContentsBy(int dx, int dy);
virtual void doSetTextCursor(const QTextCursor &cursor);

QTextBlock firstVisibleBlock() const;
QPointF contentOffset() const;
QRectF blockBoundingRect(const QTextBlock &block) const;
QRectF blockBoundingGeometry(const QTextBlock &block) const;
QAbstractTextDocumentLayout::PaintContext getPaintContext() const;


private:
QPlainTextEdit(const QPlainTextEdit &) ; QPlainTextEdit &operator=(const QPlainTextEdit &) ;





friend class QPlainTextEditControl;
};


class QPlainTextDocumentLayoutPrivate;
class  QPlainTextDocumentLayout : public QAbstractTextDocumentLayout
{
Q_OBJECT
inline QPlainTextDocumentLayoutPrivate* d_func() { return reinterpret_cast<QPlainTextDocumentLayoutPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPlainTextDocumentLayoutPrivate* d_func() const { return reinterpret_cast<const QPlainTextDocumentLayoutPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPlainTextDocumentLayoutPrivate;
Q_PROPERTY(int cursorWidth READ cursorWidth WRITE setCursorWidth)

public:
QPlainTextDocumentLayout(QTextDocument *document);
~QPlainTextDocumentLayout();

void draw(QPainter *, const PaintContext &);
int hitTest(const QPointF &, Qt::HitTestAccuracy ) const;

int pageCount() const;
QSizeF documentSize() const;

QRectF frameBoundingRect(QTextFrame *) const;
QRectF blockBoundingRect(const QTextBlock &block) const;

void ensureBlockLayout(const QTextBlock &block) const;

void setCursorWidth(int width);
int cursorWidth() const;

void requestUpdate();

protected:
void documentChanged(int from, int , int charsAdded);


private:
void setTextWidth(qreal newWidth);
qreal textWidth() const;
void layoutBlock(const QTextBlock &block);
qreal blockWidth(const QTextBlock &block);

QPlainTextDocumentLayoutPrivate *priv() const;

friend class QPlainTextEdit;
friend class QPlainTextEditPrivate;
};







# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressbar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressbar.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressbar.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressbar.h"
class QProgressBarPrivate;
class QStyleOptionProgressBar;

class  QProgressBar : public QWidget
{
Q_OBJECT
Q_ENUMS(Direction)
Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(QString text READ text)
Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged)
Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
Q_PROPERTY(bool textVisible READ isTextVisible WRITE setTextVisible)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(bool invertedAppearance READ invertedAppearance WRITE setInvertedAppearance)
Q_PROPERTY(Direction textDirection READ textDirection WRITE setTextDirection)
Q_PROPERTY(QString format READ format WRITE setFormat RESET resetFormat)

public:
enum Direction { TopToBottom, BottomToTop };

explicit QProgressBar(QWidget *parent = 0);
~QProgressBar();

int minimum() const;
int maximum() const;

int value() const;

virtual QString text() const;
void setTextVisible(bool visible);
bool isTextVisible() const;

Qt::Alignment alignment() const;
void setAlignment(Qt::Alignment alignment);

QSize sizeHint() const;
QSize minimumSizeHint() const;

Qt::Orientation orientation() const;

void setInvertedAppearance(bool invert);
bool invertedAppearance() const;
void setTextDirection(QProgressBar::Direction textDirection);
QProgressBar::Direction textDirection() const;

void setFormat(const QString &format);
void resetFormat();
QString format() const;

public slots:
void reset();
void setRange(int minimum, int maximum);
void setMinimum(int minimum);
void setMaximum(int maximum);
void setValue(int value);
void setOrientation(Qt::Orientation);

signals:
void valueChanged(int value);

protected:
bool event(QEvent *e);
void paintEvent(QPaintEvent *);
void initStyleOption(QStyleOptionProgressBar *option) const;

private:
inline QProgressBarPrivate* d_func() { return reinterpret_cast<QProgressBarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QProgressBarPrivate* d_func() const { return reinterpret_cast<const QProgressBarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QProgressBarPrivate;
QProgressBar(const QProgressBar &) ; QProgressBar &operator=(const QProgressBar &) ;
};



# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qprogressbar.h"



# 107 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qpushbutton.h"

















































































































# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qradiobutton.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"




























































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qradiobutton.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qradiobutton.h"



class QRadioButtonPrivate;
class QStyleOptionButton;

class  QRadioButton : public QAbstractButton
{
Q_OBJECT

public:
explicit QRadioButton(QWidget *parent=0);
explicit QRadioButton(const QString &text, QWidget *parent=0);
~QRadioButton();

QSize sizeHint() const;
QSize minimumSizeHint() const;

protected:
bool event(QEvent *e);
bool hitButton(const QPoint &) const;
void paintEvent(QPaintEvent *);
void mouseMoveEvent(QMouseEvent *);
void initStyleOption(QStyleOptionButton *button) const;


private:
inline QRadioButtonPrivate* d_func() { return reinterpret_cast<QRadioButtonPrivate *>(qGetPtrHelper(d_ptr)); } inline const QRadioButtonPrivate* d_func() const { return reinterpret_cast<const QRadioButtonPrivate *>(qGetPtrHelper(d_ptr)); } friend class QRadioButtonPrivate;
QRadioButton(const QRadioButton &) ; QRadioButton &operator=(const QRadioButton &) ;
};




# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qrubberband.h"



































































































# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollarea.h"
































































































# 111 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractslider.h"




































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"
class QScrollBarPrivate;
class QStyleOptionSlider;

class  QScrollBar : public QAbstractSlider
{
Q_OBJECT
public:
explicit QScrollBar(QWidget *parent=0);
explicit QScrollBar(Qt::Orientation, QWidget *parent=0);
~QScrollBar();

QSize sizeHint() const;
bool event(QEvent *event);

protected:

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"
void wheelEvent(QWheelEvent *);

# 71 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"
void paintEvent(QPaintEvent *);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void hideEvent(QHideEvent*);
void sliderChange(SliderChange change);

# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"
void contextMenuEvent(QContextMenuEvent *);

# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"
void initStyleOption(QStyleOptionSlider *option) const;


private:
friend class QAbstractScrollAreaPrivate;
friend  QStyleOptionSlider qt_qscrollbarStyleOption(QScrollBar *scrollBar);

QScrollBar(const QScrollBar &) ; QScrollBar &operator=(const QScrollBar &) ;
inline QScrollBarPrivate* d_func() { return reinterpret_cast<QScrollBarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QScrollBarPrivate* d_func() const { return reinterpret_cast<const QScrollBarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QScrollBarPrivate;
};



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qscrollbar.h"



# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizegrip.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizegrip.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizegrip.h"




# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizegrip.h"
class QSizeGripPrivate;
class  QSizeGrip : public QWidget
{
Q_OBJECT
public:
explicit QSizeGrip(QWidget *parent);
~QSizeGrip();

QSize sizeHint() const;
void setVisible(bool);

protected:
void paintEvent(QPaintEvent *);
void mousePressEvent(QMouseEvent *);
void mouseMoveEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *mouseEvent);
void moveEvent(QMoveEvent *moveEvent);
void showEvent(QShowEvent *showEvent);
void hideEvent(QHideEvent *hideEvent);
bool eventFilter(QObject *, QEvent *);
bool event(QEvent *);

public:

private:
inline QSizeGripPrivate* d_func() { return reinterpret_cast<QSizeGripPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSizeGripPrivate* d_func() const { return reinterpret_cast<const QSizeGripPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSizeGripPrivate;
QSizeGrip(const QSizeGrip &) ; QSizeGrip &operator=(const QSizeGrip &) ;

};


# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizegrip.h"



# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qslider.h"











































































































# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qspinbox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractspinbox.h"
















































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qspinbox.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qspinbox.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qspinbox.h"
class QSpinBoxPrivate;
class  QSpinBox : public QAbstractSpinBox
{
Q_OBJECT

Q_PROPERTY(QString suffix READ suffix WRITE setSuffix)
Q_PROPERTY(QString prefix READ prefix WRITE setPrefix)
Q_PROPERTY(QString cleanText READ cleanText)
Q_PROPERTY(int minimum READ minimum WRITE setMinimum)
Q_PROPERTY(int maximum READ maximum WRITE setMaximum)
Q_PROPERTY(int singleStep READ singleStep WRITE setSingleStep)
Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged USER true)

public:
explicit QSpinBox(QWidget *parent = 0);
~QSpinBox();

int value() const;

QString prefix() const;
void setPrefix(const QString &prefix);

QString suffix() const;
void setSuffix(const QString &suffix);

QString cleanText() const;

int singleStep() const;
void setSingleStep(int val);

int minimum() const;
void setMinimum(int min);

int maximum() const;
void setMaximum(int max);

void setRange(int min, int max);


protected:
bool event(QEvent *event);
virtual QValidator::State validate(QString &input, int &pos) const;
virtual int valueFromText(const QString &text) const;
virtual QString textFromValue(int val) const;
virtual void fixup(QString &str) const;


public slots:
void setValue(int val);

signals:
void valueChanged(int);
void valueChanged(const QString &);

private:
QSpinBox(const QSpinBox &) ; QSpinBox &operator=(const QSpinBox &) ;
inline QSpinBoxPrivate* d_func() { return reinterpret_cast<QSpinBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSpinBoxPrivate* d_func() const { return reinterpret_cast<const QSpinBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSpinBoxPrivate;
};

class QDoubleSpinBoxPrivate;
class  QDoubleSpinBox : public QAbstractSpinBox
{
Q_OBJECT

Q_PROPERTY(QString prefix READ prefix WRITE setPrefix)
Q_PROPERTY(QString suffix READ suffix WRITE setSuffix)
Q_PROPERTY(QString cleanText READ cleanText)
Q_PROPERTY(int decimals READ decimals WRITE setDecimals)
Q_PROPERTY(double minimum READ minimum WRITE setMinimum)
Q_PROPERTY(double maximum READ maximum WRITE setMaximum)
Q_PROPERTY(double singleStep READ singleStep WRITE setSingleStep)
Q_PROPERTY(double value READ value WRITE setValue NOTIFY valueChanged USER true)
public:
explicit QDoubleSpinBox(QWidget *parent = 0);
~QDoubleSpinBox();

double value() const;

QString prefix() const;
void setPrefix(const QString &prefix);

QString suffix() const;
void setSuffix(const QString &suffix);

QString cleanText() const;

double singleStep() const;
void setSingleStep(double val);

double minimum() const;
void setMinimum(double min);

double maximum() const;
void setMaximum(double max);

void setRange(double min, double max);

int decimals() const;
void setDecimals(int prec);

virtual QValidator::State validate(QString &input, int &pos) const;
virtual double valueFromText(const QString &text) const;
virtual QString textFromValue(double val) const;
virtual void fixup(QString &str) const;

public slots:
void setValue(double val);

signals:
void valueChanged(double);
void valueChanged(const QString &);

private:
QDoubleSpinBox(const QDoubleSpinBox &) ; QDoubleSpinBox &operator=(const QDoubleSpinBox &) ;
inline QDoubleSpinBoxPrivate* d_func() { return reinterpret_cast<QDoubleSpinBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QDoubleSpinBoxPrivate* d_func() const { return reinterpret_cast<const QDoubleSpinBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QDoubleSpinBoxPrivate;
};



# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qspinbox.h"



# 115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplashscreen.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplashscreen.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplashscreen.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplashscreen.h"




# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplashscreen.h"
class QSplashScreenPrivate;

class  QSplashScreen : public QWidget
{
Q_OBJECT
public:
explicit QSplashScreen(const QPixmap &pixmap = QPixmap(), Qt::WindowFlags f = 0);
QSplashScreen(QWidget *parent, const QPixmap &pixmap = QPixmap(), Qt::WindowFlags f = 0);
virtual ~QSplashScreen();

void setPixmap(const QPixmap &pixmap);
const QPixmap pixmap() const;
void finish(QWidget *w);
void repaint();

public slots:
void showMessage(const QString &message, int alignment = Qt::AlignLeft,
const QColor &color = Qt::black);
void clearMessage();

signals:
void messageChanged(const QString &message);

protected:
bool event(QEvent *e);
virtual void drawContents(QPainter *painter);
void mousePressEvent(QMouseEvent *);

private:
QSplashScreen(const QSplashScreen &) ; QSplashScreen &operator=(const QSplashScreen &) ;
inline QSplashScreenPrivate* d_func() { return reinterpret_cast<QSplashScreenPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSplashScreenPrivate* d_func() const { return reinterpret_cast<const QSplashScreenPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSplashScreenPrivate;
};



# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplashscreen.h"



# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplitter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplitter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsizepolicy.h"
























































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplitter.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplitter.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplitter.h"
class QSplitterPrivate;
class QTextStream;
template <typename T> class QList;

class QSplitterHandle;

class  QSplitter : public QFrame
{
Q_OBJECT

Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation)
Q_PROPERTY(bool opaqueResize READ opaqueResize WRITE setOpaqueResize)
Q_PROPERTY(int handleWidth READ handleWidth WRITE setHandleWidth)
Q_PROPERTY(bool childrenCollapsible READ childrenCollapsible WRITE setChildrenCollapsible)

public:
explicit QSplitter(QWidget* parent = 0);
explicit QSplitter(Qt::Orientation, QWidget* parent = 0);
~QSplitter();

void addWidget(QWidget *widget);
void insertWidget(int index, QWidget *widget);

void setOrientation(Qt::Orientation);
Qt::Orientation orientation() const;

void setChildrenCollapsible(bool);
bool childrenCollapsible() const;

void setCollapsible(int index, bool);
bool isCollapsible(int index) const;
void setOpaqueResize(bool opaque = true);
bool opaqueResize() const;
void refresh();

QSize sizeHint() const;
QSize minimumSizeHint() const;

QList<int> sizes() const;
void setSizes(const QList<int> &list);

QByteArray saveState() const;
bool restoreState(const QByteArray &state);

int handleWidth() const;
void setHandleWidth(int);

int indexOf(QWidget *w) const;
QWidget *widget(int index) const;
int count() const;

void getRange(int index, int *, int *) const;
QSplitterHandle *handle(int index) const;

void setStretchFactor(int index, int stretch);

signals:
void splitterMoved(int pos, int index);

protected:
virtual QSplitterHandle *createHandle();

void childEvent(QChildEvent *);

bool event(QEvent *);
void resizeEvent(QResizeEvent *);

void changeEvent(QEvent *);
void moveSplitter(int pos, int index);
void setRubberBand(int position);
int closestLegalPosition(int, int);


private:
QSplitter(const QSplitter &) ; QSplitter &operator=(const QSplitter &) ;
inline QSplitterPrivate* d_func() { return reinterpret_cast<QSplitterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSplitterPrivate* d_func() const { return reinterpret_cast<const QSplitterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSplitterPrivate;
private:
friend class QSplitterHandle;
};

 QTextStream& operator<<(QTextStream&, const QSplitter&);
 QTextStream& operator>>(QTextStream&, QSplitter&);

class QSplitterHandlePrivate;
class  QSplitterHandle : public QWidget
{
Q_OBJECT
public:
explicit QSplitterHandle(Qt::Orientation o, QSplitter *parent);
~QSplitterHandle();

void setOrientation(Qt::Orientation o);
Qt::Orientation orientation() const;
bool opaqueResize() const;
QSplitter *splitter() const;

QSize sizeHint() const;

protected:
void paintEvent(QPaintEvent *);
void mouseMoveEvent(QMouseEvent *);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void resizeEvent(QResizeEvent *);
bool event(QEvent *);

void moveSplitter(int p);
int closestLegalPosition(int p);

private:
QSplitterHandle(const QSplitterHandle &) ; QSplitterHandle &operator=(const QSplitterHandle &) ;
inline QSplitterHandlePrivate* d_func() { return reinterpret_cast<QSplitterHandlePrivate *>(qGetPtrHelper(d_ptr)); } inline const QSplitterHandlePrivate* d_func() const { return reinterpret_cast<const QSplitterHandlePrivate *>(qGetPtrHelper(d_ptr)); } friend class QSplitterHandlePrivate;
};



# 169 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qsplitter.h"



# 117 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedwidget.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedwidget.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedwidget.h"
class QStackedWidgetPrivate;

class  QStackedWidget : public QFrame
{
Q_OBJECT

Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)
public:
explicit QStackedWidget(QWidget *parent=0);
~QStackedWidget();

int addWidget(QWidget *w);
int insertWidget(int index, QWidget *w);
void removeWidget(QWidget *w);

QWidget *currentWidget() const;
int currentIndex() const;

int indexOf(QWidget *) const;
QWidget *widget(int) const;
int count() const;

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *w);

signals:
void currentChanged(int);
void widgetRemoved(int index);

protected:
bool event(QEvent *e);

private:
QStackedWidget(const QStackedWidget &) ; QStackedWidget &operator=(const QStackedWidget &) ;
inline QStackedWidgetPrivate* d_func() { return reinterpret_cast<QStackedWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QStackedWidgetPrivate* d_func() const { return reinterpret_cast<const QStackedWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QStackedWidgetPrivate;
};



# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstackedwidget.h"



# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstatusbar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstatusbar.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstatusbar.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstatusbar.h"
class QStatusBarPrivate;

class  QStatusBar: public QWidget
{
Q_OBJECT

Q_PROPERTY(bool sizeGripEnabled READ isSizeGripEnabled WRITE setSizeGripEnabled)

public:
explicit QStatusBar(QWidget* parent=0);
virtual ~QStatusBar();

void addWidget(QWidget *widget, int stretch = 0);
int insertWidget(int index, QWidget *widget, int stretch = 0);
void addPermanentWidget(QWidget *widget, int stretch = 0);
int insertPermanentWidget(int index, QWidget *widget, int stretch = 0);
void removeWidget(QWidget *widget);

void setSizeGripEnabled(bool);
bool isSizeGripEnabled() const;

QString currentMessage() const;

public slots:
void showMessage(const QString &text, int timeout = 0);
void clearMessage();


signals:
void messageChanged(const QString &text);

protected:
void showEvent(QShowEvent *);
void paintEvent(QPaintEvent *);
void resizeEvent(QResizeEvent *);


void reformat();
void hideOrShow();
bool event(QEvent *);

private:
QStatusBar(const QStatusBar &) ; QStatusBar &operator=(const QStatusBar &) ;
inline QStatusBarPrivate* d_func() { return reinterpret_cast<QStatusBarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QStatusBarPrivate* d_func() const { return reinterpret_cast<const QStatusBarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QStatusBarPrivate;
};



# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qstatusbar.h"



# 119 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabbar.h"





















































































































































































































# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtabwidget.h"






















































































































































































# 121 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextbrowser.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"





























































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextbrowser.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextbrowser.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextbrowser.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextbrowser.h"
class QTextBrowserPrivate;

class  QTextBrowser : public QTextEdit
{
Q_OBJECT

Q_PROPERTY(QUrl source READ source WRITE setSource)



Q_PROPERTY(QStringList searchPaths READ searchPaths WRITE setSearchPaths)
Q_PROPERTY(bool openExternalLinks READ openExternalLinks WRITE setOpenExternalLinks)
Q_PROPERTY(bool openLinks READ openLinks WRITE setOpenLinks)

public:
explicit QTextBrowser(QWidget* parent = 0);
virtual ~QTextBrowser();

QUrl source() const;

QStringList searchPaths() const;
void setSearchPaths(const QStringList &paths);

virtual QVariant loadResource(int type, const QUrl &name);

bool isBackwardAvailable() const;
bool isForwardAvailable() const;
void clearHistory();
QString historyTitle(int) const;
QUrl historyUrl(int) const;
int backwardHistoryCount() const;
int forwardHistoryCount() const;

bool openExternalLinks() const;
void setOpenExternalLinks(bool open);

bool openLinks() const;
void setOpenLinks(bool open);

public slots:
virtual void setSource(const QUrl &name);
virtual void backward();
virtual void forward();
virtual void home();
virtual void reload();

signals:
void backwardAvailable(bool);
void forwardAvailable(bool);
void historyChanged();
void sourceChanged(const QUrl &);
void highlighted(const QUrl &);
void highlighted(const QString &);
void anchorClicked(const QUrl &);

protected:
bool event(QEvent *e);
virtual void keyPressEvent(QKeyEvent *ev);
virtual void mouseMoveEvent(QMouseEvent *ev);
virtual void mousePressEvent(QMouseEvent *ev);
virtual void mouseReleaseEvent(QMouseEvent *ev);
virtual void focusOutEvent(QFocusEvent *ev);
virtual bool focusNextPrevChild(bool next);
virtual void paintEvent(QPaintEvent *e);

private:
QTextBrowser(const QTextBrowser &) ; QTextBrowser &operator=(const QTextBrowser &) ;
inline QTextBrowserPrivate* d_func() { return reinterpret_cast<QTextBrowserPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTextBrowserPrivate* d_func() const { return reinterpret_cast<const QTextBrowserPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTextBrowserPrivate;



};



# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextbrowser.h"



# 122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtextedit.h"





























































































































































































































































































































# 123 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"
class QToolBarPrivate;

class QAction;
class QIcon;
class QMainWindow;
class QStyleOptionToolBar;

class  QToolBar : public QWidget
{
Q_OBJECT

Q_PROPERTY(bool movable READ isMovable WRITE setMovable
DESIGNABLE (qobject_cast<QMainWindow *>(parentWidget()) != 0)
NOTIFY movableChanged)
Q_PROPERTY(Qt::ToolBarAreas allowedAreas READ allowedAreas WRITE setAllowedAreas
DESIGNABLE (qobject_cast<QMainWindow *>(parentWidget()) != 0)
NOTIFY allowedAreasChanged)
Q_PROPERTY(Qt::Orientation orientation READ orientation WRITE setOrientation
DESIGNABLE (qobject_cast<QMainWindow *>(parentWidget()) == 0)
NOTIFY orientationChanged)
Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize NOTIFY iconSizeChanged)
Q_PROPERTY(Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle
NOTIFY toolButtonStyleChanged)
Q_PROPERTY(bool floating READ isFloating)
Q_PROPERTY(bool floatable READ isFloatable WRITE setFloatable)

public:
explicit QToolBar(const QString &title, QWidget *parent = 0);
explicit QToolBar(QWidget *parent = 0);
~QToolBar();

void setMovable(bool movable);
bool isMovable() const;

void setAllowedAreas(Qt::ToolBarAreas areas);
Qt::ToolBarAreas allowedAreas() const;

inline bool isAreaAllowed(Qt::ToolBarArea area) const
{ return (allowedAreas() & area) == area; }

void setOrientation(Qt::Orientation orientation);
Qt::Orientation orientation() const;

void clear();


# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"
inline void addAction(QAction *action)
{ QWidget::addAction(action); }




# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"
QAction *addAction(const QString &text);
QAction *addAction(const QIcon &icon, const QString &text);
QAction *addAction(const QString &text, const QObject *receiver, const char* member);
QAction *addAction(const QIcon &icon, const QString &text,
const QObject *receiver, const char* member);

QAction *addSeparator();
QAction *insertSeparator(QAction *before);

QAction *addWidget(QWidget *widget);
QAction *insertWidget(QAction *before, QWidget *widget);

QRect actionGeometry(QAction *action) const;
QAction *actionAt(const QPoint &p) const;
inline QAction *actionAt(int x, int y) const;

QAction *toggleViewAction() const;

QSize iconSize() const;
Qt::ToolButtonStyle toolButtonStyle() const;

QWidget *widgetForAction(QAction *action) const;

bool isFloatable() const;
void setFloatable(bool floatable);
bool isFloating() const;

public slots:
void setIconSize(const QSize &iconSize);
void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);

signals:
void actionTriggered(QAction *action);
void movableChanged(bool movable);
void allowedAreasChanged(Qt::ToolBarAreas allowedAreas);
void orientationChanged(Qt::Orientation orientation);
void iconSizeChanged(const QSize &iconSize);
void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);
void topLevelChanged(bool topLevel);
void visibilityChanged(bool visible);

protected:
void actionEvent(QActionEvent *event);
void changeEvent(QEvent *event);
void paintEvent(QPaintEvent *event);
bool event(QEvent *event);
void initStyleOption(QStyleOptionToolBar *option) const;


private:
inline QToolBarPrivate* d_func() { return reinterpret_cast<QToolBarPrivate *>(qGetPtrHelper(d_ptr)); } inline const QToolBarPrivate* d_func() const { return reinterpret_cast<const QToolBarPrivate *>(qGetPtrHelper(d_ptr)); } friend class QToolBarPrivate;
QToolBar(const QToolBar &) ; QToolBar &operator=(const QToolBar &) ;




friend class QMainWindow;
friend class QMainWindowLayout;
friend class QToolBarLayout;
friend class QToolBarAreaLayout;
};

inline QAction *QToolBar::actionAt(int ax, int ay) const
{ return actionAt(QPoint(ax, ay)); }



# 171 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbar.h"



# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qframe.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"
class QToolBoxPrivate;

class  QToolBox : public QFrame
{
Q_OBJECT
Q_PROPERTY(int currentIndex READ currentIndex WRITE setCurrentIndex NOTIFY currentChanged)
Q_PROPERTY(int count READ count)

public:
explicit QToolBox(QWidget *parent = 0, Qt::WindowFlags f = 0);
~QToolBox();

int addItem(QWidget *widget, const QString &text);
int addItem(QWidget *widget, const QIcon &icon, const QString &text);
int insertItem(int index, QWidget *widget, const QString &text);
int insertItem(int index, QWidget *widget, const QIcon &icon, const QString &text);

void removeItem(int index);

void setItemEnabled(int index, bool enabled);
bool isItemEnabled(int index) const;

void setItemText(int index, const QString &text);
QString itemText(int index) const;

void setItemIcon(int index, const QIcon &icon);
QIcon itemIcon(int index) const;


# 82 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"
void setItemToolTip(int index, const QString &toolTip);
QString itemToolTip(int index) const;


# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"
int currentIndex() const;
QWidget *currentWidget() const;
QWidget *widget(int index) const;
int indexOf(QWidget *widget) const;
int count() const;

public slots:
void setCurrentIndex(int index);
void setCurrentWidget(QWidget *widget);

signals:
void currentChanged(int index);

protected:
bool event(QEvent *e);
virtual void itemInserted(int index);
virtual void itemRemoved(int index);
void showEvent(QShowEvent *e);
void changeEvent(QEvent *);


private:
inline QToolBoxPrivate* d_func() { return reinterpret_cast<QToolBoxPrivate *>(qGetPtrHelper(d_ptr)); } inline const QToolBoxPrivate* d_func() const { return reinterpret_cast<const QToolBoxPrivate *>(qGetPtrHelper(d_ptr)); } friend class QToolBoxPrivate;
QToolBox(const QToolBox &) ; QToolBox &operator=(const QToolBox &) ;


};


inline int QToolBox::addItem(QWidget *item, const QString &text)
{ return insertItem(-1, item, QIcon(), text); }
inline int QToolBox::addItem(QWidget *item, const QIcon &iconSet,
const QString &text)
{ return insertItem(-1, item, iconSet, text); }
inline int QToolBox::insertItem(int index, QWidget *item, const QString &text)
{ return insertItem(index, item, QIcon(), text); }



# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbox.h"



# 125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qabstractbutton.h"




























































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
class QToolButtonPrivate;
class QMenu;
class QStyleOptionToolButton;

class  QToolButton : public QAbstractButton
{
Q_OBJECT
Q_ENUMS(Qt::ToolButtonStyle Qt::ArrowType ToolButtonPopupMode)

# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
Q_PROPERTY(ToolButtonPopupMode popupMode READ popupMode WRITE setPopupMode)

# 63 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
Q_PROPERTY(Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle)
Q_PROPERTY(bool autoRaise READ autoRaise WRITE setAutoRaise)
Q_PROPERTY(Qt::ArrowType arrowType READ arrowType WRITE setArrowType)

public:
enum ToolButtonPopupMode {
DelayedPopup,
MenuButtonPopup,
InstantPopup
};

explicit QToolButton(QWidget * parent=0);
~QToolButton();

QSize sizeHint() const;
QSize minimumSizeHint() const;

Qt::ToolButtonStyle toolButtonStyle() const;

Qt::ArrowType arrowType() const;
void setArrowType(Qt::ArrowType type);


# 86 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
void setMenu(QMenu* menu);
QMenu* menu() const;

void setPopupMode(ToolButtonPopupMode mode);
ToolButtonPopupMode popupMode() const;


# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
QAction *defaultAction() const;

void setAutoRaise(bool enable);
bool autoRaise() const;

public slots:

# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
void showMenu();

# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"
void setToolButtonStyle(Qt::ToolButtonStyle style);
void setDefaultAction(QAction *);

signals:
void triggered(QAction *);

protected:
bool event(QEvent *e);
void mousePressEvent(QMouseEvent *);
void mouseReleaseEvent(QMouseEvent *);
void paintEvent(QPaintEvent *);
void actionEvent(QActionEvent *);

void enterEvent(QEvent *);
void leaveEvent(QEvent *);
void timerEvent(QTimerEvent *);
void changeEvent(QEvent *);

bool hitButton(const QPoint &pos) const;
void nextCheckState();
void initStyleOption(QStyleOptionToolButton *option) const;

private:
QToolButton(const QToolButton &) ; QToolButton &operator=(const QToolButton &) ;
inline QToolButtonPrivate* d_func() { return reinterpret_cast<QToolButtonPrivate *>(qGetPtrHelper(d_ptr)); } inline const QToolButtonPrivate* d_func() const { return reinterpret_cast<const QToolButtonPrivate *>(qGetPtrHelper(d_ptr)); } friend class QToolButtonPrivate;

# 128 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"




# 132 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"


};



# 138 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtoolbutton.h"



# 126 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qtwidgetsversion.h"









# 127 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/QtWidgets"


# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvgDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qgraphicssvgitem.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qgraphicssvgitem.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicsitem.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qgraphicssvgitem.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"














# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"



# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qgraphicssvgitem.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qgraphicssvgitem.h"



class QSvgRenderer;
class QGraphicsSvgItemPrivate;

class  QGraphicsSvgItem : public QGraphicsObject
{
Q_OBJECT

Q_PROPERTY(QString elementId READ elementId WRITE setElementId)
Q_PROPERTY(QSize maximumCacheSize READ maximumCacheSize WRITE setMaximumCacheSize)

public:
QGraphicsSvgItem(QGraphicsItem *parentItem=0);
QGraphicsSvgItem(const QString &fileName, QGraphicsItem *parentItem=0);

void setSharedRenderer(QSvgRenderer *renderer);
QSvgRenderer *renderer() const;

void setElementId(const QString &id);
QString elementId() const;

void setCachingEnabled(bool);
bool isCachingEnabled() const;

void setMaximumCacheSize(const QSize &size);
QSize maximumCacheSize() const;

virtual QRectF boundingRect() const;

virtual void paint(QPainter *painter,
const QStyleOptionGraphicsItem *option,
QWidget *widget=0);

enum { Type = 13 };
virtual int type() const;

private:
QGraphicsSvgItem(const QGraphicsSvgItem &) ; QGraphicsSvgItem &operator=(const QGraphicsSvgItem &) ;
inline QGraphicsSvgItemPrivate* d_func() { return reinterpret_cast<QGraphicsSvgItemPrivate *>(QGraphicsItem::d_ptr.data()); } inline const QGraphicsSvgItemPrivate* d_func() const { return reinterpret_cast<const QGraphicsSvgItemPrivate *>(QGraphicsItem::d_ptr.data()); } friend class QGraphicsSvgItemPrivate;


};






# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qnamespace.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qiodevice.h"



















































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobjectdefs.h"







































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvggenerator.h"



class QSvgGeneratorPrivate;

class  QSvgGenerator : public QPaintDevice
{
inline QSvgGeneratorPrivate* d_func() { return reinterpret_cast<QSvgGeneratorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSvgGeneratorPrivate* d_func() const { return reinterpret_cast<const QSvgGeneratorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSvgGeneratorPrivate;

Q_PROPERTY(QSize size READ size WRITE setSize)
Q_PROPERTY(QRectF viewBox READ viewBoxF WRITE setViewBox)
Q_PROPERTY(QString title READ title WRITE setTitle)
Q_PROPERTY(QString description READ description WRITE setDescription)
Q_PROPERTY(QString fileName READ fileName WRITE setFileName)
Q_PROPERTY(QIODevice* outputDevice READ outputDevice WRITE setOutputDevice)
Q_PROPERTY(int resolution READ resolution WRITE setResolution)
public:
QSvgGenerator();
~QSvgGenerator();

QString title() const;
void setTitle(const QString &title);

QString description() const;
void setDescription(const QString &description);

QSize size() const;
void setSize(const QSize &size);

QRect viewBox() const;
QRectF viewBoxF() const;
void setViewBox(const QRect &viewBox);
void setViewBox(const QRectF &viewBox);

QString fileName() const;
void setFileName(const QString &fileName);

QIODevice *outputDevice() const;
void setOutputDevice(QIODevice *outputDevice);

void setResolution(int dpi);
int resolution() const;
protected:
QPaintEngine *paintEngine() const;
int metric(QPaintDevice::PaintDeviceMetric metric) const;

private:
QScopedPointer<QSvgGeneratorPrivate> d_ptr;
};





# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix.h"
























































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsize.h"




















































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qxmlstream.h"












































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgrenderer.h"



class QSvgRendererPrivate;
class QPainter;
class QByteArray;

class  QSvgRenderer : public QObject
{
Q_OBJECT

Q_PROPERTY(QRectF viewBox READ viewBoxF WRITE setViewBox)
Q_PROPERTY(int framesPerSecond READ framesPerSecond WRITE setFramesPerSecond)
Q_PROPERTY(int currentFrame READ currentFrame WRITE setCurrentFrame)
public:
QSvgRenderer(QObject *parent=0);
QSvgRenderer(const QString &filename, QObject *parent=0);
QSvgRenderer(const QByteArray &contents, QObject *parent=0);
QSvgRenderer(QXmlStreamReader *contents, QObject *parent=0);
~QSvgRenderer();

bool isValid() const;

QSize defaultSize() const;

QRect viewBox() const;
QRectF viewBoxF() const;
void setViewBox(const QRect &viewbox);
void setViewBox(const QRectF &viewbox);

bool animated() const;
int framesPerSecond() const;
void setFramesPerSecond(int num);
int currentFrame() const;
void setCurrentFrame(int);
int animationDuration() const;

QRectF boundsOnElement(const QString &id) const;
bool elementExists(const QString &id) const;
QMatrix matrixForElement(const QString &id) const;

public slots:
bool load(const QString &filename);
bool load(const QByteArray &contents);
bool load(QXmlStreamReader *contents);
void render(QPainter *p);
void render(QPainter *p, const QRectF &bounds);

void render(QPainter *p, const QString &elementId,
const QRectF &bounds=QRectF());

signals:
void repaintNeeded();

private:
inline QSvgRendererPrivate* d_func() { return reinterpret_cast<QSvgRendererPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSvgRendererPrivate* d_func() const { return reinterpret_cast<const QSvgRendererPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSvgRendererPrivate;
};





# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgwidget.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgwidget.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgwidget.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qsvgwidget.h"



class QSvgWidgetPrivate;
class QPaintEvent;
class QSvgRenderer;

class  QSvgWidget : public QWidget
{
Q_OBJECT
public:
QSvgWidget(QWidget *parent=0);
QSvgWidget(const QString &file, QWidget *parent=0);
~QSvgWidget();

QSvgRenderer *renderer() const;

QSize sizeHint() const;
public slots:
void load(const QString &file);
void load(const QByteArray &contents);
protected:
void paintEvent(QPaintEvent *event);
private:
QSvgWidget(const QSvgWidget &) ; QSvgWidget &operator=(const QSvgWidget &) ;
inline QSvgWidgetPrivate* d_func() { return reinterpret_cast<QSvgWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSvgWidgetPrivate* d_func() const { return reinterpret_cast<const QSvgWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSvgWidgetPrivate;
};






# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgglobal.h"































































# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/qtsvgversion.h"









# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSvg/QtSvg"


# 47 "qtscript_masterinclude.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXmlDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXmlDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlglobal.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlglobal.h"



# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qdom.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qdom.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qdom.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qdom.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qdom.h"
class QIODevice;
class QTextStream;

class QXmlInputSource;
class QXmlReader;

class QDomDocumentPrivate;
class QDomDocumentTypePrivate;
class QDomDocumentFragmentPrivate;
class QDomNodePrivate;
class QDomNodeListPrivate;
class QDomImplementationPrivate;
class QDomElementPrivate;
class QDomNotationPrivate;
class QDomEntityPrivate;
class QDomEntityReferencePrivate;
class QDomProcessingInstructionPrivate;
class QDomAttrPrivate;
class QDomCharacterDataPrivate;
class QDomTextPrivate;
class QDomCommentPrivate;
class QDomCDATASectionPrivate;
class QDomNamedNodeMapPrivate;
class QDomImplementationPrivate;

class QDomNodeList;
class QDomElement;
class QDomText;
class QDomComment;
class QDomCDATASection;
class QDomProcessingInstruction;
class QDomAttr;
class QDomEntityReference;
class QDomDocument;
class QDomNamedNodeMap;
class QDomDocument;
class QDomDocumentFragment;
class QDomDocumentType;
class QDomImplementation;
class QDomNode;
class QDomEntity;
class QDomNotation;
class QDomCharacterData;

class  QDomImplementation
{
public:
QDomImplementation();
QDomImplementation(const QDomImplementation&);
~QDomImplementation();
QDomImplementation& operator= (const QDomImplementation&);
bool operator== (const QDomImplementation&) const;
bool operator!= (const QDomImplementation&) const;


bool hasFeature(const QString& feature, const QString& version) const;
QDomDocumentType createDocumentType(const QString& qName, const QString& publicId, const QString& systemId);
QDomDocument createDocument(const QString& nsURI, const QString& qName, const QDomDocumentType& doctype);

enum InvalidDataPolicy { AcceptInvalidChars = 0, DropInvalidChars, ReturnNullNode };
static InvalidDataPolicy invalidDataPolicy();
static void setInvalidDataPolicy(InvalidDataPolicy policy);


bool isNull();

private:
QDomImplementationPrivate* impl;
QDomImplementation(QDomImplementationPrivate*);

friend class QDomDocument;
};

class  QDomNode
{
public:
enum NodeType {
ElementNode = 1,
AttributeNode = 2,
TextNode = 3,
CDATASectionNode = 4,
EntityReferenceNode = 5,
EntityNode = 6,
ProcessingInstructionNode = 7,
CommentNode = 8,
DocumentNode = 9,
DocumentTypeNode = 10,
DocumentFragmentNode = 11,
NotationNode = 12,
BaseNode = 21,
CharacterDataNode = 22 
};

enum EncodingPolicy
{
EncodingFromDocument = 1,
EncodingFromTextStream = 2
};

QDomNode();
QDomNode(const QDomNode&);
QDomNode& operator= (const QDomNode&);
bool operator== (const QDomNode&) const;
bool operator!= (const QDomNode&) const;
~QDomNode();


QDomNode insertBefore(const QDomNode& newChild, const QDomNode& refChild);
QDomNode insertAfter(const QDomNode& newChild, const QDomNode& refChild);
QDomNode replaceChild(const QDomNode& newChild, const QDomNode& oldChild);
QDomNode removeChild(const QDomNode& oldChild);
QDomNode appendChild(const QDomNode& newChild);
bool hasChildNodes() const;
QDomNode cloneNode(bool deep = true) const;
void normalize();
bool isSupported(const QString& feature, const QString& version) const;


QString nodeName() const;
NodeType nodeType() const;
QDomNode parentNode() const;
QDomNodeList childNodes() const;
QDomNode firstChild() const;
QDomNode lastChild() const;
QDomNode previousSibling() const;
QDomNode nextSibling() const;
QDomNamedNodeMap attributes() const;
QDomDocument ownerDocument() const;
QString namespaceURI() const;
QString localName() const;
bool hasAttributes() const;


QString nodeValue() const;
void setNodeValue(const QString&);
QString prefix() const;
void setPrefix(const QString& pre);


bool isAttr() const;
bool isCDATASection() const;
bool isDocumentFragment() const;
bool isDocument() const;
bool isDocumentType() const;
bool isElement() const;
bool isEntityReference() const;
bool isText() const;
bool isEntity() const;
bool isNotation() const;
bool isProcessingInstruction() const;
bool isCharacterData() const;
bool isComment() const;





QDomNode namedItem(const QString& name) const;

bool isNull() const;
void clear();

QDomAttr toAttr() const;
QDomCDATASection toCDATASection() const;
QDomDocumentFragment toDocumentFragment() const;
QDomDocument toDocument() const;
QDomDocumentType toDocumentType() const;
QDomElement toElement() const;
QDomEntityReference toEntityReference() const;
QDomText toText() const;
QDomEntity toEntity() const;
QDomNotation toNotation() const;
QDomProcessingInstruction toProcessingInstruction() const;
QDomCharacterData toCharacterData() const;
QDomComment toComment() const;

void save(QTextStream&, int, EncodingPolicy=QDomNode::EncodingFromDocument) const;

QDomElement firstChildElement(const QString &tagName = QString()) const;
QDomElement lastChildElement(const QString &tagName = QString()) const;
QDomElement previousSiblingElement(const QString &tagName = QString()) const;
QDomElement nextSiblingElement(const QString &taName = QString()) const;

int lineNumber() const;
int columnNumber() const;

protected:
QDomNodePrivate* impl;
QDomNode(QDomNodePrivate*);

private:
friend class QDomDocument;
friend class QDomDocumentType;
friend class QDomNodeList;
friend class QDomNamedNodeMap;
};

class  QDomNodeList
{
public:
QDomNodeList();
QDomNodeList(const QDomNodeList&);
QDomNodeList& operator= (const QDomNodeList&);
bool operator== (const QDomNodeList&) const;
bool operator!= (const QDomNodeList&) const;
~QDomNodeList();


QDomNode item(int index) const;
inline QDomNode at(int index) const { return item(index); } 


int length() const;
inline int count() const { return length(); } 
inline int size() const { return length(); } 
inline bool isEmpty() const { return length() == 0; } 

private:
QDomNodeListPrivate* impl;
QDomNodeList(QDomNodeListPrivate*);

friend class QDomNode;
friend class QDomElement;
friend class QDomDocument;
};

class  QDomDocumentType : public QDomNode
{
public:
QDomDocumentType();
QDomDocumentType(const QDomDocumentType& x);
QDomDocumentType& operator= (const QDomDocumentType&);


QString name() const;
QDomNamedNodeMap entities() const;
QDomNamedNodeMap notations() const;
QString publicId() const;
QString systemId() const;
QString internalSubset() const;


inline QDomNode::NodeType nodeType() const { return DocumentTypeNode; }

private:
QDomDocumentType(QDomDocumentTypePrivate*);

friend class QDomImplementation;
friend class QDomDocument;
friend class QDomNode;
};

class  QDomDocument : public QDomNode
{
public:
QDomDocument();
explicit QDomDocument(const QString& name);
explicit QDomDocument(const QDomDocumentType& doctype);
QDomDocument(const QDomDocument& x);
QDomDocument& operator= (const QDomDocument&);
~QDomDocument();


QDomElement createElement(const QString& tagName);
QDomDocumentFragment createDocumentFragment();
QDomText createTextNode(const QString& data);
QDomComment createComment(const QString& data);
QDomCDATASection createCDATASection(const QString& data);
QDomProcessingInstruction createProcessingInstruction(const QString& target, const QString& data);
QDomAttr createAttribute(const QString& name);
QDomEntityReference createEntityReference(const QString& name);
QDomNodeList elementsByTagName(const QString& tagname) const;
QDomNode importNode(const QDomNode& importedNode, bool deep);
QDomElement createElementNS(const QString& nsURI, const QString& qName);
QDomAttr createAttributeNS(const QString& nsURI, const QString& qName);
QDomNodeList elementsByTagNameNS(const QString& nsURI, const QString& localName);
QDomElement elementById(const QString& elementId);


QDomDocumentType doctype() const;
QDomImplementation implementation() const;
QDomElement documentElement() const;


inline QDomNode::NodeType nodeType() const { return DocumentNode; }


bool setContent(const QByteArray& text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(const QString& text, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QIODevice* dev, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QXmlInputSource *source, bool namespaceProcessing, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(const QByteArray& text, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(const QString& text, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QIODevice* dev, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );
bool setContent(QXmlInputSource *source, QXmlReader *reader, QString *errorMsg=0, int *errorLine=0, int *errorColumn=0 );


QString toString(int = 1) const;
QByteArray toByteArray(int = 1) const;

private:
QDomDocument(QDomDocumentPrivate*);

friend class QDomNode;
};

class  QDomNamedNodeMap
{
public:
QDomNamedNodeMap();
QDomNamedNodeMap(const QDomNamedNodeMap&);
QDomNamedNodeMap& operator= (const QDomNamedNodeMap&);
bool operator== (const QDomNamedNodeMap&) const;
bool operator!= (const QDomNamedNodeMap&) const;
~QDomNamedNodeMap();


QDomNode namedItem(const QString& name) const;
QDomNode setNamedItem(const QDomNode& newNode);
QDomNode removeNamedItem(const QString& name);
QDomNode item(int index) const;
QDomNode namedItemNS(const QString& nsURI, const QString& localName) const;
QDomNode setNamedItemNS(const QDomNode& newNode);
QDomNode removeNamedItemNS(const QString& nsURI, const QString& localName);


int length() const;
int count() const { return length(); } 
inline int size() const { return length(); } 
inline bool isEmpty() const { return length() == 0; } 


bool contains(const QString& name) const;

private:
QDomNamedNodeMapPrivate* impl;
QDomNamedNodeMap(QDomNamedNodeMapPrivate*);

friend class QDomNode;
friend class QDomDocumentType;
friend class QDomElement;
};

class  QDomDocumentFragment : public QDomNode
{
public:
QDomDocumentFragment();
QDomDocumentFragment(const QDomDocumentFragment& x);
QDomDocumentFragment& operator= (const QDomDocumentFragment&);


inline QDomNode::NodeType nodeType() const { return DocumentFragmentNode; }

private:
QDomDocumentFragment(QDomDocumentFragmentPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomCharacterData : public QDomNode
{
public:
QDomCharacterData();
QDomCharacterData(const QDomCharacterData& x);
QDomCharacterData& operator= (const QDomCharacterData&);


QString substringData(unsigned long offset, unsigned long count);
void appendData(const QString& arg);
void insertData(unsigned long offset, const QString& arg);
void deleteData(unsigned long offset, unsigned long count);
void replaceData(unsigned long offset, unsigned long count, const QString& arg);


int length() const;


QString data() const;
void setData(const QString&);


QDomNode::NodeType nodeType() const;

private:
QDomCharacterData(QDomCharacterDataPrivate*);

friend class QDomDocument;
friend class QDomText;
friend class QDomComment;
friend class QDomNode;
};

class  QDomAttr : public QDomNode
{
public:
QDomAttr();
QDomAttr(const QDomAttr& x);
QDomAttr& operator= (const QDomAttr&);


QString name() const;
bool specified() const;
QDomElement ownerElement() const;


QString value() const;
void setValue(const QString&);


inline QDomNode::NodeType nodeType() const { return AttributeNode; }

private:
QDomAttr(QDomAttrPrivate*);

friend class QDomDocument;
friend class QDomElement;
friend class QDomNode;
};

class  QDomElement : public QDomNode
{
public:
QDomElement();
QDomElement(const QDomElement& x);
QDomElement& operator= (const QDomElement&);


QString attribute(const QString& name, const QString& defValue = QString() ) const;
void setAttribute(const QString& name, const QString& value);
void setAttribute(const QString& name, qlonglong value);
void setAttribute(const QString& name, qulonglong value);
inline void setAttribute(const QString& name, int value)
{ setAttribute(name, qlonglong(value)); }
inline void setAttribute(const QString& name, uint value)
{ setAttribute(name, qulonglong(value)); }
void setAttribute(const QString& name, float value);
void setAttribute(const QString& name, double value);
void removeAttribute(const QString& name);
QDomAttr attributeNode(const QString& name);
QDomAttr setAttributeNode(const QDomAttr& newAttr);
QDomAttr removeAttributeNode(const QDomAttr& oldAttr);
QDomNodeList elementsByTagName(const QString& tagname) const;
bool hasAttribute(const QString& name) const;

QString attributeNS(const QString nsURI, const QString& localName, const QString& defValue = QString()) const;
void setAttributeNS(const QString nsURI, const QString& qName, const QString& value);
inline void setAttributeNS(const QString nsURI, const QString& qName, int value)
{ setAttributeNS(nsURI, qName, qlonglong(value)); }
inline void setAttributeNS(const QString nsURI, const QString& qName, uint value)
{ setAttributeNS(nsURI, qName, qulonglong(value)); }
void setAttributeNS(const QString nsURI, const QString& qName, qlonglong value);
void setAttributeNS(const QString nsURI, const QString& qName, qulonglong value);
void setAttributeNS(const QString nsURI, const QString& qName, double value);
void removeAttributeNS(const QString& nsURI, const QString& localName);
QDomAttr attributeNodeNS(const QString& nsURI, const QString& localName);
QDomAttr setAttributeNodeNS(const QDomAttr& newAttr);
QDomNodeList elementsByTagNameNS(const QString& nsURI, const QString& localName) const;
bool hasAttributeNS(const QString& nsURI, const QString& localName) const;


QString tagName() const;
void setTagName(const QString& name); 


QDomNamedNodeMap attributes() const;
inline QDomNode::NodeType nodeType() const { return ElementNode; }

QString text() const;

private:
QDomElement(QDomElementPrivate*);

friend class QDomDocument;
friend class QDomNode;
friend class QDomAttr;
};

class  QDomText : public QDomCharacterData
{
public:
QDomText();
QDomText(const QDomText& x);
QDomText& operator= (const QDomText&);


QDomText splitText(int offset);


inline QDomNode::NodeType nodeType() const { return TextNode; }

private:
QDomText(QDomTextPrivate*);

friend class QDomCDATASection;
friend class QDomDocument;
friend class QDomNode;
};

class  QDomComment : public QDomCharacterData
{
public:
QDomComment();
QDomComment(const QDomComment& x);
QDomComment& operator= (const QDomComment&);


inline QDomNode::NodeType nodeType() const { return CommentNode; }

private:
QDomComment(QDomCommentPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomCDATASection : public QDomText
{
public:
QDomCDATASection();
QDomCDATASection(const QDomCDATASection& x);
QDomCDATASection& operator= (const QDomCDATASection&);


inline QDomNode::NodeType nodeType() const { return CDATASectionNode; }

private:
QDomCDATASection(QDomCDATASectionPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomNotation : public QDomNode
{
public:
QDomNotation();
QDomNotation(const QDomNotation& x);
QDomNotation& operator= (const QDomNotation&);


QString publicId() const;
QString systemId() const;


inline QDomNode::NodeType nodeType() const { return NotationNode; }

private:
QDomNotation(QDomNotationPrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomEntity : public QDomNode
{
public:
QDomEntity();
QDomEntity(const QDomEntity& x);
QDomEntity& operator= (const QDomEntity&);


QString publicId() const;
QString systemId() const;
QString notationName() const;


inline QDomNode::NodeType nodeType() const { return EntityNode; }

private:
QDomEntity(QDomEntityPrivate*);

friend class QDomNode;
};

class  QDomEntityReference : public QDomNode
{
public:
QDomEntityReference();
QDomEntityReference(const QDomEntityReference& x);
QDomEntityReference& operator= (const QDomEntityReference&);


inline QDomNode::NodeType nodeType() const { return EntityReferenceNode; }

private:
QDomEntityReference(QDomEntityReferencePrivate*);

friend class QDomDocument;
friend class QDomNode;
};

class  QDomProcessingInstruction : public QDomNode
{
public:
QDomProcessingInstruction();
QDomProcessingInstruction(const QDomProcessingInstruction& x);
QDomProcessingInstruction& operator= (const QDomProcessingInstruction&);


QString target() const;


QString data() const;
void setData(const QString& d);


inline QDomNode::NodeType nodeType() const { return ProcessingInstructionNode; }

private:
QDomProcessingInstruction(QDomProcessingInstructionPrivate*);

friend class QDomDocument;
friend class QDomNode;
};


 QTextStream& operator<<(QTextStream&, const QDomNode&);



# 674 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qdom.h"



# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtextstream.h"




























































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfile.h"



























































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qxml.h"



class QXmlNamespaceSupport;
class QXmlAttributes;
class QXmlContentHandler;
class QXmlDefaultHandler;
class QXmlDTDHandler;
class QXmlEntityResolver;
class QXmlErrorHandler;
class QXmlLexicalHandler;
class QXmlDeclHandler;
class QXmlInputSource;
class QXmlLocator;
class QXmlNamespaceSupport;
class QXmlParseException;

class QXmlReader;
class QXmlSimpleReader;

class QXmlSimpleReaderPrivate;
class QXmlNamespaceSupportPrivate;
class QXmlAttributesPrivate;
class QXmlInputSourcePrivate;
class QXmlParseExceptionPrivate;
class QXmlLocatorPrivate;
class QXmlDefaultHandlerPrivate;






class  QXmlNamespaceSupport
{
public:
QXmlNamespaceSupport();
~QXmlNamespaceSupport();

void setPrefix(const QString&, const QString&);

QString prefix(const QString&) const;
QString uri(const QString&) const;
void splitName(const QString&, QString&, QString&) const;
void processName(const QString&, bool, QString&, QString&) const;
QStringList prefixes() const;
QStringList prefixes(const QString&) const;

void pushContext();
void popContext();
void reset();

private:
QXmlNamespaceSupportPrivate *d;

friend class QXmlSimpleReaderPrivate;
QXmlNamespaceSupport(const QXmlNamespaceSupport &) ; QXmlNamespaceSupport &operator=(const QXmlNamespaceSupport &) ;
};






class  QXmlAttributes
{
public:
QXmlAttributes();
virtual ~QXmlAttributes();

int index(const QString& qName) const;
int index(QLatin1String qName) const;
int index(const QString& uri, const QString& localPart) const;
int length() const;
int count() const;
QString localName(int index) const;
QString qName(int index) const;
QString uri(int index) const;
QString type(int index) const;
QString type(const QString& qName) const;
QString type(const QString& uri, const QString& localName) const;
QString value(int index) const;
QString value(const QString& qName) const;
QString value(QLatin1String qName) const;
QString value(const QString& uri, const QString& localName) const;

void clear();
void append(const QString &qName, const QString &uri, const QString &localPart, const QString &value);

private:
struct Attribute {
QString qname, uri, localname, value;
};
typedef QList<Attribute> AttributeList;
AttributeList attList;

QXmlAttributesPrivate *d;
};





class  QXmlInputSource
{
public:
QXmlInputSource();
explicit QXmlInputSource(QIODevice *dev);
virtual ~QXmlInputSource();

virtual void setData(const QString& dat);
virtual void setData(const QByteArray& dat);
virtual void fetchData();
virtual QString data() const;
virtual QChar next();
virtual void reset();

static const ushort EndOfData;
static const ushort EndOfDocument;

protected:
virtual QString fromRawData(const QByteArray &data, bool beginning = false);

private:
void init();
QXmlInputSourcePrivate *d;
};





class  QXmlParseException
{
public:
explicit QXmlParseException(const QString &name = QString(), int c = -1, int l = -1,
const QString &p = QString(), const QString &s = QString());
QXmlParseException(const QXmlParseException &other);
~QXmlParseException();

int columnNumber() const;
int lineNumber() const;
QString publicId() const;
QString systemId() const;
QString message() const;

private:
QScopedPointer<QXmlParseExceptionPrivate> d;
};






class  QXmlReader
{
public:
virtual ~QXmlReader() {}
virtual bool feature(const QString& name, bool *ok = 0) const = 0;
virtual void setFeature(const QString& name, bool value) = 0;
virtual bool hasFeature(const QString& name) const = 0;
virtual void* property(const QString& name, bool *ok = 0) const = 0;
virtual void setProperty(const QString& name, void* value) = 0;
virtual bool hasProperty(const QString& name) const = 0;
virtual void setEntityResolver(QXmlEntityResolver* handler) = 0;
virtual QXmlEntityResolver* entityResolver() const = 0;
virtual void setDTDHandler(QXmlDTDHandler* handler) = 0;
virtual QXmlDTDHandler* DTDHandler() const = 0;
virtual void setContentHandler(QXmlContentHandler* handler) = 0;
virtual QXmlContentHandler* contentHandler() const = 0;
virtual void setErrorHandler(QXmlErrorHandler* handler) = 0;
virtual QXmlErrorHandler* errorHandler() const = 0;
virtual void setLexicalHandler(QXmlLexicalHandler* handler) = 0;
virtual QXmlLexicalHandler* lexicalHandler() const = 0;
virtual void setDeclHandler(QXmlDeclHandler* handler) = 0;
virtual QXmlDeclHandler* declHandler() const = 0;
virtual bool parse(const QXmlInputSource& input) = 0;
virtual bool parse(const QXmlInputSource* input) = 0;
};

class  QXmlSimpleReader : public QXmlReader
{
public:
QXmlSimpleReader();
virtual ~QXmlSimpleReader();

bool feature(const QString& name, bool *ok = 0) const;
void setFeature(const QString& name, bool value);
bool hasFeature(const QString& name) const;

void* property(const QString& name, bool *ok = 0) const;
void setProperty(const QString& name, void* value);
bool hasProperty(const QString& name) const;

void setEntityResolver(QXmlEntityResolver* handler);
QXmlEntityResolver* entityResolver() const;
void setDTDHandler(QXmlDTDHandler* handler);
QXmlDTDHandler* DTDHandler() const;
void setContentHandler(QXmlContentHandler* handler);
QXmlContentHandler* contentHandler() const;
void setErrorHandler(QXmlErrorHandler* handler);
QXmlErrorHandler* errorHandler() const;
void setLexicalHandler(QXmlLexicalHandler* handler);
QXmlLexicalHandler* lexicalHandler() const;
void setDeclHandler(QXmlDeclHandler* handler);
QXmlDeclHandler* declHandler() const;

bool parse(const QXmlInputSource& input);
bool parse(const QXmlInputSource* input);
virtual bool parse(const QXmlInputSource* input, bool incremental);
virtual bool parseContinue();

private:
QXmlSimpleReader(const QXmlSimpleReader &) ; QXmlSimpleReader &operator=(const QXmlSimpleReader &) ;
inline QXmlSimpleReaderPrivate* d_func() { return reinterpret_cast<QXmlSimpleReaderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QXmlSimpleReaderPrivate* d_func() const { return reinterpret_cast<const QXmlSimpleReaderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QXmlSimpleReaderPrivate;
QScopedPointer<QXmlSimpleReaderPrivate> d_ptr;

friend class QXmlSimpleReaderLocator;
};





class  QXmlLocator
{
public:
QXmlLocator();
virtual ~QXmlLocator();

virtual int columnNumber() const = 0;
virtual int lineNumber() const = 0;


};





class  QXmlContentHandler
{
public:
virtual ~QXmlContentHandler() {}
virtual void setDocumentLocator(QXmlLocator* locator) = 0;
virtual bool startDocument() = 0;
virtual bool endDocument() = 0;
virtual bool startPrefixMapping(const QString& prefix, const QString& uri) = 0;
virtual bool endPrefixMapping(const QString& prefix) = 0;
virtual bool startElement(const QString& namespaceURI, const QString& localName, const QString& qName, const QXmlAttributes& atts) = 0;
virtual bool endElement(const QString& namespaceURI, const QString& localName, const QString& qName) = 0;
virtual bool characters(const QString& ch) = 0;
virtual bool ignorableWhitespace(const QString& ch) = 0;
virtual bool processingInstruction(const QString& target, const QString& data) = 0;
virtual bool skippedEntity(const QString& name) = 0;
virtual QString errorString() const = 0;
};

class  QXmlErrorHandler
{
public:
virtual ~QXmlErrorHandler() {}
virtual bool warning(const QXmlParseException& exception) = 0;
virtual bool error(const QXmlParseException& exception) = 0;
virtual bool fatalError(const QXmlParseException& exception) = 0;
virtual QString errorString() const = 0;
};

class  QXmlDTDHandler
{
public:
virtual ~QXmlDTDHandler() {}
virtual bool notationDecl(const QString& name, const QString& publicId, const QString& systemId) = 0;
virtual bool unparsedEntityDecl(const QString& name, const QString& publicId, const QString& systemId, const QString& notationName) = 0;
virtual QString errorString() const = 0;
};

class  QXmlEntityResolver
{
public:
virtual ~QXmlEntityResolver() {}
virtual bool resolveEntity(const QString& publicId, const QString& systemId, QXmlInputSource*& ret) = 0;
virtual QString errorString() const = 0;
};

class  QXmlLexicalHandler
{
public:
virtual ~QXmlLexicalHandler() {}
virtual bool startDTD(const QString& name, const QString& publicId, const QString& systemId) = 0;
virtual bool endDTD() = 0;
virtual bool startEntity(const QString& name) = 0;
virtual bool endEntity(const QString& name) = 0;
virtual bool startCDATA() = 0;
virtual bool endCDATA() = 0;
virtual bool comment(const QString& ch) = 0;
virtual QString errorString() const = 0;
};

class  QXmlDeclHandler
{
public:
virtual ~QXmlDeclHandler() {}
virtual bool attributeDecl(const QString& eName, const QString& aName, const QString& type, const QString& valueDefault, const QString& value) = 0;
virtual bool internalEntityDecl(const QString& name, const QString& value) = 0;
virtual bool externalEntityDecl(const QString& name, const QString& publicId, const QString& systemId) = 0;
virtual QString errorString() const = 0;

};


class  QXmlDefaultHandler : public QXmlContentHandler, public QXmlErrorHandler, public QXmlDTDHandler, public QXmlEntityResolver, public QXmlLexicalHandler, public QXmlDeclHandler
{
public:
QXmlDefaultHandler();
virtual ~QXmlDefaultHandler();

void setDocumentLocator(QXmlLocator* locator);
bool startDocument();
bool endDocument();
bool startPrefixMapping(const QString& prefix, const QString& uri);
bool endPrefixMapping(const QString& prefix);
bool startElement(const QString& namespaceURI, const QString& localName, const QString& qName, const QXmlAttributes& atts);
bool endElement(const QString& namespaceURI, const QString& localName, const QString& qName);
bool characters(const QString& ch);
bool ignorableWhitespace(const QString& ch);
bool processingInstruction(const QString& target, const QString& data);
bool skippedEntity(const QString& name);

bool warning(const QXmlParseException& exception);
bool error(const QXmlParseException& exception);
bool fatalError(const QXmlParseException& exception);

bool notationDecl(const QString& name, const QString& publicId, const QString& systemId);
bool unparsedEntityDecl(const QString& name, const QString& publicId, const QString& systemId, const QString& notationName);

bool resolveEntity(const QString& publicId, const QString& systemId, QXmlInputSource*& ret);

bool startDTD(const QString& name, const QString& publicId, const QString& systemId);
bool endDTD();
bool startEntity(const QString& name);
bool endEntity(const QString& name);
bool startCDATA();
bool endCDATA();
bool comment(const QString& ch);

bool attributeDecl(const QString& eName, const QString& aName, const QString& type, const QString& valueDefault, const QString& value);
bool internalEntityDecl(const QString& name, const QString& value);
bool externalEntityDecl(const QString& name, const QString& publicId, const QString& systemId);

QString errorString() const;

private:
QXmlDefaultHandlerPrivate *d;
QXmlDefaultHandler(const QXmlDefaultHandler &) ; QXmlDefaultHandler &operator=(const QXmlDefaultHandler &) ;
};



inline int QXmlAttributes::count() const
{ return length(); }




# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/qtxmlversion.h"









# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXml/QtXml"


# 48 "qtscript_masterinclude.h"




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/QtUiToolsDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/QtUiToolsDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/QtUiTools"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/quiloader.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/quiloader.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/quiloader.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/quiloader.h"


class QWidget;
class QLayout;
class QAction;
class QActionGroup;
class QString;
class QIODevice;
class QDir;

class QUiLoaderPrivate;
class QUiLoader : public QObject
{
Q_OBJECT
public:
QUiLoader(QObject *parent = 0);
virtual ~QUiLoader();

QStringList pluginPaths() const;
void clearPluginPaths();
void addPluginPath(const QString &path);

QWidget *load(QIODevice *device, QWidget *parentWidget = 0);
QStringList availableWidgets() const;
QStringList availableLayouts() const;

virtual QWidget *createWidget(const QString &className, QWidget *parent = 0, const QString &name = QString());
virtual QLayout *createLayout(const QString &className, QObject *parent = 0, const QString &name = QString());
virtual QActionGroup *createActionGroup(QObject *parent = 0, const QString &name = QString());
virtual QAction *createAction(QObject *parent = 0, const QString &name = QString());

void setWorkingDirectory(const QDir &dir);
QDir workingDirectory() const;

void setLanguageChangeEnabled(bool enabled);
bool isLanguageChangeEnabled() const;

void setTranslationEnabled(bool enabled);
bool isTranslationEnabled() const;

QString errorString() const;

private:
QScopedPointer<QUiLoaderPrivate> d_ptr;
inline QUiLoaderPrivate* d_func() { return reinterpret_cast<QUiLoaderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QUiLoaderPrivate* d_func() const { return reinterpret_cast<const QUiLoaderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QUiLoaderPrivate;
QUiLoader(const QUiLoader &) ; QUiLoader &operator=(const QUiLoader &) ;
};




# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/QtUiTools"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/qtuitoolsversion.h"









# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtUiTools/QtUiTools"


# 50 "qtscript_masterinclude.h"





# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatternsDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatternsDepends"





































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatternsDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractmessagehandler.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMetaType"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"














# 61 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"



class QSourceLocationPrivate;

class  QSourceLocation
{
public:
QSourceLocation();
QSourceLocation(const QSourceLocation &other);
QSourceLocation(const QUrl &uri, int line = -1, int column = -1);
~QSourceLocation();
QSourceLocation &operator=(const QSourceLocation &other);
bool operator==(const QSourceLocation &other) const;
bool operator!=(const QSourceLocation &other) const;

qint64 column() const;
void setColumn(qint64 newColumn);

qint64 line() const;
void setLine(qint64 newLine);

QUrl uri() const;
void setUri(const QUrl &newUri);
bool isNull() const;

private:
union
{
qint64 m_line;
QSourceLocationPrivate *m_ptr;
};
qint64 m_column;
QUrl m_uri;
};

 uint qHash(const QSourceLocation &location);


# 88 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"
 QDebug operator<<(QDebug debug, const QSourceLocation &sourceLocation);


# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"
template<> class QTypeInfo<QSourceLocation > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSourceLocation)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSourceLocation) }; static inline const char *name() { return "QSourceLocation"; } };



 template <> struct QMetaTypeId< QSourceLocation > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QSourceLocation >("QSourceLocation", reinterpret_cast< QSourceLocation *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QSourceLocation"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractmessagehandler.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractmessagehandler.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractmessagehandler.h"



class QAbstractMessageHandlerPrivate;
class  QAbstractMessageHandler : public QObject
{
Q_OBJECT
public:
QAbstractMessageHandler(QObject *parent = 0);
virtual ~QAbstractMessageHandler();

void message(QtMsgType type,
const QString &description,
const QUrl &identifier = QUrl(),
const QSourceLocation &sourceLocation = QSourceLocation());

protected:
virtual void handleMessage(QtMsgType type,
const QString &description,
const QUrl &identifier,
const QSourceLocation &sourceLocation) = 0;
private:
inline QAbstractMessageHandlerPrivate* d_func() { return reinterpret_cast<QAbstractMessageHandlerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractMessageHandlerPrivate* d_func() const { return reinterpret_cast<const QAbstractMessageHandlerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractMessageHandlerPrivate;
QAbstractMessageHandler(const QAbstractMessageHandler &) ; QAbstractMessageHandler &operator=(const QAbstractMessageHandler &) ;
};




# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstracturiresolver.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstracturiresolver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstracturiresolver.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstracturiresolver.h"



class QUrl;
class QAbstractUriResolverPrivate;

class  QAbstractUriResolver : public QObject
{
Q_OBJECT
public:
QAbstractUriResolver(QObject *parent = 0);
virtual ~QAbstractUriResolver();

virtual QUrl resolve(const QUrl &relative,
const QUrl &baseURI) const = 0;

private:
QAbstractUriResolver(const QAbstractUriResolver &) ; QAbstractUriResolver &operator=(const QAbstractUriResolver &) ;
inline QAbstractUriResolverPrivate* d_func() { return reinterpret_cast<QAbstractUriResolverPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractUriResolverPrivate* d_func() const { return reinterpret_cast<const QAbstractUriResolverPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractUriResolverPrivate;
};




# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlname.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QString"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlname.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMetaType"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlname.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlname.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlname.h"



class QXmlName;
class QXmlNamePool;
 uint qHash(const QXmlName &name);

class  QXmlName
{
private:
enum Constant
{
LocalNameOffset = 0,
LocalNameLength = 12,
NamespaceOffset = LocalNameLength,
NamespaceLength = 9,
PrefixLength = 9,
InvalidCode = 1 << 31,
NamespaceMask = ((1 << ((NamespaceOffset + NamespaceLength) - NamespaceOffset)) - 1) << NamespaceOffset,
LocalNameMask = ((1 << ((LocalNameOffset + LocalNameLength) - LocalNameOffset)) - 1) << LocalNameOffset,
PrefixOffset = LocalNameLength + NamespaceLength,
PrefixMask = ((1 << ((PrefixOffset + PrefixLength) - PrefixOffset)) - 1) << PrefixOffset,
MaximumPrefixes = (PrefixMask >> PrefixOffset) - 1,
MaximumLocalNames = (LocalNameMask >> LocalNameOffset) - 1,
MaximumNamespaces = (NamespaceMask >> NamespaceOffset) - 1,
ExpandedNameMask = LocalNameMask | NamespaceMask,
LexicalQNameMask = LocalNameMask | PrefixMask
};

public:

typedef qint16 NamespaceCode;
typedef NamespaceCode PrefixCode;
typedef NamespaceCode LocalNameCode;

QXmlName();

QXmlName(QXmlNamePool &namePool,
const QString &localName,
const QString &namespaceURI = QString(),
const QString &prefix = QString());

QString namespaceUri(const QXmlNamePool &query) const;
QString prefix(const QXmlNamePool &query) const;
QString localName(const QXmlNamePool &query) const;
QString toClarkName(const QXmlNamePool &query) const;
bool operator==(const QXmlName &other) const;
bool operator!=(const QXmlName &other) const;
QXmlName &operator=(const QXmlName &other);
bool isNull() const;
static bool isNCName(const QString &candidate);
static QXmlName fromClarkName(const QString &clarkName,
const QXmlNamePool &namePool);



typedef qint64 Code;

inline QXmlName(const NamespaceCode uri,
const LocalNameCode ln,
const PrefixCode p = 0);

inline LocalNameCode localName() const;
inline PrefixCode prefix() const;
inline bool hasPrefix() const;
inline bool hasNamespace() const;
inline NamespaceCode namespaceURI() const;
inline bool isLexicallyEqual(const QXmlName &other) const;
inline void setPrefix(const PrefixCode c);
inline void setNamespaceURI(const NamespaceCode c);
inline void setLocalName(const LocalNameCode c);
inline Code code() const;

friend  uint qHash(const QXmlName &);

private:
inline QXmlName(const int c) : m_qNameCode(c)
{
}

Code m_qNameCode;
};

template<> class QTypeInfo<QXmlName > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlName)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlName) }; static inline const char *name() { return "QXmlName"; } };



 template <> struct QMetaTypeId< QXmlName > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QXmlName >("QXmlName", reinterpret_cast< QXmlName *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlName"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSharedData"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"






class QAbstractXmlNodeModel;
class QAbstractXmlNodeModelPrivate;
class QAbstractXmlReceiver;
class QSourceLocation;
class QUrl;
class QXmlName;
class QXmlNodeModelIndex;
template<typename T> class QAbstractXmlForwardIterator;
template<typename T> class QVector;



namespace QPatternist
{
class DynamicContext;
class Item;
class ItemType;
class XsdValidatedXmlNodeModel;
template<typename TResult, typename TSource, typename TMapper, typename Context> class ItemMappingIterator;
template<typename TResult, typename TSource, typename TMapper> class SequenceMappingIterator;
typedef QExplicitlySharedDataPointer<ItemType> ItemTypePtr;
typedef QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<Item> > ItemIteratorPtr;
typedef QVector<QXmlName> QXmlNameVector;

class NodeIndexStorage
{
public:
typedef qint64 Data;





union
{
void *ptr; 
Data data;
};
void *pointer() const
{



return (void *)qptrdiff(data);
}

Data additionalData;
const QAbstractXmlNodeModel *model;


inline bool operator!=(const NodeIndexStorage &other) const;

void reset()
{
data = 0;
additionalData = 0;
model = 0;
}
};
}

class  QXmlNodeModelIndex
{
enum Constants
{
ForwardAxis = 8192,
ReverseAxis = 16384
};

public:
inline QXmlNodeModelIndex()
{
reset();
}

inline QXmlNodeModelIndex(const QXmlNodeModelIndex &other) : m_storage(other.m_storage)
{
}

bool operator==(const QXmlNodeModelIndex &other) const;
bool operator!=(const QXmlNodeModelIndex &other) const;

typedef QAbstractXmlForwardIterator<QXmlNodeModelIndex> Iterator;
typedef QList<QXmlNodeModelIndex> List;

enum NodeKind
{
Attribute = 1,
Comment = 2,
Document = 4,
Element = 8,
Namespace = 16,
ProcessingInstruction = 32,
Text = 64
};

enum DocumentOrder
{
Precedes = -1,
Is = 0,
Follows = 1
};

enum Axis
{
AxisChild = 1 | ForwardAxis,
AxisDescendant = 2 | ForwardAxis,
AxisAttribute = 4 | ForwardAxis,
AxisSelf = 8 | ForwardAxis,
AxisDescendantOrSelf = 16 | ForwardAxis,
AxisFollowingSibling = 32 | ForwardAxis,
AxisNamespace = 64 | ForwardAxis,
AxisFollowing = 128 | ReverseAxis,
AxisParent = 256 | ReverseAxis,
AxisAncestor = 512 | ReverseAxis,
AxisPrecedingSibling = 1024 | ReverseAxis,
AxisPreceding = 2048 | ReverseAxis,
AxisAncestorOrSelf = 4096 | ReverseAxis,


AxisChildOrTop = 32768 | ForwardAxis,
AxisAttributeOrTop = 65536 | ForwardAxis
};

inline qint64 data() const
{
return m_storage.data;
}

inline void *internalPointer() const
{
return m_storage.pointer();
}

inline const QAbstractXmlNodeModel *model() const
{
return m_storage.model;
}

inline qint64 additionalData() const
{
return m_storage.additionalData;
}

inline bool isNull() const
{
return !m_storage.model;
}




inline QXmlName name() const;
inline QXmlNodeModelIndex root() const;
inline QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QXmlNodeModelIndex> > iterate(const Axis axis) const;
inline QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QPatternist::Item> > sequencedTypedValue() const;
inline QUrl documentUri() const;
inline QUrl baseUri() const;
inline NodeKind kind() const;
inline bool isDeepEqual(const QXmlNodeModelIndex &other) const;
inline DocumentOrder compareOrder(const QXmlNodeModelIndex &other) const;
inline void sendNamespaces(QAbstractXmlReceiver *const receiver) const;
inline QVector<QXmlName> namespaceBindings() const;
inline QXmlName::NamespaceCode namespaceForPrefix(const QXmlName::PrefixCode prefix) const;
inline QString stringValue() const;
inline QPatternist::ItemTypePtr type() const;
inline bool is(const QXmlNodeModelIndex &other) const;

inline void reset()
{
m_storage.reset();
}

private:
static inline QXmlNodeModelIndex create(const qint64 d,
const QAbstractXmlNodeModel *const nm)
{
QXmlNodeModelIndex n;
n.m_storage.data = d;
n.m_storage.model = nm;
n.m_storage.additionalData = 0;
return n;
}

static inline QXmlNodeModelIndex create(const qint64 data,
const QAbstractXmlNodeModel *const nm,
const qint64 addData)
{
QXmlNodeModelIndex n;
n.m_storage.data = data;
n.m_storage.model = nm;
n.m_storage.additionalData = addData;
return n;
}

inline QXmlNodeModelIndex(const QPatternist::NodeIndexStorage &storage) : m_storage(storage)
{
}

friend class QAbstractXmlNodeModel;
friend class QPatternist::Item;
friend class QXmlItem;
inline operator int() const; 

QPatternist::NodeIndexStorage m_storage;
};

 uint qHash(const QXmlNodeModelIndex &index);

inline bool qIsForwardIteratorEnd(const QXmlNodeModelIndex &item)
{
return item.isNull();
}

class  QAbstractXmlNodeModel : public QSharedData
{
public:
enum SimpleAxis
{
Parent,
FirstChild,
PreviousSibling,
NextSibling
};

typedef QExplicitlySharedDataPointer<QAbstractXmlNodeModel> Ptr;
typedef QList<Ptr> List;

QAbstractXmlNodeModel();
virtual ~QAbstractXmlNodeModel();

virtual QUrl baseUri(const QXmlNodeModelIndex &ni) const = 0;
virtual QUrl documentUri(const QXmlNodeModelIndex &ni) const = 0;
virtual QXmlNodeModelIndex::NodeKind kind(const QXmlNodeModelIndex &ni) const = 0;
virtual QXmlNodeModelIndex::DocumentOrder compareOrder(const QXmlNodeModelIndex &ni1,
const QXmlNodeModelIndex &ni2) const = 0;
virtual QXmlNodeModelIndex root(const QXmlNodeModelIndex &n) const = 0;
virtual QXmlName name(const QXmlNodeModelIndex &ni) const = 0;
virtual QString stringValue(const QXmlNodeModelIndex &n) const = 0;
virtual QVariant typedValue(const QXmlNodeModelIndex &n) const = 0;



virtual QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QXmlNodeModelIndex> > iterate(const QXmlNodeModelIndex &ni, QXmlNodeModelIndex::Axis axis) const;
virtual QPatternist::ItemIteratorPtr sequencedTypedValue(const QXmlNodeModelIndex &ni) const;
virtual QPatternist::ItemTypePtr type(const QXmlNodeModelIndex &ni) const;
virtual QXmlName::NamespaceCode namespaceForPrefix(const QXmlNodeModelIndex &ni,
const QXmlName::PrefixCode prefix) const;
virtual bool isDeepEqual(const QXmlNodeModelIndex &ni1,
const QXmlNodeModelIndex &ni2) const;
virtual void sendNamespaces(const QXmlNodeModelIndex &n,
QAbstractXmlReceiver *const receiver) const;
virtual QVector<QXmlName> namespaceBindings(const QXmlNodeModelIndex &n) const = 0;


virtual QXmlNodeModelIndex elementById(const QXmlName &NCName) const = 0;
virtual QVector<QXmlNodeModelIndex> nodesByIdref(const QXmlName &NCName) const = 0;

enum NodeCopySetting
{
InheritNamespaces = 0x1,
PreserveNamespaces = 0x2
};

typedef QFlags<NodeCopySetting> NodeCopySettings;
virtual void copyNodeTo(const QXmlNodeModelIndex &node,
QAbstractXmlReceiver *const receiver,
const NodeCopySettings &) const;

QSourceLocation sourceLocation(const QXmlNodeModelIndex &index) const;

protected:

virtual QXmlNodeModelIndex nextFromSimpleAxis(SimpleAxis axis, const QXmlNodeModelIndex &origin) const = 0;
virtual QVector<QXmlNodeModelIndex> attributes(const QXmlNodeModelIndex &element) const = 0;

QAbstractXmlNodeModel(QAbstractXmlNodeModelPrivate *d);

inline QXmlNodeModelIndex createIndex(qint64 data) const
{
return QXmlNodeModelIndex::create(data, this);
}

inline QXmlNodeModelIndex createIndex(void * pointer,
qint64 additionalData = 0) const
{
return QXmlNodeModelIndex::create(qptrdiff(pointer), this, additionalData);
}

inline QXmlNodeModelIndex createIndex(qint64 data,
qint64 additionalData) const
{
return QXmlNodeModelIndex::create(data, this, additionalData);
}

QScopedPointer<QAbstractXmlNodeModelPrivate> d_ptr;
private:
friend class QPatternist::ItemMappingIterator<QXmlNodeModelIndex, QXmlNodeModelIndex, const QAbstractXmlNodeModel *, QExplicitlySharedDataPointer<QPatternist::DynamicContext> >;
friend class QPatternist::SequenceMappingIterator<QXmlNodeModelIndex, QXmlNodeModelIndex, const QAbstractXmlNodeModel *>;
friend class QPatternist::XsdValidatedXmlNodeModel;

inline QExplicitlySharedDataPointer<QAbstractXmlForwardIterator<QXmlNodeModelIndex> > mapToSequence(const QXmlNodeModelIndex &ni,
const QExplicitlySharedDataPointer<QPatternist::DynamicContext> &) const;

static inline bool isIgnorableInDeepEqual(const QXmlNodeModelIndex &n);
QAbstractXmlNodeModel(const QAbstractXmlNodeModel &) ; QAbstractXmlNodeModel &operator=(const QAbstractXmlNodeModel &) ;
};

template<> class QTypeInfo<QXmlNodeModelIndex > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlNodeModelIndex)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlNodeModelIndex) }; static inline const char *name() { return "QXmlNodeModelIndex"; } };

template<typename T> class QAbstractXmlForwardIterator;
class QVariant;
class QXmlItemPrivate;

namespace QPatternist
{
class AtomicValue;
class VariableLoader;
class IteratorBridge;
class ToQXmlItemMapper;
class ToItemMapper;
}

class  QXmlItem
{
public:
typedef QAbstractXmlForwardIterator<QXmlItem> Iterator;

QXmlItem();
QXmlItem(const QXmlItem &other);
QXmlItem(const QXmlNodeModelIndex &node);
QXmlItem(const QVariant &atomicValue);
~QXmlItem();
QXmlItem &operator=(const QXmlItem &other);

bool isNull() const;
bool isNode() const;
bool isAtomicValue() const;

QVariant toAtomicValue() const;
QXmlNodeModelIndex toNodeModelIndex() const;

private:
friend class QPatternist::IteratorBridge;
friend class QPatternist::VariableLoader;
friend class QPatternist::ToQXmlItemMapper;
friend class QPatternist::ToItemMapper;
friend class QPatternist::Item;

inline bool internalIsAtomicValue() const;

inline QXmlItem(const QPatternist::Item &i);

union
{
QPatternist::NodeIndexStorage m_node;



const QPatternist::AtomicValue *m_atomicValue;
QXmlItemPrivate * m_ptr; 
};
};

inline bool qIsForwardIteratorEnd(const QXmlItem &item)
{
return item.isNull();
}

template<> class QTypeInfo<QXmlItem > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QXmlItem)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QXmlItem) }; static inline const char *name() { return "QXmlItem"; } };



 template <> struct QMetaTypeId< QXmlItem > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QXmlItem >("QXmlItem", reinterpret_cast< QXmlItem *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  


# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVariant"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"



































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlNodeModelIndex"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"



class QAbstractXmlReceiverPrivate;
class QXmlName;

namespace QPatternist
{
class Item;
}

class  QAbstractXmlReceiver
{
public:
QAbstractXmlReceiver();

virtual ~QAbstractXmlReceiver();

virtual void startElement(const QXmlName &name) = 0;
virtual void endElement() = 0;
virtual void attribute(const QXmlName &name,
const QStringRef &value) = 0;
virtual void comment(const QString &value) = 0;
virtual void characters(const QStringRef &value) = 0;
virtual void startDocument() = 0;
virtual void endDocument() = 0;

virtual void processingInstruction(const QXmlName &target,
const QString &value) = 0;

virtual void atomicValue(const QVariant &value) = 0;
virtual void namespaceBinding(const QXmlName &name) = 0;
virtual void startOfSequence() = 0;
virtual void endOfSequence() = 0;



virtual void whitespaceOnly(const QStringRef &value);
virtual void item(const QPatternist::Item &item);

protected:
QAbstractXmlReceiver(QAbstractXmlReceiverPrivate *d);
QScopedPointer<QAbstractXmlReceiverPrivate> d_ptr;

void sendAsNode(const QPatternist::Item &outputItem);
private:
template<const QXmlNodeModelIndex::Axis axis>
void sendFromAxis(const QXmlNodeModelIndex &node);
QAbstractXmlReceiver(const QAbstractXmlReceiver &) ; QAbstractXmlReceiver &operator=(const QAbstractXmlReceiver &) ;
};




# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsimplexmlnodemodel.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"



































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QAbstractXmlNodeModel"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsimplexmlnodemodel.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlnodemodel.h"



































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QAbstractXmlNodeModel"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"





































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QAbstractXmlReceiver"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSharedData"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QString"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"



namespace QPatternist
{
class NamePool;
class XsdSchemaParser;
class XsdValidatingInstanceReader;
}

namespace QPatternistSDK
{
class Global;
}

class QXmlQueryPrivate;
class QXmlName;

class  QXmlNamePool
{
public:
QXmlNamePool();
QXmlNamePool(const QXmlNamePool &other);
~QXmlNamePool();
QXmlNamePool &operator=(const QXmlNamePool &other);

private:
QXmlNamePool(QPatternist::NamePool *namePool);
friend class QXmlQueryPrivate;
friend class QXmlQuery;
friend class QXmlSchemaPrivate;
friend class QXmlSchemaValidatorPrivate;
friend class QXmlSerializerPrivate;
friend class QXmlName;
friend class QPatternist::XsdSchemaParser;
friend class QPatternist::XsdValidatingInstanceReader;
friend class QPatternistSDK::Global;
QExplicitlySharedDataPointer<QPatternist::NamePool> d;
};




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlNamePool"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"



class QAbstractMessageHandler;
class QAbstractUriResolver;
class QIODevice;
class QNetworkAccessManager;
class QXmlName;
class QXmlNodeIndex;
class QXmlQueryPrivate;
class QXmlResultItems;
class QXmlSerializer;



namespace QPatternistSDK
{
class TestCase;
}

namespace QPatternist
{
class XsdSchemaParser;
class XsdValidatingInstanceReader;
class VariableLoader;
}

class  QXmlQuery
{
public:
enum QueryLanguage
{
XQuery10 = 1,
XSLT20 = 2,
XmlSchema11IdentityConstraintSelector = 1024,
XmlSchema11IdentityConstraintField = 2048,
XPath20 = 4096
};

QXmlQuery();
QXmlQuery(const QXmlQuery &other);
QXmlQuery(const QXmlNamePool &np);
QXmlQuery(QueryLanguage queryLanguage,
const QXmlNamePool &np = QXmlNamePool());
~QXmlQuery();
QXmlQuery &operator=(const QXmlQuery &other);

void setMessageHandler(QAbstractMessageHandler *messageHandler);
QAbstractMessageHandler *messageHandler() const;

void setQuery(const QString &sourceCode, const QUrl &documentURI = QUrl());
void setQuery(QIODevice *sourceCode, const QUrl &documentURI = QUrl());
void setQuery(const QUrl &queryURI, const QUrl &baseURI = QUrl());

QXmlNamePool namePool() const;

void bindVariable(const QXmlName &name, const QXmlItem &value);
void bindVariable(const QString &localName, const QXmlItem &value);

void bindVariable(const QXmlName &name, QIODevice *);
void bindVariable(const QString &localName, QIODevice *);
void bindVariable(const QXmlName &name, const QXmlQuery &query);
void bindVariable(const QString &localName, const QXmlQuery &query);

bool isValid() const;

void evaluateTo(QXmlResultItems *result) const;
bool evaluateTo(QAbstractXmlReceiver *callback) const;
bool evaluateTo(QStringList *target) const;
bool evaluateTo(QIODevice *target) const;
bool evaluateTo(QString *output) const;

void setUriResolver(const QAbstractUriResolver *resolver);
const QAbstractUriResolver *uriResolver() const;

void setFocus(const QXmlItem &item);
bool setFocus(const QUrl &documentURI);
bool setFocus(QIODevice *document);
bool setFocus(const QString &focus);

void setInitialTemplateName(const QXmlName &name);
void setInitialTemplateName(const QString &name);
QXmlName initialTemplateName() const;

void setNetworkAccessManager(QNetworkAccessManager *newManager);
QNetworkAccessManager *networkAccessManager() const;

QueryLanguage queryLanguage() const;
private:
friend class QXmlName;
friend class QXmlSerializer;
friend class QPatternistSDK::TestCase;
friend class QPatternist::XsdSchemaParser;
friend class QPatternist::XsdValidatingInstanceReader;
friend class QPatternist::VariableLoader;
template<typename TInputType> friend bool setFocusHelper(QXmlQuery *const queryInstance,
const TInputType &focusValue);
QXmlQueryPrivate *d;
};




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlQuery"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsimplexmlnodemodel.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsimplexmlnodemodel.h"



template<typename T> class QExplicitlySharedDataPointer;
class QSimpleXmlNodeModelPrivate;
class  QSimpleXmlNodeModel : public QAbstractXmlNodeModel
{
public:
QSimpleXmlNodeModel(const QXmlNamePool &namePool);
virtual ~QSimpleXmlNodeModel();

virtual QUrl baseUri(const QXmlNodeModelIndex &node) const;
QXmlNamePool &namePool() const;
virtual QVector<QXmlName> namespaceBindings(const QXmlNodeModelIndex&) const;
virtual QString stringValue(const QXmlNodeModelIndex &node) const;
virtual QXmlNodeModelIndex elementById(const QXmlName &id) const;
virtual QVector<QXmlNodeModelIndex> nodesByIdref(const QXmlName &idref) const;

private:
inline QSimpleXmlNodeModelPrivate* d_func() { return reinterpret_cast<QSimpleXmlNodeModelPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSimpleXmlNodeModelPrivate* d_func() const { return reinterpret_cast<const QSimpleXmlNodeModelPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSimpleXmlNodeModelPrivate;
};




# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qsourcelocation.h"

































































































# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"































































# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlformatter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlserializer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qabstractxmlreceiver.h"





































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QAbstractXmlReceiver"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlserializer.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlserializer.h"



class QIODevice;
class QTextCodec;
class QXmlQuery;
class QXmlSerializerPrivate;

class  QXmlSerializer : public QAbstractXmlReceiver
{
public:
QXmlSerializer(const QXmlQuery &query,
QIODevice *outputDevice);

virtual void namespaceBinding(const QXmlName &nb);

virtual void characters(const QStringRef &value);
virtual void comment(const QString &value);

virtual void startElement(const QXmlName &name);

virtual void endElement();

virtual void attribute(const QXmlName &name,
const QStringRef &value);

virtual void processingInstruction(const QXmlName &name,
const QString &value);

virtual void atomicValue(const QVariant &value);

virtual void startDocument();
virtual void endDocument();
virtual void startOfSequence();
virtual void endOfSequence();

QIODevice *outputDevice() const;

void setCodec(const QTextCodec *codec);
const QTextCodec *codec() const;



virtual void item(const QPatternist::Item &item);
protected:
QXmlSerializer(QAbstractXmlReceiverPrivate *d);

private:
inline bool isBindingInScope(const QXmlName nb) const;




enum State
{





BeforeDocumentElement,




InsideDocumentElement
};





inline bool atDocumentRoot() const;





inline void startContent();




void writeEscaped(const QString &toEscape);




inline void writeEscapedAttribute(const QString &toEscape);




inline void write(const QXmlName &name);

inline void write(const char *const chars);



inline void write(const QString &content);

inline QXmlSerializerPrivate* d_func() { return reinterpret_cast<QXmlSerializerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QXmlSerializerPrivate* d_func() const { return reinterpret_cast<const QXmlSerializerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QXmlSerializerPrivate;
};




# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlSerializer"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlformatter.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlformatter.h"



class QIODevice;
class QTextCodec;
class QXmlQuery;
class QXmlFormatterPrivate;

class  QXmlFormatter : public QXmlSerializer
{
public:
QXmlFormatter(const QXmlQuery &query,
QIODevice *outputDevice);

virtual void characters(const QStringRef &value);
virtual void comment(const QString &value);
virtual void startElement(const QXmlName &name);
virtual void endElement();

virtual void attribute(const QXmlName &name,
const QStringRef &value);
virtual void processingInstruction(const QXmlName &name,
const QString &value);
virtual void atomicValue(const QVariant &value);
virtual void startDocument();
virtual void endDocument();
virtual void startOfSequence();
virtual void endOfSequence();

int indentationDepth() const;
void setIndentationDepth(int depth);



virtual void item(const QPatternist::Item &item);
private:
inline void startFormattingContent();
inline QXmlFormatterPrivate* d_func() { return reinterpret_cast<QXmlFormatterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QXmlFormatterPrivate* d_func() const { return reinterpret_cast<const QXmlFormatterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QXmlFormatterPrivate;
};




# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlname.h"









































































































































# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"



























































































# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlquery.h"























































































































































# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlresultitems.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QString"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlresultitems.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QScopedPointer"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlresultitems.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsglobal.h"































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlresultitems.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlresultitems.h"



class QXmlItem;
class QXmlQuery;
class QXmlResultItemsPrivate;

class  QXmlResultItems
{
public:
QXmlResultItems();
virtual ~QXmlResultItems();

bool hasError() const;
QXmlItem next();
QXmlItem current() const;

private:
friend class QXmlQuery;
inline QXmlResultItemsPrivate* d_func() { return reinterpret_cast<QXmlResultItemsPrivate *>(qGetPtrHelper(d_ptr)); } inline const QXmlResultItemsPrivate* d_func() const { return reinterpret_cast<const QXmlResultItemsPrivate *>(qGetPtrHelper(d_ptr)); } friend class QXmlResultItemsPrivate;
QScopedPointer<QXmlResultItemsPrivate> d_ptr;
QXmlResultItems(const QXmlResultItems &) ; QXmlResultItems &operator=(const QXmlResultItems &) ;
};




# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschema.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QSharedDataPointer"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschema.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschema.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"



























































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlNamePool"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschema.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschema.h"



class QAbstractMessageHandler;
class QAbstractUriResolver;
class QIODevice;
class QNetworkAccessManager;
class QUrl;
class QXmlNamePool;
class QXmlSchemaPrivate;

class  QXmlSchema
{
friend class QXmlSchemaValidatorPrivate;

public:
QXmlSchema();
QXmlSchema(const QXmlSchema &other);
~QXmlSchema();

bool load(const QUrl &source);
bool load(QIODevice *source, const QUrl &documentUri = QUrl());
bool load(const QByteArray &data, const QUrl &documentUri = QUrl());

bool isValid() const;

QXmlNamePool namePool() const;
QUrl documentUri() const;

void setMessageHandler(QAbstractMessageHandler *handler);
QAbstractMessageHandler *messageHandler() const;

void setUriResolver(const QAbstractUriResolver *resolver);
const QAbstractUriResolver *uriResolver() const;

void setNetworkAccessManager(QNetworkAccessManager *networkmanager);
QNetworkAccessManager *networkAccessManager() const;

private:
QSharedDataPointer<QXmlSchemaPrivate> d;
};




# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschemavalidator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschemavalidator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlnamepool.h"



























































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QXmlNamePool"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschemavalidator.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlschemavalidator.h"



class QAbstractMessageHandler;
class QAbstractUriResolver;
class QIODevice;
class QNetworkAccessManager;
class QUrl;
class QXmlNamePool;
class QXmlSchema;
class QXmlSchemaValidatorPrivate;

class  QXmlSchemaValidator
{
public:
QXmlSchemaValidator();
QXmlSchemaValidator(const QXmlSchema &schema);
~QXmlSchemaValidator();

void setSchema(const QXmlSchema &schema);

bool validate(const QUrl &source) const;
bool validate(QIODevice *source, const QUrl &documentUri = QUrl()) const;
bool validate(const QByteArray &data, const QUrl &documentUri = QUrl()) const;

QXmlNamePool namePool() const;
QXmlSchema schema() const;

void setMessageHandler(QAbstractMessageHandler *handler);
QAbstractMessageHandler *messageHandler() const;

void setUriResolver(const QAbstractUriResolver *resolver);
const QAbstractUriResolver *uriResolver() const;

void setNetworkAccessManager(QNetworkAccessManager *networkmanager);
QNetworkAccessManager *networkAccessManager() const;

private:
QXmlSchemaValidatorPrivate* const d;

QXmlSchemaValidator(const QXmlSchemaValidator &) ; QXmlSchemaValidator &operator=(const QXmlSchemaValidator &) ;
};




# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qxmlserializer.h"


































































































































# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/qtxmlpatternsversion.h"









# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtXmlPatterns/QtXmlPatterns"


# 53 "qtscript_masterinclude.h"






# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKitDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKitDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKitDepends"





































# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKitDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebdatabase.h"





















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebdatabase.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebdatabase.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"























# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"




















# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"
 QString qWebKitVersion();
 int qWebKitMajorVersion();
 int qWebKitMinorVersion();


# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebdatabase.h"


# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebdatabase.h"
namespace WebCore {
class DatabaseDetails;
}

class QWebDatabasePrivate;
class QWebSecurityOrigin;

class  QWebDatabase {
public:
QWebDatabase(const QWebDatabase& other);
QWebDatabase &operator=(const QWebDatabase& other);
~QWebDatabase();

QString name() const;
QString displayName() const;
qint64 expectedSize() const;
qint64 size() const;
QString fileName() const;
QWebSecurityOrigin origin() const;

static void removeDatabase(const QWebDatabase&);
static void removeAllDatabases();

private:
QWebDatabase(QWebDatabasePrivate* priv);
friend class QWebSecurityOrigin;

private:
QExplicitlySharedDataPointer<QWebDatabasePrivate> d;
};



# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"

# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebelement.h"
namespace WebCore {
class Element;
class Node;
}


class QPainter;


class QWebFrame;
class QWebElementCollection;
class QWebElementPrivate;

class  QWebElement {
public:
QWebElement();
QWebElement(const QWebElement&);
QWebElement &operator=(const QWebElement&);
~QWebElement();

bool operator==(const QWebElement& o) const;
bool operator!=(const QWebElement& o) const;

bool isNull() const;

QWebElementCollection findAll(const QString &selectorQuery) const;
QWebElement findFirst(const QString &selectorQuery) const;

void setPlainText(const QString& text);
QString toPlainText() const;

void setOuterXml(const QString& markup);
QString toOuterXml() const;

void setInnerXml(const QString& markup);
QString toInnerXml() const;

void setAttribute(const QString& name, const QString& value);
void setAttributeNS(const QString& namespaceUri, const QString& name, const QString& value);
QString attribute(const QString& name, const QString& defaultValue = QString()) const;
QString attributeNS(const QString& namespaceUri, const QString& name, const QString& defaultValue = QString()) const;
bool hasAttribute(const QString& name) const;
bool hasAttributeNS(const QString& namespaceUri, const QString& name) const;
void removeAttribute(const QString& name);
void removeAttributeNS(const QString& namespaceUri, const QString& name);
bool hasAttributes() const;
QStringList attributeNames(const QString& namespaceUri = QString()) const;

QStringList classes() const;
bool hasClass(const QString& name) const;
void addClass(const QString& name);
void removeClass(const QString& name);
void toggleClass(const QString& name);

bool hasFocus() const;
void setFocus();

QRect geometry() const;

QString tagName() const;
QString prefix() const;
QString localName() const;
QString namespaceUri() const;

QWebElement parent() const;
QWebElement firstChild() const;
QWebElement lastChild() const;
QWebElement nextSibling() const;
QWebElement previousSibling() const;
QWebElement document() const;
QWebFrame *webFrame() const;



void appendInside(const QString& markup);
void appendInside(const QWebElement& element);


void prependInside(const QString& markup);
void prependInside(const QWebElement& element);


void appendOutside(const QString& markup);
void appendOutside(const QWebElement& element);


void prependOutside(const QString& markup);
void prependOutside(const QWebElement& element);


void encloseContentsWith(const QWebElement& element);
void encloseContentsWith(const QString& markup);
void encloseWith(const QString& markup);
void encloseWith(const QWebElement& element);

void replace(const QString& markup);
void replace(const QWebElement& element);

QWebElement clone() const;
QWebElement& takeFromDocument();
void removeFromDocument();
void removeAllChildren();

QVariant evaluateJavaScript(const QString& scriptSource);

enum StyleResolveStrategy {
InlineStyle,
CascadedStyle,
ComputedStyle,
};
QString styleProperty(const QString& name, StyleResolveStrategy strategy) const;
void setStyleProperty(const QString& name, const QString& value);

void render(QPainter* painter);
void render(QPainter* painter, const QRect& clipRect);

private:
explicit QWebElement(WebCore::Element*);
explicit QWebElement(WebCore::Node*);

static QWebElement enclosingElement(WebCore::Node*);

friend class DumpRenderTreeSupportQt;
friend class QWebFrameAdapter;
friend class QWebElementCollection;
friend class QWebHitTestResult;
friend class QWebHitTestResultPrivate;
friend class QWebPage;
friend class QWebPagePrivate;
friend class QtWebElementRuntime;

QWebElementPrivate* d;
WebCore::Element* m_element;
};

class QWebElementCollectionPrivate;

class  QWebElementCollection
{
public:
QWebElementCollection();
QWebElementCollection(const QWebElement &contextElement, const QString &query);
QWebElementCollection(const QWebElementCollection &);
QWebElementCollection &operator=(const QWebElementCollection &);
~QWebElementCollection();

QWebElementCollection operator+(const QWebElementCollection &other) const;
inline QWebElementCollection &operator+=(const QWebElementCollection &other)
{
append(other); return *this;
}

void append(const QWebElementCollection &collection);

int count() const;
QWebElement at(int i) const;
inline QWebElement operator[](int i) const { return at(i); }

inline QWebElement first() const { return at(0); }
inline QWebElement last() const { return at(count() - 1); }

QList<QWebElement> toList() const;

class const_iterator {
public:
inline const_iterator(const QWebElementCollection* collection, int index) : i(index), collection(collection) {}
inline const_iterator(const const_iterator& o) : i(o.i), collection(o.collection) {}

inline const QWebElement operator*() const { return collection->at(i); }

inline bool operator==(const const_iterator& o) const { return i == o.i && collection == o.collection; }
inline bool operator!=(const const_iterator& o) const { return i != o.i || collection != o.collection; }
inline bool operator<(const const_iterator& o) const { return i < o.i; }
inline bool operator<=(const const_iterator& o) const { return i <= o.i; }
inline bool operator>(const const_iterator& o) const { return i > o.i; }
inline bool operator>=(const const_iterator& o) const { return i >= o.i; }

inline const_iterator& operator++() { ++i; return *this; }
inline const_iterator operator++(int) { const_iterator n(collection, i); ++i; return n; }
inline const_iterator& operator--() { i--; return *this; }
inline const_iterator operator--(int) { const_iterator n(collection, i); i--; return n; }
inline const_iterator& operator+=(int j) { i += j; return *this; }
inline const_iterator& operator-=(int j) { i -= j; return *this; }
inline const_iterator operator+(int j) const { return const_iterator(collection, i + j); }
inline const_iterator operator-(int j) const { return const_iterator(collection, i - j); }
inline int operator-(const_iterator j) const { return i - j.i; }
private:
int i;
const QWebElementCollection* const collection;
};
friend class const_iterator;

inline const_iterator begin() const { return constBegin(); }
inline const_iterator end() const { return constEnd(); }
inline const_iterator constBegin() const { return const_iterator(this, 0); }
inline const_iterator constEnd() const { return const_iterator(this, count()); };

class iterator {
public:
inline iterator(const QWebElementCollection* collection, int index) : i(index), collection(collection) {}
inline iterator(const iterator& o) : i(o.i), collection(o.collection) {}

inline QWebElement operator*() const { return collection->at(i); }

inline bool operator==(const iterator& o) const { return i == o.i && collection == o.collection; }
inline bool operator!=(const iterator& o) const { return i != o.i || collection != o.collection; }
inline bool operator<(const iterator& o) const { return i < o.i; }
inline bool operator<=(const iterator& o) const { return i <= o.i; }
inline bool operator>(const iterator& o) const { return i > o.i; }
inline bool operator>=(const iterator& o) const { return i >= o.i; }

inline iterator& operator++() { ++i; return *this; }
inline iterator operator++(int) { iterator n(collection, i); ++i; return n; }
inline iterator& operator--() { i--; return *this; }
inline iterator operator--(int) { iterator n(collection, i); i--; return n; }
inline iterator& operator+=(int j) { i += j; return *this; }
inline iterator& operator-=(int j) { i -= j; return *this; }
inline iterator operator+(int j) const { return iterator(collection, i + j); }
inline iterator operator-(int j) const { return iterator(collection, i - j); }
inline int operator-(iterator j) const { return i - j.i; }
private:
int i;
const QWebElementCollection* const collection;
};
friend class iterator;

inline iterator begin() { return iterator(this, 0); }
inline iterator end() { return iterator(this, count()); }
private:
QExplicitlySharedDataPointer<QWebElementCollectionPrivate> d;
};

 template <> struct QMetaTypeId< QWebElement > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QWebElement >("QWebElement", reinterpret_cast< QWebElement *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdatetime.h"













































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"


# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistory.h"
class QWebPage;

namespace WebCore {
class FrameLoaderClientQt;
}

class QWebHistoryItemPrivate;

class  QWebHistoryItem {
public:
QWebHistoryItem(const QWebHistoryItem &other);
QWebHistoryItem &operator=(const QWebHistoryItem &other);
~QWebHistoryItem();

QUrl originalUrl() const;
QUrl url() const;

QString title() const;
QDateTime lastVisited() const;

QIcon icon() const;

QVariant userData() const;
void setUserData(const QVariant& userData);

bool isValid() const;

private:
QWebHistoryItem(QWebHistoryItemPrivate *priv);
friend class QWebHistory;
friend class QWebPage;
friend class WebCore::FrameLoaderClientQt;
friend class QWebHistoryItemPrivate;
friend class DumpRenderTreeSupportQt;


QExplicitlySharedDataPointer<QWebHistoryItemPrivate> d;
};


class QWebHistoryPrivate;
class  QWebHistory {
public:
void clear();

QList<QWebHistoryItem> items() const;
QList<QWebHistoryItem> backItems(int maxItems) const;
QList<QWebHistoryItem> forwardItems(int maxItems) const;

bool canGoBack() const;
bool canGoForward() const;

void back();
void forward();
void goToItem(const QWebHistoryItem &item);

QWebHistoryItem backItem() const;
QWebHistoryItem currentItem() const;
QWebHistoryItem forwardItem() const;
QWebHistoryItem itemAt(int i) const;

int currentItemIndex() const;

int count() const;

int maximumItemCount() const;
void setMaximumItemCount(int count);

private:
QWebHistory();
~QWebHistory();

friend class QWebPage;
friend class QWebPageAdapter;
friend  QDataStream& operator>>(QDataStream&, QWebHistory&);
friend  QDataStream& operator<<(QDataStream&, const QWebHistory&);

QWebHistory(const QWebHistory &) ; QWebHistory &operator=(const QWebHistory &) ;

QWebHistoryPrivate *d;
};

 QDataStream& operator<<(QDataStream& stream, const QWebHistory& history);
 QDataStream& operator>>(QDataStream& stream, QWebHistory& history);


# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistoryinterface.h"
























# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistoryinterface.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistoryinterface.h"


# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebhistoryinterface.h"
class  QWebHistoryInterface : public QObject {
Q_OBJECT
public:
QWebHistoryInterface(QObject *parent = 0);
~QWebHistoryInterface();

static void setDefaultInterface(QWebHistoryInterface *defaultInterface);
static QWebHistoryInterface *defaultInterface();

virtual bool historyContains(const QString &url) const = 0;
virtual void addHistoryEntry(const QString &url) = 0;
};


# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"























# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"








# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 32 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QRect"

# 33 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 34 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QColor"

# 35 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QFont"

# 36 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"


# 38 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"
class QWebSelectData {
public:
virtual ~QWebSelectData() {}

enum ItemType { Option, Group, Separator };

virtual ItemType itemType(int) const = 0;
virtual QString itemText(int index) const = 0;
virtual QString itemToolTip(int index) const = 0;
virtual bool itemIsEnabled(int index) const = 0;
virtual bool itemIsSelected(int index) const = 0;
virtual int itemCount() const = 0;
virtual bool multiple() const = 0;
virtual QColor backgroundColor() const = 0;
virtual QColor foregroundColor() const = 0;
virtual QColor itemBackgroundColor(int index) const = 0;
virtual QColor itemForegroundColor(int index) const = 0;
};

class QWebSelectMethod : public QObject {
Q_OBJECT
public:
virtual ~QWebSelectMethod() {}

virtual void show(const QWebSelectData&) = 0;
virtual void hide() = 0;
virtual void setGeometry(const QRect&) = 0;
virtual void setFont(const QFont&) = 0;

signals:
void selectItem(int index, bool allowMultiplySelections, bool shift);
void didHide();
};

class QWebNotificationData {
public:
virtual ~QWebNotificationData() {}

virtual const QString title() const = 0;
virtual const QString message() const = 0;
virtual const QUrl iconUrl() const = 0;
virtual const QUrl openerPageUrl() const = 0;
};

class QWebNotificationPresenter : public QObject {
Q_OBJECT
public:
QWebNotificationPresenter() {}
virtual ~QWebNotificationPresenter() {}

virtual void showNotification(const QWebNotificationData*) = 0;

signals:
void notificationClosed();
void notificationClicked();
};

class QWebHapticFeedbackPlayer: public QObject {
Q_OBJECT
public:
QWebHapticFeedbackPlayer() {}
virtual ~QWebHapticFeedbackPlayer() {}

enum HapticStrength {
None, Weak, Medium, Strong
};

enum HapticEvent {
Press, Release
};

virtual void playHapticFeedback(const HapticEvent, const QString& hapticType, const HapticStrength) = 0;
};

class QWebTouchModifier : public QObject {
Q_OBJECT
public:
virtual ~QWebTouchModifier() {}

enum PaddingDirection {
Up, Right, Down, Left
};

virtual unsigned hitTestPaddingForTouch(const PaddingDirection) const = 0;
};


















# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitplatformplugin.h"
class QWebSpellChecker : public QObject {
Q_OBJECT
public:
struct GrammarDetail {
int location;
int length;
QStringList guesses;
QString userDescription;
};

virtual bool isContinousSpellCheckingEnabled() const = 0;
virtual void toggleContinousSpellChecking() = 0;

virtual void learnWord(const QString& word) = 0;
virtual void ignoreWordInSpellDocument(const QString& word) = 0;
virtual void checkSpellingOfString(const QString& word, int* misspellingLocation, int* misspellingLength) = 0;
virtual QString autoCorrectSuggestionForMisspelledWord(const QString& word) = 0;
virtual void guessesForWord(const QString& word, const QString& context, QStringList& guesses) = 0;

virtual bool isGrammarCheckingEnabled() = 0;
virtual void toggleGrammarChecking() = 0;
virtual void checkGrammarOfString(const QString&, QList<GrammarDetail>&, int* badGrammarLocation, int* badGrammarLength) = 0;
};

class QWebKitPlatformPlugin {
public:
virtual ~QWebKitPlatformPlugin() {}

enum Extension {
MultipleSelections,
Notifications,
Haptics,
TouchInteraction,
FullScreenVideoPlayer,
SpellChecker
};

virtual bool supportsExtension(Extension) const = 0;
virtual QObject* createExtension(Extension) const = 0;
};


template <> inline const char *qobject_interface_iid<QWebKitPlatformPlugin *>() { return "com.nokia.Qt.WebKit.PlatformPlugin/1.9"; } template <> inline QWebKitPlatformPlugin *qobject_cast<QWebKitPlatformPlugin *>(QObject *object) { return reinterpret_cast<QWebKitPlatformPlugin *>((object ? object->qt_metacast("com.nokia.Qt.WebKit.PlatformPlugin/1.9") : 0)); } template <> inline QWebKitPlatformPlugin *qobject_cast<QWebKitPlatformPlugin *>(const QObject *object) { return reinterpret_cast<QWebKitPlatformPlugin *>((object ? const_cast<QObject *>(object)->qt_metacast("com.nokia.Qt.WebKit.PlatformPlugin/1.9") : 0)); };



# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebpluginfactory.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebpluginfactory.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebpluginfactory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebpluginfactory.h"


# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebpluginfactory.h"

class QUrl;
class QString;

class QWebPluginFactoryPrivate;

class  QWebPluginFactory : public QObject {
Q_OBJECT
public:
struct  MimeType {
QString name;
QString description;
QStringList fileExtensions;
bool operator==(const MimeType& other) const;
inline bool operator!=(const MimeType& other) const { return !operator==(other); }
};

struct Plugin {
QString name;
QString description;
QList<MimeType> mimeTypes;
};

explicit QWebPluginFactory(QObject* parent = 0);
virtual ~QWebPluginFactory();

virtual QList<Plugin> plugins() const = 0;
virtual void refreshPlugins();

virtual QObject *create(const QString& mimeType, const QUrl&, const QStringList& argumentNames, const QStringList& argumentValues) const = 0;

enum Extension {
};
class ExtensionOption
{};
class ExtensionReturn
{};
virtual bool extension(Extension extension, const ExtensionOption* option = 0, ExtensionReturn* output = 0);
virtual bool supportsExtension(Extension extension) const;

private:
QWebPluginFactoryPrivate* d;
};


# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsecurityorigin.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsecurityorigin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsecurityorigin.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsecurityorigin.h"


# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsecurityorigin.h"
namespace WebCore {
class SecurityOrigin;
class ChromeClientQt;
}

class QWebSecurityOriginPrivate;
class QWebDatabase;
class QWebFrame;

class  QWebSecurityOrigin {
public:
static QList<QWebSecurityOrigin> allOrigins();
static void addLocalScheme(const QString& scheme);
static void removeLocalScheme(const QString& scheme);
static QStringList localSchemes();

~QWebSecurityOrigin();

QString scheme() const;
QString host() const;
int port() const;

qint64 databaseUsage() const;
qint64 databaseQuota() const;

void setDatabaseQuota(qint64 quota);
void setApplicationCacheQuota(qint64 quota);

QList<QWebDatabase> databases() const;

QWebSecurityOrigin(const QWebSecurityOrigin& other);
QWebSecurityOrigin &operator=(const QWebSecurityOrigin& other);
private:
friend class QWebDatabase;
friend class QWebFrameAdapter;
friend class WebCore::ChromeClientQt;
QWebSecurityOrigin(QWebSecurityOriginPrivate* priv);

private:
QExplicitlySharedDataPointer<QWebSecurityOriginPrivate> d;
};


# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"


# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"
namespace WebCore {
class Settings;
}

class QWebPage;
class QWebPluginDatabase;
class QWebSettingsPrivate;

class QUrl;


class  QWebSettings {
public:
enum FontFamily {
StandardFont,
FixedFont,
SerifFont,
SansSerifFont,
CursiveFont,
FantasyFont
};
enum WebAttribute {
AutoLoadImages,
JavascriptEnabled,
JavaEnabled,
PluginsEnabled,
PrivateBrowsingEnabled,
JavascriptCanOpenWindows,
JavascriptCanAccessClipboard,
DeveloperExtrasEnabled,
LinksIncludedInFocusChain,
ZoomTextOnly,
PrintElementBackgrounds,
OfflineStorageDatabaseEnabled,
OfflineWebApplicationCacheEnabled,
LocalStorageEnabled,

# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"
LocalStorageDatabaseEnabled = LocalStorageEnabled,

# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"
LocalContentCanAccessRemoteUrls,
DnsPrefetchEnabled,
XSSAuditingEnabled,
AcceleratedCompositingEnabled,
SpatialNavigationEnabled,
LocalContentCanAccessFileUrls,
TiledBackingStoreEnabled,
FrameFlatteningEnabled,
SiteSpecificQuirksEnabled,
JavascriptCanCloseWindows,
WebGLEnabled,
CSSRegionsEnabled,
HyperlinkAuditingEnabled,
CSSGridLayoutEnabled,
ScrollAnimatorEnabled,
CaretBrowsingEnabled,
NotificationsEnabled
};
enum WebGraphic {
MissingImageGraphic,
MissingPluginGraphic,
DefaultFrameIconGraphic,
TextAreaSizeGripCornerGraphic,
DeleteButtonGraphic,
InputSpeechButtonGraphic,
SearchCancelButtonGraphic,
SearchCancelButtonPressedGraphic
};
enum FontSize {
MinimumFontSize,
MinimumLogicalFontSize,
DefaultFontSize,
DefaultFixedFontSize
};
enum ThirdPartyCookiePolicy {
AlwaysAllowThirdPartyCookies,
AlwaysBlockThirdPartyCookies,
AllowThirdPartyWithExistingCookies
};

static QWebSettings *globalSettings();

void setFontFamily(FontFamily which, const QString &family);
QString fontFamily(FontFamily which) const;
void resetFontFamily(FontFamily which);

void setFontSize(FontSize type, int size);
int fontSize(FontSize type) const;
void resetFontSize(FontSize type);

void setAttribute(WebAttribute attr, bool on);
bool testAttribute(WebAttribute attr) const;
void resetAttribute(WebAttribute attr);

void setUserStyleSheetUrl(const QUrl &location);
QUrl userStyleSheetUrl() const;

void setDefaultTextEncoding(const QString &encoding);
QString defaultTextEncoding() const;

static void setIconDatabasePath(const QString &location);
static QString iconDatabasePath();
static void clearIconDatabase();
static QIcon iconForUrl(const QUrl &url);



static void setWebGraphic(WebGraphic type, const QPixmap &graphic);
static QPixmap webGraphic(WebGraphic type);

static void setMaximumPagesInCache(int pages);
static int maximumPagesInCache();
static void setObjectCacheCapacities(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity);

static void setOfflineStoragePath(const QString& path);
static QString offlineStoragePath();
static void setOfflineStorageDefaultQuota(qint64 maximumSize);
static qint64 offlineStorageDefaultQuota();

static void setOfflineWebApplicationCachePath(const QString& path);
static QString offlineWebApplicationCachePath();
static void setOfflineWebApplicationCacheQuota(qint64 maximumSize);
static qint64 offlineWebApplicationCacheQuota();

void setLocalStoragePath(const QString& path);
QString localStoragePath() const; 

static void clearMemoryCaches();

static void enablePersistentStorage(const QString& path = QString());

void setThirdPartyCookiePolicy(ThirdPartyCookiePolicy);
QWebSettings::ThirdPartyCookiePolicy thirdPartyCookiePolicy() const;

void setCSSMediaType(const QString&);
QString cssMediaType() const;

inline QWebSettingsPrivate* handle() const { return d; }

private:
friend class QWebPageAdapter;
friend class QWebPagePrivate;
friend class QWebSettingsPrivate;

QWebSettings(const QWebSettings &) ; QWebSettings &operator=(const QWebSettings &) ;

QWebSettings();
QWebSettings(WebCore::Settings *settings);
~QWebSettings();

QWebSettingsPrivate *d;
};


# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qtwebkitversion.h"









# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/QtWebKit"


# 57 "qtscript_masterinclude.h"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensorsDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensorsDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qaccelerometer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QByteArray"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMetaType"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVariant"

# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QPair"

# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"


# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"


class QSensorPrivate;
class QSensorBackend;
class QSensorReading;
class QSensorReadingPrivate;
class QSensorFilter;


typedef quint64 qtimestamp;

typedef QPair<int,int> qrange;
typedef QList<qrange> qrangelist;
struct qoutputrange
{
qreal minimum;
qreal maximum;
qreal accuracy;
};
typedef QList<qoutputrange> qoutputrangelist;

class  QSensor : public QObject
{
friend class QSensorBackend;

Q_OBJECT
Q_ENUMS(Feature)
Q_ENUMS(AxesOrientationMode)
Q_PROPERTY(QByteArray identifier READ identifier WRITE setIdentifier)
Q_PROPERTY(QByteArray type READ type)
Q_PROPERTY(bool connectedToBackend READ isConnectedToBackend)
Q_PROPERTY(qrangelist availableDataRates READ availableDataRates)
Q_PROPERTY(int dataRate READ dataRate WRITE setDataRate NOTIFY dataRateChanged)
Q_PROPERTY(QSensorReading* reading READ reading NOTIFY readingChanged)
Q_PROPERTY(bool busy READ isBusy)
Q_PROPERTY(bool active READ isActive WRITE setActive NOTIFY activeChanged)
Q_PROPERTY(qoutputrangelist outputRanges READ outputRanges)
Q_PROPERTY(int outputRange READ outputRange WRITE setOutputRange)
Q_PROPERTY(QString description READ description)
Q_PROPERTY(int error READ error NOTIFY sensorError)
Q_PROPERTY(bool alwaysOn READ isAlwaysOn WRITE setAlwaysOn NOTIFY alwaysOnChanged)
Q_PROPERTY(bool skipDuplicates READ skipDuplicates WRITE setSkipDuplicates NOTIFY skipDuplicatesChanged)
Q_PROPERTY(AxesOrientationMode axesOrientationMode READ axesOrientationMode WRITE setAxesOrientationMode NOTIFY axesOrientationModeChanged)
Q_PROPERTY(int currentOrientation READ currentOrientation NOTIFY currentOrientationChanged)
Q_PROPERTY(int userOrientation READ userOrientation WRITE setUserOrientation NOTIFY userOrientationChanged)
Q_PROPERTY(int maxBufferSize READ maxBufferSize NOTIFY maxBufferSizeChanged)
Q_PROPERTY(int efficientBufferSize READ efficientBufferSize NOTIFY efficientBufferSizeChanged)
Q_PROPERTY(int bufferSize READ bufferSize WRITE setBufferSize NOTIFY bufferSizeChanged)
public:
enum Feature {
Buffering,
AlwaysOn,
GeoValues,
FieldOfView,
AccelerationMode,
SkipDuplicates,
AxesOrientation,
Reserved = 257 
};


enum AxesOrientationMode {
FixedOrientation,
AutomaticOrientation,
UserOrientation
};

explicit QSensor(const QByteArray &type, QObject *parent = 0);
virtual ~QSensor();

QByteArray identifier() const;
void setIdentifier(const QByteArray &identifier);

QByteArray type() const;

Q_INVOKABLE bool connectToBackend();
bool isConnectedToBackend() const;

bool isBusy() const;

void setActive(bool active);
bool isActive() const;

bool isAlwaysOn() const;
void setAlwaysOn(bool alwaysOn);

bool skipDuplicates() const;
void setSkipDuplicates(bool skipDuplicates);

qrangelist availableDataRates() const;
int dataRate() const;
void setDataRate(int rate);

qoutputrangelist outputRanges() const;
int outputRange() const;
void setOutputRange(int index);

QString description() const;
int error() const;


void addFilter(QSensorFilter *filter);
void removeFilter(QSensorFilter *filter);
QList<QSensorFilter*> filters() const;


QSensorReading *reading() const;



static QList<QByteArray> sensorTypes();
static QList<QByteArray> sensorsForType(const QByteArray &type);
static QByteArray defaultSensorForType(const QByteArray &type);

Q_INVOKABLE bool isFeatureSupported(Feature feature) const;

AxesOrientationMode axesOrientationMode() const;
void setAxesOrientationMode(AxesOrientationMode axesOrientationMode);

int currentOrientation() const;
void setCurrentOrientation(int currentOrientation);

int userOrientation() const;
void setUserOrientation(int userOrientation);

int maxBufferSize() const;
void setMaxBufferSize(int maxBufferSize);

int efficientBufferSize() const;
void setEfficientBufferSize(int efficientBufferSize);

int bufferSize() const;
void setBufferSize(int bufferSize);

public slots:

bool start();


void stop();

signals:
void busyChanged();
void activeChanged();
void readingChanged();
void sensorError(int error);
void availableSensorsChanged();
void alwaysOnChanged();
void dataRateChanged();
void skipDuplicatesChanged(bool skipDuplicates);
void axesOrientationModeChanged(AxesOrientationMode axesOrientationMode);
void currentOrientationChanged(int currentOrientation);
void userOrientationChanged(int userOrientation);
void maxBufferSizeChanged(int maxBufferSize);
void efficientBufferSizeChanged(int efficientBufferSize);
void bufferSizeChanged(int bufferSize);

protected:
explicit QSensor(const QByteArray &type, QSensorPrivate &dd, QObject* parent = 0);
QSensorBackend *backend() const;

private:
void registerInstance();

QSensor(const QSensor &) ; QSensor &operator=(const QSensor &) ;
inline QSensorPrivate* d_func() { return reinterpret_cast<QSensorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSensorPrivate* d_func() const { return reinterpret_cast<const QSensorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSensorPrivate;
};

class  QSensorFilter
{
friend class QSensor;
public:
virtual bool filter(QSensorReading *reading) = 0;
protected:
QSensorFilter();
virtual ~QSensorFilter();
virtual void setSensor(QSensor *sensor);
QSensor *m_sensor;
};

class  QSensorReading : public QObject
{
friend class QSensorBackend;

Q_OBJECT
Q_PROPERTY(quint64 timestamp READ timestamp)
public:
virtual ~QSensorReading();

quint64 timestamp() const;
void setTimestamp(quint64 timestamp);



int valueCount() const;
QVariant value(int index) const;

protected:
explicit QSensorReading(QObject *parent, QSensorReadingPrivate *d);
QScopedPointer<QSensorReadingPrivate> *d_ptr() { return &d; }
virtual void copyValuesFrom(QSensorReading *other);

private:
QScopedPointer<QSensorReadingPrivate> d;
QSensorReading(const QSensorReading &) ; QSensorReading &operator=(const QSensorReading &) ;
};










# 293 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"


 template <> struct QMetaTypeId< qrange > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< qrange >("qrange", reinterpret_cast< qrange *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< qrangelist > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< qrangelist >("qrangelist", reinterpret_cast< qrangelist *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< qoutputrangelist > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< qoutputrangelist >("qoutputrangelist", reinterpret_cast< qoutputrangelist *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qaccelerometer.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qaccelerometer.h"


class QAccelerometerReadingPrivate;

class  QAccelerometerReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal x READ x)
Q_PROPERTY(qreal y READ y)
Q_PROPERTY(qreal z READ z)
public: QAccelerometerReading(QObject *parent = 0); virtual ~QAccelerometerReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QAccelerometerReadingPrivate> d;
public:
qreal x() const;
void setX(qreal x);

qreal y() const;
void setY(qreal y);

qreal z() const;
void setZ(qreal z);
};

class  QAccelerometerFilter : public QSensorFilter
{
public:
virtual bool filter(QAccelerometerReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class QAccelerometerPrivate;

class  QAccelerometer : public QSensor
{
Q_OBJECT
Q_ENUMS(AccelerationMode)
Q_PROPERTY(AccelerationMode accelerationMode READ accelerationMode WRITE setAccelerationMode
NOTIFY accelerationModeChanged)
public:
explicit QAccelerometer(QObject *parent = 0);
virtual ~QAccelerometer();


enum AccelerationMode {
Combined,
Gravity,
User
};

AccelerationMode accelerationMode() const;
void setAccelerationMode(AccelerationMode accelerationMode);

QAccelerometerReading *reading() const;
static char const * const type;

signals:
void accelerationModeChanged(AccelerationMode accelerationMode);

private:
inline QAccelerometerPrivate* d_func() { return reinterpret_cast<QAccelerometerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAccelerometerPrivate* d_func() const { return reinterpret_cast<const QAccelerometerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAccelerometerPrivate;
QAccelerometer(const QAccelerometer &) ; QAccelerometer &operator=(const QAccelerometer &) ;
};





# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qaltimeter.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qaltimeter.h"


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qaltimeter.h"


class QAltimeterReadingPrivate;

class  QAltimeterReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal altitude READ altitude)
public: QAltimeterReading(QObject *parent = 0); virtual ~QAltimeterReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QAltimeterReadingPrivate> d;
public:
qreal altitude() const;
void setAltitude(qreal altitude);
};

class  QAltimeterFilter : public QSensorFilter
{
public:
virtual bool filter(QAltimeterReading *reading) = 0;
private:
bool filter(QSensorReading *reading) ;
};

class  QAltimeter : public QSensor
{
Q_OBJECT
public:
explicit QAltimeter(QObject *parent = 0);
~QAltimeter();
QAltimeterReading *reading() const;
static char const * const type;

private:
QAltimeter(const QAltimeter &) ; QAltimeter &operator=(const QAltimeter &) ;
};




# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qambientlightsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qambientlightsensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qambientlightsensor.h"


class QAmbientLightReadingPrivate;

class  QAmbientLightReading : public QSensorReading
{
Q_OBJECT
Q_ENUMS(LightLevel)
Q_PROPERTY(LightLevel lightLevel READ lightLevel)
public: QAmbientLightReading(QObject *parent = 0); virtual ~QAmbientLightReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QAmbientLightReadingPrivate> d;
public:
enum LightLevel {
Undefined = 0,
Dark,
Twilight,
Light,
Bright,
Sunny
};

LightLevel lightLevel() const;
void setLightLevel(LightLevel lightLevel);
};

class  QAmbientLightFilter : public QSensorFilter
{
public:
virtual bool filter(QAmbientLightReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QAmbientLightSensor : public QSensor
{
Q_OBJECT
public:
explicit QAmbientLightSensor(QObject *parent = 0);
virtual ~QAmbientLightSensor();
QAmbientLightReading *reading() const;
static char const * const type;

private:
QAmbientLightSensor(const QAmbientLightSensor &) ; QAmbientLightSensor &operator=(const QAmbientLightSensor &) ;
};





# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qambienttemperaturesensor.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qambienttemperaturesensor.h"


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qambienttemperaturesensor.h"


class QAmbientTemperatureReadingPrivate;

class  QAmbientTemperatureReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal temperature READ temperature)
public: QAmbientTemperatureReading(QObject *parent = 0); virtual ~QAmbientTemperatureReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QAmbientTemperatureReadingPrivate> d;
public:
qreal temperature() const;
void setTemperature(qreal temperature);
};

class  QAmbientTemperatureFilter : public QSensorFilter
{
public:
virtual bool filter(QAmbientTemperatureReading *reading) = 0;
private:
bool filter(QSensorReading *reading) ;
};

class  QAmbientTemperatureSensor : public QSensor
{
Q_OBJECT
public:
explicit QAmbientTemperatureSensor(QObject *parent = 0);
~QAmbientTemperatureSensor();
QAmbientTemperatureReading *reading() const;
static char const * const type;

private:
QAmbientTemperatureSensor(const QAmbientTemperatureSensor &) ; QAmbientTemperatureSensor &operator=(const QAmbientTemperatureSensor &) ;
};




# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qcompass.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qcompass.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qcompass.h"


class QCompassReadingPrivate;

class  QCompassReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal azimuth READ azimuth)
Q_PROPERTY(qreal calibrationLevel READ calibrationLevel)
public: QCompassReading(QObject *parent = 0); virtual ~QCompassReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QCompassReadingPrivate> d;
public:
qreal azimuth() const;
void setAzimuth(qreal azimuth);

qreal calibrationLevel() const;
void setCalibrationLevel(qreal calibrationLevel);
};

class  QCompassFilter : public QSensorFilter
{
public:
virtual bool filter(QCompassReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QCompass : public QSensor
{
Q_OBJECT
public:
explicit QCompass(QObject *parent = 0);
virtual ~QCompass();
QCompassReading *reading() const;
static char const * const type;

private:
QCompass(const QCompass &) ; QCompass &operator=(const QCompass &) ;
};





# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qgyroscope.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qgyroscope.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qgyroscope.h"


class QGyroscopeReadingPrivate;

class  QGyroscopeReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal x READ x)
Q_PROPERTY(qreal y READ y)
Q_PROPERTY(qreal z READ z)
public: QGyroscopeReading(QObject *parent = 0); virtual ~QGyroscopeReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QGyroscopeReadingPrivate> d;
public:
qreal x() const;
void setX(qreal x);

qreal y() const;
void setY(qreal y);

qreal z() const;
void setZ(qreal z);
};

class  QGyroscopeFilter : public QSensorFilter
{
public:
virtual bool filter(QGyroscopeReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QGyroscope : public QSensor
{
Q_OBJECT
public:
explicit QGyroscope(QObject *parent = 0);
virtual ~QGyroscope();
QGyroscopeReading *reading() const;
static char const * const type;

private:
QGyroscope(const QGyroscope &) ; QGyroscope &operator=(const QGyroscope &) ;
};





# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qholstersensor.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qholstersensor.h"


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qholstersensor.h"


class QHolsterReadingPrivate;

class  QHolsterReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(bool holstered READ holstered)
public: QHolsterReading(QObject *parent = 0); virtual ~QHolsterReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QHolsterReadingPrivate> d;
public:
bool holstered() const;
void setHolstered(bool holstered);
};

class  QHolsterFilter : public QSensorFilter
{
public:
virtual bool filter(QHolsterReading *reading) = 0;
private:
bool filter(QSensorReading *reading) ;
};

class  QHolsterSensor : public QSensor
{
Q_OBJECT
public:
explicit QHolsterSensor(QObject *parent = 0);
~QHolsterSensor();
QHolsterReading *reading() const;
static char const * const type;

private:
QHolsterSensor(const QHolsterSensor &) ; QHolsterSensor &operator=(const QHolsterSensor &) ;
};




# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qirproximitysensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qirproximitysensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qirproximitysensor.h"


class QIRProximityReadingPrivate;

class  QIRProximityReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal reflectance READ reflectance)
public: QIRProximityReading(QObject *parent = 0); virtual ~QIRProximityReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QIRProximityReadingPrivate> d;
public:
qreal reflectance() const;
void setReflectance(qreal reflectance);
};

class  QIRProximityFilter : public QSensorFilter
{
public:
virtual bool filter(QIRProximityReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QIRProximitySensor : public QSensor
{
Q_OBJECT
public:
explicit QIRProximitySensor(QObject *parent = 0);
virtual ~QIRProximitySensor();
QIRProximityReading *reading() const;
static char const * const type;

private:
QIRProximitySensor(const QIRProximitySensor &) ; QIRProximitySensor &operator=(const QIRProximitySensor &) ;
};





# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qlightsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qlightsensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qlightsensor.h"


class QLightReadingPrivate;

class  QLightReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal lux READ lux)
public: QLightReading(QObject *parent = 0); virtual ~QLightReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QLightReadingPrivate> d;
public:
qreal lux() const;
void setLux(qreal lux);
};

class  QLightFilter : public QSensorFilter
{
public:
virtual bool filter(QLightReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class QLightSensorPrivate;

class  QLightSensor : public QSensor
{
Q_OBJECT
Q_PROPERTY(qreal fieldOfView READ fieldOfView NOTIFY fieldOfViewChanged)
public:
explicit QLightSensor(QObject *parent = 0);
virtual ~QLightSensor();
QLightReading *reading() const;
static char const * const type;

qreal fieldOfView() const;
void setFieldOfView(qreal fieldOfView);

signals:
void fieldOfViewChanged(qreal fieldOfView);

private:
inline QLightSensorPrivate* d_func() { return reinterpret_cast<QLightSensorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QLightSensorPrivate* d_func() const { return reinterpret_cast<const QLightSensorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QLightSensorPrivate;
QLightSensor(const QLightSensor &) ; QLightSensor &operator=(const QLightSensor &) ;
};





# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qmagnetometer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qmagnetometer.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qmagnetometer.h"


class QMagnetometerReadingPrivate;

class  QMagnetometerReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal x READ x)
Q_PROPERTY(qreal y READ y)
Q_PROPERTY(qreal z READ z)
Q_PROPERTY(qreal calibrationLevel READ calibrationLevel)
public: QMagnetometerReading(QObject *parent = 0); virtual ~QMagnetometerReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QMagnetometerReadingPrivate> d;
public:
qreal x() const;
void setX(qreal x);

qreal y() const;
void setY(qreal y);

qreal z() const;
void setZ(qreal z);

qreal calibrationLevel() const;
void setCalibrationLevel(qreal calibrationLevel);
};

class  QMagnetometerFilter : public QSensorFilter
{
public:
virtual bool filter(QMagnetometerReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class QMagnetometerPrivate;

class  QMagnetometer : public QSensor
{
Q_OBJECT
Q_PROPERTY(bool returnGeoValues READ returnGeoValues WRITE setReturnGeoValues NOTIFY returnGeoValuesChanged)
public:
explicit QMagnetometer(QObject *parent = 0);
virtual ~QMagnetometer();
QMagnetometerReading *reading() const;
static char const * const type;

bool returnGeoValues() const;
void setReturnGeoValues(bool returnGeoValues);

signals:
void returnGeoValuesChanged(bool returnGeoValues);

private:
inline QMagnetometerPrivate* d_func() { return reinterpret_cast<QMagnetometerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QMagnetometerPrivate* d_func() const { return reinterpret_cast<const QMagnetometerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QMagnetometerPrivate;
QMagnetometer(const QMagnetometer &) ; QMagnetometer &operator=(const QMagnetometer &) ;
};





# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qorientationsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qorientationsensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qorientationsensor.h"


class QOrientationReadingPrivate;

class  QOrientationReading : public QSensorReading
{
Q_OBJECT
Q_ENUMS(Orientation)
Q_PROPERTY(Orientation orientation READ orientation)
public: QOrientationReading(QObject *parent = 0); virtual ~QOrientationReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QOrientationReadingPrivate> d;
public:
enum Orientation {
Undefined = 0,
TopUp,
TopDown,
LeftUp,
RightUp,
FaceUp,
FaceDown
};

Orientation orientation() const;
void setOrientation(Orientation orientation);
};

class  QOrientationFilter : public QSensorFilter
{
public:
virtual bool filter(QOrientationReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QOrientationSensor : public QSensor
{
Q_OBJECT
public:
explicit QOrientationSensor(QObject *parent = 0);
virtual ~QOrientationSensor();
QOrientationReading *reading() const;
static char const * const type;

private:
QOrientationSensor(const QOrientationSensor &) ; QOrientationSensor &operator=(const QOrientationSensor &) ;
};





# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qpressuresensor.h"











































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 44 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qpressuresensor.h"


# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qpressuresensor.h"


class QPressureReadingPrivate;

class  QPressureReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal pressure READ pressure)
public: QPressureReading(QObject *parent = 0); virtual ~QPressureReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QPressureReadingPrivate> d;
public:
qreal pressure() const;
void setPressure(qreal pressure);
};

class  QPressureFilter : public QSensorFilter
{
public:
virtual bool filter(QPressureReading *reading) = 0;
private:
bool filter(QSensorReading *reading) ;
};

class  QPressureSensor : public QSensor
{
Q_OBJECT
public:
explicit QPressureSensor(QObject *parent = 0);
~QPressureSensor();
QPressureReading *reading() const;
static char const * const type;

private:
QPressureSensor(const QPressureSensor &) ; QPressureSensor &operator=(const QPressureSensor &) ;
};




# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qproximitysensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qproximitysensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qproximitysensor.h"


class QProximityReadingPrivate;

class  QProximityReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(bool close READ close)
public: QProximityReading(QObject *parent = 0); virtual ~QProximityReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QProximityReadingPrivate> d;
public:
bool close() const;
void setClose(bool close);
};

class  QProximityFilter : public QSensorFilter
{
public:
virtual bool filter(QProximityReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QProximitySensor : public QSensor
{
Q_OBJECT
public:
explicit QProximitySensor(QObject *parent = 0);
virtual ~QProximitySensor();
QProximityReading *reading() const;
static char const * const type;

private:
QProximitySensor(const QProximitySensor &) ; QProximitySensor &operator=(const QProximitySensor &) ;
};





# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qrotationsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qrotationsensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qrotationsensor.h"


class QRotationReadingPrivate;

class  QRotationReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal x READ x)
Q_PROPERTY(qreal y READ y)
Q_PROPERTY(qreal z READ z)
public: QRotationReading(QObject *parent = 0); virtual ~QRotationReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QRotationReadingPrivate> d;
public:
qreal x() const;
qreal y() const;
qreal z() const;

void setFromEuler(qreal x, qreal y, qreal z);
};

class  QRotationFilter : public QSensorFilter
{
public:
virtual bool filter(QRotationReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class QRotationSensorPrivate;

class  QRotationSensor : public QSensor
{
Q_OBJECT
Q_PROPERTY(bool hasZ READ hasZ NOTIFY hasZChanged)
public:
explicit QRotationSensor(QObject *parent = 0);
virtual ~QRotationSensor();
QRotationReading *reading() const;
static char const * const type;

bool hasZ() const;
void setHasZ(bool hasZ);

signals:
void hasZChanged(bool hasZ);

private:
inline QRotationSensorPrivate* d_func() { return reinterpret_cast<QRotationSensorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QRotationSensorPrivate* d_func() const { return reinterpret_cast<const QRotationSensorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QRotationSensorPrivate;
QRotationSensor(const QRotationSensor &) ; QRotationSensor &operator=(const QRotationSensor &) ;
};





# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorbackend.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorbackend.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensormanager.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensormanager.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensormanager.h"


class QSensorBackend;
class QSensorBackendFactory;
class QSensorPluginInterface;

class  QSensorManager
{
public:

static void registerBackend(const QByteArray &type, const QByteArray &identifier, QSensorBackendFactory *factory);
static void unregisterBackend(const QByteArray &type, const QByteArray &identifier);

static bool isBackendRegistered(const QByteArray &type, const QByteArray &identifier);


static QSensorBackend *createBackend(QSensor *sensor);

static void setDefaultBackend(const QByteArray &type, const QByteArray &identifier);
};

class  QSensorBackendFactory
{
public:
virtual QSensorBackend *createBackend(QSensor *sensor) = 0;
protected:
virtual ~QSensorBackendFactory();
};





# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorbackend.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorbackend.h"


class QSensorBackendPrivate;

class  QSensorBackend : public QObject
{
Q_OBJECT
public:
explicit QSensorBackend(QSensor *sensor, QObject *parent = 0);
virtual ~QSensorBackend();

virtual void start() = 0;
virtual void stop() = 0;

virtual bool isFeatureSupported(QSensor::Feature feature) const;


void addDataRate(qreal min, qreal max);
void setDataRates(const QSensor *otherSensor);
void addOutputRange(qreal min, qreal max, qreal accuracy);
void setDescription(const QString &description);

template <typename T>
T *setReading(T *readingClass)
{
if (!readingClass)
readingClass = new T(this);
setReadings(readingClass, new T(this), new T(this));
return readingClass;
}

QSensorReading *reading() const;
QSensor *sensor() const;


void newReadingAvailable();
void sensorStopped();
void sensorBusy();
void sensorError(int error);

private:
void setReadings(QSensorReading *device, QSensorReading *filter, QSensorReading *cache);

inline QSensorBackendPrivate* d_func() { return reinterpret_cast<QSensorBackendPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSensorBackendPrivate* d_func() const { return reinterpret_cast<const QSensorBackendPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSensorBackendPrivate;
QSensorBackend(const QSensorBackend &) ; QSensorBackend &operator=(const QSensorBackend &) ;
};





# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensormanager.h"















































































# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"






























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorplugin.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorplugin.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorplugin.h"


class  QSensorPluginInterface
{
public:
virtual void registerSensors() = 0;
protected:
virtual ~QSensorPluginInterface();
};

class  QSensorChangesInterface
{
public:
virtual void sensorsChanged() = 0;
protected:
virtual ~QSensorChangesInterface();
};

template <> inline const char *qobject_interface_iid<QSensorPluginInterface *>() { return "com.qt-project.Qt.QSensorPluginInterface/1.0"; } template <> inline QSensorPluginInterface *qobject_cast<QSensorPluginInterface *>(QObject *object) { return reinterpret_cast<QSensorPluginInterface *>((object ? object->qt_metacast("com.qt-project.Qt.QSensorPluginInterface/1.0") : 0)); } template <> inline QSensorPluginInterface *qobject_cast<QSensorPluginInterface *>(const QObject *object) { return reinterpret_cast<QSensorPluginInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.qt-project.Qt.QSensorPluginInterface/1.0") : 0)); }
template <> inline const char *qobject_interface_iid<QSensorChangesInterface *>() { return "com.qt-project.Qt.QSensorChangesInterface/5.0"; } template <> inline QSensorChangesInterface *qobject_cast<QSensorChangesInterface *>(QObject *object) { return reinterpret_cast<QSensorChangesInterface *>((object ? object->qt_metacast("com.qt-project.Qt.QSensorChangesInterface/5.0") : 0)); } template <> inline QSensorChangesInterface *qobject_cast<QSensorChangesInterface *>(const QObject *object) { return reinterpret_cast<QSensorChangesInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("com.qt-project.Qt.QSensorChangesInterface/5.0") : 0)); }





# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"






























































# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtapsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtapsensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtapsensor.h"


class QTapReadingPrivate;

class  QTapReading : public QSensorReading
{
Q_OBJECT
Q_ENUMS(TapDirection)
Q_PROPERTY(TapDirection tapDirection READ tapDirection)
Q_PROPERTY(bool doubleTap READ isDoubleTap)
public: QTapReading(QObject *parent = 0); virtual ~QTapReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QTapReadingPrivate> d;
public:
enum TapDirection {
Undefined = 0,
X = 0x0001,
Y = 0x0002,
Z = 0x0004,
X_Pos = 0x0011,
Y_Pos = 0x0022,
Z_Pos = 0x0044,
X_Neg = 0x0101,
Y_Neg = 0x0202,
Z_Neg = 0x0404,
X_Both = 0x0111,
Y_Both = 0x0222,
Z_Both = 0x0444
};

TapDirection tapDirection() const;
void setTapDirection(TapDirection tapDirection);

bool isDoubleTap() const;
void setDoubleTap(bool doubleTap);
};

class  QTapFilter : public QSensorFilter
{
public:
virtual bool filter(QTapReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class QTapSensorPrivate;

class  QTapSensor : public QSensor
{
Q_OBJECT
Q_PROPERTY(bool returnDoubleTapEvents READ returnDoubleTapEvents WRITE setReturnDoubleTapEvents
NOTIFY returnDoubleTapEventsChanged)
public:
explicit QTapSensor(QObject *parent = 0);
virtual ~QTapSensor();
QTapReading *reading() const;
static char const * const type;

bool returnDoubleTapEvents() const;
void setReturnDoubleTapEvents(bool returnDoubleTapEvents);

signals:
void returnDoubleTapEventsChanged(bool returnDoubleTapEvents);

private:
inline QTapSensorPrivate* d_func() { return reinterpret_cast<QTapSensorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QTapSensorPrivate* d_func() const { return reinterpret_cast<const QTapSensorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QTapSensorPrivate;
QTapSensor(const QTapSensor &) ; QTapSensor &operator=(const QTapSensor &) ;
};





# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtiltsensor.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensor.h"




















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtiltsensor.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtiltsensor.h"


class QTiltReadingPrivate;

class  QTiltReading : public QSensorReading
{
Q_OBJECT
Q_PROPERTY(qreal yRotation READ yRotation)
Q_PROPERTY(qreal xRotation READ xRotation)
public: QTiltReading(QObject *parent = 0); virtual ~QTiltReading(); void copyValuesFrom(QSensorReading *other); private: QScopedPointer<QTiltReadingPrivate> d;

public:
qreal yRotation() const;
void setYRotation(qreal y);

qreal xRotation() const;
void setXRotation(qreal x);

};

class  QTiltFilter : public QSensorFilter
{
public:
virtual bool filter(QTiltReading *reading) = 0;
private:
bool filter(QSensorReading *reading);
};

class  QTiltSensor : public QSensor
{
Q_OBJECT
public:
explicit QTiltSensor(QObject *parent = 0);
~QTiltSensor();
QTiltReading *reading() const;
static char const * const type;

Q_INVOKABLE void calibrate();

private:
QTiltSensor(const QTiltSensor &) ; QTiltSensor &operator=(const QTiltSensor &) ;
};



# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QStringList"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorsglobal.h"






























































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QList"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QMap"

# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVector"

# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"


class QSensorGesturePrivate;

class  QSensorGesture : public QObject
{

public:
QSensorGesture(const QStringList &ids, QObject *parent = 0);
~QSensorGesture();

bool isActive();

QStringList validIds() const;
QStringList invalidIds() const;

QStringList gestureSignals() const;

void startDetection();
void stopDetection();

private:
QSensorGesturePrivate * d_ptr;

private:

const QMetaObject *metaObject() const;
int qt_metacall(QMetaObject::Call, int, void **);







# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"
};





# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturemanager.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturemanager.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QStringList"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturemanager.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturemanager.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QDebug"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qtimer.h"























































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QTimer"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QStringList"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"


class QSensorGestureRecognizerPrivate;
class  QSensorGestureRecognizer : public QObject
{
Q_OBJECT
public:
QSensorGestureRecognizer(QObject *parent = 0);
virtual ~QSensorGestureRecognizer();

virtual QString id() const = 0;

virtual bool isActive() = 0;

void startBackend();
void stopBackend();
void createBackend();

QStringList gestureSignals() const;

signals:
void detected(const QString &);

protected:
virtual void create() = 0;
virtual bool start() = 0;
virtual bool stop() = 0;

private:
QSensorGestureRecognizerPrivate * d_ptr;
};




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturemanager.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturemanager.h"


class QSensorGestureManagerPrivate;
class  QSensorGestureManager : public QObject
{
Q_OBJECT
inline QSensorGestureManagerPrivate* d_func() { return reinterpret_cast<QSensorGestureManagerPrivate *>(qGetPtrHelper(d_ptr)); } inline const QSensorGestureManagerPrivate* d_func() const { return reinterpret_cast<const QSensorGestureManagerPrivate *>(qGetPtrHelper(d_ptr)); } friend class QSensorGestureManagerPrivate;

public:
explicit QSensorGestureManager(QObject *parent = 0);

~QSensorGestureManager();

bool registerSensorGestureRecognizer(QSensorGestureRecognizer *recognizer);

QStringList gestureIds() const;
QStringList recognizerSignals(const QString &recognizerId) const;

static QSensorGestureRecognizer *sensorGestureRecognizer(const QString &id);

signals:
void newSensorGestureAvailable();

};





# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtGlobal"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesture.h"































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"





















































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgestureplugininterface.h"


class QSensorGestureRecognizer;

class  QSensorGesturePluginInterface
{
public:
QSensorGesturePluginInterface();
virtual ~QSensorGesturePluginInterface();
virtual QList <QSensorGestureRecognizer *> createRecognizers() = 0;
virtual QStringList supportedIds() const = 0;
virtual QString name() const = 0;
};

template <> inline const char *qobject_interface_iid<QSensorGesturePluginInterface *>() { return "org.qt-project.QSensorGesturePluginInterface"; } template <> inline QSensorGesturePluginInterface *qobject_cast<QSensorGesturePluginInterface *>(QObject *object) { return reinterpret_cast<QSensorGesturePluginInterface *>((object ? object->qt_metacast("org.qt-project.QSensorGesturePluginInterface") : 0)); } template <> inline QSensorGesturePluginInterface *qobject_cast<QSensorGesturePluginInterface *>(const QObject *object) { return reinterpret_cast<QSensorGesturePluginInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.QSensorGesturePluginInterface") : 0)); }




# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qsensorgesturerecognizer.h"





















































































# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/qtsensorsversion.h"









# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtSensors/QtSensors"


# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"





































# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"

































































































































# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuickDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuickDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuickDepends"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQmlDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQmlDepends"





































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQmlDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"


# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmldebug.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmldebug.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmldebug.h"



struct  QQmlDebuggingEnabler
{
QQmlDebuggingEnabler(bool printWarning = true);
};








# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmldebug.h"



# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"












































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"











# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 56 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"


# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"



typedef QObject *(*QQmlAttachedPropertiesFunc)(QObject *);

template <typename TYPE>
class QQmlTypeInfo
{
public:
enum {
hasAttachedProperties = 0
};
};


class QJSValue;
class QJSEngine;
class QQmlEngine;
class QQmlCustomParser;
namespace QQmlPrivate
{
void  qdeclarativeelement_destructor(QObject *);
template<typename T>
class QQmlElement : public T
{
public:
virtual ~QQmlElement() { 
QQmlPrivate::qdeclarativeelement_destructor(this); 
}
};

template<typename T>
void createInto(void *memory) { new (memory) QQmlElement<T>; }

template<typename T>
QObject *createParent(QObject *p) { return new T(p); }

template<class From, class To, int N>
struct StaticCastSelectorClass
{
static inline int cast() { return -1; }
};

template<class From, class To>
struct StaticCastSelectorClass<From, To, sizeof(int)>
{
static inline int cast() { return int(reinterpret_cast<quintptr>(static_cast<To *>(reinterpret_cast<From *>(0x10000000)))) - 0x10000000; }
};

template<class From, class To>
struct StaticCastSelector
{
typedef int yes_type;
typedef char no_type;

static yes_type check(To *);
static no_type check(...);

static inline int cast()
{
return StaticCastSelectorClass<From, To, sizeof(check(reinterpret_cast<From *>(0)))>::cast();
}
};

template <typename T>
struct has_attachedPropertiesMember
{
static bool const value = QQmlTypeInfo<T>::hasAttachedProperties;
};

template <typename T, bool hasMember>
class has_attachedPropertiesMethod 
{
public:
typedef int yes_type;
typedef char no_type;

template<typename ReturnType>
static yes_type check(ReturnType *(*)(QObject *));
static no_type check(...);

static bool const value = sizeof(check(&T::qmlAttachedProperties)) == sizeof(yes_type);
}; 

template <typename T>
class has_attachedPropertiesMethod<T, false>
{
public:
static bool const value = false;
};

template<typename T, int N>
class AttachedPropertySelector
{
public:
static inline QQmlAttachedPropertiesFunc func() { return 0; }
static inline const QMetaObject *metaObject() { return 0; }
};
template<typename T>
class AttachedPropertySelector<T, 1>
{
static inline QObject *attachedProperties(QObject *obj) {
return T::qmlAttachedProperties(obj);
}
template<typename ReturnType>
static inline const QMetaObject *attachedPropertiesMetaObject(ReturnType *(*)(QObject *)) {
return &ReturnType::staticMetaObject;
}
public:
static inline QQmlAttachedPropertiesFunc func() {
return &attachedProperties;
}
static inline const QMetaObject *metaObject() {
return attachedPropertiesMetaObject(&T::qmlAttachedProperties);
}
};

template<typename T>
inline QQmlAttachedPropertiesFunc attachedPropertiesFunc()
{
return AttachedPropertySelector<T, has_attachedPropertiesMethod<T, has_attachedPropertiesMember<T>::value>::value>::func();
}

template<typename T>
inline const QMetaObject *attachedPropertiesMetaObject()
{
return AttachedPropertySelector<T, has_attachedPropertiesMethod<T, has_attachedPropertiesMember<T>::value>::value>::metaObject();
}

enum AutoParentResult { Parented, IncompatibleObject, IncompatibleParent };
typedef AutoParentResult (*AutoParentFunction)(QObject *object, QObject *parent);

struct RegisterType {
int version;

int typeId;
int listId;
int objectSize;
void (*create)(void *);
QString noCreationReason;

const char *uri;
int versionMajor;
int versionMinor;
const char *elementName;
const QMetaObject *metaObject;

QQmlAttachedPropertiesFunc attachedPropertiesFunction;
const QMetaObject *attachedPropertiesMetaObject;

int parserStatusCast;
int valueSourceCast;
int valueInterceptorCast;

QObject *(*extensionObjectCreate)(QObject *);
const QMetaObject *extensionMetaObject;

QQmlCustomParser *customParser;
int revision;

};

struct RegisterInterface {
int version;

int typeId;
int listId;

const char *iid;
};

struct RegisterAutoParent {
int version;

AutoParentFunction function;
};

struct RegisterSingletonType {
int version;

const char *uri;
int versionMajor;
int versionMinor;
const char *typeName;

QJSValue (*scriptApi)(QQmlEngine *, QJSEngine *);
QObject *(*qobjectApi)(QQmlEngine *, QJSEngine *);
const QMetaObject *instanceMetaObject; 
int typeId; 
int revision; 

};

struct RegisterCompositeType {
QUrl url;
const char *uri;
int versionMajor;
int versionMinor;
const char *typeName;
};

enum RegistrationType {
TypeRegistration = 0,
InterfaceRegistration = 1,
AutoParentRegistration = 2,
SingletonRegistration = 3,
CompositeRegistration = 4
};

int  qmlregister(RegistrationType, void *);
}




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlparserstatus.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlparserstatus.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlparserstatus.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlparserstatus.h"



class  QQmlParserStatus
{
public:
QQmlParserStatus();
virtual ~QQmlParserStatus();

virtual void classBegin()=0;
virtual void componentComplete()=0;

private:
friend class QQmlVME;
friend class QQmlComponent;
friend class QQmlComponentPrivate;
friend class QQmlEnginePrivate;
QQmlParserStatus **d;
};


# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlparserstatus.h"
template <> inline const char *qobject_interface_iid<QQmlParserStatus *>() { return "org.qt-project.Qt.QQmlParserStatus"; } template <> inline QQmlParserStatus *qobject_cast<QQmlParserStatus *>(QObject *object) { return reinterpret_cast<QQmlParserStatus *>((object ? object->qt_metacast("org.qt-project.Qt.QQmlParserStatus") : 0)); } template <> inline QQmlParserStatus *qobject_cast<QQmlParserStatus *>(const QObject *object) { return reinterpret_cast<QQmlParserStatus *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QQmlParserStatus") : 0)); }




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertyvaluesource.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertyvaluesource.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertyvaluesource.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertyvaluesource.h"



class QQmlProperty;
class  QQmlPropertyValueSource
{
public:
QQmlPropertyValueSource();
virtual ~QQmlPropertyValueSource();
virtual void setTarget(const QQmlProperty &) = 0;
};



# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertyvaluesource.h"
template <> inline const char *qobject_interface_iid<QQmlPropertyValueSource *>() { return "org.qt-project.Qt.QQmlPropertyValueSource"; } template <> inline QQmlPropertyValueSource *qobject_cast<QQmlPropertyValueSource *>(QObject *object) { return reinterpret_cast<QQmlPropertyValueSource *>((object ? object->qt_metacast("org.qt-project.Qt.QQmlPropertyValueSource") : 0)); } template <> inline QQmlPropertyValueSource *qobject_cast<QQmlPropertyValueSource *>(const QObject *object) { return reinterpret_cast<QQmlPropertyValueSource *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QQmlPropertyValueSource") : 0)); }




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"



class QObject;
struct QMetaObject;



# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"
template<typename T>
class QQmlListProperty {
public:
typedef void (*AppendFunction)(QQmlListProperty<T> *, T*);
typedef int (*CountFunction)(QQmlListProperty<T> *);
typedef T *(*AtFunction)(QQmlListProperty<T> *, int);
typedef void (*ClearFunction)(QQmlListProperty<T> *);

QQmlListProperty()
: object(0), data(0), append(0), count(0), at(0), clear(0), dummy1(0), dummy2(0) {}
QQmlListProperty(QObject *o, QList<T *> &list)
: object(o), data(&list), append(qlist_append), count(qlist_count), at(qlist_at),
clear(qlist_clear), dummy1(0), dummy2(0) {}
QQmlListProperty(QObject *o, void *d, AppendFunction a, CountFunction c, AtFunction t,
ClearFunction r )
: object(o), data(d), append(a), count(c), at(t), clear(r), dummy1(0), dummy2(0) {}
QQmlListProperty(QObject *o, void *d, CountFunction c, AtFunction t)
: object(o), data(d), append(0), count(c), at(t), clear(0), dummy1(0), dummy2(0) {}
bool operator==(const QQmlListProperty &o) const {
return object == o.object &&
data == o.data &&
append == o.append &&
count == o.count &&
at == o.at &&
clear == o.clear;
}

QObject *object;
void *data;

AppendFunction append;

CountFunction count;
AtFunction at;

ClearFunction clear;

void *dummy1;
void *dummy2;

private:
static void qlist_append(QQmlListProperty *p, T *v) {
reinterpret_cast<QList<T *> *>(p->data)->append(v);
}
static int qlist_count(QQmlListProperty *p) {
return reinterpret_cast<QList<T *> *>(p->data)->count();
}
static T *qlist_at(QQmlListProperty *p, int idx) {
return reinterpret_cast<QList<T *> *>(p->data)->at(idx);
}
static void qlist_clear(QQmlListProperty *p) {
return reinterpret_cast<QList<T *> *>(p->data)->clear();
}
};


# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"
class QQmlEngine;
class QQmlListReferencePrivate;
class  QQmlListReference
{
public:
QQmlListReference();
QQmlListReference(QObject *, const char *property, QQmlEngine * = 0);
QQmlListReference(const QQmlListReference &);
QQmlListReference &operator=(const QQmlListReference &);
~QQmlListReference();

bool isValid() const;

QObject *object() const;
const QMetaObject *listElementType() const;

bool canAppend() const;
bool canAt() const;
bool canClear() const;
bool canCount() const;

bool isManipulable() const;
bool isReadable() const;

bool append(QObject *) const;
QObject *at(int) const;
bool clear() const;
int count() const;

private:
friend class QQmlListReferencePrivate;
QQmlListReferencePrivate* d;
};



 template <> struct QMetaTypeId< QQmlListReference > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlListReference >("QQmlListReference", reinterpret_cast< QQmlListReference *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qbytearray.h"
























































































































































































































































































































































































































































































































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"



















































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"













# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"
enum { 
QML_HAS_ATTACHED_PROPERTIES = 0x01
};



# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"



class QQmlPropertyValueInterceptor;



# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"
void  qmlClearTypeRegistrations();

template<typename T>
int qmlRegisterType()
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
0, 

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
0, 0,
QString(),

0, 0, 0, 0, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(), 
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

0,
0
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

int  qmlRegisterTypeNotAvailable(const char *uri, int versionMajor, int versionMinor, const char *qmlName, const QString& message);

template<typename T>
int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMinor, const char *qmlName, const QString& reason)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
0,

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
0, 0,
reason,

uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

0,
0
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

template<typename T, int metaObjectRevision>
int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMinor, const char *qmlName, const QString& reason)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
1,

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
0, 0,
reason,

uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

0,
metaObjectRevision
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

template<typename T>
int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const char *qmlName)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
0, 

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
sizeof(T), QQmlPrivate::createInto<T>,
QString(),

uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(), 
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

0,
0
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

template<typename T, int metaObjectRevision>
int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const char *qmlName)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
1,

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
sizeof(T), QQmlPrivate::createInto<T>,
QString(),

uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

0,
metaObjectRevision
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

template<typename T, int metaObjectRevision>
int qmlRegisterRevision(const char *uri, int versionMajor, int versionMinor)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
1,

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
sizeof(T), QQmlPrivate::createInto<T>,
QString(),

uri, versionMajor, versionMinor, 0, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

0,
metaObjectRevision
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}


template<typename T, typename E>
int qmlRegisterExtendedType()
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
0, 

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
0, 0,
QString(),

0, 0, 0, 0, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(), 
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

QQmlPrivate::createParent<E>, &E::staticMetaObject,

0,
0
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

template<typename T, typename E>
int qmlRegisterExtendedType(const char *uri, int versionMajor, int versionMinor, 
const char *qmlName)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlAttachedPropertiesFunc attached = QQmlPrivate::attachedPropertiesFunc<E>();
const QMetaObject * attachedMetaObject = QQmlPrivate::attachedPropertiesMetaObject<E>(); 
if (!attached) {
attached = QQmlPrivate::attachedPropertiesFunc<T>();
attachedMetaObject = QQmlPrivate::attachedPropertiesMetaObject<T>();
}

QQmlPrivate::RegisterType type = {
0, 

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
sizeof(T), QQmlPrivate::createInto<T>,
QString(),

uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,

attached,
attachedMetaObject,

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(), 
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

QQmlPrivate::createParent<E>, &E::staticMetaObject,

0,
0
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

template<typename T>
int qmlRegisterInterface(const char *typeName)
{
QByteArray name(typeName);

QByteArray pointerName(name + '*');
QByteArray listName("QQmlListProperty<" + name + '>');

QQmlPrivate::RegisterInterface qmlInterface = {
0,

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),

qobject_interface_iid<T *>()
};

return QQmlPrivate::qmlregister(QQmlPrivate::InterfaceRegistration, &qmlInterface);
}

template<typename T>
int qmlRegisterCustomType(const char *uri, int versionMajor, int versionMinor, 
const char *qmlName, QQmlCustomParser *parser)
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterType type = {
0, 

qRegisterNormalizedMetaType<T *>(pointerName.constData()),
qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
sizeof(T), QQmlPrivate::createInto<T>,
QString(),

uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,

QQmlPrivate::attachedPropertiesFunc<T>(),
QQmlPrivate::attachedPropertiesMetaObject<T>(),

QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(), 
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),

0, 0,

parser,
0
};

return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
}

class QQmlContext;
class QQmlEngine;
class QJSValue;
class QJSEngine;

namespace QtQml {

 void qmlExecuteDeferred(QObject *);
 QQmlContext *qmlContext(const QObject *);
 QQmlEngine *qmlEngine(const QObject *);
 QObject *qmlAttachedPropertiesObjectById(int, const QObject *, bool create = true);
 QObject *qmlAttachedPropertiesObject(int *, const QObject *,
const QMetaObject *, bool create);
}
using namespace QtQml;

template<typename T>
QObject *qmlAttachedPropertiesObject(const QObject *obj, bool create = true)
{
static int idx = -1;
return qmlAttachedPropertiesObject(&idx, obj, &T::staticMetaObject, create);
}

 void qmlRegisterBaseTypes(const char *uri, int versionMajor, int versionMinor);

inline int qmlRegisterSingletonType(const char *uri, int versionMajor, int versionMinor, const char *typeName,
QJSValue (*callback)(QQmlEngine *, QJSEngine *))
{
QQmlPrivate::RegisterSingletonType api = {
0,

uri, versionMajor, versionMinor, typeName,

callback, 0, 0, 0, 0
};

return QQmlPrivate::qmlregister(QQmlPrivate::SingletonRegistration, &api);
}

static const int CurrentSingletonTypeRegistrationVersion = 2;
template <typename T>
inline int qmlRegisterSingletonType(const char *uri, int versionMajor, int versionMinor, const char *typeName,
QObject *(*callback)(QQmlEngine *, QJSEngine *))
{
const char *className = T::staticMetaObject.className(); const int nameLen = int(strlen(className)); QVarLengthArray<char,48> pointerName(nameLen+2); memcpy(pointerName.data(), className, nameLen); pointerName[nameLen] = '*'; pointerName[nameLen+1] = '\0'; const int listLen = int(strlen("QQmlListProperty<")); QVarLengthArray<char,64> listName(listLen + nameLen + 2); memcpy(listName.data(), "QQmlListProperty<", listLen); memcpy(listName.data()+listLen, className, nameLen); listName[listLen+nameLen] = '>'; listName[listLen+nameLen+1] = '\0';

QQmlPrivate::RegisterSingletonType api = {
CurrentSingletonTypeRegistrationVersion,

uri, versionMajor, versionMinor, typeName,

0, callback, &T::staticMetaObject, qRegisterNormalizedMetaType<T *>(pointerName.constData()), 0
};

return QQmlPrivate::qmlregister(QQmlPrivate::SingletonRegistration, &api);
}


inline int qmlRegisterType(const QUrl &url, const char *uri, int versionMajor, int versionMinor, const char *qmlName)
{
if (url.isRelative()) { 

QMessageLogger("/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h", 104, "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h" ":" "104").warning("qmlRegisterType requires absolute URLs.");
return 0;
}

QQmlPrivate::RegisterCompositeType type = {
url,
uri,
versionMajor,
versionMinor,
qmlName
};

return QQmlPrivate::qmlregister(QQmlPrivate::CompositeRegistration, &type);
}



 template <> struct QMetaTypeId< QObject * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QObject * >("QObject *", reinterpret_cast< QObject * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };   template <> struct QMetaTypeId< QQmlListProperty<QObject> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlListProperty<QObject> >("QQmlListProperty<QObject>", reinterpret_cast< QQmlListProperty<QObject> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  
 template <> struct QMetaTypeId< QVariant > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QVariant >("QVariant", reinterpret_cast< QVariant *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlapplicationengine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"



class QJSValue;
class QJSEngine;
class QVariant;
class QObject;
struct QMetaObject;
class QDateTime;

typedef QList<QJSValue> QJSValueList;

class QJSValuePrivate;
struct QScriptValuePrivatePointerDeleter;
template <class T> class QScriptPassPointer;

class  QJSValue
{
public:
enum SpecialValue {
NullValue,
UndefinedValue
};

public:
QJSValue(SpecialValue value = UndefinedValue);
~QJSValue();
QJSValue(const QJSValue &other);

QJSValue(bool value);
QJSValue(int value);
QJSValue(uint value);
QJSValue(double value);
QJSValue(const QString &value);
QJSValue(const QLatin1String &value);

# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"
 QJSValue(const char *str);


# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"
QJSValue &operator=(const QJSValue &other);

bool isBool() const;
bool isNumber() const;
bool isNull() const;
bool isString() const;
bool isUndefined() const;
bool isVariant() const;
bool isQObject() const;
bool isObject() const;
bool isDate() const;
bool isRegExp() const;
bool isArray() const;
bool isError() const;

QString toString() const;
double toNumber() const;
qint32 toInt() const;
quint32 toUInt() const;
bool toBool() const;
QVariant toVariant() const;
QObject *toQObject() const;
QDateTime toDateTime() const;

bool equals(const QJSValue &other) const;
bool strictlyEquals(const QJSValue &other) const;

QJSValue prototype() const;
void setPrototype(const QJSValue &prototype);

QJSValue property(const QString &name) const;
void setProperty(const QString &name, const QJSValue &value);

bool hasProperty(const QString &name) const;
bool hasOwnProperty(const QString &name) const;

QJSValue property(quint32 arrayIndex) const;
void setProperty(quint32 arrayIndex, const QJSValue &value);

bool deleteProperty(const QString &name);

bool isCallable() const;
QJSValue call(const QJSValueList &args = QJSValueList());
QJSValue callWithInstance(const QJSValue &instance, const QJSValueList &args = QJSValueList());
QJSValue callAsConstructor(const QJSValueList &args = QJSValueList());


# 137 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"
 QJSEngine *engine() const;


# 140 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"
private:


QJSValue(void *) ;

QJSValue(QJSValuePrivate*);
QJSValue(QScriptPassPointer<QJSValuePrivate>);

private:
QExplicitlySharedDataPointer<QJSValuePrivate> d_ptr;

inline QJSValuePrivate* d_func() { return reinterpret_cast<QJSValuePrivate *>(qGetPtrHelper(d_ptr)); } inline const QJSValuePrivate* d_func() const { return reinterpret_cast<const QJSValuePrivate *>(qGetPtrHelper(d_ptr)); } friend class QJSValuePrivate;
};



 template <> struct QMetaTypeId< QJSValue > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QJSValue >("QJSValue", reinterpret_cast< QJSValue *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"



class QV8Engine;

template <typename T>
inline T qjsvalue_cast(const QJSValue &);

class QJSEnginePrivate;
class  QJSEngine
: public QObject
{
Q_OBJECT
public:
QJSEngine();
explicit QJSEngine(QObject *parent);
virtual ~QJSEngine();

QJSValue globalObject() const;

QJSValue evaluate(const QString &program, const QString &fileName = QString(), int lineNumber = 1);

QJSValue newObject();
QJSValue newArray(uint length = 0);

QJSValue newQObject(QObject *object);

template <typename T>
inline QJSValue toScriptValue(const T &value)
{
return create(qMetaTypeId<T>(), &value);
}
template <typename T>
inline T fromScriptValue(const QJSValue &value)
{
return qjsvalue_cast<T>(value);
}

void collectGarbage();

QV8Engine *handle() const { return d; }

private:
QJSValue create(int type, const void *ptr);

static bool convertV2(const QJSValue &value, int type, void *ptr);

friend inline bool qjsvalue_cast_helper(const QJSValue &, int, void *);

protected:
QJSEngine(QJSEnginePrivate &dd, QObject *parent = 0);

private:
QV8Engine *d;
QJSEngine(const QJSEngine &) ; QJSEngine &operator=(const QJSEngine &) ;
inline QJSEnginePrivate* d_func() { return reinterpret_cast<QJSEnginePrivate *>(qGetPtrHelper(d_ptr)); } inline const QJSEnginePrivate* d_func() const { return reinterpret_cast<const QJSEnginePrivate *>(qGetPtrHelper(d_ptr)); } friend class QJSEnginePrivate;
friend class QV8Engine;
};

inline bool qjsvalue_cast_helper(const QJSValue &value, int type, void *ptr)
{
return QJSEngine::convertV2(value, type, ptr);
}

template<typename T>
T qjsvalue_cast(const QJSValue &value)
{
T t;
const int id = qMetaTypeId<T>();

if (qjsvalue_cast_helper(value, id, &t))
return t;
else if (value.isVariant())
return qvariant_cast<T>(value.toVariant());

return T();
}

template <>
inline QVariant qjsvalue_cast<QVariant>(const QJSValue &value)
{
return value.toVariant();
}




# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"



class QDebug;
class QQmlErrorPrivate;
class  QQmlError
{
public:
QQmlError();
QQmlError(const QQmlError &);
QQmlError &operator=(const QQmlError &);
~QQmlError();

bool isValid() const;

QUrl url() const;
void setUrl(const QUrl &);
QString description() const;
void setDescription(const QString &);
int line() const;
void setLine(int);
int column() const;
void setColumn(int);

QString toString() const;
private:
QQmlErrorPrivate *d;
};

QDebug  operator<<(QDebug debug, const QQmlError &error);

template<> class QTypeInfo<QQmlError > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QQmlError)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QQmlError) }; static inline const char *name() { return "QQmlError"; } };




# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmldebug.h"
































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"


class QQmlAbstractUrlInterceptor;

class  QQmlImageProviderBase
{
public:
enum ImageType {
Image,
Pixmap,
Texture,
Invalid
};

enum Flag {
ForceAsynchronousImageLoading = 0x01
};
typedef QFlags<Flag> Flags;

virtual ~QQmlImageProviderBase();

virtual ImageType imageType() const = 0;
virtual Flags flags() const = 0;

private:
friend class QQuickImageProvider;
QQmlImageProviderBase();
};
 inline QFlags<QQmlImageProviderBase::Flags::enum_type> operator|(QQmlImageProviderBase::Flags::enum_type f1, QQmlImageProviderBase::Flags::enum_type f2) { return QFlags<QQmlImageProviderBase::Flags::enum_type>(f1) | f2; }  inline QFlags<QQmlImageProviderBase::Flags::enum_type> operator|(QQmlImageProviderBase::Flags::enum_type f1, QFlags<QQmlImageProviderBase::Flags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QQmlImageProviderBase::Flags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class QQmlComponent;
class QQmlEnginePrivate;
class QQmlImportsPrivate;
class QQmlExpression;
class QQmlContext;
class QQmlType;
class QUrl;
class QScriptContext;
class QNetworkAccessManager;
class QQmlNetworkAccessManagerFactory;
class QQmlIncubationController;
class  QQmlEngine : public QJSEngine
{
Q_PROPERTY(QString offlineStoragePath READ offlineStoragePath WRITE setOfflineStoragePath)
Q_OBJECT
public:
QQmlEngine(QObject *p = 0);
virtual ~QQmlEngine();

QQmlContext *rootContext() const;

void clearComponentCache();
void trimComponentCache();

QStringList importPathList() const;
void setImportPathList(const QStringList &paths);
void addImportPath(const QString& dir);

QStringList pluginPathList() const;
void setPluginPathList(const QStringList &paths);
void addPluginPath(const QString& dir);

bool addNamedBundle(const QString &name, const QString &fileName);

bool importPlugin(const QString &filePath, const QString &uri, QList<QQmlError> *errors);

void setNetworkAccessManagerFactory(QQmlNetworkAccessManagerFactory *);
QQmlNetworkAccessManagerFactory *networkAccessManagerFactory() const;

QNetworkAccessManager *networkAccessManager() const;

void setUrlInterceptor(QQmlAbstractUrlInterceptor* urlInterceptor);
QQmlAbstractUrlInterceptor* urlInterceptor() const;

void addImageProvider(const QString &id, QQmlImageProviderBase *);
QQmlImageProviderBase *imageProvider(const QString &id) const;
void removeImageProvider(const QString &id);

void setIncubationController(QQmlIncubationController *);
QQmlIncubationController *incubationController() const;

void setOfflineStoragePath(const QString& dir);
QString offlineStoragePath() const;

QUrl baseUrl() const;
void setBaseUrl(const QUrl &);

bool outputWarningsToStandardError() const;
void setOutputWarningsToStandardError(bool);

static QQmlContext *contextForObject(const QObject *);
static void setContextForObject(QObject *, QQmlContext *);

enum ObjectOwnership { CppOwnership, JavaScriptOwnership };
static void setObjectOwnership(QObject *, ObjectOwnership);
static ObjectOwnership objectOwnership(QObject *);
protected:
QQmlEngine(QQmlEnginePrivate &dd, QObject *p);
virtual bool event(QEvent *);

signals:
void quit();
void warnings(const QList<QQmlError> &warnings);

private:
QQmlEngine(const QQmlEngine &) ; QQmlEngine &operator=(const QQmlEngine &) ;
inline QQmlEnginePrivate* d_func() { return reinterpret_cast<QQmlEnginePrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlEnginePrivate* d_func() const { return reinterpret_cast<const QQmlEnginePrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlEnginePrivate;
};




# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlapplicationengine.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlapplicationengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlapplicationengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlapplicationengine.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlapplicationengine.h"


class QQmlApplicationEnginePrivate;
class  QQmlApplicationEngine : public QQmlEngine
{
Q_OBJECT
public:
QQmlApplicationEngine(QObject *parent=0);
QQmlApplicationEngine(const QUrl &url, QObject *parent=0);
QQmlApplicationEngine(const QString &filePath, QObject *parent=0);
~QQmlApplicationEngine();

QList<QObject*> rootObjects();
public slots:
void load(const QUrl &url);
void load(const QString &filePath);
void loadData(const QByteArray &data, const QUrl &url = QUrl());

signals:
void objectCreated(QObject *object, const QUrl &url);

private:
QQmlApplicationEngine(const QQmlApplicationEngine &) ; QQmlApplicationEngine &operator=(const QQmlApplicationEngine &) ;
inline QQmlApplicationEnginePrivate* d_func() { return reinterpret_cast<QQmlApplicationEnginePrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlApplicationEnginePrivate* d_func() const { return reinterpret_cast<const QQmlApplicationEnginePrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlApplicationEnginePrivate;

};




# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"
























































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"





















































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"






























































































































































# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"



class QByteArray;
class QQmlEngine;
class QQmlComponent;
class QQmlIncubator;
class QQmlV8Function;
class QQmlCompiledData;
class QQmlComponentPrivate;
class QQmlComponentAttached;

class  QQmlComponent : public QObject
{
Q_OBJECT
inline QQmlComponentPrivate* d_func() { return reinterpret_cast<QQmlComponentPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlComponentPrivate* d_func() const { return reinterpret_cast<const QQmlComponentPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlComponentPrivate;

Q_PROPERTY(qreal progress READ progress NOTIFY progressChanged)
Q_PROPERTY(Status status READ status NOTIFY statusChanged)
Q_PROPERTY(QUrl url READ url CONSTANT)

public:
Q_ENUMS(CompilationMode)
enum CompilationMode { PreferSynchronous, Asynchronous };

QQmlComponent(QObject *parent = 0);
QQmlComponent(QQmlEngine *, QObject *parent=0);
QQmlComponent(QQmlEngine *, const QString &fileName, QObject *parent = 0);
QQmlComponent(QQmlEngine *, const QString &fileName, CompilationMode mode, QObject *parent = 0);
QQmlComponent(QQmlEngine *, const QUrl &url, QObject *parent = 0);
QQmlComponent(QQmlEngine *, const QUrl &url, CompilationMode mode, QObject *parent = 0);
virtual ~QQmlComponent();

Q_ENUMS(Status)
enum Status { Null, Ready, Loading, Error };
Status status() const;

bool isNull() const;
bool isReady() const;
bool isError() const;
bool isLoading() const;

QList<QQmlError> errors() const;
Q_INVOKABLE QString errorString() const;

qreal progress() const;

QUrl url() const;

virtual QObject *create(QQmlContext *context = 0);
virtual QObject *beginCreate(QQmlContext *);
virtual void completeCreate();

void create(QQmlIncubator &, QQmlContext *context = 0,
QQmlContext *forContext = 0);

QQmlContext *creationContext() const;

static QQmlComponentAttached *qmlAttachedProperties(QObject *);

public slots:
void loadUrl(const QUrl &url);
void loadUrl(const QUrl &url, CompilationMode mode);
void setData(const QByteArray &, const QUrl &baseUrl);

signals:
void statusChanged(QQmlComponent::Status);
void progressChanged(qreal);

protected:
QQmlComponent(QQmlComponentPrivate &dd, QObject* parent);
Q_INVOKABLE void createObject(QQmlV8Function *);
Q_INVOKABLE void incubateObject(QQmlV8Function *);

private:
QQmlComponent(QQmlEngine *, QQmlCompiledData *, int, QObject *parent);

QQmlComponent(const QQmlComponent &) ; QQmlComponent &operator=(const QQmlComponent &) ;
friend class QQmlVME;
friend class QQmlTypeData;
};



 template <> struct QMetaTypeId< QQmlComponent::Status > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlComponent::Status >("QQmlComponent::Status", reinterpret_cast< QQmlComponent::Status *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QQmlComponent * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlComponent * >("QQmlComponent *", reinterpret_cast< QQmlComponent * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };   template <> struct QMetaTypeId< QQmlListProperty<QQmlComponent> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlListProperty<QQmlComponent> >("QQmlListProperty<QQmlComponent>", reinterpret_cast< QQmlListProperty<QQmlComponent> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  
 template <> class QQmlTypeInfo<QQmlComponent > { public: enum { hasAttachedProperties = (((QML_HAS_ATTACHED_PROPERTIES) & QML_HAS_ATTACHED_PROPERTIES) == QML_HAS_ATTACHED_PROPERTIES) }; }; 


# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"






























































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcontext.h"



class QString;
class QQmlEngine;
class QQmlRefCount;
class QQmlContextPrivate;
class QQmlCompositeTypeData;
class QQmlContextData;

class  QQmlContext : public QObject
{
Q_OBJECT
inline QQmlContextPrivate* d_func() { return reinterpret_cast<QQmlContextPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlContextPrivate* d_func() const { return reinterpret_cast<const QQmlContextPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlContextPrivate;

public:
QQmlContext(QQmlEngine *parent, QObject *objParent=0);
QQmlContext(QQmlContext *parent, QObject *objParent=0);
virtual ~QQmlContext();

bool isValid() const;

QQmlEngine *engine() const;
QQmlContext *parentContext() const;

QObject *contextObject() const;
void setContextObject(QObject *);

QVariant contextProperty(const QString &) const;
void setContextProperty(const QString &, QObject *);
void setContextProperty(const QString &, const QVariant &);

QString nameForObject(QObject *) const;

QUrl resolvedUrl(const QUrl &);

void setBaseUrl(const QUrl &);
QUrl baseUrl() const;

private:
friend class QQmlVME;
friend class QQmlEngine;
friend class QQmlEnginePrivate;
friend class QQmlExpression;
friend class QQmlExpressionPrivate;
friend class QQmlComponent;
friend class QQmlComponentPrivate;
friend class QQmlScriptPrivate;
friend class QQmlContextData;
QQmlContext(QQmlContextData *);
QQmlContext(QQmlEngine *, bool);
QQmlContext(const QQmlContext &) ; QQmlContext &operator=(const QQmlContext &) ;
};


 template <> struct QMetaTypeId< QList<QObject*> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QList<QObject*> >("QList<QObject*>", reinterpret_cast< QList<QObject*> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 


# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"



































































































































































# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"





















































































# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlexpression.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"





















































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlexpression.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qshareddata.h"


























































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"



class QObject;
class QQmlContext;
class QQmlScriptStringPrivate;
class  QQmlScriptString 
{
public:
QQmlScriptString();
QQmlScriptString(const QQmlScriptString &);
~QQmlScriptString();

QQmlScriptString &operator=(const QQmlScriptString &);

bool isEmpty() const;

bool isUndefinedLiteral() const;
bool isNullLiteral() const;
QString stringLiteral() const;
qreal numberLiteral(bool *ok) const;
bool booleanLiteral(bool *ok) const;

private:
QQmlScriptString(const QString &script, QQmlContext *context, QObject *scope);
QSharedDataPointer<QQmlScriptStringPrivate> d;

friend class QQmlScriptStringPrivate;
friend class QQmlVME;
friend class QQmlExpression;
friend class QQmlBinding;
};



 template <> struct QMetaTypeId< QQmlScriptString > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlScriptString >("QQmlScriptString", reinterpret_cast< QQmlScriptString *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlexpression.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlexpression.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlexpression.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlexpression.h"



class QString;
class QQmlRefCount;
class QQmlEngine;
class QQmlContext;
class QQmlExpressionPrivate;
class QQmlContextData;
class  QQmlExpression : public QObject
{
Q_OBJECT
public:
QQmlExpression();
QQmlExpression(QQmlContext *, QObject *, const QString &, QObject * = 0);
explicit QQmlExpression(const QQmlScriptString &, QQmlContext * = 0, QObject * = 0, QObject * = 0);
virtual ~QQmlExpression();

QQmlEngine *engine() const;
QQmlContext *context() const;

QString expression() const;
void setExpression(const QString &);

bool notifyOnValueChanged() const;
void setNotifyOnValueChanged(bool);

QString sourceFile() const;
int lineNumber() const;
int columnNumber() const;
void setSourceLocation(const QString &fileName, int line, int column = 0);

QObject *scopeObject() const;

bool hasError() const;
void clearError();
QQmlError error() const;

QVariant evaluate(bool *valueIsUndefined = 0);

signals:
void valueChanged();

protected:
QQmlExpression(QQmlContextData *, QObject *, const QString &,
QQmlExpressionPrivate &dd);
QQmlExpression(QQmlContextData *, QObject *, const QString &, bool,
const QString &, int, int, QQmlExpressionPrivate &dd);
QQmlExpression(QQmlContextData *, QObject *, const QByteArray &, bool,
const QString &, int, int, QQmlExpressionPrivate &dd);

private:
QQmlExpression(QQmlContextData *, QObject *, const QString &);

QQmlExpression(const QQmlExpression &) ; QQmlExpression &operator=(const QQmlExpression &) ;
inline QQmlExpressionPrivate* d_func() { return reinterpret_cast<QQmlExpressionPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlExpressionPrivate* d_func() const { return reinterpret_cast<const QQmlExpressionPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlExpressionPrivate;
friend class QQmlDebugger;
friend class QQmlContext;
friend class QQmlVME;
};





# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"



class QQmlEngine;

class  QQmlTypesExtensionInterface
{
public:
virtual ~QQmlTypesExtensionInterface() {}
virtual void registerTypes(const char *uri) = 0;
};

class  QQmlExtensionInterface : public QQmlTypesExtensionInterface
{
public:
virtual ~QQmlExtensionInterface() {}
virtual void initializeEngine(QQmlEngine *engine, const char *uri) = 0;
};



# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"
template <> inline const char *qobject_interface_iid<QQmlTypesExtensionInterface *>() { return "org.qt-project.Qt.QQmlTypesExtensionInterface/1.0"; } template <> inline QQmlTypesExtensionInterface *qobject_cast<QQmlTypesExtensionInterface *>(QObject *object) { return reinterpret_cast<QQmlTypesExtensionInterface *>((object ? object->qt_metacast("org.qt-project.Qt.QQmlTypesExtensionInterface/1.0") : 0)); } template <> inline QQmlTypesExtensionInterface *qobject_cast<QQmlTypesExtensionInterface *>(const QObject *object) { return reinterpret_cast<QQmlTypesExtensionInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QQmlTypesExtensionInterface/1.0") : 0)); }



# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"
template <> inline const char *qobject_interface_iid<QQmlExtensionInterface *>() { return "org.qt-project.Qt.QQmlExtensionInterface"; } template <> inline QQmlExtensionInterface *qobject_cast<QQmlExtensionInterface *>(QObject *object) { return reinterpret_cast<QQmlExtensionInterface *>((object ? object->qt_metacast("org.qt-project.Qt.QQmlExtensionInterface") : 0)); } template <> inline QQmlExtensionInterface *qobject_cast<QQmlExtensionInterface *>(const QObject *object) { return reinterpret_cast<QQmlExtensionInterface *>((object ? const_cast<QObject *>(object)->qt_metacast("org.qt-project.Qt.QQmlExtensionInterface") : 0)); }




# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensionplugin.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qplugin.h"












































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensionplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QUrl"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensionplugin.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensioninterface.h"













































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensionplugin.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlextensionplugin.h"


class QQmlEngine;
class QQmlExtensionPluginPrivate;

class  QQmlExtensionPlugin
: public QObject
, public QQmlExtensionInterface
{
Q_OBJECT
inline QQmlExtensionPluginPrivate* d_func() { return reinterpret_cast<QQmlExtensionPluginPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlExtensionPluginPrivate* d_func() const { return reinterpret_cast<const QQmlExtensionPluginPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlExtensionPluginPrivate;


public:
explicit QQmlExtensionPlugin(QObject *parent = 0);
~QQmlExtensionPlugin();

QUrl baseUrl() const;

virtual void registerTypes(const char *uri) = 0;
virtual void initializeEngine(QQmlEngine *engine, const char *uri);

private:
QQmlExtensionPlugin(const QQmlExtensionPlugin &) ; QQmlExtensionPlugin &operator=(const QQmlExtensionPlugin &) ;
};




# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlfile.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlfile.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlfile.h"


class QUrl;
class QString;
class QObject;
class QQmlEngine;
class QQmlFilePrivate;

class  QQmlFile
{
public:
QQmlFile();
QQmlFile(QQmlEngine *, const QUrl &);
QQmlFile(QQmlEngine *, const QString &);
~QQmlFile();

enum Status { Null, Ready, Error, Loading };

bool isNull() const;
bool isReady() const;
bool isError() const;
bool isLoading() const;

QUrl url() const;

Status status() const;
QString error() const;

qint64 size() const;
const char *data() const;
QByteArray dataByteArray() const;

QByteArray metaData(const QString &) const;

void load(QQmlEngine *, const QUrl &);
void load(QQmlEngine *, const QString &);

void clear();
void clear(QObject *);

bool connectFinished(QObject *, const char *);
bool connectFinished(QObject *, int);
bool connectDownloadProgress(QObject *, const char *);
bool connectDownloadProgress(QObject *, int);

static bool isSynchronous(const QString &url);
static bool isSynchronous(const QUrl &url);

static bool isBundle(const QString &url);
static bool isBundle(const QUrl &url);

static bool isLocalFile(const QString &url);
static bool isLocalFile(const QUrl &url);

static QString urlToLocalFileOrQrc(const QString &);
static QString urlToLocalFileOrQrc(const QUrl &);

static bool bundleDirectoryExists(const QString &, QQmlEngine *);
static bool bundleDirectoryExists(const QUrl &, QQmlEngine *);

static bool bundleFileExists(const QString &, QQmlEngine *);
static bool bundleFileExists(const QUrl &, QQmlEngine *);

static QString bundleFileName(const QString &, QQmlEngine *);
static QString bundleFileName(const QUrl &, QQmlEngine *);

private:
QQmlFile(const QQmlFile &) ; QQmlFile &operator=(const QQmlFile &) ;
QQmlFilePrivate *d;
};




# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlincubator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlincubator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"





















































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlincubator.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlincubator.h"



class QQmlEngine;

class QQmlIncubatorPrivate;
class  QQmlIncubator
{
QQmlIncubator(const QQmlIncubator &) ; QQmlIncubator &operator=(const QQmlIncubator &) ;
public:
enum IncubationMode {
Asynchronous,
AsynchronousIfNested,
Synchronous
};
enum Status { 
Null, 
Ready, 
Loading, 
Error 
};

QQmlIncubator(IncubationMode = Asynchronous);
virtual ~QQmlIncubator();

void clear();
void forceCompletion();

bool isNull() const;
bool isReady() const;
bool isError() const;
bool isLoading() const;

QList<QQmlError> errors() const;

IncubationMode incubationMode() const;

Status status() const;

QObject *object() const;

protected:
virtual void statusChanged(Status);
virtual void setInitialState(QObject *);

private:
friend class QQmlComponent;
friend class QQmlEnginePrivate;
friend class QQmlIncubatorPrivate;
QQmlIncubatorPrivate *d;
};

class QQmlEnginePrivate;
class  QQmlIncubationController
{
QQmlIncubationController(const QQmlIncubationController &) ; QQmlIncubationController &operator=(const QQmlIncubationController &) ;
public:
QQmlIncubationController();
virtual ~QQmlIncubationController();

QQmlEngine *engine() const;
int incubatingObjectCount() const;

void incubateFor(int msecs);
void incubateWhile(volatile bool *flag, int msecs=0);

protected:
virtual void incubatingObjectCountChanged(int);

private:
friend class QQmlEngine;
friend class QQmlEnginePrivate;
friend class QQmlIncubatorPrivate;
QQmlEnginePrivate *d;
};




# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qdebug.h"




































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlerror.h"





















































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"


class QQmlInfo;

namespace QtQml {

 QQmlInfo qmlInfo(const QObject *me);
 QQmlInfo qmlInfo(const QObject *me, const QQmlError &error);
 QQmlInfo qmlInfo(const QObject *me, const QList<QQmlError> &errors);
}
using namespace QtQml;

class QQmlInfoPrivate;
class  QQmlInfo : public QDebug
{
public:
QQmlInfo(const QQmlInfo &);
~QQmlInfo();

inline QQmlInfo &operator<<(QChar t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(bool t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(char t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(signed short t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(unsigned short t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(signed int t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(unsigned int t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(signed long t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(unsigned long t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(qint64 t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(quint64 t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(float t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(double t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(const char* t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(const QString & t) { QDebug::operator<<(t.toLocal8Bit().constData()); return *this; }
inline QQmlInfo &operator<<(const QStringRef & t) { return operator<<(t.toString()); }
inline QQmlInfo &operator<<(const QLatin1String &t) { QDebug::operator<<(t.latin1()); return *this; }
inline QQmlInfo &operator<<(const QByteArray & t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(const void * t) { QDebug::operator<<(t); return *this; }
inline QQmlInfo &operator<<(QTextStreamFunction f) { QDebug::operator<<(f); return *this; }
inline QQmlInfo &operator<<(QTextStreamManipulator m) { QDebug::operator<<(m); return *this; }

# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"
inline QQmlInfo &operator<<(const QUrl &t) { static_cast<QDebug &>(*this) << t; return *this; }


# 93 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlinfo.h"
private:
friend  QQmlInfo QtQml::qmlInfo(const QObject *me);
friend  QQmlInfo QtQml::qmlInfo(const QObject *me, const QQmlError &error);
friend  QQmlInfo QtQml::qmlInfo(const QObject *me, const QList<QQmlError> &errors);

QQmlInfo(QQmlInfoPrivate *);
QQmlInfoPrivate *d;
};




# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmllist.h"























































































































































# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlnetworkaccessmanagerfactory.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlnetworkaccessmanagerfactory.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlnetworkaccessmanagerfactory.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlnetworkaccessmanagerfactory.h"



class QNetworkAccessManager;
class  QQmlNetworkAccessManagerFactory
{
public:
virtual ~QQmlNetworkAccessManagerFactory();
virtual QNetworkAccessManager *create(QObject *parent) = 0;

};




# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlparserstatus.h"









































































# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlprivate.h"




















































































































































































































































































# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlproperty.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlproperty.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetaobject.h"



















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlproperty.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlproperty.h"



class QObject;
class QVariant;
class QQmlContext;
class QQmlEngine;

class QQmlPropertyPrivate;
class  QQmlProperty
{
public:
enum PropertyTypeCategory {
InvalidCategory,
List,
Object,
Normal
};

enum Type { 
Invalid,
Property,
SignalProperty
};

QQmlProperty();
~QQmlProperty();

QQmlProperty(QObject *);
QQmlProperty(QObject *, QQmlContext *);
QQmlProperty(QObject *, QQmlEngine *);

QQmlProperty(QObject *, const QString &);
QQmlProperty(QObject *, const QString &, QQmlContext *);
QQmlProperty(QObject *, const QString &, QQmlEngine *);

QQmlProperty(const QQmlProperty &);
QQmlProperty &operator=(const QQmlProperty &);

bool operator==(const QQmlProperty &) const;

Type type() const;
bool isValid() const;
bool isProperty() const;
bool isSignalProperty() const;

int propertyType() const;
PropertyTypeCategory propertyTypeCategory() const;
const char *propertyTypeName() const;

QString name() const;

QVariant read() const;
static QVariant read(const QObject *, const QString &);
static QVariant read(const QObject *, const QString &, QQmlContext *);
static QVariant read(const QObject *, const QString &, QQmlEngine *);

bool write(const QVariant &) const;
static bool write(QObject *, const QString &, const QVariant &);
static bool write(QObject *, const QString &, const QVariant &, QQmlContext *);
static bool write(QObject *, const QString &, const QVariant &, QQmlEngine *);

bool reset() const;

bool hasNotifySignal() const;
bool needsNotifySignal() const;
bool connectNotifySignal(QObject *dest, const char *slot) const;
bool connectNotifySignal(QObject *dest, int method) const;

bool isWritable() const;
bool isDesignable() const;
bool isResettable() const;
QObject *object() const;

int index() const;
QMetaProperty property() const;
QMetaMethod method() const;

private:
friend class QQmlPropertyPrivate;
QQmlPropertyPrivate *d;
};
typedef QList<QQmlProperty> QQmlProperties;

inline uint qHash (const QQmlProperty &key)
{
return qHash(key.object()) + qHash(key.name());
}

template<> class QTypeInfo<QQmlProperty > { public: enum { isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QQmlProperty)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QQmlProperty) }; static inline const char *name() { return "QQmlProperty"; } };




# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertyvaluesource.h"


































































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlscriptstring.h"
























































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QHash"

# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstringlist.h"


































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QStringList"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QVariant"

# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"


# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlpropertymap.h"



class QQmlPropertyMapPrivate;
class  QQmlPropertyMap : public QObject
{
Q_OBJECT
public:
explicit QQmlPropertyMap(QObject *parent = 0);
virtual ~QQmlPropertyMap();

QVariant value(const QString &key) const;
void insert(const QString &key, const QVariant &value);
void clear(const QString &key);

Q_INVOKABLE QStringList keys() const;

int count() const;
int size() const;
bool isEmpty() const;
bool contains(const QString &key) const;

QVariant &operator[](const QString &key);
QVariant operator[](const QString &key) const;

signals:
void valueChanged(const QString &key, const QVariant &value);

protected:
virtual QVariant updateValue(const QString &key, const QVariant &input);

template<class DerivedType>
QQmlPropertyMap(DerivedType *derived, QObject *parentObj)
: QObject(*allocatePrivate(), parentObj)
{
(void)derived;
init(&DerivedType::staticMetaObject);
}

private:
void init(const QMetaObject *staticMetaObject);
static QObjectPrivate *allocatePrivate();

inline QQmlPropertyMapPrivate* d_func() { return reinterpret_cast<QQmlPropertyMapPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQmlPropertyMapPrivate* d_func() const { return reinterpret_cast<const QQmlPropertyMapPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQmlPropertyMapPrivate;
QQmlPropertyMap(const QQmlPropertyMap &) ; QQmlPropertyMap &operator=(const QQmlPropertyMap &) ;
};




# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsengine.h"










































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"






























































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalueiterator.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlglobal.h"




























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalueiterator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalue.h"






























































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalueiterator.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalueiterator.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qjsvalueiterator.h"



class QString;

class QJSValueIteratorPrivate;
class  QJSValueIterator
{
public:
QJSValueIterator(const QJSValue &value);
~QJSValueIterator();

bool hasNext() const;
bool next();

QString name() const;

QJSValue value() const;
QJSValueIterator& operator=(QJSValue &value);

private:
QScopedPointer<QJSValueIteratorPrivate> d_ptr;

inline QJSValueIteratorPrivate* d_func() { return reinterpret_cast<QJSValueIteratorPrivate *>(qGetPtrHelper(d_ptr)); } inline const QJSValueIteratorPrivate* d_func() const { return reinterpret_cast<const QJSValueIteratorPrivate *>(qGetPtrHelper(d_ptr)); } friend class QJSValueIteratorPrivate;
QJSValueIterator(const QJSValueIterator &) ; QJSValueIterator &operator=(const QJSValueIterator &) ;
};




# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qtqmlversion.h"









# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/QtQml"


# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuickDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"



# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"












































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"












# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QtGlobal"

# 58 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qhash.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QHash"

# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QRectF"

# 60 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"


# 62 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/designersupport.h"


class QQuickItem;
class QQuickShaderEffectTexture;
class QImage;
class QTransform;
class QQmlContext;
class QQuickView;
class QObject;
class QQuickWindow;

class  DesignerSupport
{
public:
enum DirtyType {
TransformOrigin = 0x00000001,
Transform = 0x00000002,
BasicTransform = 0x00000004,
Position = 0x00000008,
Size = 0x00000010,

ZValue = 0x00000020,
Content = 0x00000040,
Smooth = 0x00000080,
OpacityValue = 0x00000100,
ChildrenChanged = 0x00000200,
ChildrenStackingChanged = 0x00000400,
ParentChanged = 0x00000800,

Clip = 0x00001000,
Window = 0x00002000,

EffectReference = 0x00008000,
Visible = 0x00010000,
HideReference = 0x00020000,

TransformUpdateMask = TransformOrigin | Transform | BasicTransform | Position | Size | Window,
ComplexTransformUpdateMask = Transform | Window,
ContentUpdateMask = Size | Content | Smooth | Window,
ChildrenUpdateMask = ChildrenChanged | ChildrenStackingChanged | EffectReference | Window,
AllMask = TransformUpdateMask | ContentUpdateMask | ChildrenUpdateMask
};


DesignerSupport();
~DesignerSupport();

void refFromEffectItem(QQuickItem *referencedItem, bool hide = true);
void derefFromEffectItem(QQuickItem *referencedItem, bool unhide = true);

QImage renderImageForItem(QQuickItem *referencedItem, const QRectF &boundingRect, const QSize &imageSize);

static bool isDirty(QQuickItem *referencedItem, DirtyType dirtyType);
static void addDirty(QQuickItem *referencedItem, DirtyType dirtyType);
static void resetDirty(QQuickItem *referencedItem);

static QTransform windowTransform(QQuickItem *referencedItem);
static QTransform parentTransform(QQuickItem *referencedItem);

static bool isAnchoredTo(QQuickItem *fromItem, QQuickItem *toItem);
static bool areChildrenAnchoredTo(QQuickItem *fromItem, QQuickItem *toItem);
static bool hasAnchor(QQuickItem *item, const QString &name);
static QQuickItem *anchorFillTargetItem(QQuickItem *item);
static QQuickItem *anchorCenterInTargetItem(QQuickItem *item);
static QPair<QString, QObject*> anchorLineTarget(QQuickItem *item, const QString &name, QQmlContext *context);
static void resetAnchor(QQuickItem *item, const QString &name);
static void emitComponentCompleteSignalForAttachedProperty(QQuickItem *item);


static QList<QObject*> statesForItem(QQuickItem *item);

static bool isComponentComplete(QQuickItem *item);

static int borderWidth(QQuickItem *item);

static void refreshExpressions(QQmlContext *context);

static void setRootItem(QQuickView *view, QQuickItem *item);

static bool isValidWidth(QQuickItem *item);
static bool isValidHeight(QQuickItem *item);

static void updateDirtyNode(QQuickItem *item);

static void activateDesignerWindowManager();
static void activateDesignerMode();

static void disableComponentComplete();
static void enableComponentComplete();

static void createOpenGLContext(QQuickWindow *window);

static void polishItems(QQuickWindow *window);

private:
QHash<QQuickItem*, QQuickShaderEffectTexture*> m_itemTextureHash;
};




# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqml.h"
























































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlcomponent.h"












































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QList"

# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qfont.h"




























































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"









































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 42 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qaccessible.h"






















































































































































































































































































































































































































































































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"


class QQuickItem;
class QQuickTransformPrivate;
class QQuickTransform : public QObject
{
Q_OBJECT
public:
QQuickTransform(QObject *parent = 0);
~QQuickTransform();

void appendToItem(QQuickItem *);
void prependToItem(QQuickItem *);

virtual void applyTo(QMatrix4x4 *matrix) const = 0;

protected slots:
void update();

protected:
QQuickTransform(QQuickTransformPrivate &dd, QObject *parent);

private:
inline QQuickTransformPrivate* d_func() { return reinterpret_cast<QQuickTransformPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQuickTransformPrivate* d_func() const { return reinterpret_cast<const QQuickTransformPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQuickTransformPrivate;
};

class QCursor;
class QQuickItemLayer;
class QQmlV8Function;
class QQuickState;
class QQuickAnchorLine;
class QQuickTransition;
class QQuickKeyEvent;
class QQuickAnchors;
class QQuickItemPrivate;
class QQuickWindow;
class QTouchEvent;
class QSGNode;
class QSGTransformNode;
class QSGTextureProvider;

class  QQuickItem : public QObject, public QQmlParserStatus
{
Q_OBJECT


Q_PROPERTY(QQuickItem *parent READ parentItem WRITE setParentItem NOTIFY parentChanged DESIGNABLE false FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQmlListProperty<QObject> data READ data DESIGNABLE false)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQmlListProperty<QObject> resources READ resources DESIGNABLE false)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQmlListProperty<QQuickItem> children READ children NOTIFY childrenChanged DESIGNABLE false)

Q_PROPERTY(qreal x READ x WRITE setX NOTIFY xChanged FINAL)
Q_PROPERTY(qreal y READ y WRITE setY NOTIFY yChanged FINAL)
Q_PROPERTY(qreal z READ z WRITE setZ NOTIFY zChanged FINAL)
Q_PROPERTY(qreal width READ width WRITE setWidth NOTIFY widthChanged RESET resetWidth FINAL)
Q_PROPERTY(qreal height READ height WRITE setHeight NOTIFY heightChanged RESET resetHeight FINAL)

Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity NOTIFY opacityChanged FINAL)
Q_PROPERTY(bool enabled READ isEnabled WRITE setEnabled NOTIFY enabledChanged)
Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY visibleChanged FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQmlListProperty<QQuickItem> visibleChildren READ visibleChildren NOTIFY visibleChildrenChanged DESIGNABLE false)

Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQmlListProperty<QQuickState> states READ states DESIGNABLE false)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQmlListProperty<QQuickTransition> transitions READ transitions DESIGNABLE false)
Q_PROPERTY(QString state READ state WRITE setState NOTIFY stateChanged)
Q_PROPERTY(QRectF childrenRect READ childrenRect NOTIFY childrenRectChanged DESIGNABLE false FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchors * anchors READ anchors DESIGNABLE false CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine left READ left CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine right READ right CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine horizontalCenter READ horizontalCenter CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine top READ top CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine bottom READ bottom CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine verticalCenter READ verticalCenter CONSTANT FINAL)
Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickAnchorLine baseline READ baseline CONSTANT FINAL)
Q_PROPERTY(qreal baselineOffset READ baselineOffset WRITE setBaselineOffset NOTIFY baselineOffsetChanged)

Q_PROPERTY(bool clip READ clip WRITE setClip NOTIFY clipChanged)

Q_PROPERTY(bool focus READ hasFocus WRITE setFocus NOTIFY focusChanged FINAL)
Q_PROPERTY(bool activeFocus READ hasActiveFocus NOTIFY activeFocusChanged FINAL)
Q_PROPERTY(bool activeFocusOnTab READ activeFocusOnTab WRITE setActiveFocusOnTab NOTIFY activeFocusOnTabChanged FINAL REVISION 1)

Q_PROPERTY(qreal rotation READ rotation WRITE setRotation NOTIFY rotationChanged)
Q_PROPERTY(qreal scale READ scale WRITE setScale NOTIFY scaleChanged)
Q_PROPERTY(TransformOrigin transformOrigin READ transformOrigin WRITE setTransformOrigin NOTIFY transformOriginChanged)
Q_PROPERTY(QPointF transformOriginPoint READ transformOriginPoint) 
Q_PROPERTY(QQmlListProperty<QQuickTransform> transform READ transform DESIGNABLE false FINAL)

Q_PROPERTY(bool smooth READ smooth WRITE setSmooth NOTIFY smoothChanged)
Q_PROPERTY(bool antialiasing READ antialiasing WRITE setAntialiasing NOTIFY antialiasingChanged)
Q_PROPERTY(qreal implicitWidth READ implicitWidth WRITE setImplicitWidth NOTIFY implicitWidthChanged)
Q_PROPERTY(qreal implicitHeight READ implicitHeight WRITE setImplicitHeight NOTIFY implicitHeightChanged)

Q_PRIVATE_PROPERTY(QQuickItem::d_func(), QQuickItemLayer *layer READ layer DESIGNABLE false CONSTANT FINAL)

Q_ENUMS(TransformOrigin)
Q_CLASSINFO("DefaultProperty", "data")
Q_CLASSINFO("qt_HasQmlAccessors", "true")

public:
enum Flag {
ItemClipsChildrenToShape = 0x01,

# 158 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
ItemAcceptsInputMethod = 0x02,

# 160 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
ItemIsFocusScope = 0x04,
ItemHasContents = 0x08,
ItemAcceptsDrops = 0x10

};
typedef QFlags<Flag> Flags;

enum ItemChange {
ItemChildAddedChange, 
ItemChildRemovedChange, 
ItemSceneChange, 
ItemVisibleHasChanged, 
ItemParentHasChanged, 
ItemOpacityHasChanged, 
ItemActiveFocusHasChanged, 
ItemRotationHasChanged 
};

union ItemChangeData {
ItemChangeData(QQuickItem *v) : item(v) {}
ItemChangeData(QQuickWindow *v) : window(v) {}
ItemChangeData(qreal v) : realValue(v) {}
ItemChangeData(bool v) : boolValue(v) {}

QQuickItem *item;
QQuickWindow *window;
qreal realValue;
bool boolValue;
};

enum TransformOrigin {
TopLeft, Top, TopRight,
Left, Center, Right,
BottomLeft, Bottom, BottomRight
};

QQuickItem(QQuickItem *parent = 0);
virtual ~QQuickItem();

QQuickWindow *window() const;
QQuickItem *parentItem() const;
void setParentItem(QQuickItem *parent);
void stackBefore(const QQuickItem *);
void stackAfter(const QQuickItem *);

QRectF childrenRect();
QList<QQuickItem *> childItems() const;

bool clip() const;
void setClip(bool);

QString state() const;
void setState(const QString &);

qreal baselineOffset() const;
void setBaselineOffset(qreal);

QQmlListProperty<QQuickTransform> transform();

qreal x() const;
qreal y() const;
QPointF position() const;
void setX(qreal);
void setY(qreal);
void setPosition(const QPointF &);

qreal width() const;
void setWidth(qreal);
void resetWidth();
void setImplicitWidth(qreal);
qreal implicitWidth() const;

qreal height() const;
void setHeight(qreal);
void resetHeight();
void setImplicitHeight(qreal);
qreal implicitHeight() const;

void setSize(const QSizeF &size);

TransformOrigin transformOrigin() const;
void setTransformOrigin(TransformOrigin);
QPointF transformOriginPoint() const;
void setTransformOriginPoint(const QPointF &);

qreal z() const;
void setZ(qreal);

qreal rotation() const;
void setRotation(qreal);
qreal scale() const;
void setScale(qreal);

qreal opacity() const;
void setOpacity(qreal);

bool isVisible() const;
void setVisible(bool);

bool isEnabled() const;
void setEnabled(bool);

bool smooth() const;
void setSmooth(bool);

bool activeFocusOnTab() const;
void setActiveFocusOnTab(bool);

bool antialiasing() const;
void setAntialiasing(bool);

Flags flags() const;
void setFlag(Flag flag, bool enabled = true);
void setFlags(Flags flags);

virtual QRectF boundingRect() const;
virtual QRectF clipRect() const;

bool hasActiveFocus() const;
bool hasFocus() const;
void setFocus(bool);
void setFocus(bool focus, Qt::FocusReason reason);
bool isFocusScope() const;
QQuickItem *scopedFocusItem() const;

Qt::MouseButtons acceptedMouseButtons() const;
void setAcceptedMouseButtons(Qt::MouseButtons buttons);
bool acceptHoverEvents() const;
void setAcceptHoverEvents(bool enabled);


# 291 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
QCursor cursor() const;
void setCursor(const QCursor &cursor);
void unsetCursor();


# 296 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
bool isUnderMouse() const;
void grabMouse();
void ungrabMouse();
bool keepMouseGrab() const;
void setKeepMouseGrab(bool);
bool filtersChildMouseEvents() const;
void setFiltersChildMouseEvents(bool filter);

void grabTouchPoints(const QVector<int> &ids);
void ungrabTouchPoints();
bool keepTouchGrab() const;
void setKeepTouchGrab(bool);

Q_INVOKABLE virtual bool contains(const QPointF &point) const;

QTransform itemTransform(QQuickItem *, bool *) const;
QPointF mapToItem(const QQuickItem *item, const QPointF &point) const;
QPointF mapToScene(const QPointF &point) const;
QRectF mapRectToItem(const QQuickItem *item, const QRectF &rect) const;
QRectF mapRectToScene(const QRectF &rect) const;
QPointF mapFromItem(const QQuickItem *item, const QPointF &point) const;
QPointF mapFromScene(const QPointF &point) const;
QRectF mapRectFromItem(const QQuickItem *item, const QRectF &rect) const;
QRectF mapRectFromScene(const QRectF &rect) const;

void polish();

Q_INVOKABLE void mapFromItem(QQmlV8Function*) const;
Q_INVOKABLE void mapToItem(QQmlV8Function*) const;
Q_INVOKABLE void forceActiveFocus();
Q_INVOKABLE void forceActiveFocus(Qt::FocusReason reason);
Q_REVISION(1) Q_INVOKABLE QQuickItem *nextItemInFocusChain(bool forward = true);
Q_INVOKABLE QQuickItem *childAt(qreal x, qreal y) const;


# 331 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;


# 334 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
struct UpdatePaintNodeData {
QSGTransformNode *transformNode;
private:
friend class QQuickWindowPrivate;
UpdatePaintNodeData();
};

virtual bool isTextureProvider() const;
virtual QSGTextureProvider *textureProvider() const;

public slots:
void update();

signals:
void childrenRectChanged(const QRectF &);
void baselineOffsetChanged(qreal);
void stateChanged(const QString &);
void focusChanged(bool);
void activeFocusChanged(bool);
Q_REVISION(1) void activeFocusOnTabChanged(bool);
void parentChanged(QQuickItem *);
void transformOriginChanged(TransformOrigin);
void smoothChanged(bool);
void antialiasingChanged(bool);
void clipChanged(bool);
Q_REVISION(1) void windowChanged(QQuickWindow* window);


void childrenChanged();
void opacityChanged();
void enabledChanged();
void visibleChanged();
void visibleChildrenChanged();
void rotationChanged();
void scaleChanged();

void xChanged();
void yChanged();
void widthChanged();
void heightChanged();
void zChanged();
void implicitWidthChanged();
void implicitHeightChanged();

protected:
virtual bool event(QEvent *);

bool isComponentComplete() const;
virtual void itemChange(ItemChange, const ItemChangeData &);


# 385 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
void updateInputMethod(Qt::InputMethodQueries queries = Qt::ImQueryInput);


# 388 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
bool widthValid() const; 
bool heightValid() const; 
void setImplicitSize(qreal, qreal);

virtual void classBegin();
virtual void componentComplete();

virtual void keyPressEvent(QKeyEvent *event);
virtual void keyReleaseEvent(QKeyEvent *event);

# 398 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual void inputMethodEvent(QInputMethodEvent *);

# 400 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual void focusInEvent(QFocusEvent *);
virtual void focusOutEvent(QFocusEvent *);
virtual void mousePressEvent(QMouseEvent *event);
virtual void mouseMoveEvent(QMouseEvent *event);
virtual void mouseReleaseEvent(QMouseEvent *event);
virtual void mouseDoubleClickEvent(QMouseEvent *event);
virtual void mouseUngrabEvent(); 
virtual void touchUngrabEvent();

# 409 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual void wheelEvent(QWheelEvent *event);

# 411 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual void touchEvent(QTouchEvent *event);
virtual void hoverEnterEvent(QHoverEvent *event);
virtual void hoverMoveEvent(QHoverEvent *event);
virtual void hoverLeaveEvent(QHoverEvent *event);

# 416 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual void dragEnterEvent(QDragEnterEvent *);
virtual void dragMoveEvent(QDragMoveEvent *);
virtual void dragLeaveEvent(QDragLeaveEvent *);
virtual void dropEvent(QDropEvent *);

# 421 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
virtual bool childMouseEventFilter(QQuickItem *, QEvent *);
virtual void windowDeactivateEvent();

virtual void geometryChanged(const QRectF &newGeometry,
const QRectF &oldGeometry);

virtual QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *);
virtual void releaseResources();
virtual void updatePolish();

protected:
QQuickItem(QQuickItemPrivate &dd, QQuickItem *parent = 0);

private:


friend class QQuickWindow;
friend class QQuickWindowPrivate;
friend class QSGRenderer;
friend class QAccessibleQuickItem;
friend class QQuickAccessibleAttached;
QQuickItem(const QQuickItem &) ; QQuickItem &operator=(const QQuickItem &) ;
inline QQuickItemPrivate* d_func() { return reinterpret_cast<QQuickItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQuickItemPrivate* d_func() const { return reinterpret_cast<const QQuickItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQuickItemPrivate;
};


 inline QFlags<QQuickItem::Flags::enum_type> operator|(QQuickItem::Flags::enum_type f1, QQuickItem::Flags::enum_type f2) { return QFlags<QQuickItem::Flags::enum_type>(f1) | f2; }  inline QFlags<QQuickItem::Flags::enum_type> operator|(QQuickItem::Flags::enum_type f1, QFlags<QQuickItem::Flags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QQuickItem::Flags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 450 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"
QDebug  operator<<(QDebug debug, QQuickItem *item);


# 453 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"


 template <> struct QMetaTypeId< QQuickItem * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQuickItem * >("QQuickItem *", reinterpret_cast< QQuickItem * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };   template <> struct QMetaTypeId< QQmlListProperty<QQuickItem> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlListProperty<QQuickItem> >("QQmlListProperty<QQuickItem>", reinterpret_cast< QQmlListProperty<QQuickItem> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  
 template <> struct QMetaTypeId< QQuickTransform * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQuickTransform * >("QQuickTransform *", reinterpret_cast< QQuickTransform * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };   template <> struct QMetaTypeId< QQmlListProperty<QQuickTransform> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlListProperty<QQuickTransform> >("QQmlListProperty<QQuickTransform>", reinterpret_cast< QQmlListProperty<QQuickTransform> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  


# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickpainteditem.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"










































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickpainteditem.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickpainteditem.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickpainteditem.h"


class QQuickPaintedItemPrivate;
class  QQuickPaintedItem : public QQuickItem
{
Q_OBJECT
Q_ENUMS(RenderTarget)

Q_PROPERTY(QSize contentsSize READ contentsSize WRITE setContentsSize NOTIFY contentsSizeChanged)
Q_PROPERTY(QColor fillColor READ fillColor WRITE setFillColor NOTIFY fillColorChanged)
Q_PROPERTY(qreal contentsScale READ contentsScale WRITE setContentsScale NOTIFY contentsScaleChanged)
Q_PROPERTY(RenderTarget renderTarget READ renderTarget WRITE setRenderTarget NOTIFY renderTargetChanged)
public:
QQuickPaintedItem(QQuickItem *parent = 0);
virtual ~QQuickPaintedItem();

enum RenderTarget {
Image,
FramebufferObject,
InvertedYFramebufferObject
};

enum PerformanceHint {
FastFBOResizing = 0x1
};
typedef QFlags<PerformanceHint> PerformanceHints;

void update(const QRect &rect = QRect());

bool opaquePainting() const;
void setOpaquePainting(bool opaque);

bool antialiasing() const;
void setAntialiasing(bool enable);

bool mipmap() const;
void setMipmap(bool enable);

PerformanceHints performanceHints() const;
void setPerformanceHint(PerformanceHint hint, bool enabled = true);
void setPerformanceHints(PerformanceHints hints);

QRectF contentsBoundingRect() const;

QSize contentsSize() const;
void setContentsSize(const QSize &);
void resetContentsSize();

qreal contentsScale() const;
void setContentsScale(qreal);

QColor fillColor() const;
void setFillColor(const QColor&);

RenderTarget renderTarget() const;
void setRenderTarget(RenderTarget target);

virtual void paint(QPainter *painter) = 0;

signals:
void fillColorChanged();
void contentsSizeChanged();
void contentsScaleChanged();
void renderTargetChanged();

protected:
QQuickPaintedItem(QQuickPaintedItemPrivate &dd, QQuickItem *parent = 0);
virtual QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *);

private:
QQuickPaintedItem(const QQuickPaintedItem &) ; QQuickPaintedItem &operator=(const QQuickPaintedItem &) ;
inline QQuickPaintedItemPrivate* d_func() { return reinterpret_cast<QQuickPaintedItemPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQuickPaintedItemPrivate* d_func() const { return reinterpret_cast<const QQuickPaintedItemPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQuickPaintedItemPrivate;
};

 inline QFlags<QQuickPaintedItem::PerformanceHints::enum_type> operator|(QQuickPaintedItem::PerformanceHints::enum_type f1, QQuickPaintedItem::PerformanceHints::enum_type f2) { return QFlags<QQuickPaintedItem::PerformanceHints::enum_type>(f1) | f2; }  inline QFlags<QQuickPaintedItem::PerformanceHints::enum_type> operator|(QQuickPaintedItem::PerformanceHints::enum_type f1, QFlags<QQuickPaintedItem::PerformanceHints::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QQuickPaintedItem::PerformanceHints::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquicktextdocument.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qtextdocument.h"









































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QTextDocument"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquicktextdocument.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickitem.h"










































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QQuickItem"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquicktextdocument.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquicktextdocument.h"


class QQuickTextDocumentPrivate;
class  QQuickTextDocument : public QObject
{
Q_OBJECT

public:
QQuickTextDocument(QQuickItem *parent);
QTextDocument *textDocument() const;

private:
QQuickTextDocument(const QQuickTextDocument &) ; QQuickTextDocument &operator=(const QQuickTextDocument &) ;
inline QQuickTextDocumentPrivate* d_func() { return reinterpret_cast<QQuickTextDocumentPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQuickTextDocumentPrivate* d_func() const { return reinterpret_cast<const QQuickTextDocumentPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQuickTextDocumentPrivate;
};



 template <> struct QMetaTypeId< QQuickTextDocument * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQuickTextDocument * >("QQuickTextDocument *", reinterpret_cast< QQuickTextDocument * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };   template <> struct QMetaTypeId< QQmlListProperty<QQuickTextDocument> > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQmlListProperty<QQuickTextDocument> >("QQmlListProperty<QQuickTextDocument>", reinterpret_cast< QQmlListProperty<QQuickTextDocument> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } };  


# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickview.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmetatype.h"




































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qwindow.h"














































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"


class QQuickItem;
class QSGTexture;
class QInputMethodEvent;
class QQuickWindowPrivate;
class QOpenGLFramebufferObject;
class QQmlIncubationController;
class QInputMethodEvent;
class QQuickCloseEvent;

class  QQuickWindow : public QWindow
{
Q_OBJECT
Q_PRIVATE_PROPERTY(QQuickWindow::d_func(), QQmlListProperty<QObject> data READ data DESIGNABLE false)
Q_PROPERTY(QColor color READ color WRITE setColor NOTIFY colorChanged)
Q_PROPERTY(QQuickItem* contentItem READ contentItem CONSTANT FINAL)
Q_PROPERTY(QQuickItem* activeFocusItem READ activeFocusItem NOTIFY activeFocusItemChanged REVISION 1)
Q_CLASSINFO("DefaultProperty", "data")
inline QQuickWindowPrivate* d_func() { return reinterpret_cast<QQuickWindowPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQuickWindowPrivate* d_func() const { return reinterpret_cast<const QQuickWindowPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQuickWindowPrivate;
public:
enum CreateTextureOption {
TextureHasAlphaChannel = 0x0001,
TextureHasMipmaps = 0x0002,
TextureOwnsGLTexture = 0x0004
};

typedef QFlags<CreateTextureOption> CreateTextureOptions;

QQuickWindow(QWindow *parent = 0);

virtual ~QQuickWindow();

QQuickItem *contentItem() const;

QQuickItem *activeFocusItem() const;
QObject *focusObject() const;

QQuickItem *mouseGrabberItem() const;

bool sendEvent(QQuickItem *, QEvent *);

QImage grabWindow();

void setRenderTarget(QOpenGLFramebufferObject *fbo);
QOpenGLFramebufferObject *renderTarget() const;

void setRenderTarget(uint fboId, const QSize &size);
uint renderTargetId() const;
QSize renderTargetSize() const;

QQmlIncubationController *incubationController() const;


# 105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"
virtual QAccessibleInterface *accessibleRoot() const;


# 108 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"

QSGTexture *createTextureFromImage(const QImage &image) const;
QSGTexture *createTextureFromId(uint id, const QSize &size, CreateTextureOptions options = CreateTextureOption(0)) const;

void setClearBeforeRendering(bool enabled);
bool clearBeforeRendering() const;

void setColor(const QColor &color);
QColor color() const;

static bool hasDefaultAlphaBuffer();
static void setDefaultAlphaBuffer(bool useAlpha);

void setPersistentOpenGLContext(bool persistent);
bool isPersistentOpenGLContext() const;

void setPersistentSceneGraph(bool persistent);
bool isPersistentSceneGraph() const;

QOpenGLContext *openglContext() const;

signals:
void frameSwapped();
void sceneGraphInitialized();
void sceneGraphInvalidated();
void beforeSynchronizing();
void beforeRendering();
void afterRendering();
Q_REVISION(1) void closing(QQuickCloseEvent *close);
void colorChanged(const QColor &);
Q_REVISION(1) void activeFocusItemChanged();

public slots:
void update();
void releaseResources();

protected:
QQuickWindow(QQuickWindowPrivate &dd, QWindow *parent = 0);

virtual void exposeEvent(QExposeEvent *);
virtual void resizeEvent(QResizeEvent *);

virtual void showEvent(QShowEvent *);
virtual void hideEvent(QHideEvent *);


virtual void focusInEvent(QFocusEvent *);
virtual void focusOutEvent(QFocusEvent *);

virtual bool event(QEvent *);
virtual void keyPressEvent(QKeyEvent *);
virtual void keyReleaseEvent(QKeyEvent *);
virtual void mousePressEvent(QMouseEvent *);
virtual void mouseReleaseEvent(QMouseEvent *);
virtual void mouseDoubleClickEvent(QMouseEvent *);
virtual void mouseMoveEvent(QMouseEvent *);

# 165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"
virtual void wheelEvent(QWheelEvent *);


# 168 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"
private slots:
void maybeUpdate();
void cleanupSceneGraph();
void setTransientParent_helper(QQuickWindow *window);

private:
friend class QQuickItem;
friend class QQuickWindowRenderLoop;
QQuickWindow(const QQuickWindow &) ; QQuickWindow &operator=(const QQuickWindow &) ;
};



 template <> struct QMetaTypeId< QQuickWindow * > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { (0) }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QQuickWindow * >("QQuickWindow *", reinterpret_cast< QQuickWindow * *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmldebug.h"
































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickview.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickview.h"


class QQmlEngine;
class QQmlContext;
class QQmlError;
class QQuickItem;
class QQmlComponent;

class QQuickViewPrivate;
class  QQuickView : public QQuickWindow
{
Q_OBJECT
Q_PROPERTY(ResizeMode resizeMode READ resizeMode WRITE setResizeMode)
Q_PROPERTY(Status status READ status NOTIFY statusChanged)
Q_PROPERTY(QUrl source READ source WRITE setSource DESIGNABLE true)
Q_ENUMS(ResizeMode Status)
public:
explicit QQuickView(QWindow *parent = 0);
QQuickView(QQmlEngine* engine, QWindow *parent);
QQuickView(const QUrl &source, QWindow *parent = 0);
virtual ~QQuickView();

QUrl source() const;

QQmlEngine* engine() const;
QQmlContext* rootContext() const;

QQuickItem *rootObject() const;

enum ResizeMode { SizeViewToRootObject, SizeRootObjectToView };
ResizeMode resizeMode() const;
void setResizeMode(ResizeMode);

enum Status { Null, Ready, Loading, Error };
Status status() const;

QList<QQmlError> errors() const;

QSize sizeHint() const;
QSize initialSize() const;

public slots:
void setSource(const QUrl&);
void setContent(const QUrl& url, QQmlComponent *component, QObject *item);

signals:
void statusChanged(QQuickView::Status);

private slots:
void continueExecute();

protected:
virtual void resizeEvent(QResizeEvent *);
virtual void timerEvent(QTimerEvent*);

virtual void keyPressEvent(QKeyEvent *);
virtual void keyReleaseEvent(QKeyEvent *);
virtual void mousePressEvent(QMouseEvent *);
virtual void mouseReleaseEvent(QMouseEvent *);
virtual void mouseMoveEvent(QMouseEvent *);
private:
QQuickView(const QQuickView &) ; QQuickView &operator=(const QQuickView &) ;
inline QQuickViewPrivate* d_func() { return reinterpret_cast<QQuickViewPrivate *>(qGetPtrHelper(d_ptr)); } inline const QQuickViewPrivate* d_func() const { return reinterpret_cast<const QQuickViewPrivate *>(qGetPtrHelper(d_ptr)); } friend class QQuickViewPrivate;
};




# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickwindow.h"
























































































































































































# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickimageprovider.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickimageprovider.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"















































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickimageprovider.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpixmap.h"




















































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickimageprovider.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQml/qqmlengine.h"



































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickimageprovider.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qquickimageprovider.h"



class QQuickImageProviderPrivate;
class QSGTexture;
class QQuickWindow;

class  QQuickTextureFactory : public QObject
{
public:
QQuickTextureFactory();
virtual ~QQuickTextureFactory();

virtual QSGTexture *createTexture(QQuickWindow *window) const = 0;
virtual QSize textureSize() const = 0;
virtual int textureByteCount() const = 0;
virtual QImage image() const;
};

class  QQuickImageProvider : public QQmlImageProviderBase
{
public:
QQuickImageProvider(ImageType type, Flags flags = 0);
virtual ~QQuickImageProvider();

ImageType imageType() const;
Flags flags() const;

virtual QImage requestImage(const QString &id, QSize *size, const QSize& requestedSize);
virtual QPixmap requestPixmap(const QString &id, QSize *size, const QSize& requestedSize);
virtual QQuickTextureFactory *requestTexture(const QString &id, QSize *size, const QSize &requestedSize);

private:
QQuickImageProviderPrivate *d;
};




# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qrect.h"

















































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QRectF"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"


class QSGGeometryData;

class  QSGGeometry
{
public:

struct  Attribute
{
int position;
int tupleSize;
int type;

uint isVertexCoordinate : 1;

uint reserved : 31;

static Attribute create(int pos, int tupleSize, int primitiveType, bool isPosition = false);
};

struct AttributeSet {
int count;
int stride;
const Attribute *attributes;
};

struct Point2D {
float x, y;
void set(float nx, float ny) {
x = nx; y = ny;
}
};
struct TexturedPoint2D {
float x, y;
float tx, ty;
void set(float nx, float ny, float ntx, float nty) {
x = nx; y = ny; tx = ntx; ty = nty;
}
};
struct ColoredPoint2D {
float x, y;
unsigned char r, g, b, a;
void set(float nx, float ny, uchar nr, uchar ng, uchar nb, uchar na) {
x = nx; y = ny;
r = nr; g = ng, b = nb; a = na;
}
};

static const AttributeSet &defaultAttributes_Point2D();
static const AttributeSet &defaultAttributes_TexturedPoint2D();
static const AttributeSet &defaultAttributes_ColoredPoint2D();

enum DataPattern {
AlwaysUploadPattern = 0,
StreamPattern = 1,
DynamicPattern = 2,
StaticPattern = 3
};

QSGGeometry(const QSGGeometry::AttributeSet &attribs,
int vertexCount,
int indexCount = 0,
int indexType = GL_UNSIGNED_SHORT);
virtual ~QSGGeometry();

void setDrawingMode(GLenum mode);
inline GLenum drawingMode() const { return m_drawing_mode; }

void allocate(int vertexCount, int indexCount = 0);

int vertexCount() const { return m_vertex_count; }

void *vertexData() { return m_data; }
inline Point2D *vertexDataAsPoint2D();
inline TexturedPoint2D *vertexDataAsTexturedPoint2D();
inline ColoredPoint2D *vertexDataAsColoredPoint2D();

inline const void *vertexData() const { return m_data; }
inline const Point2D *vertexDataAsPoint2D() const;
inline const TexturedPoint2D *vertexDataAsTexturedPoint2D() const;
inline const ColoredPoint2D *vertexDataAsColoredPoint2D() const;

inline int indexType() const { return m_index_type; }

int indexCount() const { return m_index_count; }

void *indexData();
inline uint *indexDataAsUInt();
inline quint16 *indexDataAsUShort();

inline int sizeOfIndex() const;

const void *indexData() const;
inline const uint *indexDataAsUInt() const;
inline const quint16 *indexDataAsUShort() const;

inline int attributeCount() const { return m_attributes.count; }
inline const Attribute *attributes() const { return m_attributes.attributes; }
inline int sizeOfVertex() const { return m_attributes.stride; }

static void updateRectGeometry(QSGGeometry *g, const QRectF &rect);
static void updateTexturedRectGeometry(QSGGeometry *g, const QRectF &rect, const QRectF &sourceRect);

void setIndexDataPattern(DataPattern p);
DataPattern indexDataPattern() const { return (DataPattern) m_index_usage_pattern; }

void setVertexDataPattern(DataPattern p);
DataPattern vertexDataPattern() const { return (DataPattern) m_vertex_usage_pattern; }

void markIndexDataDirty();
void markVertexDataDirty();

float lineWidth() const;
void setLineWidth(float w);

private:
friend class QSGGeometryData;

int m_drawing_mode;
int m_vertex_count;
int m_index_count;
int m_index_type;
const AttributeSet &m_attributes;
void *m_data;
int m_index_data_offset;

QSGGeometryData *m_server_data;

uint m_owns_data : 1;
uint m_index_usage_pattern : 2;
uint m_vertex_usage_pattern : 2;
uint m_dirty_index_data : 1;
uint m_dirty_vertex_data : 1;
uint m_reserved_bits : 25;

float m_prealloc[16];

float m_line_width;
};

inline uint *QSGGeometry::indexDataAsUInt()
{
qt_noop();
return (uint *) indexData();
}

inline quint16 *QSGGeometry::indexDataAsUShort()
{
qt_noop();
return (quint16 *) indexData();
}

inline const uint *QSGGeometry::indexDataAsUInt() const
{
qt_noop();
return (uint *) indexData();
}

inline const quint16 *QSGGeometry::indexDataAsUShort() const
{
qt_noop();
return (quint16 *) indexData();
}

inline QSGGeometry::Point2D *QSGGeometry::vertexDataAsPoint2D()
{
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
return (Point2D *) m_data;
}

inline QSGGeometry::TexturedPoint2D *QSGGeometry::vertexDataAsTexturedPoint2D()
{
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
return (TexturedPoint2D *) m_data;
}

inline QSGGeometry::ColoredPoint2D *QSGGeometry::vertexDataAsColoredPoint2D()
{
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
return (ColoredPoint2D *) m_data;
}

inline const QSGGeometry::Point2D *QSGGeometry::vertexDataAsPoint2D() const
{
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
return (const Point2D *) m_data;
}

inline const QSGGeometry::TexturedPoint2D *QSGGeometry::vertexDataAsTexturedPoint2D() const
{
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
return (const TexturedPoint2D *) m_data;
}

inline const QSGGeometry::ColoredPoint2D *QSGGeometry::vertexDataAsColoredPoint2D() const
{
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
qt_noop();
return (const ColoredPoint2D *) m_data;
}

int QSGGeometry::sizeOfIndex() const
{
if (m_index_type == GL_UNSIGNED_SHORT) return 2;
else if (m_index_type == GL_UNSIGNED_BYTE) return 1;
else if (m_index_type == GL_UNSIGNED_INT) return 4;
return 0;
}




# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglshaderprogram.h"

























































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"


class QSGMaterial;

class  QSGMaterialShader
{
public:
class  RenderState {
public:
enum DirtyState
{
DirtyMatrix = 0x0001,
DirtyOpacity = 0x0002
};
typedef QFlags<DirtyState> DirtyStates;

inline DirtyStates dirtyStates() const { return m_dirty; }

inline bool isMatrixDirty() const { return m_dirty & DirtyMatrix; }
inline bool isOpacityDirty() const { return m_dirty & DirtyOpacity; }

float opacity() const;
QMatrix4x4 combinedMatrix() const;
QMatrix4x4 modelViewMatrix() const;
QMatrix4x4 projectionMatrix() const;
QRect viewportRect() const;
QRect deviceRect() const;
float determinant() const;
float devicePixelRatio() const;

QOpenGLContext *context() const;

private:
friend class QSGRenderer;
DirtyStates m_dirty;
const void *m_data;
};

QSGMaterialShader();
virtual ~QSGMaterialShader() {};

virtual void activate();
virtual void deactivate();

virtual void updateState(const RenderState &state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial);
virtual char const *const *attributeNames() const = 0; 

inline QOpenGLShaderProgram *program() { return &m_program; }

protected:

friend class QSGContext;

virtual void compile();
virtual void initialize() { }

virtual const char *vertexShader() const = 0;
virtual const char *fragmentShader() const = 0;

private:
QOpenGLShaderProgram m_program;
void *m_reserved;
};

struct QSGMaterialType { };

class  QSGMaterial
{
public:
enum Flag {
Blending = 0x0001,
RequiresDeterminant = 0x0002, 
RequiresFullMatrixExceptTranslate = 0x0004 | RequiresDeterminant, 
RequiresFullMatrix = 0x0008 | RequiresFullMatrixExceptTranslate
};
typedef QFlags<Flag> Flags;

QSGMaterial();
virtual ~QSGMaterial();

virtual QSGMaterialType *type() const = 0;
virtual QSGMaterialShader *createShader() const = 0;
virtual int compare(const QSGMaterial *other) const;

QSGMaterial::Flags flags() const { return m_flags; }
void setFlag(Flags flags, bool on = true);

private:
Flags m_flags;
void *m_reserved;
QSGMaterial(const QSGMaterial &) ; QSGMaterial &operator=(const QSGMaterial &) ;
};

 inline QFlags<QSGMaterial::Flags::enum_type> operator|(QSGMaterial::Flags::enum_type f1, QSGMaterial::Flags::enum_type f2) { return QFlags<QSGMaterial::Flags::enum_type>(f1) | f2; }  inline QFlags<QSGMaterial::Flags::enum_type> operator|(QSGMaterial::Flags::enum_type f1, QFlags<QSGMaterial::Flags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSGMaterial::Flags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QSGMaterialShader::RenderState::DirtyStates::enum_type> operator|(QSGMaterialShader::RenderState::DirtyStates::enum_type f1, QSGMaterialShader::RenderState::DirtyStates::enum_type f2) { return QFlags<QSGMaterialShader::RenderState::DirtyStates::enum_type>(f1) | f2; }  inline QFlags<QSGMaterialShader::RenderState::DirtyStates::enum_type> operator|(QSGMaterialShader::RenderState::DirtyStates::enum_type f1, QFlags<QSGMaterialShader::RenderState::DirtyStates::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSGMaterialShader::RenderState::DirtyStates::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"








































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QMatrix4x4"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"




class QSGRenderer;

class QSGNode;
class QSGRootNode;
class QSGGeometryNode;
class QSGTransformNode;
class QSGClipNode;

class  QSGNode
{
public:
enum NodeType {
BasicNodeType,
GeometryNodeType,
TransformNodeType,
ClipNodeType,
OpacityNodeType,

# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
RootNodeType,
RenderNodeType

# 75 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
};

enum Flag {

OwnedByParent = 0x0001,
UsePreprocess = 0x0002,




OwnsGeometry = 0x00010000,
OwnsMaterial = 0x00020000,
OwnsOpaqueMaterial = 0x00040000
};
typedef QFlags<Flag> Flags;

enum DirtyStateBit {
DirtyMatrix = 0x0100,
DirtyNodeAdded = 0x0400,
DirtyNodeRemoved = 0x0800,
DirtyGeometry = 0x1000,
DirtyMaterial = 0x2000,
DirtyOpacity = 0x4000,


# 100 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
DirtyForceUpdate = 0x8000,

DirtyUsePreprocess = UsePreprocess,

DirtyPropagationMask = DirtyMatrix
| DirtyNodeAdded
| DirtyOpacity
| DirtyForceUpdate


# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
};
typedef QFlags<DirtyStateBit> DirtyState;

QSGNode();
virtual ~QSGNode();

QSGNode *parent() const { return m_parent; }

void removeChildNode(QSGNode *node);
void removeAllChildNodes();
void prependChildNode(QSGNode *node);
void appendChildNode(QSGNode *node);
void insertChildNodeBefore(QSGNode *node, QSGNode *before);
void insertChildNodeAfter(QSGNode *node, QSGNode *after);

int childCount() const;
QSGNode *childAtIndex(int i) const;
QSGNode *firstChild() const { return m_firstChild; }
QSGNode *lastChild() const { return m_lastChild; }
QSGNode *nextSibling() const { return m_nextSibling; }
QSGNode* previousSibling() const { return m_previousSibling; }

inline NodeType type() const { return m_type; }

void clearDirty() { m_dirtyState = 0; }
void markDirty(DirtyState bits);
DirtyState dirtyState() const { return m_dirtyState; }

virtual bool isSubtreeBlocked() const;

Flags flags() const { return m_nodeFlags; }
void setFlag(Flag, bool = true);
void setFlags(Flags, bool = true);

virtual void preprocess() { }





# 150 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
protected:
QSGNode(NodeType type);

private:
friend class QSGRootNode;

void init();
void destroy();

QSGNode *m_parent;
NodeType m_type;
QSGNode *m_firstChild;
QSGNode *m_lastChild;
QSGNode *m_nextSibling;
QSGNode *m_previousSibling;
int m_subtreeRenderableCount;

Flags m_nodeFlags;
DirtyState m_dirtyState;

void *m_reserved;
};

class  QSGBasicGeometryNode : public QSGNode
{
public:
~QSGBasicGeometryNode();

void setGeometry(QSGGeometry *geometry);
const QSGGeometry *geometry() const { return m_geometry; }
QSGGeometry *geometry() { return m_geometry; }

const QMatrix4x4 *matrix() const { return m_matrix; }
const QSGClipNode *clipList() const { return m_clip_list; }

protected:
QSGBasicGeometryNode(NodeType type);

private:
friend class QSGNodeUpdater;
QSGGeometry *m_geometry;

int m_reserved_start_index;
int m_reserved_end_index;

const QMatrix4x4 *m_matrix;
const QSGClipNode *m_clip_list;
};

class QSGMaterial;

class  QSGGeometryNode : public QSGBasicGeometryNode
{
public:
QSGGeometryNode();
~QSGGeometryNode();

void setMaterial(QSGMaterial *material);
QSGMaterial *material() const { return m_material; }

void setOpaqueMaterial(QSGMaterial *material);
QSGMaterial *opaqueMaterial() const { return m_opaque_material; }

QSGMaterial *activeMaterial() const;

void setRenderOrder(int order);
int renderOrder() const { return m_render_order; }

void setInheritedOpacity(qreal opacity);
qreal inheritedOpacity() const { return m_opacity; }

private:
friend class QSGNodeUpdater;

int m_render_order;
QSGMaterial *m_material;
QSGMaterial *m_opaque_material;

qreal m_opacity;
};

class  QSGClipNode : public QSGBasicGeometryNode
{
public:
QSGClipNode();
~QSGClipNode();

void setIsRectangular(bool rectHint);
bool isRectangular() const { return m_is_rectangular; }

void setClipRect(const QRectF &);
QRectF clipRect() const { return m_clip_rect; }

private:
uint m_is_rectangular : 1;
uint m_reserved : 31;

QRectF m_clip_rect;
};


class  QSGTransformNode : public QSGNode
{
public:
QSGTransformNode();
~QSGTransformNode();

void setMatrix(const QMatrix4x4 &matrix);
const QMatrix4x4 &matrix() const { return m_matrix; }

void setCombinedMatrix(const QMatrix4x4 &matrix);
const QMatrix4x4 &combinedMatrix() const { return m_combined_matrix; }

private:
QMatrix4x4 m_matrix;
QMatrix4x4 m_combined_matrix;
};


class  QSGRootNode : public QSGNode
{
public:
QSGRootNode();
~QSGRootNode();

private:
void notifyNodeChange(QSGNode *node, DirtyState state);

friend class QSGRenderer;
friend class QSGNode;
friend class QSGGeometryNode;

QList<QSGRenderer *> m_renderers;
};


class  QSGOpacityNode : public QSGNode
{
public:
QSGOpacityNode();
~QSGOpacityNode();

void setOpacity(qreal opacity);
qreal opacity() const { return m_opacity; }

void setCombinedOpacity(qreal opacity);
qreal combinedOpacity() const { return m_combined_opacity; }

bool isSubtreeBlocked() const;

private:
qreal m_opacity;
qreal m_combined_opacity;
};

class  QSGNodeVisitor {
public:
virtual ~QSGNodeVisitor();

protected:
virtual void enterTransformNode(QSGTransformNode *) {}
virtual void leaveTransformNode(QSGTransformNode *) {}
virtual void enterClipNode(QSGClipNode *) {}
virtual void leaveClipNode(QSGClipNode *) {}
virtual void enterGeometryNode(QSGGeometryNode *) {}
virtual void leaveGeometryNode(QSGGeometryNode *) {}
virtual void enterOpacityNode(QSGOpacityNode *) {}
virtual void leaveOpacityNode(QSGOpacityNode *) {}
virtual void visitNode(QSGNode *n);
virtual void visitChildren(QSGNode *n);
};


# 323 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
 QDebug operator<<(QDebug, const QSGNode *n);
 QDebug operator<<(QDebug, const QSGGeometryNode *n);
 QDebug operator<<(QDebug, const QSGTransformNode *n);
 QDebug operator<<(QDebug, const QSGOpacityNode *n);
 QDebug operator<<(QDebug, const QSGRootNode *n);



# 331 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
 inline QFlags<QSGNode::DirtyState::enum_type> operator|(QSGNode::DirtyState::enum_type f1, QSGNode::DirtyState::enum_type f2) { return QFlags<QSGNode::DirtyState::enum_type>(f1) | f2; }  inline QFlags<QSGNode::DirtyState::enum_type> operator|(QSGNode::DirtyState::enum_type f1, QFlags<QSGNode::DirtyState::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSGNode::DirtyState::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QSGNode::Flags::enum_type> operator|(QSGNode::Flags::enum_type f1, QSGNode::Flags::enum_type f2) { return QFlags<QSGNode::Flags::enum_type>(f1) | f2; }  inline QFlags<QSGNode::Flags::enum_type> operator|(QSGNode::Flags::enum_type f1, QFlags<QSGNode::Flags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QSGNode::Flags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 14 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgflatcolormaterial.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"


















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgflatcolormaterial.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgflatcolormaterial.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgflatcolormaterial.h"


class  QSGFlatColorMaterial : public QSGMaterial
{
public:
QSGFlatColorMaterial();
virtual QSGMaterialType *type() const;
virtual QSGMaterialShader *createShader() const;

void setColor(const QColor &color);
const QColor &color() const { return m_color; }

int compare(const QSGMaterial *other) const;

private:
QColor m_color;
};




# 15 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"


















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"


template <typename State>
class QSGSimpleMaterialShader : public QSGMaterialShader
{
public:
void initialize() {
QSGMaterialShader::initialize();

m_id_matrix = program()->uniformLocation(uniformMatrixName());
if (m_id_matrix < 0) {
QMessageLogger("/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h", 47, "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h" ":" "47").fatal("QSGSimpleMaterialShader does not implement 'uniform highp mat4 %s;' in its vertex shader",
uniformMatrixName());
}

const char *opacity = uniformOpacityName();
if (opacity) {
m_id_opacity = program()->uniformLocation(uniformOpacityName());
if (m_id_opacity < 0) {
QMessageLogger("/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h", 47, "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h" ":" "47").fatal("QSGSimpleMaterialShader does not implement 'uniform lowp float %s' in its fragment shader",
uniformOpacityName());
}
} else {
m_id_opacity = -1;
}

resolveUniforms();
}

const char *uniformMatrixName() const { return "qt_Matrix"; }
const char *uniformOpacityName() const { return "qt_Opacity"; }

void updateState(const RenderState &state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial);

virtual void updateState(const State *newState, const State *oldState) = 0;

virtual void resolveUniforms() {}

virtual QList<QByteArray> attributes() const = 0;

char const *const *attributeNames() const
{
if (m_attribute_pointers.size())
return m_attribute_pointers.constData();

QList<QByteArray> names = attributes();




int total = 0;
for (int i=0; i<names.size(); ++i)
total += names.at(i).size() + 1;
m_attribute_name_data.reserve(total);


for (int i=0; i<names.size(); ++i) {
m_attribute_pointers << m_attribute_name_data.constData() + m_attribute_name_data.size();
m_attribute_name_data.append(names.at(i));
m_attribute_name_data.append('\0');
}


m_attribute_pointers << 0;

return m_attribute_pointers.constData();
}

private:
int m_id_matrix;
int m_id_opacity;

mutable QByteArray m_attribute_name_data;
mutable QVector<const char *> m_attribute_pointers;
};




# 135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"
typedef QSGMaterialShader *(*PtrShaderCreateFunc)();


template <typename State>
class QSGSimpleMaterial : public QSGMaterial
{
public:

# 143 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"
QSGSimpleMaterial(const State &aState, PtrShaderCreateFunc func)
: m_state(aState)
, m_func(func)
{
}

QSGSimpleMaterial(PtrShaderCreateFunc func)
: m_func(func)
{
}

QSGMaterialShader *createShader() const { return m_func(); }
QSGMaterialType *type() const { return &m_type; }

State *state() { return &m_state; }
const State *state() const { return &m_state; }


# 161 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"
private:
static QSGMaterialType m_type;
State m_state;
PtrShaderCreateFunc m_func;
};



# 178 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplematerial.h"
template <typename State>
class QSGSimpleMaterialComparableMaterial : public QSGSimpleMaterial<State>
{

public:
QSGSimpleMaterialComparableMaterial(const State &state, PtrShaderCreateFunc func)
: QSGSimpleMaterial<State>(state, func) {}

QSGSimpleMaterialComparableMaterial(PtrShaderCreateFunc func)
: QSGSimpleMaterial<State>(func) {}

int compare(const QSGMaterial *other) const {
return QSGSimpleMaterialComparableMaterial<State>::state()->compare(static_cast<const QSGSimpleMaterialComparableMaterial<State> *>(other)->state());
}
};


template <typename State>
QSGMaterialType QSGSimpleMaterial<State>::m_type;


template <typename State>
inline void QSGSimpleMaterialShader<State>::updateState(const RenderState &state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial)
{
if (state.isMatrixDirty())
program()->setUniformValue(m_id_matrix, state.combinedMatrix());
if (state.isOpacityDirty() && m_id_opacity >= 0)
program()->setUniformValue(m_id_opacity, state.opacity());

State *ns = static_cast<QSGSimpleMaterial<State> *>(newMaterial)->state();
State *old = 0;
if (oldMaterial)
old = static_cast<QSGSimpleMaterial<State> *>(oldMaterial)->state();
updateState(ns, old);
}





# 16 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplerectnode.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
















































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplerectnode.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgflatcolormaterial.h"




































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplerectnode.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimplerectnode.h"


class  QSGSimpleRectNode : public QSGGeometryNode
{
public:
QSGSimpleRectNode(const QRectF &rect, const QColor &color);
QSGSimpleRectNode();

void setRect(const QRectF &rect);
inline void setRect(qreal x, qreal y, qreal w, qreal h) { setRect(QRectF(x, y, w, h)); }
QRectF rect() const;

void setColor(const QColor &color);
QColor color() const;

private:
QSGFlatColorMaterial m_material;
QSGGeometry m_geometry;
void *reserved;
};




# 17 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimpletexturenode.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgnode.h"
















































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimpletexturenode.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsggeometry.h"








































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimpletexturenode.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexturematerial.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"


















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexturematerial.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickglobal.h"





























































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QObject"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qimage.h"















































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QImage"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"


class QSGTexturePrivate;
class  QSGTexture : public QObject
{
Q_OBJECT
inline QSGTexturePrivate* d_func() { return reinterpret_cast<QSGTexturePrivate *>(qGetPtrHelper(d_ptr)); } inline const QSGTexturePrivate* d_func() const { return reinterpret_cast<const QSGTexturePrivate *>(qGetPtrHelper(d_ptr)); } friend class QSGTexturePrivate;

public:
QSGTexture();
~QSGTexture();

enum WrapMode {
Repeat,
ClampToEdge
};

enum Filtering {
None,
Nearest,
Linear
};

virtual int textureId() const = 0;
virtual QSize textureSize() const = 0;
virtual bool hasAlphaChannel() const = 0;
virtual bool hasMipmaps() const = 0;

virtual QRectF normalizedTextureSubRect() const;

virtual bool isAtlasTexture() const;

virtual QSGTexture *removedFromAtlas() const;

virtual void bind() = 0;
void updateBindOptions(bool force = false);

void setMipmapFiltering(Filtering filter);
QSGTexture::Filtering mipmapFiltering() const;

void setFiltering(Filtering filter);
QSGTexture::Filtering filtering() const;

void setHorizontalWrapMode(WrapMode hwrap);
QSGTexture::WrapMode horizontalWrapMode() const;

void setVerticalWrapMode(WrapMode vwrap);
QSGTexture::WrapMode verticalWrapMode() const;

inline QRectF convertToNormalizedSourceRect(const QRectF &rect) const;

protected:
QSGTexture(QSGTexturePrivate &dd);
};

QRectF QSGTexture::convertToNormalizedSourceRect(const QRectF &rect) const
{
QSize s = textureSize();
QRectF r = normalizedTextureSubRect();

qreal sx = r.width() / s.width();
qreal sy = r.height() / s.height();

return QRectF(r.x() + rect.x() * sx,
r.y() + rect.y() * sy,
rect.width() * sx,
rect.height() * sy);
}


class  QSGDynamicTexture : public QSGTexture
{
Q_OBJECT
public:
virtual bool updateTexture() = 0;
};




# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexturematerial.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexturematerial.h"


class  QSGOpaqueTextureMaterial : public QSGMaterial
{
public:
QSGOpaqueTextureMaterial();

virtual QSGMaterialType *type() const;
virtual QSGMaterialShader *createShader() const;
virtual int compare(const QSGMaterial *other) const;

void setTexture(QSGTexture *texture);
QSGTexture *texture() const { return m_texture; }

void setMipmapFiltering(QSGTexture::Filtering filteringType) { m_mipmap_filtering = filteringType; }
QSGTexture::Filtering mipmapFiltering() const { return (QSGTexture::Filtering) m_mipmap_filtering; }

void setFiltering(QSGTexture::Filtering filteringType) { m_filtering = filteringType; }
QSGTexture::Filtering filtering() const { return (QSGTexture::Filtering) m_filtering; }

void setHorizontalWrapMode(QSGTexture::WrapMode mode) { m_horizontal_wrap = mode; }
QSGTexture::WrapMode horizontalWrapMode() const { return (QSGTexture::WrapMode) m_horizontal_wrap; }

void setVerticalWrapMode(QSGTexture::WrapMode mode) { m_vertical_wrap = mode; }
QSGTexture::WrapMode verticalWrapMode() const { return (QSGTexture::WrapMode) m_vertical_wrap; }

protected:
QSGTexture *m_texture;

uint m_filtering: 2;
uint m_mipmap_filtering: 2;
uint m_horizontal_wrap : 1;
uint m_vertical_wrap: 1;

uint m_reserved : 26;
};


class  QSGTextureMaterial : public QSGOpaqueTextureMaterial
{
public:
virtual QSGMaterialType *type() const;
virtual QSGMaterialShader *createShader() const;
};




# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimpletexturenode.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgsimpletexturenode.h"


class  QSGSimpleTextureNode : public QSGGeometryNode
{
public:
QSGSimpleTextureNode();

void setRect(const QRectF &rect);
inline void setRect(qreal x, qreal y, qreal w, qreal h) { setRect(QRectF(x, y, w, h)); }
QRectF rect() const;

void setTexture(QSGTexture *texture);
QSGTexture *texture() const;

void setFiltering(QSGTexture::Filtering filtering);
QSGTexture::Filtering filtering() const;

private:
QSGGeometry m_geometry;
QSGOpaqueTextureMaterial m_opaque_material;
QSGTextureMaterial m_material;

QRectF m_rect;
};




# 18 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"
































































































































# 19 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexturematerial.h"































































































# 20 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtextureprovider.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtexture.h"
































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtextureprovider.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtextureprovider.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgtextureprovider.h"


class  QSGTextureProvider : public QObject
{
Q_OBJECT
public:
virtual QSGTexture *texture() const = 0;

signals:
void textureChanged();
};




# 21 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgvertexcolormaterial.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgmaterial.h"


















































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgvertexcolormaterial.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qsgvertexcolormaterial.h"


class  QSGVertexColorMaterial : public QSGMaterial
{
public:
QSGVertexColorMaterial();

int compare(const QSGMaterial *other) const;

protected:
virtual QSGMaterialType *type() const;
virtual QSGMaterialShader *createShader() const;
};




# 22 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/qtquickversion.h"









# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtQuick/QtQuick"


# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupportDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupportDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupportDepends"

































































































































# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupportDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"
class QAbstractPrintDialogPrivate;
class QPrinter;


class  QAbstractPrintDialog : public QDialog
{
inline QAbstractPrintDialogPrivate* d_func() { return reinterpret_cast<QAbstractPrintDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QAbstractPrintDialogPrivate* d_func() const { return reinterpret_cast<const QAbstractPrintDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QAbstractPrintDialogPrivate;
Q_OBJECT

public:

enum PrintRange {
AllPages,
Selection,
PageRange,
CurrentPage
};

enum PrintDialogOption {
None = 0x0000, 
PrintToFile = 0x0001,
PrintSelection = 0x0002,
PrintPageRange = 0x0004,
PrintShowPageSize = 0x0008,
PrintCollateCopies = 0x0010,
DontUseSheet = 0x0020,
PrintCurrentPage = 0x0040
};

typedef QFlags<PrintDialogOption> PrintDialogOptions;


# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"
explicit QAbstractPrintDialog(QPrinter *printer, QWidget *parent = 0);
~QAbstractPrintDialog();

virtual int exec() = 0;


void addEnabledOption(PrintDialogOption option);
void setEnabledOptions(PrintDialogOptions options);
PrintDialogOptions enabledOptions() const;
bool isOptionEnabled(PrintDialogOption option) const;

void setOptionTabs(const QList<QWidget*> &tabs);

void setPrintRange(PrintRange range);
PrintRange printRange() const;

void setMinMax(int min, int max);
int minPage() const;
int maxPage() const;

void setFromTo(int fromPage, int toPage);
int fromPage() const;
int toPage() const;

QPrinter *printer() const;

protected:
QAbstractPrintDialog(QAbstractPrintDialogPrivate &ptr, QPrinter *printer, QWidget *parent = 0);

private:
QAbstractPrintDialog(const QAbstractPrintDialog &) ; QAbstractPrintDialog &operator=(const QAbstractPrintDialog &) ;


# 118 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"
};

 inline QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type> operator|(QAbstractPrintDialog::PrintDialogOptions::enum_type f1, QAbstractPrintDialog::PrintDialogOptions::enum_type f2) { return QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type>(f1) | f2; }  inline QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type> operator|(QAbstractPrintDialog::PrintDialogOptions::enum_type f1, QFlags<QAbstractPrintDialog::PrintDialogOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QAbstractPrintDialog::PrintDialogOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }



# 124 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"



# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"





























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"
class QPrinter;
class QPageSetupDialogPrivate;

class  QPageSetupDialog : public QDialog
{
Q_OBJECT
inline QPageSetupDialogPrivate* d_func() { return reinterpret_cast<QPageSetupDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPageSetupDialogPrivate* d_func() const { return reinterpret_cast<const QPageSetupDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPageSetupDialogPrivate;

public:
explicit QPageSetupDialog(QPrinter *printer, QWidget *parent = 0);
explicit QPageSetupDialog(QWidget *parent = 0);
virtual ~QPageSetupDialog();




# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"
virtual int exec();



# 73 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"
void open() { QDialog::open(); }




# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"
void open(QObject *receiver, const char *member);

void done(int result);

QPrinter *printer();
};



# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qpagesetupdialog.h"



# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qabstractprintdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"





# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
class QPrintDialogPrivate;
class QPushButton;
class QPrinter;

class  QPrintDialog : public QAbstractPrintDialog
{
Q_OBJECT
inline QPrintDialogPrivate* d_func() { return reinterpret_cast<QPrintDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPrintDialogPrivate* d_func() const { return reinterpret_cast<const QPrintDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPrintDialogPrivate;
Q_ENUMS(PrintDialogOption)
Q_PROPERTY(PrintDialogOptions options READ options WRITE setOptions)

public:
explicit QPrintDialog(QPrinter *printer, QWidget *parent = 0);
explicit QPrintDialog(QWidget *parent = 0);
~QPrintDialog();

int exec();

# 70 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
virtual void accept();

# 72 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
void done(int result);

void setOption(PrintDialogOption option, bool on = true);
bool testOption(PrintDialogOption option) const;
void setOptions(PrintDialogOptions options);
PrintDialogOptions options() const;


# 80 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
void setVisible(bool visible);




# 85 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
void open() { QDialog::open(); }




# 90 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
void open(QObject *receiver, const char *member);







# 98 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
void accepted() { QDialog::accepted(); }





# 104 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
signals:
void accepted(QPrinter *printer);

private:

# 109 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"



# 112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"


# 114 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
friend class QUnixPrintWidget;

# 116 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"
};



# 120 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintdialog.h"



# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewdialog.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qdialog.h"






























































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewdialog.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"





























































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewdialog.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewdialog.h"



class QGraphicsView;
class QPrintPreviewDialogPrivate;
class QPrinter;

class  QPrintPreviewDialog : public QDialog
{
Q_OBJECT
inline QPrintPreviewDialogPrivate* d_func() { return reinterpret_cast<QPrintPreviewDialogPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPrintPreviewDialogPrivate* d_func() const { return reinterpret_cast<const QPrintPreviewDialogPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPrintPreviewDialogPrivate;

public:
explicit QPrintPreviewDialog(QWidget *parent = 0, Qt::WindowFlags flags = 0);
explicit QPrintPreviewDialog(QPrinter *printer, QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QPrintPreviewDialog();



# 69 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewdialog.h"
void open() { QDialog::open(); }




# 74 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewdialog.h"
void open(QObject *receiver, const char *member);

QPrinter *printer();

void setVisible(bool visible);
void done(int result);

signals:
void paintRequested(QPrinter *printer);

private:










};







# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintengine.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintengine.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpagedpaintdevice.h"



























































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"





























































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"


# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"









# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
class QPrinterPrivate;
class QPaintEngine;
class QPrintEngine;
class QPrinterInfo;

class  QPrinter : public QPagedPaintDevice
{
inline QPrinterPrivate* d_func() { return reinterpret_cast<QPrinterPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPrinterPrivate* d_func() const { return reinterpret_cast<const QPrinterPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPrinterPrivate;
public:
enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution };

explicit QPrinter(PrinterMode mode = ScreenResolution);
explicit QPrinter(const QPrinterInfo& printer, PrinterMode mode = ScreenResolution);
~QPrinter();

int devType() const;

enum Orientation { Portrait, Landscape };


# 79 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
typedef PageSize PaperSize;







# 87 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
enum PageOrder { FirstPageFirst,
LastPageFirst };

enum ColorMode { GrayScale,
Color };

enum PaperSource { OnlyOne,
Lower,
Middle,
Manual,
Envelope,
EnvelopeManual,
Auto,
Tractor,
SmallFormat,
LargeFormat,
LargeCapacity,
Cassette,
FormSource,
MaxPageSource
};

enum PrinterState { Idle,
Active,
Aborted,
Error };

enum OutputFormat { NativeFormat, PdfFormat };


enum PrintRange { AllPages, Selection, PageRange, CurrentPage };

enum Unit {
Millimeter,
Point,
Inch,
Pica,
Didot,
Cicero,
DevicePixel
};

enum DuplexMode {
DuplexNone = 0,
DuplexAuto,
DuplexLongSide,
DuplexShortSide
};

void setOutputFormat(OutputFormat format);
OutputFormat outputFormat() const;

void setPrinterName(const QString &);
QString printerName() const;

bool isValid() const;

void setOutputFileName(const QString &);
QString outputFileName()const;

void setPrintProgram(const QString &);
QString printProgram() const;

void setDocName(const QString &);
QString docName() const;

void setCreator(const QString &);
QString creator() const;

void setOrientation(Orientation);
Orientation orientation() const;

void setPageSize(PageSize);
PageSize pageSize() const;

void setPageSizeMM(const QSizeF &size);

void setPaperSize(PaperSize);
PaperSize paperSize() const;

void setPaperSize(const QSizeF &paperSize, Unit unit);
QSizeF paperSize(Unit unit) const;

void setPaperName(const QString &paperName);
QString paperName() const;

void setPageOrder(PageOrder);
PageOrder pageOrder() const;

void setResolution(int);
int resolution() const;

void setColorMode(ColorMode);
ColorMode colorMode() const;

void setCollateCopies(bool collate);
bool collateCopies() const;

void setFullPage(bool);
bool fullPage() const;

void setNumCopies(int);
int numCopies() const;

int actualNumCopies() const;

void setCopyCount(int);
int copyCount() const;
bool supportsMultipleCopies() const;

void setPaperSource(PaperSource);
PaperSource paperSource() const;

void setDuplex(DuplexMode duplex);
DuplexMode duplex() const;

QList<int> supportedResolutions() const;





# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
void setFontEmbeddingEnabled(bool enable);
bool fontEmbeddingEnabled() const;

void setDoubleSidedPrinting(bool enable);
bool doubleSidedPrinting() const;






# 220 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
QRect paperRect() const;
QRect pageRect() const;
QRectF paperRect(Unit) const;
QRectF pageRect(Unit) const;


# 226 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
QString printerSelectionOption() const;
void setPrinterSelectionOption(const QString &);


# 230 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"
bool newPage();
bool abort();

PrinterState printerState() const;

QPaintEngine *paintEngine() const;
QPrintEngine *printEngine() const;

void setFromTo(int fromPage, int toPage);
int fromPage() const;
int toPage() const;

void setPrintRange(PrintRange range);
PrintRange printRange() const;

void setMargins(const Margins &m);

void setPageMargins(qreal left, qreal top, qreal right, qreal bottom, Unit unit);
void getPageMargins(qreal *left, qreal *top, qreal *right, qreal *bottom, Unit unit) const;

protected:
int metric(PaintDeviceMetric) const;
void setEngines(QPrintEngine *printEngine, QPaintEngine *paintEngine);

private:
QPrinter(const QPrinter &) ; QPrinter &operator=(const QPrinter &) ;

QScopedPointer<QPrinterPrivate> d_ptr;

friend class QPrintDialogPrivate;
friend class QAbstractPrintDialog;
friend class QAbstractPrintDialogPrivate;
friend class QPrintPreviewWidgetPrivate;
friend class QTextDocument;
friend class QPageSetupWidget;
};



# 269 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"



# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintengine.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintengine.h"





# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintengine.h"
class  QPrintEngine
{
public:
virtual ~QPrintEngine() {}
enum PrintEnginePropertyKey {
PPK_CollateCopies,
PPK_ColorMode,
PPK_Creator,
PPK_DocumentName,
PPK_FullPage,
PPK_NumberOfCopies,
PPK_Orientation,
PPK_OutputFileName,
PPK_PageOrder,
PPK_PageRect,
PPK_PageSize,
PPK_PaperRect,
PPK_PaperSource,
PPK_PrinterName,
PPK_PrinterProgram,
PPK_Resolution,
PPK_SelectionOption,
PPK_SupportedResolutions,

PPK_WindowsPageSize,
PPK_FontEmbedding,

PPK_Duplex,

PPK_PaperSources,
PPK_CustomPaperSize,
PPK_PageMargins,
PPK_CopyCount,
PPK_SupportsMultipleCopies,
PPK_PaperName,
PPK_PaperSize = PPK_PageSize,

PPK_CustomBase = 0xff00
};

virtual void setProperty(PrintEnginePropertyKey key, const QVariant &value) = 0;
virtual QVariant property(PrintEnginePropertyKey key) const = 0;

virtual bool newPage() = 0;
virtual bool abort() = 0;

virtual int metric(QPaintDevice::PaintDeviceMetric) const = 0;

virtual QPrinter::PrinterState printerState() const = 0;
};



# 106 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintengine.h"



# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"















































































































































































































































































# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QList"

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qpair.h"













































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/QPair"

# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"















































































































































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QPrinter"

# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"




# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"
class QPrinterInfoPrivate;
class QPrinterInfoPrivateDeleter;
class  QPrinterInfo
{
public:
QPrinterInfo();
QPrinterInfo(const QPrinterInfo &other);
explicit QPrinterInfo(const QPrinter &printer);
~QPrinterInfo();

QPrinterInfo &operator=(const QPrinterInfo &other);

QString printerName() const;
QString description() const;
QString location() const;
QString makeAndModel() const;

bool isNull() const;
bool isDefault() const;

QList<QPrinter::PaperSize> supportedPaperSizes() const;
QList<QPair<QString, QSizeF> > supportedSizesWithNames() const;

static QList<QPrinterInfo> availablePrinters();
static QPrinterInfo defaultPrinter();
static QPrinterInfo printerInfo(const QString &printerName);

private:
explicit QPrinterInfo(const QString &name);

private:
friend class QPlatformPrinterSupport;
inline QPrinterInfoPrivate* d_func() { return reinterpret_cast<QPrinterInfoPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPrinterInfoPrivate* d_func() const { return reinterpret_cast<const QPrinterInfoPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPrinterInfoPrivate;
QScopedPointer<QPrinterInfoPrivate, QPrinterInfoPrivateDeleter> d_ptr;
};



# 91 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinterinfo.h"



# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportglobal.h"





























































# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewwidget.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewwidget.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprinter.h"















































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewwidget.h"




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qprintpreviewwidget.h"



class QPrintPreviewWidgetPrivate;

class  QPrintPreviewWidget : public QWidget
{
Q_OBJECT
inline QPrintPreviewWidgetPrivate* d_func() { return reinterpret_cast<QPrintPreviewWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QPrintPreviewWidgetPrivate* d_func() const { return reinterpret_cast<const QPrintPreviewWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QPrintPreviewWidgetPrivate;
public:

enum ViewMode {
SinglePageView,
FacingPagesView,
AllPagesView
};

enum ZoomMode {
CustomZoom,
FitToWidth,
FitInView
};

explicit QPrintPreviewWidget(QPrinter *printer, QWidget *parent = 0, Qt::WindowFlags flags = 0);
explicit QPrintPreviewWidget(QWidget *parent = 0, Qt::WindowFlags flags = 0);
~QPrintPreviewWidget();

qreal zoomFactor() const;
QPrinter::Orientation orientation() const;
ViewMode viewMode() const;
ZoomMode zoomMode() const;
int currentPage() const;
int pageCount() const;
void setVisible(bool visible);

public slots:
void print();

void zoomIn(qreal zoom = 1.1);
void zoomOut(qreal zoom = 1.1);
void setZoomFactor(qreal zoomFactor);
void setOrientation(QPrinter::Orientation orientation);
void setViewMode(ViewMode viewMode);
void setZoomMode(ZoomMode zoomMode);
void setCurrentPage(int pageNumber);

void fitToWidth();
void fitInView();
void setLandscapeOrientation();
void setPortraitOrientation();
void setSinglePageViewMode();
void setFacingPagesViewMode();
void setAllPagesViewMode();

void updatePreview();

signals:
void paintRequested(QPrinter *printer);
void previewChanged();

private:


};





# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/qtprintsupportversion.h"









# 13 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtPrintSupport/QtPrintSupport"


# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"



# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGLDepends"
































































































































































# 2 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGLDepends"
































































































# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGLDepends"

































































































































# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGLDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"














































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopengl.h"















































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintengine.h"























































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglcolormap.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qcolor.h"





















































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglcolormap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvector.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglcolormap.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qtopenglglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qtopenglglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qtopenglglobal.h"












# 59 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qtopenglglobal.h"



# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglcolormap.h"


# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglcolormap.h"



class  QGLColormap
{
public:
QGLColormap();
QGLColormap(const QGLColormap &);
~QGLColormap();

QGLColormap &operator=(const QGLColormap &);

bool isEmpty() const;
int size() const;
void detach();

void setEntries(int count, const QRgb * colors, int base = 0);
void setEntry(int idx, QRgb color);
void setEntry(int idx, const QColor & color);
QRgb entryRgb(int idx) const;
QColor entryColor(int idx) const;
int find(QRgb color) const;
int findNearest(QRgb color) const;

protected:
Qt::HANDLE handle() { return d ? d->cmapHandle : 0; }
void setHandle(Qt::HANDLE ahandle) { d->cmapHandle = ahandle; }

private:
struct QGLColormapData {
QBasicAtomicInt ref;
QVector<QRgb> *cells;
Qt::HANDLE cmapHandle;
};

QGLColormapData *d;
static struct QGLColormapData shared_null;
static void cleanup(QGLColormapData *x);
void detach_helper();

friend class QGLWidget;
friend class QGLWidgetPrivate;
};

inline void QGLColormap::detach()
{
if (d->ref.load() != 1)
detach_helper();
}




# 50 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qmap.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qsurfaceformat.h"

































































































































































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/QSurfaceFormat"

# 54 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"



# 57 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"





class QPixmap;
class QGLWidgetPrivate;
class QGLContextPrivate;


namespace QGL
{
enum FormatOption {
DoubleBuffer = 0x0001,
DepthBuffer = 0x0002,
Rgba = 0x0004,
AlphaChannel = 0x0008,
AccumBuffer = 0x0010,
StencilBuffer = 0x0020,
StereoBuffers = 0x0040,
DirectRendering = 0x0080,
HasOverlay = 0x0100,
SampleBuffers = 0x0200,
DeprecatedFunctions = 0x0400,
SingleBuffer = DoubleBuffer << 16,
NoDepthBuffer = DepthBuffer << 16,
ColorIndex = Rgba << 16,
NoAlphaChannel = AlphaChannel << 16,
NoAccumBuffer = AccumBuffer << 16,
NoStencilBuffer = StencilBuffer << 16,
NoStereoBuffers = StereoBuffers << 16,
IndirectRendering = DirectRendering << 16,
NoOverlay = HasOverlay << 16,
NoSampleBuffers = SampleBuffers << 16,
NoDeprecatedFunctions = DeprecatedFunctions << 16
};
typedef QFlags<FormatOption> FormatOptions;
}

 inline QFlags<QGL::FormatOptions::enum_type> operator|(QGL::FormatOptions::enum_type f1, QGL::FormatOptions::enum_type f2) { return QFlags<QGL::FormatOptions::enum_type>(f1) | f2; }  inline QFlags<QGL::FormatOptions::enum_type> operator|(QGL::FormatOptions::enum_type f1, QFlags<QGL::FormatOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGL::FormatOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class QGLFormatPrivate;

class  QGLFormat
{
public:
QGLFormat();
QGLFormat(QGL::FormatOptions options, int plane = 0);
QGLFormat(const QGLFormat &other);
QGLFormat &operator=(const QGLFormat &other);
~QGLFormat();

void setDepthBufferSize(int size);
int depthBufferSize() const;

void setAccumBufferSize(int size);
int accumBufferSize() const;

void setRedBufferSize(int size);
int redBufferSize() const;

void setGreenBufferSize(int size);
int greenBufferSize() const;

void setBlueBufferSize(int size);
int blueBufferSize() const;

void setAlphaBufferSize(int size);
int alphaBufferSize() const;

void setStencilBufferSize(int size);
int stencilBufferSize() const;

void setSampleBuffers(bool enable);
bool sampleBuffers() const;

void setSamples(int numSamples);
int samples() const;

void setSwapInterval(int interval);
int swapInterval() const;

bool doubleBuffer() const;
void setDoubleBuffer(bool enable);
bool depth() const;
void setDepth(bool enable);
bool rgba() const;
void setRgba(bool enable);
bool alpha() const;
void setAlpha(bool enable);
bool accum() const;
void setAccum(bool enable);
bool stencil() const;
void setStencil(bool enable);
bool stereo() const;
void setStereo(bool enable);
bool directRendering() const;
void setDirectRendering(bool enable);
bool hasOverlay() const;
void setOverlay(bool enable);

int plane() const;
void setPlane(int plane);

void setOption(QGL::FormatOptions opt);
bool testOption(QGL::FormatOptions opt) const;

static QGLFormat defaultFormat();
static void setDefaultFormat(const QGLFormat& f);

static QGLFormat defaultOverlayFormat();
static void setDefaultOverlayFormat(const QGLFormat& f);

static bool hasOpenGL();
static bool hasOpenGLOverlays();

void setVersion(int major, int minor);
int majorVersion() const;
int minorVersion() const;

enum OpenGLContextProfile {
NoProfile,
CoreProfile,
CompatibilityProfile
};

void setProfile(OpenGLContextProfile profile);
OpenGLContextProfile profile() const;

enum OpenGLVersionFlag {
OpenGL_Version_None = 0x00000000,
OpenGL_Version_1_1 = 0x00000001,
OpenGL_Version_1_2 = 0x00000002,
OpenGL_Version_1_3 = 0x00000004,
OpenGL_Version_1_4 = 0x00000008,
OpenGL_Version_1_5 = 0x00000010,
OpenGL_Version_2_0 = 0x00000020,
OpenGL_Version_2_1 = 0x00000040,
OpenGL_ES_Common_Version_1_0 = 0x00000080,
OpenGL_ES_CommonLite_Version_1_0 = 0x00000100,
OpenGL_ES_Common_Version_1_1 = 0x00000200,
OpenGL_ES_CommonLite_Version_1_1 = 0x00000400,
OpenGL_ES_Version_2_0 = 0x00000800,
OpenGL_Version_3_0 = 0x00001000,
OpenGL_Version_3_1 = 0x00002000,
OpenGL_Version_3_2 = 0x00004000,
OpenGL_Version_3_3 = 0x00008000,
OpenGL_Version_4_0 = 0x00010000,
OpenGL_Version_4_1 = 0x00020000,
OpenGL_Version_4_2 = 0x00040000,
OpenGL_Version_4_3 = 0x00080000
};
typedef QFlags<OpenGLVersionFlag> OpenGLVersionFlags;

static OpenGLVersionFlags openGLVersionFlags();

static QGLFormat fromSurfaceFormat(const QSurfaceFormat &format);
static QSurfaceFormat toSurfaceFormat(const QGLFormat &format);
private:
QGLFormatPrivate *d;

void detach();

friend  bool operator==(const QGLFormat&, const QGLFormat&);
friend  bool operator!=(const QGLFormat&, const QGLFormat&);

# 223 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"
friend  QDebug operator<<(QDebug, const QGLFormat &);

# 225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"
};

 inline QFlags<QGLFormat::OpenGLVersionFlags::enum_type> operator|(QGLFormat::OpenGLVersionFlags::enum_type f1, QGLFormat::OpenGLVersionFlags::enum_type f2) { return QFlags<QGLFormat::OpenGLVersionFlags::enum_type>(f1) | f2; }  inline QFlags<QGLFormat::OpenGLVersionFlags::enum_type> operator|(QGLFormat::OpenGLVersionFlags::enum_type f1, QFlags<QGLFormat::OpenGLVersionFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGLFormat::OpenGLVersionFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

 bool operator==(const QGLFormat&, const QGLFormat&);
 bool operator!=(const QGLFormat&, const QGLFormat&);


# 233 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"
 QDebug operator<<(QDebug, const QGLFormat &);


# 236 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"
class QGLFunctions;

class  QGLContext
{
inline QGLContextPrivate* d_func() { return reinterpret_cast<QGLContextPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLContextPrivate* d_func() const { return reinterpret_cast<const QGLContextPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLContextPrivate;
public:
QGLContext(const QGLFormat& format, QPaintDevice* device);
QGLContext(const QGLFormat& format);
virtual ~QGLContext();

virtual bool create(const QGLContext* shareContext = 0);
bool isValid() const;
bool isSharing() const;
void reset();

static bool areSharing(const QGLContext *context1, const QGLContext *context2);

QGLFormat format() const;
QGLFormat requestedFormat() const;
void setFormat(const QGLFormat& format);

void moveToThread(QThread *thread);

virtual void makeCurrent();
virtual void doneCurrent();

virtual void swapBuffers() const;

QGLFunctions *functions() const;

enum BindOption {
NoBindOption = 0x0000,
InvertedYBindOption = 0x0001,
MipmapBindOption = 0x0002,
PremultipliedAlphaBindOption = 0x0004,
LinearFilteringBindOption = 0x0008,

MemoryManagedBindOption = 0x0010, 
CanFlipNativePixmapBindOption = 0x0020, 
TemporarilyCachedBindOption = 0x0040, 

DefaultBindOption = LinearFilteringBindOption
| InvertedYBindOption
| MipmapBindOption,
InternalBindOption = MemoryManagedBindOption
| PremultipliedAlphaBindOption
};
typedef QFlags<BindOption> BindOptions;

GLuint bindTexture(const QImage &image, GLenum target, GLint format,
BindOptions options);
GLuint bindTexture(const QPixmap &pixmap, GLenum target, GLint format,
BindOptions options);

GLuint bindTexture(const QImage &image, GLenum target = GL_TEXTURE_2D,
GLint format = GL_RGBA);
GLuint bindTexture(const QPixmap &pixmap, GLenum target = GL_TEXTURE_2D,
GLint format = GL_RGBA);
GLuint bindTexture(const QString &fileName);

void deleteTexture(GLuint tx_id);

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);

static void setTextureCacheLimit(int size);
static int textureCacheLimit();

QFunctionPointer getProcAddress(const QString &proc) const;
QPaintDevice* device() const;
QColor overlayTransparentColor() const;

static const QGLContext* currentContext();

static QGLContext *fromOpenGLContext(QOpenGLContext *platformContext);
QOpenGLContext *contextHandle() const;

protected:
virtual bool chooseContext(const QGLContext* shareContext = 0);

bool deviceIsPixmap() const;
bool windowCreated() const;
void setWindowCreated(bool on);
bool initialized() const;
void setInitialized(bool on);

uint colorIndex(const QColor& c) const;
void setValid(bool valid);
void setDevice(QPaintDevice *pDev);

protected:
static QGLContext* currentCtx;

private:
QGLContext(QOpenGLContext *windowContext);

QScopedPointer<QGLContextPrivate> d_ptr;

friend class QGLPixelBuffer;
friend class QGLPixelBufferPrivate;
friend class QGLWidget;
friend class QGLWidgetPrivate;
friend class QGLGlyphCache;
friend class QGL2PaintEngineEx;
friend class QGL2PaintEngineExPrivate;
friend class QGLEngineShaderManager;
friend class QGLTextureGlyphCache;
friend struct QGLGlyphTexture;
friend class QGLContextGroup;
friend class QGLPixmapBlurFilter;
friend class QGLTexture;
friend QGLFormat::OpenGLVersionFlags QGLFormat::openGLVersionFlags();
friend class QGLFramebufferObject;
friend class QGLFramebufferObjectPrivate;
friend class QGLFBOGLPaintDevice;
friend class QGLPaintDevice;
friend class QGLWidgetGLPaintDevice;
friend class QX11GLSharedContexts;
friend class QGLContextResourceBase;
friend class QSGDistanceFieldGlyphCache;
private:
QGLContext(const QGLContext &) ; QGLContext &operator=(const QGLContext &) ;
};

 inline QFlags<QGLContext::BindOptions::enum_type> operator|(QGLContext::BindOptions::enum_type f1, QGLContext::BindOptions::enum_type f2) { return QFlags<QGLContext::BindOptions::enum_type>(f1) | f2; }  inline QFlags<QGLContext::BindOptions::enum_type> operator|(QGLContext::BindOptions::enum_type f1, QFlags<QGLContext::BindOptions::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGLContext::BindOptions::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

class  QGLWidget : public QWidget
{
Q_OBJECT
inline QGLWidgetPrivate* d_func() { return reinterpret_cast<QGLWidgetPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLWidgetPrivate* d_func() const { return reinterpret_cast<const QGLWidgetPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLWidgetPrivate;
public:
explicit QGLWidget(QWidget* parent=0,
const QGLWidget* shareWidget = 0, Qt::WindowFlags f=0);
explicit QGLWidget(QGLContext *context, QWidget* parent=0,
const QGLWidget* shareWidget = 0, Qt::WindowFlags f=0);
explicit QGLWidget(const QGLFormat& format, QWidget* parent=0,
const QGLWidget* shareWidget = 0, Qt::WindowFlags f=0);
~QGLWidget();

void qglColor(const QColor& c) const;
void qglClearColor(const QColor& c) const;

bool isValid() const;
bool isSharing() const;

void makeCurrent();
void doneCurrent();

bool doubleBuffer() const;
void swapBuffers();

QGLFormat format() const;
void setFormat(const QGLFormat& format);

QGLContext* context() const;
void setContext(QGLContext* context, const QGLContext* shareContext = 0,
bool deleteOldContext = true);

QPixmap renderPixmap(int w = 0, int h = 0, bool useContext = false);
QImage grabFrameBuffer(bool withAlpha = false);

void makeOverlayCurrent();
const QGLContext* overlayContext() const;

static QImage convertToGLFormat(const QImage& img);

const QGLColormap & colormap() const;
void setColormap(const QGLColormap & map);

void renderText(int x, int y, const QString & str,
const QFont & fnt = QFont());
void renderText(double x, double y, double z, const QString & str,
const QFont & fnt = QFont());
QPaintEngine *paintEngine() const;

GLuint bindTexture(const QImage &image, GLenum target, GLint format,
QGLContext::BindOptions options);
GLuint bindTexture(const QPixmap &pixmap, GLenum target, GLint format,
QGLContext::BindOptions options);

GLuint bindTexture(const QImage &image, GLenum target = GL_TEXTURE_2D,
GLint format = GL_RGBA);
GLuint bindTexture(const QPixmap &pixmap, GLenum target = GL_TEXTURE_2D,
GLint format = GL_RGBA);

GLuint bindTexture(const QString &fileName);

void deleteTexture(GLuint tx_id);

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);

public slots:
virtual void updateGL();
virtual void updateOverlayGL();

protected:
bool event(QEvent *);
virtual void initializeGL();
virtual void resizeGL(int w, int h);
virtual void paintGL();

virtual void initializeOverlayGL();
virtual void resizeOverlayGL(int w, int h);
virtual void paintOverlayGL();

void setAutoBufferSwap(bool on);
bool autoBufferSwap() const;

void paintEvent(QPaintEvent*);
void resizeEvent(QResizeEvent*);

virtual void glInit();
virtual void glDraw();

QGLWidget(QGLWidgetPrivate &dd,
const QGLFormat &format = QGLFormat(),
QWidget *parent = 0,
const QGLWidget* shareWidget = 0,
Qt::WindowFlags f = 0);
private:
QGLWidget(const QGLWidget &) ; QGLWidget &operator=(const QGLWidget &) ;

friend class QGLDrawable;
friend class QGLPixelBuffer;
friend class QGLPixelBufferPrivate;
friend class QGLContext;
friend class QGLContextPrivate;
friend class QGLOverlayWidget;
friend class QGLPaintDevice;
friend class QGLWidgetGLPaintDevice;
};






inline bool QGLFormat::doubleBuffer() const
{
return testOption(QGL::DoubleBuffer);
}

inline bool QGLFormat::depth() const
{
return testOption(QGL::DepthBuffer);
}

inline bool QGLFormat::rgba() const
{
return testOption(QGL::Rgba);
}

inline bool QGLFormat::alpha() const
{
return testOption(QGL::AlphaChannel);
}

inline bool QGLFormat::accum() const
{
return testOption(QGL::AccumBuffer);
}

inline bool QGLFormat::stencil() const
{
return testOption(QGL::StencilBuffer);
}

inline bool QGLFormat::stereo() const
{
return testOption(QGL::StereoBuffers);
}

inline bool QGLFormat::directRendering() const
{
return testOption(QGL::DirectRendering);
}

inline bool QGLFormat::hasOverlay() const
{
return testOption(QGL::HasOverlay);
}

inline bool QGLFormat::sampleBuffers() const
{
return testOption(QGL::SampleBuffers);
}





# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglbuffer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qscopedpointer.h"

















































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglbuffer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"















































































































































































































































































































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglbuffer.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglbuffer.h"



class QGLBufferPrivate;

class  QGLBuffer
{
public:
enum Type
{
VertexBuffer = 0x8892, 
IndexBuffer = 0x8893, 
PixelPackBuffer = 0x88EB, 
PixelUnpackBuffer = 0x88EC 
};

QGLBuffer();
explicit QGLBuffer(QGLBuffer::Type type);
QGLBuffer(const QGLBuffer &other);
~QGLBuffer();

QGLBuffer &operator=(const QGLBuffer &other);

enum UsagePattern
{
StreamDraw = 0x88E0, 
StreamRead = 0x88E1, 
StreamCopy = 0x88E2, 
StaticDraw = 0x88E4, 
StaticRead = 0x88E5, 
StaticCopy = 0x88E6, 
DynamicDraw = 0x88E8, 
DynamicRead = 0x88E9, 
DynamicCopy = 0x88EA 
};

enum Access
{
ReadOnly = 0x88B8, 
WriteOnly = 0x88B9, 
ReadWrite = 0x88BA 
};

QGLBuffer::Type type() const;

QGLBuffer::UsagePattern usagePattern() const;
void setUsagePattern(QGLBuffer::UsagePattern value);

bool create();
bool isCreated() const;

void destroy();

bool bind();
void release();

static void release(QGLBuffer::Type type);

GLuint bufferId() const;

int size() const;

bool read(int offset, void *data, int count);
void write(int offset, const void *data, int count);

void allocate(const void *data, int count);
inline void allocate(int count) { allocate(0, count); }

void *map(QGLBuffer::Access access);
bool unmap();

private:
QGLBufferPrivate *d_ptr;

inline QGLBufferPrivate* d_func() { return reinterpret_cast<QGLBufferPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLBufferPrivate* d_func() const { return reinterpret_cast<const QGLBufferPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLBufferPrivate;
};




# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglcolormap.h"





































































































# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglframebufferobject.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"















































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglframebufferobject.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglframebufferobject.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglframebufferobject.h"



class QGLFramebufferObjectPrivate;
class QGLFramebufferObjectFormat;

class  QGLFramebufferObject : public QPaintDevice
{
inline QGLFramebufferObjectPrivate* d_func() { return reinterpret_cast<QGLFramebufferObjectPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLFramebufferObjectPrivate* d_func() const { return reinterpret_cast<const QGLFramebufferObjectPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLFramebufferObjectPrivate;
public:
enum Attachment {
NoAttachment,
CombinedDepthStencil,
Depth
};

QGLFramebufferObject(const QSize &size, GLenum target = GL_TEXTURE_2D);
QGLFramebufferObject(int width, int height, GLenum target = GL_TEXTURE_2D);

# 67 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglframebufferobject.h"
QGLFramebufferObject(const QSize &size, Attachment attachment,
GLenum target = GL_TEXTURE_2D, GLenum internal_format = GL_RGBA8);
QGLFramebufferObject(int width, int height, Attachment attachment,
GLenum target = GL_TEXTURE_2D, GLenum internal_format = GL_RGBA8);







# 78 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglframebufferobject.h"
QGLFramebufferObject(const QSize &size, const QGLFramebufferObjectFormat &format);
QGLFramebufferObject(int width, int height, const QGLFramebufferObjectFormat &format);

virtual ~QGLFramebufferObject();

QGLFramebufferObjectFormat format() const;

bool isValid() const;
bool isBound() const;
bool bind();
bool release();

GLuint texture() const;
QSize size() const;
QImage toImage() const;
Attachment attachment() const;

QPaintEngine *paintEngine() const;
GLuint handle() const;

static bool bindDefault();

static bool hasOpenGLFramebufferObjects();

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D);

static bool hasOpenGLFramebufferBlit();
static void blitFramebuffer(QGLFramebufferObject *target, const QRect &targetRect,
QGLFramebufferObject *source, const QRect &sourceRect,
GLbitfield buffers = GL_COLOR_BUFFER_BIT,
GLenum filter = GL_NEAREST);

protected:
int metric(PaintDeviceMetric metric) const;
int devType() const { return QInternal::FramebufferObject; }

private:
QGLFramebufferObject(const QGLFramebufferObject &) ; QGLFramebufferObject &operator=(const QGLFramebufferObject &) ;
QScopedPointer<QGLFramebufferObjectPrivate> d_ptr;
friend class QGLPaintDevice;
friend class QGLFBOGLPaintDevice;
};

class QGLFramebufferObjectFormatPrivate;
class  QGLFramebufferObjectFormat
{
public:
QGLFramebufferObjectFormat();
QGLFramebufferObjectFormat(const QGLFramebufferObjectFormat &other);
QGLFramebufferObjectFormat &operator=(const QGLFramebufferObjectFormat &other);
~QGLFramebufferObjectFormat();

void setSamples(int samples);
int samples() const;

void setMipmap(bool enabled);
bool mipmap() const;

void setAttachment(QGLFramebufferObject::Attachment attachment);
QGLFramebufferObject::Attachment attachment() const;

void setTextureTarget(GLenum target);
GLenum textureTarget() const;

void setInternalTextureFormat(GLenum internalTextureFormat);
GLenum internalTextureFormat() const;

bool operator==(const QGLFramebufferObjectFormat& other) const;
bool operator!=(const QGLFramebufferObjectFormat& other) const;

private:
QGLFramebufferObjectFormatPrivate *d;

void detach();
};




# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"



















































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"















































































































































































































































































































































































































































































































































# 52 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qopenglcontext.h"



































































































































































































































# 53 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"


# 55 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"




typedef ptrdiff_t qgl_GLintptr;
typedef ptrdiff_t qgl_GLsizeiptr;
















# 77 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
struct QGLFunctionsPrivate;





































































































# 179 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
class  QGLFunctions
{
public:
QGLFunctions();
explicit QGLFunctions(const QGLContext *context);
~QGLFunctions() {}

enum OpenGLFeature
{
Multitexture = 0x0001,
Shaders = 0x0002,
Buffers = 0x0004,
Framebuffers = 0x0008,
BlendColor = 0x0010,
BlendEquation = 0x0020,
BlendEquationSeparate = 0x0040,
BlendFuncSeparate = 0x0080,
BlendSubtract = 0x0100,
CompressedTextures = 0x0200,
Multisample = 0x0400,
StencilSeparate = 0x0800,
NPOTTextures = 0x1000
};
typedef QFlags<OpenGLFeature> OpenGLFeatures;

QGLFunctions::OpenGLFeatures openGLFeatures() const;
bool hasOpenGLFeature(QGLFunctions::OpenGLFeature feature) const;

void initializeGLFunctions(const QGLContext *context = 0);

void glActiveTexture(GLenum texture);
void glAttachShader(GLuint program, GLuint shader);
void glBindAttribLocation(GLuint program, GLuint index, const char* name);
void glBindBuffer(GLenum target, GLuint buffer);
void glBindFramebuffer(GLenum target, GLuint framebuffer);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void glBlendEquation(GLenum mode);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBufferData(GLenum target, qgl_GLsizeiptr size, const void* data, GLenum usage);
void glBufferSubData(GLenum target, qgl_GLintptr offset, qgl_GLsizeiptr size, const void* data);
GLenum glCheckFramebufferStatus(GLenum target);
void glClearDepthf(GLclampf depth);
void glCompileShader(GLuint shader);
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLuint glCreateProgram();
GLuint glCreateShader(GLenum type);
void glDeleteBuffers(GLsizei n, const GLuint* buffers);
void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
void glDeleteProgram(GLuint program);
void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
void glDeleteShader(GLuint shader);
void glDepthRangef(GLclampf zNear, GLclampf zFar);
void glDetachShader(GLuint program, GLuint shader);
void glDisableVertexAttribArray(GLuint index);
void glEnableVertexAttribArray(GLuint index);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glGenBuffers(GLsizei n, GLuint* buffers);
void glGenerateMipmap(GLenum target);
void glGenFramebuffers(GLsizei n, GLuint* framebuffers);
void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);
int glGetAttribLocation(GLuint program, const char* name);
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params);
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void glGetProgramiv(GLuint program, GLenum pname, GLint* params);
void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
void glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog);
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source);
void glGetUniformfv(GLuint program, GLint location, GLfloat* params);
void glGetUniformiv(GLuint program, GLint location, GLint* params);
int glGetUniformLocation(GLuint program, const char* name);
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer);
GLboolean glIsBuffer(GLuint buffer);
GLboolean glIsFramebuffer(GLuint framebuffer);
GLboolean glIsProgram(GLuint program);
GLboolean glIsRenderbuffer(GLuint renderbuffer);
GLboolean glIsShader(GLuint shader);
void glLinkProgram(GLuint program);
void glReleaseShaderCompiler();
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glSampleCoverage(GLclampf value, GLboolean invert);
void glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length);
void glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length);
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void glStencilMaskSeparate(GLenum face, GLuint mask);
void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
void glUniform1f(GLint location, GLfloat x);
void glUniform1fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform1i(GLint location, GLint x);
void glUniform1iv(GLint location, GLsizei count, const GLint* v);
void glUniform2f(GLint location, GLfloat x, GLfloat y);
void glUniform2fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform2i(GLint location, GLint x, GLint y);
void glUniform2iv(GLint location, GLsizei count, const GLint* v);
void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z);
void glUniform3fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform3i(GLint location, GLint x, GLint y, GLint z);
void glUniform3iv(GLint location, GLsizei count, const GLint* v);
void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glUniform4fv(GLint location, GLsizei count, const GLfloat* v);
void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w);
void glUniform4iv(GLint location, GLsizei count, const GLint* v);
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glUseProgram(GLuint program);
void glValidateProgram(GLuint program);
void glVertexAttrib1f(GLuint indx, GLfloat x);
void glVertexAttrib1fv(GLuint indx, const GLfloat* values);
void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y);
void glVertexAttrib2fv(GLuint indx, const GLfloat* values);
void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
void glVertexAttrib3fv(GLuint indx, const GLfloat* values);
void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void glVertexAttrib4fv(GLuint indx, const GLfloat* values);
void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr);

private:
QGLFunctionsPrivate *d_ptr;
static bool isInitialized(const QGLFunctionsPrivate *d) { return d != 0; }
};

 inline QFlags<QGLFunctions::OpenGLFeatures::enum_type> operator|(QGLFunctions::OpenGLFeatures::enum_type f1, QGLFunctions::OpenGLFeatures::enum_type f2) { return QFlags<QGLFunctions::OpenGLFeatures::enum_type>(f1) | f2; }  inline QFlags<QGLFunctions::OpenGLFeatures::enum_type> operator|(QGLFunctions::OpenGLFeatures::enum_type f1, QFlags<QGLFunctions::OpenGLFeatures::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGLFunctions::OpenGLFeatures::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }

struct QGLFunctionsPrivate
{
QGLFunctionsPrivate(const QGLContext *context = 0);


# 319 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
void ( * activeTexture)(GLenum texture);
void ( * attachShader)(GLuint program, GLuint shader);
void ( * bindAttribLocation)(GLuint program, GLuint index, const char* name);
void ( * bindBuffer)(GLenum target, GLuint buffer);
void ( * bindFramebuffer)(GLenum target, GLuint framebuffer);
void ( * bindRenderbuffer)(GLenum target, GLuint renderbuffer);
void ( * blendColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void ( * blendEquation)(GLenum mode);
void ( * blendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha);
void ( * blendFuncSeparate)(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void ( * bufferData)(GLenum target, qgl_GLsizeiptr size, const void* data, GLenum usage);
void ( * bufferSubData)(GLenum target, qgl_GLintptr offset, qgl_GLsizeiptr size, const void* data);
GLenum ( * checkFramebufferStatus)(GLenum target);
void ( * compileShader)(GLuint shader);
void ( * compressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
void ( * compressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLuint ( * createProgram)();
GLuint ( * createShader)(GLenum type);
void ( * deleteBuffers)(GLsizei n, const GLuint* buffers);
void ( * deleteFramebuffers)(GLsizei n, const GLuint* framebuffers);
void ( * deleteProgram)(GLuint program);
void ( * deleteRenderbuffers)(GLsizei n, const GLuint* renderbuffers);
void ( * deleteShader)(GLuint shader);
void ( * detachShader)(GLuint program, GLuint shader);
void ( * disableVertexAttribArray)(GLuint index);
void ( * enableVertexAttribArray)(GLuint index);
void ( * framebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void ( * framebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void ( * genBuffers)(GLsizei n, GLuint* buffers);
void ( * generateMipmap)(GLenum target);
void ( * genFramebuffers)(GLsizei n, GLuint* framebuffers);
void ( * genRenderbuffers)(GLsizei n, GLuint* renderbuffers);
void ( * getActiveAttrib)(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void ( * getActiveUniform)(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
void ( * getAttachedShaders)(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);
int ( * getAttribLocation)(GLuint program, const char* name);
void ( * getBufferParameteriv)(GLenum target, GLenum pname, GLint* params);
void ( * getFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void ( * getProgramiv)(GLuint program, GLenum pname, GLint* params);
void ( * getProgramInfoLog)(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog);
void ( * getRenderbufferParameteriv)(GLenum target, GLenum pname, GLint* params);
void ( * getShaderiv)(GLuint shader, GLenum pname, GLint* params);
void ( * getShaderInfoLog)(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog);
void ( * getShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
void ( * getShaderSource)(GLuint shader, GLsizei bufsize, GLsizei* length, char* source);
void ( * getUniformfv)(GLuint program, GLint location, GLfloat* params);
void ( * getUniformiv)(GLuint program, GLint location, GLint* params);
int ( * getUniformLocation)(GLuint program, const char* name);
void ( * getVertexAttribfv)(GLuint index, GLenum pname, GLfloat* params);
void ( * getVertexAttribiv)(GLuint index, GLenum pname, GLint* params);
void ( * getVertexAttribPointerv)(GLuint index, GLenum pname, void** pointer);
GLboolean ( * isBuffer)(GLuint buffer);
GLboolean ( * isFramebuffer)(GLuint framebuffer);
GLboolean ( * isProgram)(GLuint program);
GLboolean ( * isRenderbuffer)(GLuint renderbuffer);
GLboolean ( * isShader)(GLuint shader);
void ( * linkProgram)(GLuint program);
void ( * releaseShaderCompiler)();
void ( * renderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void ( * sampleCoverage)(GLclampf value, GLboolean invert);
void ( * shaderBinary)(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length);
void ( * shaderSource)(GLuint shader, GLsizei count, const char** string, const GLint* length);
void ( * stencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask);
void ( * stencilMaskSeparate)(GLenum face, GLuint mask);
void ( * stencilOpSeparate)(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
void ( * uniform1f)(GLint location, GLfloat x);
void ( * uniform1fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * uniform1i)(GLint location, GLint x);
void ( * uniform1iv)(GLint location, GLsizei count, const GLint* v);
void ( * uniform2f)(GLint location, GLfloat x, GLfloat y);
void ( * uniform2fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * uniform2i)(GLint location, GLint x, GLint y);
void ( * uniform2iv)(GLint location, GLsizei count, const GLint* v);
void ( * uniform3f)(GLint location, GLfloat x, GLfloat y, GLfloat z);
void ( * uniform3fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * uniform3i)(GLint location, GLint x, GLint y, GLint z);
void ( * uniform3iv)(GLint location, GLsizei count, const GLint* v);
void ( * uniform4f)(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * uniform4fv)(GLint location, GLsizei count, const GLfloat* v);
void ( * uniform4i)(GLint location, GLint x, GLint y, GLint z, GLint w);
void ( * uniform4iv)(GLint location, GLsizei count, const GLint* v);
void ( * uniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void ( * uniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void ( * uniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void ( * useProgram)(GLuint program);
void ( * validateProgram)(GLuint program);
void ( * vertexAttrib1f)(GLuint indx, GLfloat x);
void ( * vertexAttrib1fv)(GLuint indx, const GLfloat* values);
void ( * vertexAttrib2f)(GLuint indx, GLfloat x, GLfloat y);
void ( * vertexAttrib2fv)(GLuint indx, const GLfloat* values);
void ( * vertexAttrib3f)(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
void ( * vertexAttrib3fv)(GLuint indx, const GLfloat* values);
void ( * vertexAttrib4f)(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void ( * vertexAttrib4fv)(GLuint indx, const GLfloat* values);
void ( * vertexAttribPointer)(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr);

# 415 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
};

inline void QGLFunctions::glActiveTexture(GLenum texture)
{



# 422 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->activeTexture(texture);

# 425 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glAttachShader(GLuint program, GLuint shader)
{



# 432 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->attachShader(program, shader);

# 435 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBindAttribLocation(GLuint program, GLuint index, const char* name)
{



# 442 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->bindAttribLocation(program, index, name);

# 445 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBindBuffer(GLenum target, GLuint buffer)
{



# 452 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->bindBuffer(target, buffer);

# 455 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBindFramebuffer(GLenum target, GLuint framebuffer)
{
if (framebuffer == 0)
framebuffer = QOpenGLContext::currentContext()->defaultFramebufferObject();



# 464 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->bindFramebuffer(target, framebuffer);

# 467 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{



# 474 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->bindRenderbuffer(target, renderbuffer);

# 477 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{



# 484 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->blendColor(red, green, blue, alpha);

# 487 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBlendEquation(GLenum mode)
{



# 494 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->blendEquation(mode);

# 497 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{



# 504 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->blendEquationSeparate(modeRGB, modeAlpha);

# 507 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{



# 514 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);

# 517 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBufferData(GLenum target, qgl_GLsizeiptr size, const void* data, GLenum usage)
{



# 524 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->bufferData(target, size, data, usage);

# 527 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glBufferSubData(GLenum target, qgl_GLintptr offset, qgl_GLsizeiptr size, const void* data)
{



# 534 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->bufferSubData(target, offset, size, data);

# 537 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLenum QGLFunctions::glCheckFramebufferStatus(GLenum target)
{



# 544 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->checkFramebufferStatus(target);

# 547 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glClearDepthf(GLclampf depth)
{

# 552 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
::glClearDepth(depth);



# 556 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glCompileShader(GLuint shader)
{



# 563 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->compileShader(shader);

# 566 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
{



# 573 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->compressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);

# 576 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
{



# 583 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);

# 586 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLuint QGLFunctions::glCreateProgram()
{



# 593 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->createProgram();

# 596 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLuint QGLFunctions::glCreateShader(GLenum type)
{



# 603 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->createShader(type);

# 606 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDeleteBuffers(GLsizei n, const GLuint* buffers)
{



# 613 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->deleteBuffers(n, buffers);

# 616 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
{



# 623 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->deleteFramebuffers(n, framebuffers);

# 626 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDeleteProgram(GLuint program)
{



# 633 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->deleteProgram(program);

# 636 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
{



# 643 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->deleteRenderbuffers(n, renderbuffers);

# 646 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDeleteShader(GLuint shader)
{



# 653 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->deleteShader(shader);

# 656 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDepthRangef(GLclampf zNear, GLclampf zFar)
{

# 661 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
::glDepthRange(zNear, zFar);



# 665 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDetachShader(GLuint program, GLuint shader)
{



# 672 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->detachShader(program, shader);

# 675 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glDisableVertexAttribArray(GLuint index)
{



# 682 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->disableVertexAttribArray(index);

# 685 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glEnableVertexAttribArray(GLuint index)
{



# 692 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->enableVertexAttribArray(index);

# 695 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{



# 702 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);

# 705 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{



# 712 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->framebufferTexture2D(target, attachment, textarget, texture, level);

# 715 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGenBuffers(GLsizei n, GLuint* buffers)
{



# 722 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->genBuffers(n, buffers);

# 725 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGenerateMipmap(GLenum target)
{



# 732 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->generateMipmap(target);

# 735 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGenFramebuffers(GLsizei n, GLuint* framebuffers)
{



# 742 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->genFramebuffers(n, framebuffers);

# 745 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)
{



# 752 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->genRenderbuffers(n, renderbuffers);

# 755 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)
{



# 762 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getActiveAttrib(program, index, bufsize, length, size, type, name);

# 765 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)
{



# 772 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getActiveUniform(program, index, bufsize, length, size, type, name);

# 775 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)
{



# 782 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getAttachedShaders(program, maxcount, count, shaders);

# 785 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline int QGLFunctions::glGetAttribLocation(GLuint program, const char* name)
{



# 792 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->getAttribLocation(program, name);

# 795 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)
{



# 802 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getBufferParameteriv(target, pname, params);

# 805 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)
{



# 812 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getFramebufferAttachmentParameteriv(target, attachment, pname, params);

# 815 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetProgramiv(GLuint program, GLenum pname, GLint* params)
{



# 822 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getProgramiv(program, pname, params);

# 825 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog)
{



# 832 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getProgramInfoLog(program, bufsize, length, infolog);

# 835 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)
{



# 842 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getRenderbufferParameteriv(target, pname, params);

# 845 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetShaderiv(GLuint shader, GLenum pname, GLint* params)
{



# 852 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getShaderiv(shader, pname, params);

# 855 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog)
{



# 862 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getShaderInfoLog(shader, bufsize, length, infolog);

# 865 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
{



# 872 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getShaderPrecisionFormat(shadertype, precisiontype, range, precision);

# 875 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source)
{



# 882 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getShaderSource(shader, bufsize, length, source);

# 885 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetUniformfv(GLuint program, GLint location, GLfloat* params)
{



# 892 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getUniformfv(program, location, params);

# 895 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetUniformiv(GLuint program, GLint location, GLint* params)
{



# 902 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getUniformiv(program, location, params);

# 905 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline int QGLFunctions::glGetUniformLocation(GLuint program, const char* name)
{



# 912 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->getUniformLocation(program, name);

# 915 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
{



# 922 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getVertexAttribfv(index, pname, params);

# 925 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
{



# 932 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getVertexAttribiv(index, pname, params);

# 935 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)
{



# 942 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->getVertexAttribPointerv(index, pname, pointer);

# 945 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLboolean QGLFunctions::glIsBuffer(GLuint buffer)
{



# 952 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->isBuffer(buffer);

# 955 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLboolean QGLFunctions::glIsFramebuffer(GLuint framebuffer)
{



# 962 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->isFramebuffer(framebuffer);

# 965 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLboolean QGLFunctions::glIsProgram(GLuint program)
{



# 972 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->isProgram(program);

# 975 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLboolean QGLFunctions::glIsRenderbuffer(GLuint renderbuffer)
{



# 982 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->isRenderbuffer(renderbuffer);

# 985 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline GLboolean QGLFunctions::glIsShader(GLuint shader)
{



# 992 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
return d_ptr->isShader(shader);

# 995 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glLinkProgram(GLuint program)
{



# 1002 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->linkProgram(program);

# 1005 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glReleaseShaderCompiler()
{



# 1012 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->releaseShaderCompiler();

# 1015 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{



# 1022 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->renderbufferStorage(target, internalformat, width, height);

# 1025 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glSampleCoverage(GLclampf value, GLboolean invert)
{



# 1032 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->sampleCoverage(value, invert);

# 1035 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length)
{



# 1042 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->shaderBinary(n, shaders, binaryformat, binary, length);

# 1045 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length)
{



# 1052 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->shaderSource(shader, count, string, length);

# 1055 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{



# 1062 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->stencilFuncSeparate(face, func, ref, mask);

# 1065 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glStencilMaskSeparate(GLenum face, GLuint mask)
{



# 1072 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->stencilMaskSeparate(face, mask);

# 1075 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{



# 1082 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->stencilOpSeparate(face, fail, zfail, zpass);

# 1085 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform1f(GLint location, GLfloat x)
{



# 1092 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform1f(location, x);

# 1095 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform1fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform1fv(location, count, v);

# 1105 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform1i(GLint location, GLint x)
{



# 1112 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform1i(location, x);

# 1115 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform1iv(GLint location, GLsizei count, const GLint* v)
{



# 1122 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform1iv(location, count, v);

# 1125 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform2f(GLint location, GLfloat x, GLfloat y)
{



# 1132 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform2f(location, x, y);

# 1135 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform2fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform2fv(location, count, v);

# 1145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform2i(GLint location, GLint x, GLint y)
{



# 1152 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform2i(location, x, y);

# 1155 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform2iv(GLint location, GLsizei count, const GLint* v)
{



# 1162 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform2iv(location, count, v);

# 1165 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)
{



# 1172 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform3f(location, x, y, z);

# 1175 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform3fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1182 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform3fv(location, count, v);

# 1185 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform3i(GLint location, GLint x, GLint y, GLint z)
{



# 1192 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform3i(location, x, y, z);

# 1195 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform3iv(GLint location, GLsizei count, const GLint* v)
{



# 1202 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform3iv(location, count, v);

# 1205 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{



# 1212 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform4f(location, x, y, z, w);

# 1215 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform4fv(GLint location, GLsizei count, const GLfloat* v)
{



# 1222 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform4fv(location, count, v);

# 1225 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)
{



# 1232 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform4i(location, x, y, z, w);

# 1235 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniform4iv(GLint location, GLsizei count, const GLint* v)
{



# 1242 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniform4iv(location, count, v);

# 1245 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{



# 1252 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniformMatrix2fv(location, count, transpose, value);

# 1255 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{



# 1262 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniformMatrix3fv(location, count, transpose, value);

# 1265 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{



# 1272 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->uniformMatrix4fv(location, count, transpose, value);

# 1275 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glUseProgram(GLuint program)
{



# 1282 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->useProgram(program);

# 1285 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glValidateProgram(GLuint program)
{



# 1292 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->validateProgram(program);

# 1295 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib1f(GLuint indx, GLfloat x)
{



# 1302 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib1f(indx, x);

# 1305 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib1fv(GLuint indx, const GLfloat* values)
{



# 1312 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib1fv(indx, values);

# 1315 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)
{



# 1322 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib2f(indx, x, y);

# 1325 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib2fv(GLuint indx, const GLfloat* values)
{



# 1332 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib2fv(indx, values);

# 1335 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)
{



# 1342 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib3f(indx, x, y, z);

# 1345 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib3fv(GLuint indx, const GLfloat* values)
{



# 1352 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib3fv(indx, values);

# 1355 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{



# 1362 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib4f(indx, x, y, z, w);

# 1365 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttrib4fv(GLuint indx, const GLfloat* values)
{



# 1372 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttrib4fv(indx, values);

# 1375 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}

inline void QGLFunctions::glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr)
{



# 1382 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
qt_noop();
d_ptr->vertexAttribPointer(indx, size, type, normalized, stride, ptr);

# 1385 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"
}















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 2297 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglfunctions.h"



# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglpixelbuffer.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"















































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglpixelbuffer.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpaintdevice.h"

























































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglpixelbuffer.h"


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglpixelbuffer.h"



class QGLPixelBufferPrivate;

class  QGLPixelBuffer : public QPaintDevice
{
inline QGLPixelBufferPrivate* d_func() { return reinterpret_cast<QGLPixelBufferPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLPixelBufferPrivate* d_func() const { return reinterpret_cast<const QGLPixelBufferPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLPixelBufferPrivate;
public:
QGLPixelBuffer(const QSize &size, const QGLFormat &format = QGLFormat::defaultFormat(),
QGLWidget *shareWidget = 0);
QGLPixelBuffer(int width, int height, const QGLFormat &format = QGLFormat::defaultFormat(),
QGLWidget *shareWidget = 0);
virtual ~QGLPixelBuffer();

bool isValid() const;
bool makeCurrent();
bool doneCurrent();

QGLContext *context() const;

GLuint generateDynamicTexture() const;
bool bindToDynamicTexture(GLuint texture);
void releaseFromDynamicTexture();
void updateDynamicTexture(GLuint texture_id) const;

GLuint bindTexture(const QImage &image, GLenum target = 0x0DE1);
GLuint bindTexture(const QPixmap &pixmap, GLenum target = 0x0DE1);
GLuint bindTexture(const QString &fileName);
void deleteTexture(GLuint texture_id);

void drawTexture(const QRectF &target, GLuint textureId, GLenum textureTarget = 0x0DE1);
void drawTexture(const QPointF &point, GLuint textureId, GLenum textureTarget = 0x0DE1);

QSize size() const;
Qt::HANDLE handle() const;
QImage toImage() const;

QPaintEngine *paintEngine() const;
QGLFormat format() const;

static bool hasOpenGLPbuffers();

protected:
int metric(PaintDeviceMetric metric) const;
int devType() const { return QInternal::Pbuffer; }

private:
QGLPixelBuffer(const QGLPixelBuffer &) ; QGLPixelBuffer &operator=(const QGLPixelBuffer &) ;
QScopedPointer<QGLPixelBufferPrivate> d_ptr;
friend class QGLDrawable;
friend class QGLPaintDevice;
friend class QGLPBufferGLPaintDevice;
friend class QGLContextPrivate;
};




# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qgl.h"















































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector2d.h"
































































































































































































































































# 46 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector3d.h"






















































































































































































































































































# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qvector4d.h"


























































































































































































































































































# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qmatrix4x4.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 49 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"


# 51 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qglshaderprogram.h"



class QGLShaderProgram;
class QGLShaderPrivate;

class  QGLShader : public QObject
{
Q_OBJECT
public:
enum ShaderTypeBit
{
Vertex = 0x0001,
Fragment = 0x0002,
Geometry = 0x0004
};
typedef QFlags<ShaderTypeBit> ShaderType;

explicit QGLShader(QGLShader::ShaderType type, QObject *parent = 0);
QGLShader(QGLShader::ShaderType type, const QGLContext *context, QObject *parent = 0);
virtual ~QGLShader();

QGLShader::ShaderType shaderType() const;

bool compileSourceCode(const char *source);
bool compileSourceCode(const QByteArray& source);
bool compileSourceCode(const QString& source);
bool compileSourceFile(const QString& fileName);

QByteArray sourceCode() const;

bool isCompiled() const;
QString log() const;

GLuint shaderId() const;

static bool hasOpenGLShaders(ShaderType type, const QGLContext *context = 0);

private:
friend class QGLShaderProgram;

QGLShader(const QGLShader &) ; QGLShader &operator=(const QGLShader &) ;
inline QGLShaderPrivate* d_func() { return reinterpret_cast<QGLShaderPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLShaderPrivate* d_func() const { return reinterpret_cast<const QGLShaderPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLShaderPrivate;
};

 inline QFlags<QGLShader::ShaderType::enum_type> operator|(QGLShader::ShaderType::enum_type f1, QGLShader::ShaderType::enum_type f2) { return QFlags<QGLShader::ShaderType::enum_type>(f1) | f2; }  inline QFlags<QGLShader::ShaderType::enum_type> operator|(QGLShader::ShaderType::enum_type f1, QFlags<QGLShader::ShaderType::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QGLShader::ShaderType::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


class QGLShaderProgramPrivate;

class  QGLShaderProgram : public QObject
{
Q_OBJECT
public:
explicit QGLShaderProgram(QObject *parent = 0);
explicit QGLShaderProgram(const QGLContext *context, QObject *parent = 0);
virtual ~QGLShaderProgram();

bool addShader(QGLShader *shader);
void removeShader(QGLShader *shader);
QList<QGLShader *> shaders() const;

bool addShaderFromSourceCode(QGLShader::ShaderType type, const char *source);
bool addShaderFromSourceCode(QGLShader::ShaderType type, const QByteArray& source);
bool addShaderFromSourceCode(QGLShader::ShaderType type, const QString& source);
bool addShaderFromSourceFile(QGLShader::ShaderType type, const QString& fileName);

void removeAllShaders();

virtual bool link();
bool isLinked() const;
QString log() const;

bool bind();
void release();

GLuint programId() const;

int maxGeometryOutputVertices() const;

void setGeometryOutputVertexCount(int count);
int geometryOutputVertexCount() const;

void setGeometryInputType(GLenum inputType);
GLenum geometryInputType() const;

void setGeometryOutputType(GLenum outputType);
GLenum geometryOutputType() const;

void bindAttributeLocation(const char *name, int location);
void bindAttributeLocation(const QByteArray& name, int location);
void bindAttributeLocation(const QString& name, int location);

int attributeLocation(const char *name) const;
int attributeLocation(const QByteArray& name) const;
int attributeLocation(const QString& name) const;

void setAttributeValue(int location, GLfloat value);
void setAttributeValue(int location, GLfloat x, GLfloat y);
void setAttributeValue(int location, GLfloat x, GLfloat y, GLfloat z);
void setAttributeValue(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setAttributeValue(int location, const QVector2D& value);
void setAttributeValue(int location, const QVector3D& value);
void setAttributeValue(int location, const QVector4D& value);
void setAttributeValue(int location, const QColor& value);
void setAttributeValue(int location, const GLfloat *values, int columns, int rows);

void setAttributeValue(const char *name, GLfloat value);
void setAttributeValue(const char *name, GLfloat x, GLfloat y);
void setAttributeValue(const char *name, GLfloat x, GLfloat y, GLfloat z);
void setAttributeValue(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setAttributeValue(const char *name, const QVector2D& value);
void setAttributeValue(const char *name, const QVector3D& value);
void setAttributeValue(const char *name, const QVector4D& value);
void setAttributeValue(const char *name, const QColor& value);
void setAttributeValue(const char *name, const GLfloat *values, int columns, int rows);

void setAttributeArray
(int location, const GLfloat *values, int tupleSize, int stride = 0);
void setAttributeArray
(int location, const QVector2D *values, int stride = 0);
void setAttributeArray
(int location, const QVector3D *values, int stride = 0);
void setAttributeArray
(int location, const QVector4D *values, int stride = 0);
void setAttributeArray
(int location, GLenum type, const void *values, int tupleSize, int stride = 0);
void setAttributeArray
(const char *name, const GLfloat *values, int tupleSize, int stride = 0);
void setAttributeArray
(const char *name, const QVector2D *values, int stride = 0);
void setAttributeArray
(const char *name, const QVector3D *values, int stride = 0);
void setAttributeArray
(const char *name, const QVector4D *values, int stride = 0);
void setAttributeArray
(const char *name, GLenum type, const void *values, int tupleSize, int stride = 0);

void setAttributeBuffer
(int location, GLenum type, int offset, int tupleSize, int stride = 0);
void setAttributeBuffer
(const char *name, GLenum type, int offset, int tupleSize, int stride = 0);

void enableAttributeArray(int location);
void enableAttributeArray(const char *name);
void disableAttributeArray(int location);
void disableAttributeArray(const char *name);

int uniformLocation(const char *name) const;
int uniformLocation(const QByteArray& name) const;
int uniformLocation(const QString& name) const;

void setUniformValue(int location, GLfloat value);
void setUniformValue(int location, GLint value);
void setUniformValue(int location, GLuint value);
void setUniformValue(int location, GLfloat x, GLfloat y);
void setUniformValue(int location, GLfloat x, GLfloat y, GLfloat z);
void setUniformValue(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setUniformValue(int location, const QVector2D& value);
void setUniformValue(int location, const QVector3D& value);
void setUniformValue(int location, const QVector4D& value);
void setUniformValue(int location, const QColor& color);
void setUniformValue(int location, const QPoint& point);
void setUniformValue(int location, const QPointF& point);
void setUniformValue(int location, const QSize& size);
void setUniformValue(int location, const QSizeF& size);
void setUniformValue(int location, const QMatrix2x2& value);
void setUniformValue(int location, const QMatrix2x3& value);
void setUniformValue(int location, const QMatrix2x4& value);
void setUniformValue(int location, const QMatrix3x2& value);
void setUniformValue(int location, const QMatrix3x3& value);
void setUniformValue(int location, const QMatrix3x4& value);
void setUniformValue(int location, const QMatrix4x2& value);
void setUniformValue(int location, const QMatrix4x3& value);
void setUniformValue(int location, const QMatrix4x4& value);
void setUniformValue(int location, const GLfloat value[2][2]);
void setUniformValue(int location, const GLfloat value[3][3]);
void setUniformValue(int location, const GLfloat value[4][4]);
void setUniformValue(int location, const QTransform& value);

void setUniformValue(const char *name, GLfloat value);
void setUniformValue(const char *name, GLint value);
void setUniformValue(const char *name, GLuint value);
void setUniformValue(const char *name, GLfloat x, GLfloat y);
void setUniformValue(const char *name, GLfloat x, GLfloat y, GLfloat z);
void setUniformValue(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void setUniformValue(const char *name, const QVector2D& value);
void setUniformValue(const char *name, const QVector3D& value);
void setUniformValue(const char *name, const QVector4D& value);
void setUniformValue(const char *name, const QColor& color);
void setUniformValue(const char *name, const QPoint& point);
void setUniformValue(const char *name, const QPointF& point);
void setUniformValue(const char *name, const QSize& size);
void setUniformValue(const char *name, const QSizeF& size);
void setUniformValue(const char *name, const QMatrix2x2& value);
void setUniformValue(const char *name, const QMatrix2x3& value);
void setUniformValue(const char *name, const QMatrix2x4& value);
void setUniformValue(const char *name, const QMatrix3x2& value);
void setUniformValue(const char *name, const QMatrix3x3& value);
void setUniformValue(const char *name, const QMatrix3x4& value);
void setUniformValue(const char *name, const QMatrix4x2& value);
void setUniformValue(const char *name, const QMatrix4x3& value);
void setUniformValue(const char *name, const QMatrix4x4& value);
void setUniformValue(const char *name, const GLfloat value[2][2]);
void setUniformValue(const char *name, const GLfloat value[3][3]);
void setUniformValue(const char *name, const GLfloat value[4][4]);
void setUniformValue(const char *name, const QTransform& value);

void setUniformValueArray(int location, const GLfloat *values, int count, int tupleSize);
void setUniformValueArray(int location, const GLint *values, int count);
void setUniformValueArray(int location, const GLuint *values, int count);
void setUniformValueArray(int location, const QVector2D *values, int count);
void setUniformValueArray(int location, const QVector3D *values, int count);
void setUniformValueArray(int location, const QVector4D *values, int count);
void setUniformValueArray(int location, const QMatrix2x2 *values, int count);
void setUniformValueArray(int location, const QMatrix2x3 *values, int count);
void setUniformValueArray(int location, const QMatrix2x4 *values, int count);
void setUniformValueArray(int location, const QMatrix3x2 *values, int count);
void setUniformValueArray(int location, const QMatrix3x3 *values, int count);
void setUniformValueArray(int location, const QMatrix3x4 *values, int count);
void setUniformValueArray(int location, const QMatrix4x2 *values, int count);
void setUniformValueArray(int location, const QMatrix4x3 *values, int count);
void setUniformValueArray(int location, const QMatrix4x4 *values, int count);

void setUniformValueArray(const char *name, const GLfloat *values, int count, int tupleSize);
void setUniformValueArray(const char *name, const GLint *values, int count);
void setUniformValueArray(const char *name, const GLuint *values, int count);
void setUniformValueArray(const char *name, const QVector2D *values, int count);
void setUniformValueArray(const char *name, const QVector3D *values, int count);
void setUniformValueArray(const char *name, const QVector4D *values, int count);
void setUniformValueArray(const char *name, const QMatrix2x2 *values, int count);
void setUniformValueArray(const char *name, const QMatrix2x3 *values, int count);
void setUniformValueArray(const char *name, const QMatrix2x4 *values, int count);
void setUniformValueArray(const char *name, const QMatrix3x2 *values, int count);
void setUniformValueArray(const char *name, const QMatrix3x3 *values, int count);
void setUniformValueArray(const char *name, const QMatrix3x4 *values, int count);
void setUniformValueArray(const char *name, const QMatrix4x2 *values, int count);
void setUniformValueArray(const char *name, const QMatrix4x3 *values, int count);
void setUniformValueArray(const char *name, const QMatrix4x4 *values, int count);

static bool hasOpenGLShaderPrograms(const QGLContext *context = 0);

private slots:
void shaderDestroyed();

private:
QGLShaderProgram(const QGLShaderProgram &) ; QGLShaderProgram &operator=(const QGLShaderProgram &) ;
inline QGLShaderProgramPrivate* d_func() { return reinterpret_cast<QGLShaderProgramPrivate *>(qGetPtrHelper(d_ptr)); } inline const QGLShaderProgramPrivate* d_func() const { return reinterpret_cast<const QGLShaderProgramPrivate *>(qGetPtrHelper(d_ptr)); } friend class QGLShaderProgramPrivate;

bool init();
};




# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qtopenglglobal.h"





























































# 11 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/qtopenglversion.h"









# 12 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtOpenGL/QtOpenGL"


# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"















# 10 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgetsDepends"

# 3 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"























# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebsettings.h"






















































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"


# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"

class QNetworkProxy;
class QUndoStack;
class QMenu;
class QNetworkRequest;
class QNetworkReply;
class QNetworkAccessManager;


class QWebElement;
class QWebFrame;
class QWebNetworkRequest;
class QWebHistory;

class QWebFrameData;
class QWebHistoryItem;
class QWebHitTestResult;
class QWebNetworkInterface;
class QWebPageAdapter;
class QWebPagePrivate;
class QWebPluginFactory;
class QWebSecurityOrigin;
class QtViewportAttributesPrivate;

namespace WebCore {
class ChromeClientQt;
class EditorClientQt;
class FrameLoaderClientQt;
class InspectorClientQt;
class InspectorServerRequestHandlerQt;
class InspectorFrontendClientQt;
class ResourceHandle;
class QNetworkReplyHandler;

struct FrameLoadRequest;
}

class  QWebPage : public QObject {
Q_OBJECT

Q_PROPERTY(bool modified READ isModified)
Q_PROPERTY(QString selectedText READ selectedText)
Q_PROPERTY(QString selectedHtml READ selectedHtml)
Q_PROPERTY(bool hasSelection READ hasSelection)
Q_PROPERTY(QSize viewportSize READ viewportSize WRITE setViewportSize)
Q_PROPERTY(QSize preferredContentsSize READ preferredContentsSize WRITE setPreferredContentsSize)
Q_PROPERTY(bool forwardUnsupportedContent READ forwardUnsupportedContent WRITE setForwardUnsupportedContent)
Q_PROPERTY(LinkDelegationPolicy linkDelegationPolicy READ linkDelegationPolicy WRITE setLinkDelegationPolicy)
Q_PROPERTY(QPalette palette READ palette WRITE setPalette)
Q_PROPERTY(bool contentEditable READ isContentEditable WRITE setContentEditable)
Q_ENUMS(LinkDelegationPolicy NavigationType WebAction)
public:
enum NavigationType {
NavigationTypeLinkClicked,
NavigationTypeFormSubmitted,
NavigationTypeBackOrForward,
NavigationTypeReload,
NavigationTypeFormResubmitted,
NavigationTypeOther
};

enum WebAction {
NoWebAction = - 1,

OpenLink,

OpenLinkInNewWindow,
OpenFrameInNewWindow,

DownloadLinkToDisk,
CopyLinkToClipboard,

OpenImageInNewWindow,
DownloadImageToDisk,
CopyImageToClipboard,

Back,
Forward,
Stop,
Reload,

Cut,
Copy,
Paste,

Undo,
Redo,
MoveToNextChar,
MoveToPreviousChar,
MoveToNextWord,
MoveToPreviousWord,
MoveToNextLine,
MoveToPreviousLine,
MoveToStartOfLine,
MoveToEndOfLine,
MoveToStartOfBlock,
MoveToEndOfBlock,
MoveToStartOfDocument,
MoveToEndOfDocument,
SelectNextChar,
SelectPreviousChar,
SelectNextWord,
SelectPreviousWord,
SelectNextLine,
SelectPreviousLine,
SelectStartOfLine,
SelectEndOfLine,
SelectStartOfBlock,
SelectEndOfBlock,
SelectStartOfDocument,
SelectEndOfDocument,
DeleteStartOfWord,
DeleteEndOfWord,

SetTextDirectionDefault,
SetTextDirectionLeftToRight,
SetTextDirectionRightToLeft,

ToggleBold,
ToggleItalic,
ToggleUnderline,

InspectElement,

InsertParagraphSeparator,
InsertLineSeparator,

SelectAll,
ReloadAndBypassCache,

PasteAndMatchStyle,
RemoveFormat,

ToggleStrikethrough,
ToggleSubscript,
ToggleSuperscript,
InsertUnorderedList,
InsertOrderedList,
Indent,
Outdent,

AlignCenter,
AlignJustified,
AlignLeft,
AlignRight,

StopScheduledPageRefresh,

CopyImageUrlToClipboard,

OpenLinkInThisWindow,

WebActionCount
};

enum FindFlag {
FindBackward = 1,
FindCaseSensitively = 2,
FindWrapsAroundDocument = 4,
HighlightAllOccurrences = 8
};
typedef QFlags<FindFlag> FindFlags;

enum LinkDelegationPolicy {
DontDelegateLinks,
DelegateExternalLinks,
DelegateAllLinks
};

enum WebWindowType {
WebBrowserWindow,
WebModalDialog
};

enum PermissionPolicy {
PermissionUnknown,
PermissionGrantedByUser,
PermissionDeniedByUser
};

enum Feature {
Notifications,
Geolocation
};

class  ViewportAttributes {
public:
ViewportAttributes();
ViewportAttributes(const QWebPage::ViewportAttributes& other);

~ViewportAttributes();

QWebPage::ViewportAttributes& operator=(const QWebPage::ViewportAttributes& other);

inline qreal initialScaleFactor() const { return m_initialScaleFactor; }
inline qreal minimumScaleFactor() const { return m_minimumScaleFactor; }
inline qreal maximumScaleFactor() const { return m_maximumScaleFactor; }
inline qreal devicePixelRatio() const { return m_devicePixelRatio; }
inline bool isUserScalable() const { return m_isUserScalable; }
inline bool isValid() const { return m_isValid; }
inline QSizeF size() const { return m_size; }

private:
QSharedDataPointer<QtViewportAttributesPrivate> d;
qreal m_initialScaleFactor;
qreal m_minimumScaleFactor;
qreal m_maximumScaleFactor;
qreal m_devicePixelRatio;
bool m_isUserScalable;
bool m_isValid;
QSizeF m_size;

friend class WebCore::ChromeClientQt;
friend class QWebPage;
};


explicit QWebPage(QObject *parent = 0);
~QWebPage();

QWebFrame *mainFrame() const;
QWebFrame *currentFrame() const;
QWebFrame* frameAt(const QPoint& pos) const;

QWebHistory *history() const;
QWebSettings *settings() const;

void setView(QWidget *view);
QWidget *view() const;

bool isModified() const;

# 263 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
QUndoStack *undoStack() const;


# 266 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
void setNetworkAccessManager(QNetworkAccessManager *manager);
QNetworkAccessManager *networkAccessManager() const;

void setPluginFactory(QWebPluginFactory *factory);
QWebPluginFactory *pluginFactory() const;

quint64 totalBytes() const;
quint64 bytesReceived() const;

bool hasSelection() const;
QString selectedText() const;
QString selectedHtml() const;


# 280 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
QAction *action(WebAction action) const;

# 282 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
virtual void triggerAction(WebAction action, bool checked = false);

QSize viewportSize() const;
void setViewportSize(const QSize &size) const;
ViewportAttributes viewportAttributesForSize(const QSize& availableSize) const;

QSize preferredContentsSize() const;
void setPreferredContentsSize(const QSize &size) const;
void setActualVisibleContentRect(const QRect& rect) const;

virtual bool event(QEvent*);
bool focusNextPrevChild(bool next);

QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

bool findText(const QString &subString, FindFlags options = 0);

void setForwardUnsupportedContent(bool forward);
bool forwardUnsupportedContent() const;

void setLinkDelegationPolicy(LinkDelegationPolicy policy);
LinkDelegationPolicy linkDelegationPolicy() const;

void setPalette(const QPalette &palette);
QPalette palette() const;

void setContentEditable(bool editable);
bool isContentEditable() const;


# 312 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
bool swallowContextMenuEvent(QContextMenuEvent *event);

# 314 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
void updatePositionDependentActions(const QPoint &pos);

QMenu *createStandardContextMenu();

void setFeaturePermission(QWebFrame* frame, Feature feature, PermissionPolicy policy);

QStringList supportedContentTypes() const;
bool supportsContentType(const QString& mimeType) const;

enum Extension {
ChooseMultipleFilesExtension,
ErrorPageExtension
};
class ExtensionOption
{};
class ExtensionReturn
{};

class ChooseMultipleFilesExtensionOption : public ExtensionOption {
public:
QWebFrame *parentFrame;
QStringList suggestedFileNames;
};

class ChooseMultipleFilesExtensionReturn : public ExtensionReturn {
public:
QStringList fileNames;
};

enum ErrorDomain { QtNetwork, Http, WebKit };
class ErrorPageExtensionOption : public ExtensionOption {
public:
QUrl url;
QWebFrame* frame;
ErrorDomain domain;
int error;
QString errorString;
};

class ErrorPageExtensionReturn : public ExtensionReturn {
public:
ErrorPageExtensionReturn() : contentType(QLatin1String("text/html")), encoding(QLatin1String("utf-8")) {};
QString contentType;
QString encoding;
QUrl baseUrl;
QByteArray content;
};


virtual bool extension(Extension extension, const ExtensionOption *option = 0, ExtensionReturn *output = 0);
virtual bool supportsExtension(Extension extension) const;

QWebPageAdapter* handle() const;

virtual bool shouldInterruptJavaScript();

signals:
void loadStarted();
void loadProgress(int progress);
void loadFinished(bool ok);

void linkHovered(const QString &link, const QString &title, const QString &textContent);
void statusBarMessage(const QString& text);
void selectionChanged();
void frameCreated(QWebFrame *frame);
void geometryChangeRequested(const QRect& geom);
void repaintRequested(const QRect& dirtyRect);
void scrollRequested(int dx, int dy, const QRect& scrollViewRect);
void windowCloseRequested();
void printRequested(QWebFrame *frame);
void linkClicked(const QUrl &url);

void toolBarVisibilityChangeRequested(bool visible);
void statusBarVisibilityChangeRequested(bool visible);
void menuBarVisibilityChangeRequested(bool visible);

void unsupportedContent(QNetworkReply *reply);
void downloadRequested(const QNetworkRequest &request);

void microFocusChanged();
void contentsChanged();
void databaseQuotaExceeded(QWebFrame* frame, QString databaseName);
void applicationCacheQuotaExceeded(QWebSecurityOrigin* origin, quint64 defaultOriginQuota, quint64 totalSpaceNeeded);

void saveFrameStateRequested(QWebFrame* frame, QWebHistoryItem* item);
void restoreFrameStateRequested(QWebFrame* frame);

void viewportChangeRequested();

void featurePermissionRequested(QWebFrame* frame, QWebPage::Feature feature);
void featurePermissionRequestCanceled(QWebFrame* frame, QWebPage::Feature feature);

protected:
virtual QWebPage *createWindow(WebWindowType type);
virtual QObject *createPlugin(const QString &classid, const QUrl &url, const QStringList &paramNames, const QStringList &paramValues);

virtual bool acceptNavigationRequest(QWebFrame *frame, const QNetworkRequest &request, NavigationType type);
virtual QString chooseFile(QWebFrame *originatingFrame, const QString& oldFile);
virtual void javaScriptAlert(QWebFrame *originatingFrame, const QString& msg);
virtual bool javaScriptConfirm(QWebFrame *originatingFrame, const QString& msg);
virtual bool javaScriptPrompt(QWebFrame *originatingFrame, const QString& msg, const QString& defaultValue, QString* result);
virtual void javaScriptConsoleMessage(const QString& message, int lineNumber, const QString& sourceID);

virtual QString userAgentForUrl(const QUrl& url) const;

private:


# 422 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"


# 424 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"


QWebPagePrivate *d;

friend class QWebFrame;
friend class QWebPagePrivate;
friend class QWebView;
friend class QWebViewPrivate;
friend class QGraphicsWebView;
friend class QGraphicsWebViewPrivate;
friend class QWebInspector;
friend class WebCore::ChromeClientQt;
friend class WebCore::EditorClientQt;
friend class WebCore::FrameLoaderClientQt;
friend class WebCore::InspectorClientQt;
friend class WebCore::InspectorServerRequestHandlerQt;
friend class WebCore::InspectorFrontendClientQt;
friend class WebCore::ResourceHandle;
friend class WebCore::QNetworkReplyHandler;
friend class DumpRenderTreeSupportQt;
};

 inline QFlags<QWebPage::FindFlags::enum_type> operator|(QWebPage::FindFlags::enum_type f1, QWebPage::FindFlags::enum_type f2) { return QFlags<QWebPage::FindFlags::enum_type>(f1) | f2; }  inline QFlags<QWebPage::FindFlags::enum_type> operator|(QWebPage::FindFlags::enum_type f1, QFlags<QWebPage::FindFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QWebPage::FindFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qevent.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"













































































































































































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qgraphicswidget.h"























































































































































































































































# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"




# 34 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"
class QWebPage;
class QWebHistory;
class QWebSettings;

class QGraphicsWebViewPrivate;

class  QGraphicsWebView : public QGraphicsWidget {
Q_OBJECT

Q_PROPERTY(QString title READ title NOTIFY titleChanged)
Q_PROPERTY(QIcon icon READ icon NOTIFY iconChanged)
Q_PROPERTY(qreal zoomFactor READ zoomFactor WRITE setZoomFactor)

Q_PROPERTY(QUrl url READ url WRITE setUrl NOTIFY urlChanged)

Q_PROPERTY(bool modified READ isModified)
Q_PROPERTY(bool resizesToContents READ resizesToContents WRITE setResizesToContents)
Q_PROPERTY(bool tiledBackingStoreFrozen READ isTiledBackingStoreFrozen WRITE setTiledBackingStoreFrozen)

Q_PROPERTY(QPainter::RenderHints renderHints READ renderHints WRITE setRenderHints)


public:
explicit QGraphicsWebView(QGraphicsItem* parent = 0);
~QGraphicsWebView();

QWebPage* page() const;
void setPage(QWebPage*);

QUrl url() const;
void setUrl(const QUrl&);

QString title() const;
QIcon icon() const;

qreal zoomFactor() const;
void setZoomFactor(qreal);

bool isModified() const;

void load(const QUrl& url);
void load(const QNetworkRequest& request, QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation, const QByteArray& body = QByteArray());

void setHtml(const QString& html, const QUrl& baseUrl = QUrl());

void setContent(const QByteArray& data, const QString& mimeType = QString(), const QUrl& baseUrl = QUrl());

QWebHistory* history() const;
QWebSettings* settings() const;

QAction* pageAction(QWebPage::WebAction action) const;
void triggerPageAction(QWebPage::WebAction action, bool checked = false);

bool findText(const QString& subString, QWebPage::FindFlags options = 0);

bool resizesToContents() const;
void setResizesToContents(bool enabled);

bool isTiledBackingStoreFrozen() const;
void setTiledBackingStoreFrozen(bool frozen);

virtual void setGeometry(const QRectF& rect);
virtual void updateGeometry();
virtual void paint(QPainter*, const QStyleOptionGraphicsItem* options, QWidget* widget = 0);
virtual QVariant itemChange(GraphicsItemChange change, const QVariant& value);
virtual bool event(QEvent*);

virtual QSizeF sizeHint(Qt::SizeHint which, const QSizeF& constraint) const;

virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

QPainter::RenderHints renderHints() const;
void setRenderHints(QPainter::RenderHints);
void setRenderHint(QPainter::RenderHint, bool enabled = true);

public slots:
void stop();
void back();
void forward();
void reload();

signals:
void loadStarted();
void loadFinished(bool);

void loadProgress(int progress);
void urlChanged(const QUrl&);
void titleChanged(const QString&);
void iconChanged();
void statusBarMessage(const QString& message);
void linkClicked(const QUrl&);

protected:
virtual void mousePressEvent(QGraphicsSceneMouseEvent*);
virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent*);
virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent*);
virtual void mouseMoveEvent(QGraphicsSceneMouseEvent*);
virtual void hoverMoveEvent(QGraphicsSceneHoverEvent*);
virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent*);

# 134 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"
virtual void wheelEvent(QGraphicsSceneWheelEvent*);

# 136 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"
virtual void keyPressEvent(QKeyEvent*);
virtual void keyReleaseEvent(QKeyEvent*);

# 139 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"
virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent*);

# 141 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qgraphicswebview.h"
virtual void dragEnterEvent(QGraphicsSceneDragDropEvent*);
virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent*);
virtual void dragMoveEvent(QGraphicsSceneDragDropEvent*);
virtual void dropEvent(QGraphicsSceneDragDropEvent*);
virtual void focusInEvent(QFocusEvent*);
virtual void focusOutEvent(QFocusEvent*);
virtual void inputMethodEvent(QInputMethodEvent*);
virtual bool focusNextPrevChild(bool next);

virtual bool sceneEvent(QEvent*);

private:





QGraphicsWebViewPrivate* const d;
friend class QGraphicsWebViewPrivate;
};




# 4 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"























# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qobject.h"






























































































































































































































































































































































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qvariant.h"













































































































































































































































































































































































































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"













































































































































































# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"


# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"

class QRect;
class QPoint;
class QPainter;
class QPixmap;
class QMouseEvent;
class QWheelEvent;
class QNetworkRequest;
class QRegion;
class QPrinter;


class QWebNetworkRequest;
class QWebFrameAdapter;
class QWebFramePrivate;
class QWebPage;
class QWebPageAdapter;
class QWebHitTestResult;
class QWebHistoryItem;
class QWebSecurityOrigin;
class QWebElement;
class QWebElementCollection;
class QWebScriptWorld;

class DumpRenderTreeSupportQt;
namespace WebCore {
class WidgetPrivate;
class FrameLoaderClientQt;
class ChromeClientQt;
class TextureMapperLayerClientQt;
}
class QWebFrameData;
class QWebHitTestResultPrivate;
class QWebFrame;

class  QWebHitTestResult {
public:
QWebHitTestResult();
QWebHitTestResult(const QWebHitTestResult &other);
QWebHitTestResult &operator=(const QWebHitTestResult &other);
~QWebHitTestResult();

bool isNull() const;

QPoint pos() const;
QRect boundingRect() const;
QWebElement enclosingBlockElement() const;
QString title() const;

QString linkText() const;
QUrl linkUrl() const;
QUrl linkTitle() const;
QWebFrame *linkTargetFrame() const;
QWebElement linkElement() const;

QString alternateText() const; 

QUrl imageUrl() const;
QPixmap pixmap() const;

bool isContentEditable() const;
bool isContentSelected() const;

QWebElement element() const;

QWebFrame *frame() const;

private:
QWebHitTestResult(QWebHitTestResultPrivate *priv);
QWebHitTestResultPrivate *d;

friend class QWebFrame;
friend class QWebPagePrivate;
friend class QWebPage;
};

class  QWebFrame : public QObject {
Q_OBJECT
Q_PROPERTY(qreal textSizeMultiplier READ textSizeMultiplier WRITE setTextSizeMultiplier DESIGNABLE false)
Q_PROPERTY(qreal zoomFactor READ zoomFactor WRITE setZoomFactor)
Q_PROPERTY(QString title READ title)
Q_PROPERTY(QUrl url READ url WRITE setUrl)
Q_PROPERTY(QUrl requestedUrl READ requestedUrl)
Q_PROPERTY(QUrl baseUrl READ baseUrl)
Q_PROPERTY(QIcon icon READ icon)
Q_PROPERTY(QSize contentsSize READ contentsSize)
Q_PROPERTY(QPoint scrollPosition READ scrollPosition WRITE setScrollPosition)
Q_PROPERTY(bool focus READ hasFocus)
private:
QWebFrame(QWebPage *parentPage);
QWebFrame(QWebFrame* parent, QWebFrameData*);
~QWebFrame();

public:
enum ValueOwnership {
QtOwnership,
ScriptOwnership,
AutoOwnership
};

QWebPage *page() const;

void load(const QUrl &url);
void load(const QNetworkRequest &request, QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation, const QByteArray &body = QByteArray());
void setHtml(const QString &html, const QUrl &baseUrl = QUrl());
void setContent(const QByteArray &data, const QString &mimeType = QString(), const QUrl &baseUrl = QUrl());

void addToJavaScriptWindowObject(const QString &name, QObject *object, ValueOwnership ownership = QtOwnership);
QString toHtml() const;
QString toPlainText() const;

QString title() const;
void setUrl(const QUrl &url);
QUrl url() const;
QUrl requestedUrl() const;
QUrl baseUrl() const;
QIcon icon() const;
QMultiMap<QString, QString> metaData() const;

QString frameName() const;

QWebFrame *parentFrame() const;
QList<QWebFrame*> childFrames() const;

Qt::ScrollBarPolicy scrollBarPolicy(Qt::Orientation orientation) const;
void setScrollBarPolicy(Qt::Orientation orientation, Qt::ScrollBarPolicy policy);

void setScrollBarValue(Qt::Orientation orientation, int value);
int scrollBarValue(Qt::Orientation orientation) const;
int scrollBarMinimum(Qt::Orientation orientation) const;
int scrollBarMaximum(Qt::Orientation orientation) const;
QRect scrollBarGeometry(Qt::Orientation orientation) const;

void scroll(int, int);
QPoint scrollPosition() const;
void setScrollPosition(const QPoint &pos);

void scrollToAnchor(const QString& anchor);

enum RenderLayer {
ContentsLayer = 0x10,
ScrollBarLayer = 0x20,
PanIconLayer = 0x40,

AllLayers = 0xff
};
typedef QFlags<RenderLayer> RenderLayers;

void render(QPainter*, const QRegion& clip = QRegion());
void render(QPainter*, RenderLayers layer, const QRegion& clip = QRegion());

void setTextSizeMultiplier(qreal factor);
qreal textSizeMultiplier() const;

qreal zoomFactor() const;
void setZoomFactor(qreal factor);

bool hasFocus() const;
void setFocus();

QPoint pos() const;
QRect geometry() const;
QSize contentsSize() const;

QWebElement documentElement() const;
QWebElementCollection findAllElements(const QString &selectorQuery) const;
QWebElement findFirstElement(const QString &selectorQuery) const;

QWebHitTestResult hitTestContent(const QPoint &pos) const;

virtual bool event(QEvent *);

QWebSecurityOrigin securityOrigin() const;
QWebFrameAdapter* handle() const;

public slots:
QVariant evaluateJavaScript(const QString& scriptSource);

# 209 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"
void print(QPrinter *printer) const;


# 212 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebframe.h"
signals:
void javaScriptWindowObjectCleared();

void provisionalLoad();
void titleChanged(const QString &title);
void urlChanged(const QUrl &url);

void initialLayoutCompleted();

void iconChanged();

void contentsSizeChanged(const QSize &size);

void loadStarted();
void loadFinished(bool ok);

void pageChanged();

private:
friend class QGraphicsWebView;
friend class QWebPage;
friend class QWebPagePrivate;
friend class QWebFramePrivate;
friend class DumpRenderTreeSupportQt;
friend class WebCore::WidgetPrivate;
friend class WebCore::FrameLoaderClientQt;
friend class WebCore::ChromeClientQt;
friend class WebCore::TextureMapperLayerClientQt;
QWebFramePrivate *d;

};

 inline QFlags<QWebFrame::RenderLayers::enum_type> operator|(QWebFrame::RenderLayers::enum_type f1, QWebFrame::RenderLayers::enum_type f2) { return QFlags<QWebFrame::RenderLayers::enum_type>(f1) | f2; }  inline QFlags<QWebFrame::RenderLayers::enum_type> operator|(QWebFrame::RenderLayers::enum_type f1, QFlags<QWebFrame::RenderLayers::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QWebFrame::RenderLayers::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }


# 5 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebinspector.h"






















# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 23 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebinspector.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
































































































































































































































































































































































































































































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebinspector.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"























# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKit/qwebkitglobal.h"

















































# 24 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
































































































































































































































































































































































































































































# 25 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qurl.h"





































































































































































































































































































































































































# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qicon.h"















































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtGui/qpainter.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtNetwork/qnetworkaccessmanager.h"













































































































































































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWidgets/qwidget.h"




























































































































































































































































































































































































































































































































































































































































































































































































































































































# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"


# 32 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

class QNetworkRequest;
class QPrinter;


class QWebPage;
class QWebViewPrivate;
class QWebNetworkRequest;

class  QWebView : public QWidget {
Q_OBJECT
Q_PROPERTY(QString title READ title)
Q_PROPERTY(QUrl url READ url WRITE setUrl)
Q_PROPERTY(QIcon icon READ icon)
Q_PROPERTY(QString selectedText READ selectedText)
Q_PROPERTY(QString selectedHtml READ selectedHtml)
Q_PROPERTY(bool hasSelection READ hasSelection)
Q_PROPERTY(bool modified READ isModified)

Q_PROPERTY(qreal textSizeMultiplier READ textSizeMultiplier WRITE setTextSizeMultiplier DESIGNABLE false)
Q_PROPERTY(qreal zoomFactor READ zoomFactor WRITE setZoomFactor)

Q_PROPERTY(QPainter::RenderHints renderHints READ renderHints WRITE setRenderHints)

public:
explicit QWebView(QWidget* parent = 0);
virtual ~QWebView();

QWebPage* page() const;
void setPage(QWebPage* page);

void load(const QUrl& url);
void load(const QNetworkRequest& request, QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation, const QByteArray &body = QByteArray());
void setHtml(const QString& html, const QUrl& baseUrl = QUrl());
void setContent(const QByteArray& data, const QString& mimeType = QString(), const QUrl& baseUrl = QUrl());

QWebHistory* history() const;
QWebSettings* settings() const;

QString title() const;
void setUrl(const QUrl &url);
QUrl url() const;
QIcon icon() const;

bool hasSelection() const;
QString selectedText() const;
QString selectedHtml() const;


# 81 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"
QAction* pageAction(QWebPage::WebAction action) const;

# 83 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"
void triggerPageAction(QWebPage::WebAction action, bool checked = false);

bool isModified() const;







QVariant inputMethodQuery(Qt::InputMethodQuery property) const;

QSize sizeHint() const;

qreal zoomFactor() const;
void setZoomFactor(qreal factor);

void setTextSizeMultiplier(qreal factor);
qreal textSizeMultiplier() const;

QPainter::RenderHints renderHints() const;
void setRenderHints(QPainter::RenderHints hints);
void setRenderHint(QPainter::RenderHint hint, bool enabled = true);

bool findText(const QString& subString, QWebPage::FindFlags options = 0);

virtual bool event(QEvent*);

public slots:
void stop();
void back();
void forward();
void reload();

void print(QPrinter*) const;

signals:
void loadStarted();
void loadProgress(int progress);
void loadFinished(bool);
void titleChanged(const QString& title);
void statusBarMessage(const QString& text);
void linkClicked(const QUrl&);
void selectionChanged();
void iconChanged();
void urlChanged(const QUrl&);

protected:
void resizeEvent(QResizeEvent*);
void paintEvent(QPaintEvent*);

virtual QWebView *createWindow(QWebPage::WebWindowType type);

virtual void changeEvent(QEvent*);
virtual void mouseMoveEvent(QMouseEvent*);
virtual void mousePressEvent(QMouseEvent*);
virtual void mouseDoubleClickEvent(QMouseEvent*);
virtual void mouseReleaseEvent(QMouseEvent*);

# 142 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"
virtual void contextMenuEvent(QContextMenuEvent*);


# 145 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"
virtual void wheelEvent(QWheelEvent*);

# 147 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"
virtual void keyPressEvent(QKeyEvent*);
virtual void keyReleaseEvent(QKeyEvent*);
virtual void dragEnterEvent(QDragEnterEvent*);
virtual void dragLeaveEvent(QDragLeaveEvent*);
virtual void dragMoveEvent(QDragMoveEvent*);
virtual void dropEvent(QDropEvent*);
virtual void focusInEvent(QFocusEvent*);
virtual void focusOutEvent(QFocusEvent*);
virtual void inputMethodEvent(QInputMethodEvent*);

virtual bool focusNextPrevChild(bool next);

private:
friend class QWebPage;
QWebViewPrivate* d;

};


# 26 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebinspector.h"


# 28 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebinspector.h"
class QWebInspectorPrivate;

class  QWebInspector : public QWidget {
Q_OBJECT
public:
QWebInspector(QWidget* parent = 0);
~QWebInspector();

void setPage(QWebPage* page);
QWebPage* page() const;

QSize sizeHint() const;
bool event(QEvent*);

protected:
void resizeEvent(QResizeEvent* event);
void showEvent(QShowEvent* event);
void hideEvent(QHideEvent* event);
void closeEvent(QCloseEvent* event);

private:
QWebInspectorPrivate* d;

friend class QWebInspectorPrivate;
friend class QWebPage;
friend class QWebPagePrivate;
friend class WebCore::InspectorClientQt;
friend class WebCore::InspectorFrontendClientQt;
};

# 6 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebpage.h"
































































































































































































































































































































































































































































# 7 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qwebview.h"

































































































































































# 8 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/qtwebkitwidgetsversion.h"









# 9 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtWebKitWidgets/QtWebKitWidgets"


# 58 "qtscript_masterinclude.h"





















# 65 "qtscript_masterinclude.h"


# 1 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"














































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"


























# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qstring.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 27 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"


# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qlist.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 29 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qsharedpointer.h"



























































































































































# 30 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qtscriptglobal.h"












































# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qglobal.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qtscriptglobal.h"


# 47 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qtscriptglobal.h"


















# 65 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qtscriptglobal.h"



# 31 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"


# 33 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"



class QScriptClass;
class QScriptValue;
class QScriptEngine;
class QScriptString;
class QVariant;
class QObject;
struct QMetaObject;
class QDateTime;

# 45 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
class QRegExp;


# 48 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
typedef QList<QScriptValue> QScriptValueList;

typedef double qsreal;

class QScriptValuePrivate;
class QScriptEnginePrivate;
struct QScriptValuePrivatePointerDeleter;
class  QScriptValue
{
public:
enum ResolveFlag {
ResolveLocal = 0x00,
ResolvePrototype = 0x01,
ResolveScope = 0x02,
ResolveFull = ResolvePrototype | ResolveScope
};

typedef QFlags<ResolveFlag> ResolveFlags;

enum PropertyFlag {
ReadOnly = 0x00000001,
Undeletable = 0x00000002,
SkipInEnumeration = 0x00000004,

PropertyGetter = 0x00000008,
PropertySetter = 0x00000010,

QObjectMember = 0x00000020,

KeepExistingFlags = 0x00000800,

UserRange = 0xff000000 
};
typedef QFlags<PropertyFlag> PropertyFlags;

enum SpecialValue {
NullValue,
UndefinedValue
};

public:
QScriptValue();
~QScriptValue();
QScriptValue(const QScriptValue &other);
QScriptValue(QScriptEngine *engine, SpecialValue val);
QScriptValue(QScriptEngine *engine, bool val);
QScriptValue(QScriptEngine *engine, int val);
QScriptValue(QScriptEngine *engine, uint val);
QScriptValue(QScriptEngine *engine, qsreal val);
QScriptValue(QScriptEngine *engine, const QString &val);

# 99 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
 QScriptValue(QScriptEngine *engine, const char *val);


# 102 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
QScriptValue(SpecialValue value);
QScriptValue(bool value);
QScriptValue(int value);
QScriptValue(uint value);
QScriptValue(qsreal value);
QScriptValue(const QString &value);
QScriptValue(const QLatin1String &value);

# 110 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
 QScriptValue(const char *value);


# 113 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
QScriptValue &operator=(const QScriptValue &other);

QScriptEngine *engine() const;

bool isValid() const;
bool isBool() const;
bool isBoolean() const;
bool isNumber() const;
bool isFunction() const;
bool isNull() const;
bool isString() const;
bool isUndefined() const;
bool isVariant() const;
bool isQObject() const;
bool isQMetaObject() const;
bool isObject() const;
bool isDate() const;
bool isRegExp() const;
bool isArray() const;
bool isError() const;

QString toString() const;
qsreal toNumber() const;
bool toBool() const;
bool toBoolean() const;
qsreal toInteger() const;
qint32 toInt32() const;
quint32 toUInt32() const;
quint16 toUInt16() const;
QVariant toVariant() const;
QObject *toQObject() const;
const QMetaObject *toQMetaObject() const;
QScriptValue toObject() const;
QDateTime toDateTime() const;

# 148 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
QRegExp toRegExp() const;


# 151 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtScript/qscriptvalue.h"
bool instanceOf(const QScriptValue &other) const;

bool lessThan(const QScriptValue &other) const;
bool equals(const QScriptValue &other) const;
bool strictlyEquals(const QScriptValue &other) const;

QScriptValue prototype() const;
void setPrototype(const QScriptValue &prototype);

QScriptValue scope() const;
void setScope(const QScriptValue &scope);

QScriptValue property(const QString &name,
const ResolveFlags &mode = ResolvePrototype) const;
void setProperty(const QString &name, const QScriptValue &value,
const PropertyFlags &flags = KeepExistingFlags);

QScriptValue property(quint32 arrayIndex,
const ResolveFlags &mode = ResolvePrototype) const;
void setProperty(quint32 arrayIndex, const QScriptValue &value,
const PropertyFlags &flags = KeepExistingFlags);

QScriptValue property(const QScriptString &name,
const ResolveFlags &mode = ResolvePrototype) const;
void setProperty(const QScriptString &name, const QScriptValue &value,
const PropertyFlags &flags = KeepExistingFlags);

QScriptValue::PropertyFlags propertyFlags(
const QString &name, const ResolveFlags &mode = ResolvePrototype) const;
QScriptValue::PropertyFlags propertyFlags(
const QScriptString &name, const ResolveFlags &mode = ResolvePrototype) const;

QScriptValue call(const QScriptValue &thisObject = QScriptValue(),
const QScriptValueList &args = QScriptValueList());
QScriptValue call(const QScriptValue &thisObject,
const QScriptValue &arguments);
QScriptValue construct(const QScriptValueList &args = QScriptValueList());
QScriptValue construct(const QScriptValue &arguments);

QScriptValue data() const;
void setData(const QScriptValue &data);

QScriptClass *scriptClass() const;
void setScriptClass(QScriptClass *scriptClass);

qint64 objectId() const;

private:

QScriptValue(void *);

QScriptValue(QScriptEngine *, void *);

QScriptValue(QScriptValuePrivate*);

private:
QExplicitlySharedDataPointer<QScriptValuePrivate> d_ptr;

inline QScriptValuePrivate* d_func() { return reinterpret_cast<QScriptValuePrivate *>(qGetPtrHelper(d_ptr)); } inline const QScriptValuePrivate* d_func() const { return reinterpret_cast<const QScriptValuePrivate *>(qGetPtrHelper(d_ptr)); } friend class QScriptValuePrivate;

friend class QScriptEnginePrivate;
};

 inline QFlags<QScriptValue::ResolveFlags::enum_type> operator|(QScriptValue::ResolveFlags::enum_type f1, QScriptValue::ResolveFlags::enum_type f2) { return QFlags<QScriptValue::ResolveFlags::enum_type>(f1) | f2; }  inline QFlags<QScriptValue::ResolveFlags::enum_type> operator|(QScriptValue::ResolveFlags::enum_type f1, QFlags<QScriptValue::ResolveFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QScriptValue::ResolveFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }
 inline QFlags<QScriptValue::PropertyFlags::enum_type> operator|(QScriptValue::PropertyFlags::enum_type f1, QScriptValue::PropertyFlags::enum_type f2) { return QFlags<QScriptValue::PropertyFlags::enum_type>(f1) | f2; }  inline QFlags<QScriptValue::PropertyFlags::enum_type> operator|(QScriptValue::PropertyFlags::enum_type f1, QFlags<QScriptValue::PropertyFlags::enum_type> f2) { return f2 | f1; }  inline QIncompatibleFlag operator|(QScriptValue::PropertyFlags::enum_type f1, int f2) { return QIncompatibleFlag(int(f1) | f2); }




# 47 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuture.h"


















































































































































































































































































# 48 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturewatcher.h"



























































































































































































































# 49 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"

# 1 "/home/vladimir/Qt5.1.1/5.1.1/gcc_64/include/QtCore/qfuturesynchronizer.h"





















































































































# 50 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"


# 52 "./../qtbindings/qtscript_core/qtscriptconcurrent.h"
class QtScriptVoidFutureWatcher : public QFutureWatcher<void> {
Q_OBJECT
};

class QtScriptFutureWatcher : public QFutureWatcher<QScriptValue> {
Q_OBJECT
};

typedef QFuture<void> QtScriptVoidFuture;
typedef QFutureSynchronizer<void> QtScriptVoidFutureSynchronizer;
typedef QFuture<QScriptValue> QtScriptFuture;
typedef QFutureSynchronizer<QScriptValue> QtScriptFutureSynchronizer;
typedef QFutureIterator<QScriptValue> QtScriptFutureIterator;




# 67 "qtscript_masterinclude.h"









# 76 "qtscript_masterinclude.h"










# 86 "qtscript_masterinclude.h"























# 109 "qtscript_masterinclude.h"












# 121 "qtscript_masterinclude.h"










# 131 "qtscript_masterinclude.h"






# 137 "qtscript_masterinclude.h"









# 146 "qtscript_masterinclude.h"






















# 168 "qtscript_masterinclude.h"








































# 208 "qtscript_masterinclude.h"


























# 234 "qtscript_masterinclude.h"













































































# 311 "qtscript_masterinclude.h"







# 318 "qtscript_masterinclude.h"










# 328 "qtscript_masterinclude.h"






# 334 "qtscript_masterinclude.h"












# 346 "qtscript_masterinclude.h"





# 351 "qtscript_masterinclude.h"






































































































































































































































# 581 "qtscript_masterinclude.h"



































# 616 "qtscript_masterinclude.h"














# 630 "qtscript_masterinclude.h"





























# 659 "qtscript_masterinclude.h"












# 671 "qtscript_masterinclude.h"




















# 691 "qtscript_masterinclude.h"






























# 721 "qtscript_masterinclude.h"






























# 751 "qtscript_masterinclude.h"









# 760 "qtscript_masterinclude.h"





















# 781 "qtscript_masterinclude.h"













# 794 "qtscript_masterinclude.h"












































# 838 "qtscript_masterinclude.h"













# 851 "qtscript_masterinclude.h"



















# 870 "qtscript_masterinclude.h"





# 875 "qtscript_masterinclude.h"
















# 891 "qtscript_masterinclude.h"








# 899 "qtscript_masterinclude.h"






# 905 "qtscript_masterinclude.h"









# 914 "qtscript_masterinclude.h"







# 921 "qtscript_masterinclude.h"



# 924 "qtscript_masterinclude.h"





# 929 "qtscript_masterinclude.h"





# 934 "qtscript_masterinclude.h"




# 938 "qtscript_masterinclude.h"








# 946 "qtscript_masterinclude.h"





# 951 "qtscript_masterinclude.h"













# 964 "qtscript_masterinclude.h"











# 975 "qtscript_masterinclude.h"







# 982 "qtscript_masterinclude.h"











































# 1025 "qtscript_masterinclude.h"






# 1031 "qtscript_masterinclude.h"










































# 1073 "qtscript_masterinclude.h"






# 1079 "qtscript_masterinclude.h"






































# 1117 "qtscript_masterinclude.h"




# 1121 "qtscript_masterinclude.h"



















# 1140 "qtscript_masterinclude.h"




# 1144 "qtscript_masterinclude.h"




# 1148 "qtscript_masterinclude.h"



# 1151 "qtscript_masterinclude.h"
















# 1154 "qtscript_masterinclude.h"


